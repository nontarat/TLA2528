
STM32H723_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015718  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033bc  080159e8  080159e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018da4  08018da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018dac  08018dac  00019dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018db0  08018db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ec  24000000  08018db4  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00015294  240000f0  08018ea0  0001a0f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24015384  08018ea0  0001a384  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  0001b000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001a0ec  2**0
                  CONTENTS, READONLY
 11 .debug_info   0006a934  00000000  00000000  0001a11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000c825  00000000  00000000  00084a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b08  00000000  00000000  00091278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000053a9  00000000  00000000  00093d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048296  00000000  00000000  00099129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00069315  00000000  00000000  000e13bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018cdf8  00000000  00000000  0014a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002d74cc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000963c  00000000  00000000  002d7510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0002e227  00000000  00000000  002e0b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0030ed73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000f0 	.word	0x240000f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080159d0 	.word	0x080159d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000f4 	.word	0x240000f4
 800030c:	080159d0 	.word	0x080159d0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 80006b0:	be00      	bkpt	0x0000
}
 80006b2:	4770      	bx	lr

080006b4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006b4:	b508      	push	{r3, lr}
	/* init code for LWIP */
	MX_LWIP_Init();
 80006b6:	f005 f963 	bl	8005980 <MX_LWIP_Init>
	 * iperf3 is not compatible at all.
	 * Adding lwiperf.c file to the project is necessary.
	 * The default include path should already contain
	 * 'lwip/apps/lwiperf.h'
	 */
	LOCK_TCPIP_CORE();
 80006ba:	f005 fd95 	bl	80061e8 <sys_lock_tcpip_core>
	//uint32_t last_connect_time = 0;   // เวลาที่ connect_to_server ถูกเรียกครั้งสุดท้าย
	//uint32_t last_adc_read_time = 0;  // เวลาที่ read_adc_and_send_data ถูกเรียกครั้งสุดท้าย
	//uint32_t last_user_input =0;

	UNLOCK_TCPIP_CORE();
 80006be:	f005 fe11 	bl	80062e4 <sys_unlock_tcpip_core>
	{

		// HAL_UART_Transmit(&huart3, (uint8_t*)&adc_value, sizeof(adc_value), HAL_MAX_DELAY);
		//send_ip_via_usart();
		 //uint32_t current_time = HAL_GetTick();  // อ่านเวลาปัจจุบัน
		connect_to_server();
 80006c2:	f005 f9f5 	bl	8005ab0 <connect_to_server>
	for(;;)
 80006c6:	e7fc      	b.n	80006c2 <StartDefaultTask+0xe>

080006c8 <SystemClock_Config>:
{
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	b09f      	sub	sp, #124	@ 0x7c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006cc:	224c      	movs	r2, #76	@ 0x4c
 80006ce:	2100      	movs	r1, #0
 80006d0:	a80a      	add	r0, sp, #40	@ 0x28
 80006d2:	f014 f9d2 	bl	8014a7a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d6:	2220      	movs	r2, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	a802      	add	r0, sp, #8
 80006dc:	f014 f9cd 	bl	8014a7a <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e0:	2002      	movs	r0, #2
 80006e2:	f002 fc37 	bl	8002f54 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006e6:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xa8>)
 80006e8:	2300      	movs	r3, #0
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	6993      	ldr	r3, [r2, #24]
 80006ee:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	6993      	ldr	r3, [r2, #24]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006fe:	6993      	ldr	r3, [r2, #24]
 8000700:	0499      	lsls	r1, r3, #18
 8000702:	d5fc      	bpl.n	80006fe <SystemClock_Config+0x36>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000704:	4c1b      	ldr	r4, [pc, #108]	@ (8000774 <SystemClock_Config+0xac>)
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000706:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000708:	2508      	movs	r5, #8
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800070a:	2101      	movs	r1, #1
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800070c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	a80a      	add	r0, sp, #40	@ 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000710:	f022 0203 	bic.w	r2, r2, #3
 8000714:	62a2      	str	r2, [r4, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000716:	2204      	movs	r2, #4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	930a      	str	r3, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071a:	2440      	movs	r4, #64	@ 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	9313      	str	r3, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800071e:	9218      	str	r2, [sp, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLN = 125;
 8000720:	2210      	movs	r2, #16
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000722:	910d      	str	r1, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000724:	9117      	str	r1, [sp, #92]	@ 0x5c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000726:	940e      	str	r4, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000728:	e9cd 3519 	strd	r3, r5, [sp, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	9314      	str	r3, [sp, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000730:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLN = 125;
 8000734:	237d      	movs	r3, #125	@ 0x7d
 8000736:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f002 fca1 	bl	8003080 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	b108      	cbz	r0, 8000746 <SystemClock_Config+0x7e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000742:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000744:	e7fe      	b.n	8000744 <SystemClock_Config+0x7c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	223f      	movs	r2, #63	@ 0x3f
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2103      	movs	r1, #3
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800074c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000750:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	9202      	str	r2, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000756:	9409      	str	r4, [sp, #36]	@ 0x24
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000758:	e9cd 5405 	strd	r5, r4, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800075c:	e9cd 4307 	strd	r4, r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000760:	f002 ff3a 	bl	80035d8 <HAL_RCC_ClockConfig>
 8000764:	b108      	cbz	r0, 800076a <SystemClock_Config+0xa2>
 8000766:	b672      	cpsid	i
	while (1)
 8000768:	e7fe      	b.n	8000768 <SystemClock_Config+0xa0>
}
 800076a:	b01f      	add	sp, #124	@ 0x7c
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	bf00      	nop
 8000770:	58024800 	.word	0x58024800
 8000774:	58024400 	.word	0x58024400

08000778 <main>:
{
 8000778:	b580      	push	{r7, lr}
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800077a:	2400      	movs	r4, #0
{
 800077c:	b094      	sub	sp, #80	@ 0x50
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800077e:	2501      	movs	r5, #1
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000780:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000784:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	HAL_MPU_Disable();
 8000788:	f001 faa8 	bl	8001cdc <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800078c:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000790:	f240 1301 	movw	r3, #257	@ 0x101
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000794:	a80b      	add	r0, sp, #44	@ 0x2c
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000796:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800079a:	930e      	str	r3, [sp, #56]	@ 0x38
 800079c:	e9cd 420c 	strd	r4, r2, [sp, #48]	@ 0x30
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007a0:	f001 faba 	bl	8001d18 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.BaseAddress = 0x30000000;
 80007a4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80007a8:	4bb8      	ldr	r3, [pc, #736]	@ (8000a8c <main+0x314>)
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007aa:	a80b      	add	r0, sp, #44	@ 0x2c
	MPU_InitStruct.BaseAddress = 0x30000000;
 80007ac:	920c      	str	r2, [sp, #48]	@ 0x30
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80007ae:	930d      	str	r3, [sp, #52]	@ 0x34
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007b0:	f88d 502d 	strb.w	r5, [sp, #45]	@ 0x2d
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80007b4:	f88d 4039 	strb.w	r4, [sp, #57]	@ 0x39
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007b8:	f001 faae 	bl	8001d18 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80007bc:	2202      	movs	r2, #2
	MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80007be:	2308      	movs	r3, #8
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007c0:	a80b      	add	r0, sp, #44	@ 0x2c
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007c2:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80007c6:	f88d 202d 	strb.w	r2, [sp, #45]	@ 0x2d
	MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80007ca:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ce:	f88d 5039 	strb.w	r5, [sp, #57]	@ 0x39
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80007d2:	f88d 503b 	strb.w	r5, [sp, #59]	@ 0x3b
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d6:	f001 fa9f 	bl	8001d18 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007da:	2004      	movs	r0, #4
 80007dc:	f001 fa8c 	bl	8001cf8 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007e0:	4aab      	ldr	r2, [pc, #684]	@ (8000a90 <main+0x318>)
 80007e2:	6953      	ldr	r3, [r2, #20]
 80007e4:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80007e8:	d111      	bne.n	800080e <main+0x96>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007ee:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007f2:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007fa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007fe:	6953      	ldr	r3, [r2, #20]
 8000800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000804:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800080a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800080e:	48a0      	ldr	r0, [pc, #640]	@ (8000a90 <main+0x318>)
 8000810:	6943      	ldr	r3, [r0, #20]
 8000812:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000816:	d124      	bne.n	8000862 <main+0xea>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000818:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800081c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000820:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000824:	f643 7ce0 	movw	ip, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000828:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800082c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000830:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000832:	ea04 010c 	and.w	r1, r4, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000836:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000838:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800083c:	3b01      	subs	r3, #1
 800083e:	1c5e      	adds	r6, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000840:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8000844:	d1f8      	bne.n	8000838 <main+0xc0>
    } while(sets-- != 0U);
 8000846:	3c20      	subs	r4, #32
 8000848:	f114 0f20 	cmn.w	r4, #32
 800084c:	d1f1      	bne.n	8000832 <main+0xba>
 800084e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000852:	6943      	ldr	r3, [r0, #20]
 8000854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000858:	6143      	str	r3, [r0, #20]
 800085a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800085e:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	2400      	movs	r4, #0
	HAL_Init();
 8000864:	f000 fc38 	bl	80010d8 <HAL_Init>
	SystemClock_Config();
 8000868:	f7ff ff2e 	bl	80006c8 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b89      	ldr	r3, [pc, #548]	@ (8000a94 <main+0x31c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	940f      	str	r4, [sp, #60]	@ 0x3c
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000870:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000874:	4622      	mov	r2, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000878:	f44f 6780 	mov.w	r7, #1024	@ 0x400
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2502      	movs	r5, #2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000882:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800088a:	f040 0004 	orr.w	r0, r0, #4
 800088e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000892:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000896:	f000 0004 	and.w	r0, r0, #4
 800089a:	9001      	str	r0, [sp, #4]
 800089c:	9801      	ldr	r0, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008a2:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80008a6:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80008aa:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008ae:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80008b2:	9002      	str	r0, [sp, #8]
 80008b4:	9802      	ldr	r0, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80008c2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008c6:	f000 0001 	and.w	r0, r0, #1
 80008ca:	9003      	str	r0, [sp, #12]
 80008cc:	9803      	ldr	r0, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008d2:	f040 0002 	orr.w	r0, r0, #2
 80008d6:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80008da:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008de:	f000 0002 	and.w	r0, r0, #2
 80008e2:	9004      	str	r0, [sp, #16]
 80008e4:	9804      	ldr	r0, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008ea:	f040 0008 	orr.w	r0, r0, #8
 80008ee:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80008f2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008f6:	f000 0008 	and.w	r0, r0, #8
 80008fa:	9005      	str	r0, [sp, #20]
 80008fc:	9805      	ldr	r0, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008fe:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000902:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8000906:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 800090a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800090e:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 8000912:	9006      	str	r0, [sp, #24]
 8000914:	9806      	ldr	r0, [sp, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800091a:	f040 0010 	orr.w	r0, r0, #16
 800091e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000926:	485c      	ldr	r0, [pc, #368]	@ (8000a98 <main+0x320>)
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	9307      	str	r3, [sp, #28]
 800092e:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000930:	f002 fb0c 	bl	8002f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000934:	4622      	mov	r2, r4
 8000936:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093a:	4858      	ldr	r0, [pc, #352]	@ (8000a9c <main+0x324>)
 800093c:	f002 fb06 	bl	8002f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000940:	4622      	mov	r2, r4
 8000942:	2102      	movs	r1, #2
 8000944:	4856      	ldr	r0, [pc, #344]	@ (8000aa0 <main+0x328>)
 8000946:	f002 fb01 	bl	8002f4c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094e:	a90b      	add	r1, sp, #44	@ 0x2c
 8000950:	4854      	ldr	r0, [pc, #336]	@ (8000aa4 <main+0x32c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	940d      	str	r4, [sp, #52]	@ 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f002 f9c4 	bl	8002ce4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800095c:	f244 0301 	movw	r3, #16385	@ 0x4001
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	a90b      	add	r1, sp, #44	@ 0x2c
 8000962:	484d      	ldr	r0, [pc, #308]	@ (8000a98 <main+0x320>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	940d      	str	r4, [sp, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	940e      	str	r4, [sp, #56]	@ 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	e9cd 360b 	strd	r3, r6, [sp, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f002 f9ba 	bl	8002ce4 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	a90b      	add	r1, sp, #44	@ 0x2c
 8000972:	484a      	ldr	r0, [pc, #296]	@ (8000a9c <main+0x324>)
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000974:	e9cd 760b 	strd	r7, r6, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800097c:	f002 f9b2 	bl	8002ce4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000980:	2380      	movs	r3, #128	@ 0x80
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000982:	a90b      	add	r1, sp, #44	@ 0x2c
 8000984:	4848      	ldr	r0, [pc, #288]	@ (8000aa8 <main+0x330>)
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000986:	930b      	str	r3, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000988:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	940d      	str	r4, [sp, #52]	@ 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	930c      	str	r3, [sp, #48]	@ 0x30
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000990:	f002 f9a8 	bl	8002ce4 <HAL_GPIO_Init>
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000994:	230a      	movs	r3, #10
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000996:	a90b      	add	r1, sp, #44	@ 0x2c
 8000998:	4844      	ldr	r0, [pc, #272]	@ (8000aac <main+0x334>)
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800099a:	930f      	str	r3, [sp, #60]	@ 0x3c
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800099c:	970b      	str	r7, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	940e      	str	r4, [sp, #56]	@ 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f002 f99e 	bl	8002ce4 <HAL_GPIO_Init>
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80009a8:	483d      	ldr	r0, [pc, #244]	@ (8000aa0 <main+0x328>)
 80009aa:	a90b      	add	r1, sp, #44	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	e9cd 560b 	strd	r5, r6, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	huart3.Instance = USART3;
 80009b4:	4d3e      	ldr	r5, [pc, #248]	@ (8000ab0 <main+0x338>)
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f002 f995 	bl	8002ce4 <HAL_GPIO_Init>
	huart3.Instance = USART3;
 80009ba:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab4 <main+0x33c>)
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80009bc:	4628      	mov	r0, r5
	huart3.Init.Parity = UART_PARITY_NONE;
 80009be:	612c      	str	r4, [r5, #16]
	huart3.Instance = USART3;
 80009c0:	602b      	str	r3, [r5, #0]
	huart3.Init.BaudRate = 115200;
 80009c2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	61ac      	str	r4, [r5, #24]
	huart3.Init.BaudRate = 115200;
 80009c8:	606b      	str	r3, [r5, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80009ca:	230c      	movs	r3, #12
	huart3.Init.StopBits = UART_STOPBITS_1;
 80009cc:	e9c5 4402 	strd	r4, r4, [r5, #8]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d0:	e9c5 4407 	strd	r4, r4, [r5, #28]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80009d4:	616b      	str	r3, [r5, #20]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80009da:	f004 ff0b 	bl	80057f4 <HAL_UART_Init>
 80009de:	b108      	cbz	r0, 80009e4 <main+0x26c>
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
	while (1)
 80009e2:	e7fe      	b.n	80009e2 <main+0x26a>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	4601      	mov	r1, r0
 80009e6:	4628      	mov	r0, r5
 80009e8:	f004 ff78 	bl	80058dc <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	b108      	cbz	r0, 80009f2 <main+0x27a>
 80009ee:	b672      	cpsid	i
	while (1)
 80009f0:	e7fe      	b.n	80009f0 <main+0x278>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	4601      	mov	r1, r0
 80009f4:	4628      	mov	r0, r5
 80009f6:	f004 ff99 	bl	800592c <HAL_UARTEx_SetRxFifoThreshold>
 80009fa:	b108      	cbz	r0, 8000a00 <main+0x288>
 80009fc:	b672      	cpsid	i
	while (1)
 80009fe:	e7fe      	b.n	80009fe <main+0x286>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a00:	4628      	mov	r0, r5
 8000a02:	f004 ff4d 	bl	80058a0 <HAL_UARTEx_DisableFifoMode>
 8000a06:	4605      	mov	r5, r0
 8000a08:	b108      	cbz	r0, 8000a0e <main+0x296>
 8000a0a:	b672      	cpsid	i
	while (1)
 8000a0c:	e7fe      	b.n	8000a0c <main+0x294>
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	4601      	mov	r1, r0
	ADC_MultiModeTypeDef multimode = {0};
 8000a10:	900a      	str	r0, [sp, #40]	@ 0x28
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	2224      	movs	r2, #36	@ 0x24
	hadc1.Instance = ADC1;
 8000a14:	4c28      	ldr	r4, [pc, #160]	@ (8000ab8 <main+0x340>)
	ADC_MultiModeTypeDef multimode = {0};
 8000a16:	e9cd 0008 	strd	r0, r0, [sp, #32]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	a80b      	add	r0, sp, #44	@ 0x2c
 8000a1c:	f014 f82d 	bl	8014a7a <memset>
	hadc1.Instance = ADC1;
 8000a20:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <main+0x344>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a22:	6065      	str	r5, [r4, #4]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a24:	4620      	mov	r0, r4
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a26:	6125      	str	r5, [r4, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a28:	8325      	strh	r5, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2a:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a2e:	6325      	str	r5, [r4, #48]	@ 0x30
	hadc1.Init.OversamplingMode = DISABLE;
 8000a30:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
	hadc1.Instance = ADC1;
 8000a34:	6023      	str	r3, [r4, #0]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a36:	2308      	movs	r3, #8
	hadc1.Init.NbrOfConversion = 1;
 8000a38:	61e6      	str	r6, [r4, #28]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a3a:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3c:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a40:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a44:	2504      	movs	r5, #4
 8000a46:	6165      	str	r5, [r4, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	f000 ff32 	bl	80018b0 <HAL_ADC_Init>
 8000a4c:	b108      	cbz	r0, 8000a52 <main+0x2da>
 8000a4e:	b672      	cpsid	i
	while (1)
 8000a50:	e7fe      	b.n	8000a50 <main+0x2d8>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a52:	9008      	str	r0, [sp, #32]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a54:	a908      	add	r1, sp, #32
 8000a56:	4620      	mov	r0, r4
 8000a58:	f001 f882 	bl	8001b60 <HAL_ADCEx_MultiModeConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	b108      	cbz	r0, 8000a64 <main+0x2ec>
 8000a60:	b672      	cpsid	i
	while (1)
 8000a62:	e7fe      	b.n	8000a62 <main+0x2ea>
	sConfig.Channel = ADC_CHANNEL_15;
 8000a64:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <main+0x348>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	4620      	mov	r0, r4
 8000a68:	a90b      	add	r1, sp, #44	@ 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a6a:	930d      	str	r3, [sp, #52]	@ 0x34
	sConfig.Channel = ADC_CHANNEL_15;
 8000a6c:	920b      	str	r2, [sp, #44]	@ 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6e:	2206      	movs	r2, #6
	sConfig.OffsetSignedSaturation = DISABLE;
 8000a70:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a74:	920c      	str	r2, [sp, #48]	@ 0x30
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
	sConfig.Offset = 0;
 8000a7a:	e9cd 530f 	strd	r5, r3, [sp, #60]	@ 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7e:	920e      	str	r2, [sp, #56]	@ 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	f000 fb76 	bl	8001170 <HAL_ADC_ConfigChannel>
 8000a84:	4604      	mov	r4, r0
 8000a86:	b1e8      	cbz	r0, 8000ac4 <main+0x34c>
 8000a88:	b672      	cpsid	i
	while (1)
 8000a8a:	e7fe      	b.n	8000a8a <main+0x312>
 8000a8c:	0301000e 	.word	0x0301000e
 8000a90:	e000ed00 	.word	0xe000ed00
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58020c00 	.word	0x58020c00
 8000aa0:	58021000 	.word	0x58021000
 8000aa4:	58020800 	.word	0x58020800
 8000aa8:	58021800 	.word	0x58021800
 8000aac:	58020000 	.word	0x58020000
 8000ab0:	24000110 	.word	0x24000110
 8000ab4:	40004800 	.word	0x40004800
 8000ab8:	240001a0 	.word	0x240001a0
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	3ef08000 	.word	0x3ef08000
	osKernelInitialize();
 8000ac4:	f005 fc60 	bl	8006388 <osKernelInitialize>
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <main+0x364>)
 8000aca:	4621      	mov	r1, r4
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <main+0x368>)
 8000ace:	f005 fc8f 	bl	80063f0 <osThreadNew>
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <main+0x36c>)
 8000ad4:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8000ad6:	f005 fc69 	bl	80063ac <osKernelStart>
	while (1)
 8000ada:	e7fe      	b.n	8000ada <main+0x362>
 8000adc:	080159f4 	.word	0x080159f4
 8000ae0:	080006b5 	.word	0x080006b5
 8000ae4:	2400010c 	.word	0x2400010c

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM6) {
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000aea:	6802      	ldr	r2, [r0, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d000      	beq.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000af0:	4770      	bx	lr
		HAL_IncTick();
 8000af2:	f000 bb21 	b.w	8001138 <HAL_IncTick>
 8000af6:	bf00      	nop
 8000af8:	40001000 	.word	0x40001000

08000afc <Error_Handler>:
 8000afc:	b672      	cpsid	i
	while (1)
 8000afe:	e7fe      	b.n	8000afe <Error_Handler+0x2>

08000b00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	210f      	movs	r1, #15
 8000b06:	f06f 0001 	mvn.w	r0, #1
{
 8000b0a:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
 8000b10:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	f044 0402 	orr.w	r4, r4, #2
 8000b16:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
 8000b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	b003      	add	sp, #12
 8000b28:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2c:	f001 b88c 	b.w	8001c48 <HAL_NVIC_SetPriority>
 8000b30:	58024400 	.word	0x58024400
 8000b34:	00000000 	.word	0x00000000

08000b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	b0b6      	sub	sp, #216	@ 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	2100      	movs	r1, #0
{
 8000b3e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	22b4      	movs	r2, #180	@ 0xb4
 8000b42:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	9106      	str	r1, [sp, #24]
 8000b46:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b4a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4e:	f013 ff94 	bl	8014a7a <memset>
  if(hadc->Instance==ADC1)
 8000b52:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <HAL_ADC_MspInit+0xb0>)
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d001      	beq.n	8000b5e <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b5a:	b036      	add	sp, #216	@ 0xd8
 8000b5c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000b5e:	2308      	movs	r3, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b60:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000b64:	2219      	movs	r2, #25
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b66:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000b68:	e9cd 1308 	strd	r1, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b6c:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b6e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8000bd8 <HAL_ADC_MspInit+0xa0>
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b72:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b76:	23c0      	movs	r3, #192	@ 0xc0
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b78:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b7c:	930e      	str	r3, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f002 ffc9 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	bb20      	cbnz	r0, 8000bce <HAL_ADC_MspInit+0x96>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	a902      	add	r1, sp, #8
 8000b8a:	4819      	ldr	r0, [pc, #100]	@ (8000bf0 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b8c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000b90:	f042 0220 	orr.w	r2, r2, #32
 8000b94:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000b98:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000b9c:	f002 0220 	and.w	r2, r2, #32
 8000ba0:	9200      	str	r2, [sp, #0]
 8000ba2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ba8:	f042 0201 	orr.w	r2, r2, #1
 8000bac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bba:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8000be0 <HAL_ADC_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bc2:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f002 f88d 	bl	8002ce4 <HAL_GPIO_Init>
}
 8000bca:	b036      	add	sp, #216	@ 0xd8
 8000bcc:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000bce:	f7ff ff95 	bl	8000afc <Error_Handler>
 8000bd2:	e7d7      	b.n	8000b84 <HAL_ADC_MspInit+0x4c>
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000002 	.word	0x00000002
 8000bdc:	00000002 	.word	0x00000002
 8000be0:	00000008 	.word	0x00000008
 8000be4:	00000003 	.word	0x00000003
 8000be8:	40022000 	.word	0x40022000
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	58020000 	.word	0x58020000
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	b0b4      	sub	sp, #208	@ 0xd0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	2100      	movs	r1, #0
{
 8000bfe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	22b4      	movs	r2, #180	@ 0xb4
 8000c02:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	9106      	str	r1, [sp, #24]
 8000c06:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000c0a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0e:	f013 ff34 	bl	8014a7a <memset>
  if(huart->Instance==USART3)
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <HAL_UART_MspInit+0xa0>)
 8000c14:	6822      	ldr	r2, [r4, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d001      	beq.n	8000c1e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1a:	b034      	add	sp, #208	@ 0xd0
 8000c1c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c1e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c20:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c22:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f002 ff76 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	bb40      	cbnz	r0, 8000c7c <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c2c:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	a902      	add	r1, sp, #8
 8000c30:	481b      	ldr	r0, [pc, #108]	@ (8000ca0 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c32:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000c36:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000c3a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000c3e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000c42:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8000c46:	9200      	str	r2, [sp, #0]
 8000c48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c4e:	f042 0208 	orr.w	r2, r2, #8
 8000c52:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c5a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5c:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000c60:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8000c88 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000c68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c6c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8000c90 <HAL_UART_MspInit+0x98>
 8000c70:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f002 f836 	bl	8002ce4 <HAL_GPIO_Init>
}
 8000c78:	b034      	add	sp, #208	@ 0xd0
 8000c7a:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000c7c:	f7ff ff3e 	bl	8000afc <Error_Handler>
 8000c80:	e7d3      	b.n	8000c2a <HAL_UART_MspInit+0x32>
 8000c82:	bf00      	nop
 8000c84:	f3af 8000 	nop.w
 8000c88:	00000300 	.word	0x00000300
 8000c8c:	00000002 	.word	0x00000002
	...
 8000c98:	40004800 	.word	0x40004800
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58020c00 	.word	0x58020c00

08000ca4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca4:	280f      	cmp	r0, #15
 8000ca6:	d901      	bls.n	8000cac <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8000ca8:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8000caa:	4770      	bx	lr
{
 8000cac:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000cae:	4601      	mov	r1, r0
{
 8000cb0:	b08b      	sub	sp, #44	@ 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	2036      	movs	r0, #54	@ 0x36
 8000cb8:	f000 ffc6 	bl	8001c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cbc:	2036      	movs	r0, #54	@ 0x36
 8000cbe:	f000 ffff 	bl	8001cc0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <HAL_InitTick+0x8c>)
    uwTickPrio = TickPriority;
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc6:	4669      	mov	r1, sp
 8000cc8:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000cca:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ccc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000cd0:	f042 0210 	orr.w	r2, r2, #16
 8000cd4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce4:	f002 fe06 	bl	80038f4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ce8:	9b07      	ldr	r3, [sp, #28]
 8000cea:	b9c3      	cbnz	r3, 8000d1e <HAL_InitTick+0x7a>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cec:	f002 fdde 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8000cf0:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf2:	4911      	ldr	r1, [pc, #68]	@ (8000d38 <HAL_InitTick+0x94>)
  htim6.Init.ClockDivision = 0;
 8000cf4:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 8000cf6:	4c11      	ldr	r4, [pc, #68]	@ (8000d3c <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf8:	fba1 1303 	umull	r1, r3, r1, r3
  htim6.Instance = TIM6;
 8000cfc:	4d10      	ldr	r5, [pc, #64]	@ (8000d40 <HAL_InitTick+0x9c>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cfe:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d02:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d04:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 8000d06:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0a:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d0c:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d10:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d12:	f004 f9fd 	bl	8005110 <HAL_TIM_Base_Init>
 8000d16:	b130      	cbz	r0, 8000d26 <HAL_InitTick+0x82>
    return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
}
 8000d1a:	b00b      	add	sp, #44	@ 0x2c
 8000d1c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d1e:	f002 fdc5 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8000d22:	0043      	lsls	r3, r0, #1
 8000d24:	e7e5      	b.n	8000cf2 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d26:	4620      	mov	r0, r4
 8000d28:	f004 f85c 	bl	8004de4 <HAL_TIM_Base_Start_IT>
 8000d2c:	e7f5      	b.n	8000d1a <HAL_InitTick+0x76>
 8000d2e:	bf00      	nop
 8000d30:	58024400 	.word	0x58024400
 8000d34:	2400000c 	.word	0x2400000c
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	24000210 	.word	0x24000210
 8000d40:	40001000 	.word	0x40001000

08000d44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler>
 8000d46:	bf00      	nop

08000d48 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <HardFault_Handler>
 8000d4a:	bf00      	nop

08000d4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler>
 8000d4e:	bf00      	nop

08000d50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <BusFault_Handler>
 8000d52:	bf00      	nop

08000d54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler>
 8000d56:	bf00      	nop

08000d58 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d5c:	4801      	ldr	r0, [pc, #4]	@ (8000d64 <TIM6_DAC_IRQHandler+0x8>)
 8000d5e:	f004 b8a7 	b.w	8004eb0 <HAL_TIM_IRQHandler>
 8000d62:	bf00      	nop
 8000d64:	24000210 	.word	0x24000210

08000d68 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d68:	4801      	ldr	r0, [pc, #4]	@ (8000d70 <ETH_IRQHandler+0x8>)
 8000d6a:	f001 bc71 	b.w	8002650 <HAL_ETH_IRQHandler>
 8000d6e:	bf00      	nop
 8000d70:	2400032c 	.word	0x2400032c

08000d74 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000d74:	2001      	movs	r0, #1
 8000d76:	4770      	bx	lr

08000d78 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8000d78:	4b02      	ldr	r3, [pc, #8]	@ (8000d84 <_kill+0xc>)
 8000d7a:	2216      	movs	r2, #22
	return -1;
}
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	4770      	bx	lr
 8000d84:	240109dc 	.word	0x240109dc

08000d88 <_exit>:
	errno = EINVAL;
 8000d88:	4b01      	ldr	r3, [pc, #4]	@ (8000d90 <_exit+0x8>)
 8000d8a:	2216      	movs	r2, #22
 8000d8c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000d8e:	e7fe      	b.n	8000d8e <_exit+0x6>
 8000d90:	240109dc 	.word	0x240109dc

08000d94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	1e16      	subs	r6, r2, #0
 8000d98:	dd07      	ble.n	8000daa <_read+0x16>
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000d9e:	f3af 8000 	nop.w
 8000da2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	42a5      	cmp	r5, r4
 8000da8:	d1f9      	bne.n	8000d9e <_read+0xa>
	}

return len;
}
 8000daa:	4630      	mov	r0, r6
 8000dac:	bd70      	pop	{r4, r5, r6, pc}
 8000dae:	bf00      	nop

08000db0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	1e16      	subs	r6, r2, #0
 8000db4:	dd07      	ble.n	8000dc6 <_write+0x16>
 8000db6:	460c      	mov	r4, r1
 8000db8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000dba:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000dbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	42a5      	cmp	r5, r4
 8000dc4:	d1f9      	bne.n	8000dba <_write+0xa>
	}
	return len;
}
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
 8000dca:	bf00      	nop

08000dcc <_close>:

int _close(int file)
{
	return -1;
}
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000dd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8000dd8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000dda:	604b      	str	r3, [r1, #4]
}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000de0:	2001      	movs	r0, #1
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000de4:	2000      	movs	r0, #0
 8000de6:	4770      	bx	lr

08000de8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <_sbrk+0x38>)
{
 8000dea:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000dee:	6808      	ldr	r0, [r1, #0]
{
 8000df0:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df2:	4c0d      	ldr	r4, [pc, #52]	@ (8000e28 <_sbrk+0x40>)
 8000df4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000df6:	b170      	cbz	r0, 8000e16 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df8:	4403      	add	r3, r0
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d803      	bhi.n	8000e06 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8000e02:	600b      	str	r3, [r1, #0]
}
 8000e04:	4770      	bx	lr
    errno = ENOMEM;
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <_sbrk+0x44>)
 8000e08:	220c      	movs	r2, #12
    return (void *)-1;
 8000e0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000e16:	4c06      	ldr	r4, [pc, #24]	@ (8000e30 <_sbrk+0x48>)
 8000e18:	4620      	mov	r0, r4
 8000e1a:	600c      	str	r4, [r1, #0]
 8000e1c:	e7ec      	b.n	8000df8 <_sbrk+0x10>
 8000e1e:	bf00      	nop
 8000e20:	2400025c 	.word	0x2400025c
 8000e24:	24050000 	.word	0x24050000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	240109dc 	.word	0x240109dc
 8000e30:	24015388 	.word	0x24015388

08000e34 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e34:	4922      	ldr	r1, [pc, #136]	@ (8000ec0 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e36:	4a23      	ldr	r2, [pc, #140]	@ (8000ec4 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e38:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8000e40:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	2b06      	cmp	r3, #6
 8000e4e:	d805      	bhi.n	8000e5c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e50:	6813      	ldr	r3, [r2, #0]
 8000e52:	f023 030f 	bic.w	r3, r3, #15
 8000e56:	f043 0307 	orr.w	r3, r3, #7
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e5e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e60:	4a1a      	ldr	r2, [pc, #104]	@ (8000ecc <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8000e62:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e64:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8000e66:	f041 0101 	orr.w	r1, r1, #1
 8000e6a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000e6c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	400a      	ands	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e74:	6803      	ldr	r3, [r0, #0]
 8000e76:	071b      	lsls	r3, r3, #28
 8000e78:	d505      	bpl.n	8000e86 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7a:	6803      	ldr	r3, [r0, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	f043 0307 	orr.w	r3, r3, #7
 8000e84:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <SystemInit+0x94>)
 8000e88:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e8a:	4911      	ldr	r1, [pc, #68]	@ (8000ed0 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8000e8c:	4c11      	ldr	r4, [pc, #68]	@ (8000ed4 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8000e90:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000e92:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000e94:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000e96:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e98:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8000e9c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000e9e:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8000ea2:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000ea6:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000eaa:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000eae:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000eb2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000eb4:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eb6:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	52002000 	.word	0x52002000
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ed0:	01010280 	.word	0x01010280
 8000ed4:	02020200 	.word	0x02020200
 8000ed8:	01ff0000 	.word	0x01ff0000
 8000edc:	52004000 	.word	0x52004000

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee4:	f7ff ffa6 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	@ (8000f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f013 fe6f 	bl	8014bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fc31 	bl	8000778 <main>
  bx  lr
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000f1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f20:	240000ec 	.word	0x240000ec
  ldr r2, =_sidata
 8000f24:	08018db4 	.word	0x08018db4
  ldr r2, =_sbss
 8000f28:	240000f0 	.word	0x240000f0
  ldr r4, =_ebss
 8000f2c:	24015384 	.word	0x24015384

08000f30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC3_IRQHandler>
	...

08000f34 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f34:	b188      	cbz	r0, 8000f5a <LAN8742_RegisterBusIO+0x26>
 8000f36:	68ca      	ldr	r2, [r1, #12]
 8000f38:	b17a      	cbz	r2, 8000f5a <LAN8742_RegisterBusIO+0x26>
{
 8000f3a:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f3c:	688c      	ldr	r4, [r1, #8]
 8000f3e:	b17c      	cbz	r4, 8000f60 <LAN8742_RegisterBusIO+0x2c>
 8000f40:	690d      	ldr	r5, [r1, #16]
 8000f42:	b16d      	cbz	r5, 8000f60 <LAN8742_RegisterBusIO+0x2c>
 8000f44:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000f46:	e9d1 0100 	ldrd	r0, r1, [r1]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f4a:	615a      	str	r2, [r3, #20]
  pObj->IO.Init = ioctx->Init;
 8000f4c:	6098      	str	r0, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 8000f4e:	2000      	movs	r0, #0
  pObj->IO.GetTick = ioctx->GetTick;
 8000f50:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f52:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8000f56:	bc30      	pop	{r4, r5}
 8000f58:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f5e:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	e7f7      	b.n	8000f56 <LAN8742_RegisterBusIO+0x22>
 8000f66:	bf00      	nop

08000f68 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f68:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f6a:	2300      	movs	r3, #0
 {
 8000f6c:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000f6e:	6844      	ldr	r4, [r0, #4]
 {
 8000f70:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f72:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8000f74:	2c00      	cmp	r4, #0
 8000f76:	d146      	bne.n	8001006 <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 8000f78:	6883      	ldr	r3, [r0, #8]
 8000f7a:	b103      	cbz	r3, 8000f7e <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f7c:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f7e:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8000f80:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f82:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f84:	e007      	b.n	8000f96 <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f86:	9b01      	ldr	r3, [sp, #4]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	42a3      	cmp	r3, r4
 8000f8e:	d016      	beq.n	8000fbe <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f90:	3401      	adds	r4, #1
 8000f92:	2c20      	cmp	r4, #32
 8000f94:	d00b      	beq.n	8000fae <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f96:	4620      	mov	r0, r4
 8000f98:	696b      	ldr	r3, [r5, #20]
 8000f9a:	aa01      	add	r2, sp, #4
 8000f9c:	2112      	movs	r1, #18
 8000f9e:	4798      	blx	r3
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	daf0      	bge.n	8000f86 <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fa4:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 8000fa6:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000faa:	2c20      	cmp	r4, #32
 8000fac:	d1f3      	bne.n	8000f96 <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000fae:	682c      	ldr	r4, [r5, #0]
 8000fb0:	2c1f      	cmp	r4, #31
 8000fb2:	d937      	bls.n	8001024 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000fb4:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 8000fb8:	4630      	mov	r0, r6
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8000fbe:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000fc0:	692b      	ldr	r3, [r5, #16]
 8000fc2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4798      	blx	r3
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	db2c      	blt.n	800102a <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000fd0:	696b      	ldr	r3, [r5, #20]
 8000fd2:	aa01      	add	r2, sp, #4
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	6828      	ldr	r0, [r5, #0]
 8000fd8:	4798      	blx	r3
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	db2b      	blt.n	8001036 <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8000fde:	69ab      	ldr	r3, [r5, #24]
 8000fe0:	4798      	blx	r3
 8000fe2:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fe4:	e00c      	b.n	8001000 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fe6:	69ab      	ldr	r3, [r5, #24]
 8000fe8:	4798      	blx	r3
 8000fea:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fec:	aa01      	add	r2, sp, #4
 8000fee:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ff0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8000ff4:	d81c      	bhi.n	8001030 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000ff6:	696b      	ldr	r3, [r5, #20]
 8000ff8:	6828      	ldr	r0, [r5, #0]
 8000ffa:	4798      	blx	r3
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	db1a      	blt.n	8001036 <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001000:	9b01      	ldr	r3, [sp, #4]
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	d4ef      	bmi.n	8000fe6 <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 8001006:	69ab      	ldr	r3, [r5, #24]
 8001008:	4798      	blx	r3
 800100a:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800100c:	69ab      	ldr	r3, [r5, #24]
 800100e:	4798      	blx	r3
 8001010:	1b03      	subs	r3, r0, r4
 8001012:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001016:	d9f9      	bls.n	800100c <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	2600      	movs	r6, #0
 800101c:	606b      	str	r3, [r5, #4]
 }
 800101e:	4630      	mov	r0, r6
 8001020:	b002      	add	sp, #8
 8001022:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8001024:	2e00      	cmp	r6, #0
 8001026:	d1fa      	bne.n	800101e <LAN8742_Init+0xb6>
 8001028:	e7ca      	b.n	8000fc0 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 800102a:	f06f 0603 	mvn.w	r6, #3
 800102e:	e7f6      	b.n	800101e <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001030:	f06f 0601 	mvn.w	r6, #1
 8001034:	e7f3      	b.n	800101e <LAN8742_Init+0xb6>
                 status = LAN8742_STATUS_READ_ERROR;
 8001036:	f06f 0604 	mvn.w	r6, #4
   if(status == LAN8742_STATUS_OK)
 800103a:	e7f0      	b.n	800101e <LAN8742_Init+0xb6>

0800103c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800103c:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 800103e:	2500      	movs	r5, #0
{
 8001040:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001042:	6943      	ldr	r3, [r0, #20]
{
 8001044:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001046:	aa01      	add	r2, sp, #4
 8001048:	2101      	movs	r1, #1
 800104a:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 800104c:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800104e:	4798      	blx	r3
 8001050:	42a8      	cmp	r0, r5
 8001052:	db3d      	blt.n	80010d0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001054:	6963      	ldr	r3, [r4, #20]
 8001056:	aa01      	add	r2, sp, #4
 8001058:	2101      	movs	r1, #1
 800105a:	6820      	ldr	r0, [r4, #0]
 800105c:	4798      	blx	r3
 800105e:	2800      	cmp	r0, #0
 8001060:	db36      	blt.n	80010d0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001062:	9b01      	ldr	r3, [sp, #4]
 8001064:	075b      	lsls	r3, r3, #29
 8001066:	d52a      	bpl.n	80010be <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001068:	6963      	ldr	r3, [r4, #20]
 800106a:	aa01      	add	r2, sp, #4
 800106c:	4629      	mov	r1, r5
 800106e:	6820      	ldr	r0, [r4, #0]
 8001070:	4798      	blx	r3
 8001072:	2800      	cmp	r0, #0
 8001074:	db2c      	blt.n	80010d0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001076:	9b01      	ldr	r3, [sp, #4]
 8001078:	04dd      	lsls	r5, r3, #19
 800107a:	d514      	bpl.n	80010a6 <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800107c:	6963      	ldr	r3, [r4, #20]
 800107e:	aa01      	add	r2, sp, #4
 8001080:	211f      	movs	r1, #31
 8001082:	6820      	ldr	r0, [r4, #0]
 8001084:	4798      	blx	r3
 8001086:	2800      	cmp	r0, #0
 8001088:	db22      	blt.n	80010d0 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800108a:	9b01      	ldr	r3, [sp, #4]
 800108c:	04da      	lsls	r2, r3, #19
 800108e:	d51d      	bpl.n	80010cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001090:	f003 031c 	and.w	r3, r3, #28
 8001094:	2b18      	cmp	r3, #24
 8001096:	d017      	beq.n	80010c8 <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001098:	2b08      	cmp	r3, #8
 800109a:	d013      	beq.n	80010c4 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800109c:	2b14      	cmp	r3, #20
 800109e:	d10b      	bne.n	80010b8 <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010a0:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 80010a2:	b003      	add	sp, #12
 80010a4:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80010a6:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 80010aa:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 80010ae:	d00b      	beq.n	80010c8 <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010b0:	0498      	lsls	r0, r3, #18
 80010b2:	d407      	bmi.n	80010c4 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010b4:	05d9      	lsls	r1, r3, #23
 80010b6:	d4f3      	bmi.n	80010a0 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010b8:	2005      	movs	r0, #5
}
 80010ba:	b003      	add	sp, #12
 80010bc:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 80010be:	2001      	movs	r0, #1
}
 80010c0:	b003      	add	sp, #12
 80010c2:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010c4:	2003      	movs	r0, #3
 80010c6:	e7f8      	b.n	80010ba <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010c8:	2002      	movs	r0, #2
 80010ca:	e7f6      	b.n	80010ba <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010cc:	2006      	movs	r0, #6
 80010ce:	e7f4      	b.n	80010ba <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 80010d0:	f06f 0004 	mvn.w	r0, #4
 80010d4:	e7f1      	b.n	80010ba <LAN8742_GetLinkState+0x7e>
 80010d6:	bf00      	nop

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010dc:	4c12      	ldr	r4, [pc, #72]	@ (8001128 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010de:	f000 fda1 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010e2:	f002 fa57 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_Init+0x54>)
 80010e8:	4911      	ldr	r1, [pc, #68]	@ (8001130 <HAL_Init+0x58>)
 80010ea:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ec:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010ee:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010f2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010f8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010fa:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010fe:	490d      	ldr	r1, [pc, #52]	@ (8001134 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001100:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001104:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001106:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800110a:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800110e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001110:	f7ff fdc8 	bl	8000ca4 <HAL_InitTick>
 8001114:	b110      	cbz	r0, 800111c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8001116:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8001118:	4620      	mov	r0, r4
 800111a:	bd10      	pop	{r4, pc}
 800111c:	4604      	mov	r4, r0
  HAL_MspInit();
 800111e:	f7ff fcef 	bl	8000b00 <HAL_MspInit>
}
 8001122:	4620      	mov	r0, r4
 8001124:	bd10      	pop	{r4, pc}
 8001126:	bf00      	nop
 8001128:	24000000 	.word	0x24000000
 800112c:	58024400 	.word	0x58024400
 8001130:	08015a18 	.word	0x08015a18
 8001134:	24000004 	.word	0x24000004

08001138 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4a03      	ldr	r2, [pc, #12]	@ (8001148 <HAL_IncTick+0x10>)
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <HAL_IncTick+0x14>)
 800113c:	6811      	ldr	r1, [r2, #0]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	440b      	add	r3, r1
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	24000260 	.word	0x24000260
 800114c:	24000008 	.word	0x24000008

08001150 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001150:	4b01      	ldr	r3, [pc, #4]	@ (8001158 <HAL_GetTick+0x8>)
 8001152:	6818      	ldr	r0, [r3, #0]
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	24000260 	.word	0x24000260

0800115c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800115c:	4a03      	ldr	r2, [pc, #12]	@ (800116c <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800115e:	6853      	ldr	r3, [r2, #4]
 8001160:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8001164:	4303      	orrs	r3, r0
 8001166:	6053      	str	r3, [r2, #4]
}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	58000400 	.word	0x58000400

08001170 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001172:	2200      	movs	r2, #0
{
 8001174:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001176:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001178:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 800117c:	2a01      	cmp	r2, #1
 800117e:	f000 80db 	beq.w	8001338 <HAL_ADC_ConfigChannel+0x1c8>
 8001182:	4603      	mov	r3, r0
 8001184:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001186:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001188:	f883 005c 	strb.w	r0, [r3, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800118c:	6894      	ldr	r4, [r2, #8]
 800118e:	0764      	lsls	r4, r4, #29
 8001190:	d509      	bpl.n	80011a6 <HAL_ADC_ConfigChannel+0x36>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001192:	6e1a      	ldr	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001194:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001196:	f042 0220 	orr.w	r2, r2, #32
 800119a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800119c:	2200      	movs	r2, #0
 800119e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
}
 80011a2:	b003      	add	sp, #12
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hadc->Instance != ADC3)
 80011a6:	4ebd      	ldr	r6, [pc, #756]	@ (800149c <HAL_ADC_ConfigChannel+0x32c>)
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80011a8:	680c      	ldr	r4, [r1, #0]
    if (hadc->Instance != ADC3)
 80011aa:	42b2      	cmp	r2, r6
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80011ac:	f3c4 6584 	ubfx	r5, r4, #26, #5
    if (hadc->Instance != ADC3)
 80011b0:	d00d      	beq.n	80011ce <HAL_ADC_ConfigChannel+0x5e>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80011b2:	f3c4 0613 	ubfx	r6, r4, #0, #20
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	f000 80bc 	beq.w	8001334 <HAL_ADC_ConfigChannel+0x1c4>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011c0:	b114      	cbz	r4, 80011c8 <HAL_ADC_ConfigChannel+0x58>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80011c2:	fab4 f484 	clz	r4, r4
 80011c6:	40a0      	lsls	r0, r4
 80011c8:	69d4      	ldr	r4, [r2, #28]
 80011ca:	4320      	orrs	r0, r4
 80011cc:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011ce:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 80011d0:	241f      	movs	r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011d2:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 80011d6:	ea4f 1c90 	mov.w	ip, r0, lsr #6
  MODIFY_REG(*preg,
 80011da:	4020      	ands	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011dc:	f00c 0c0c 	and.w	ip, ip, #12
  MODIFY_REG(*preg,
 80011e0:	4084      	lsls	r4, r0
 80011e2:	4085      	lsls	r5, r0
 80011e4:	f85e 000c 	ldr.w	r0, [lr, ip]
 80011e8:	ea20 0004 	bic.w	r0, r0, r4
 80011ec:	4328      	orrs	r0, r5
 80011ee:	f84e 000c 	str.w	r0, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f2:	6890      	ldr	r0, [r2, #8]
 80011f4:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011f8:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011fa:	d150      	bne.n	800129e <HAL_ADC_ConfigChannel+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011fc:	0700      	lsls	r0, r0, #28
 80011fe:	d44e      	bmi.n	800129e <HAL_ADC_ConfigChannel+0x12e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001200:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001202:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8001206:	f04f 0c07 	mov.w	ip, #7
 800120a:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800120c:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 800120e:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001212:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001216:	fa0c fc04 	lsl.w	ip, ip, r4
 800121a:	fa07 f404 	lsl.w	r4, r7, r4
 800121e:	5970      	ldr	r0, [r6, r5]
 8001220:	ea20 000c 	bic.w	r0, r0, ip
 8001224:	4320      	orrs	r0, r4
 8001226:	5170      	str	r0, [r6, r5]
      if (hadc->Instance == ADC3)
 8001228:	489c      	ldr	r0, [pc, #624]	@ (800149c <HAL_ADC_ConfigChannel+0x32c>)
 800122a:	4282      	cmp	r2, r0
 800122c:	f000 80d4 	beq.w	80013d8 <HAL_ADC_ConfigChannel+0x268>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001230:	489b      	ldr	r0, [pc, #620]	@ (80014a0 <HAL_ADC_ConfigChannel+0x330>)
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001232:	694d      	ldr	r5, [r1, #20]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001234:	6800      	ldr	r0, [r0, #0]
 8001236:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 800123a:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800123e:	68d0      	ldr	r0, [r2, #12]
 8001240:	d004      	beq.n	800124c <HAL_ADC_ConfigChannel+0xdc>
 8001242:	f010 0f10 	tst.w	r0, #16
 8001246:	68d0      	ldr	r0, [r2, #12]
 8001248:	f040 8123 	bne.w	8001492 <HAL_ADC_ConfigChannel+0x322>
 800124c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001250:	0040      	lsls	r0, r0, #1
 8001252:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001254:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001256:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001258:	2e04      	cmp	r6, #4
 800125a:	f040 815e 	bne.w	800151a <HAL_ADC_ConfigChannel+0x3aa>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800125e:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001260:	0684      	lsls	r4, r0, #26
 8001262:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8001266:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 800126a:	f000 8151 	beq.w	8001510 <HAL_ADC_ConfigChannel+0x3a0>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800126e:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001270:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001274:	4284      	cmp	r4, r0
 8001276:	f000 8146 	beq.w	8001506 <HAL_ADC_ConfigChannel+0x396>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800127a:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800127c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001280:	4284      	cmp	r4, r0
 8001282:	f000 813b 	beq.w	80014fc <HAL_ADC_ConfigChannel+0x38c>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001286:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001288:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800128c:	4284      	cmp	r4, r0
 800128e:	f000 8130 	beq.w	80014f2 <HAL_ADC_ConfigChannel+0x382>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001292:	6890      	ldr	r0, [r2, #8]
 8001294:	07c4      	lsls	r4, r0, #31
 8001296:	d44b      	bmi.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001298:	6808      	ldr	r0, [r1, #0]
 800129a:	68ce      	ldr	r6, [r1, #12]
  if (ADCx == ADC3)
 800129c:	e008      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x140>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800129e:	6890      	ldr	r0, [r2, #8]
 80012a0:	07c7      	lsls	r7, r0, #31
 80012a2:	d445      	bmi.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
  if (ADCx == ADC3)
 80012a4:	4c7d      	ldr	r4, [pc, #500]	@ (800149c <HAL_ADC_ConfigChannel+0x32c>)
 80012a6:	6808      	ldr	r0, [r1, #0]
 80012a8:	42a2      	cmp	r2, r4
 80012aa:	68ce      	ldr	r6, [r1, #12]
 80012ac:	f000 80ca 	beq.w	8001444 <HAL_ADC_ConfigChannel+0x2d4>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80012b0:	f006 0418 	and.w	r4, r6, #24
 80012b4:	4d7b      	ldr	r5, [pc, #492]	@ (80014a4 <HAL_ADC_ConfigChannel+0x334>)
 80012b6:	f3c0 0713 	ubfx	r7, r0, #0, #20
 80012ba:	40e5      	lsrs	r5, r4
 80012bc:	f8d2 40c0 	ldr.w	r4, [r2, #192]	@ 0xc0
 80012c0:	4005      	ands	r5, r0
 80012c2:	ea24 0407 	bic.w	r4, r4, r7
 80012c6:	432c      	orrs	r4, r5
 80012c8:	f8c2 40c0 	str.w	r4, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012cc:	4c76      	ldr	r4, [pc, #472]	@ (80014a8 <HAL_ADC_ConfigChannel+0x338>)
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d035      	beq.n	800133e <HAL_ADC_ConfigChannel+0x1ce>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012d2:	6809      	ldr	r1, [r1, #0]
 80012d4:	2900      	cmp	r1, #0
 80012d6:	da2b      	bge.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012d8:	4874      	ldr	r0, [pc, #464]	@ (80014ac <HAL_ADC_ConfigChannel+0x33c>)
 80012da:	4282      	cmp	r2, r0
 80012dc:	f000 80f0 	beq.w	80014c0 <HAL_ADC_ConfigChannel+0x350>
 80012e0:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 80012e4:	4282      	cmp	r2, r0
 80012e6:	f000 80eb 	beq.w	80014c0 <HAL_ADC_ConfigChannel+0x350>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012ea:	f100 50c0 	add.w	r0, r0, #402653184	@ 0x18000000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012ee:	4d6b      	ldr	r5, [pc, #428]	@ (800149c <HAL_ADC_ConfigChannel+0x32c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012f0:	f500 4084 	add.w	r0, r0, #16896	@ 0x4200
 80012f4:	6884      	ldr	r4, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f6:	68ae      	ldr	r6, [r5, #8]
 80012f8:	07f6      	lsls	r6, r6, #31
 80012fa:	f53f af4a 	bmi.w	8001192 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012fe:	4e6c      	ldr	r6, [pc, #432]	@ (80014b0 <HAL_ADC_ConfigChannel+0x340>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001300:	f004 77e0 	and.w	r7, r4, #29360128	@ 0x1c00000
 8001304:	42b1      	cmp	r1, r6
 8001306:	f000 81c1 	beq.w	800168c <HAL_ADC_ConfigChannel+0x51c>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800130a:	4e6a      	ldr	r6, [pc, #424]	@ (80014b4 <HAL_ADC_ConfigChannel+0x344>)
 800130c:	42b1      	cmp	r1, r6
 800130e:	f000 81af 	beq.w	8001670 <HAL_ADC_ConfigChannel+0x500>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001312:	4d69      	ldr	r5, [pc, #420]	@ (80014b8 <HAL_ADC_ConfigChannel+0x348>)
 8001314:	42a9      	cmp	r1, r5
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001318:	0265      	lsls	r5, r4, #9
 800131a:	d409      	bmi.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
 800131c:	495f      	ldr	r1, [pc, #380]	@ (800149c <HAL_ADC_ConfigChannel+0x32c>)
 800131e:	428a      	cmp	r2, r1
 8001320:	d106      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001322:	6882      	ldr	r2, [r0, #8]
 8001324:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001328:	433a      	orrs	r2, r7
 800132a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800132e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001330:	2000      	movs	r0, #0
 8001332:	e733      	b.n	800119c <HAL_ADC_ConfigChannel+0x2c>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001334:	40a8      	lsls	r0, r5
 8001336:	e747      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x58>
  __HAL_LOCK(hadc);
 8001338:	2002      	movs	r0, #2
}
 800133a:	b003      	add	sp, #12
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800133e:	2f00      	cmp	r7, #0
 8001340:	f000 8091 	beq.w	8001466 <HAL_ADC_ConfigChannel+0x2f6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001348:	2c00      	cmp	r4, #0
 800134a:	f000 8113 	beq.w	8001574 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800134e:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001352:	3401      	adds	r4, #1
 8001354:	f004 041f 	and.w	r4, r4, #31
 8001358:	2c09      	cmp	r4, #9
 800135a:	f240 810b 	bls.w	8001574 <HAL_ADC_ConfigChannel+0x404>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001362:	2c00      	cmp	r4, #0
 8001364:	f000 81e8 	beq.w	8001738 <HAL_ADC_ConfigChannel+0x5c8>
  return __builtin_clz(value);
 8001368:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800136c:	3401      	adds	r4, #1
 800136e:	06a4      	lsls	r4, r4, #26
 8001370:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001378:	2d00      	cmp	r5, #0
 800137a:	f000 81db 	beq.w	8001734 <HAL_ADC_ConfigChannel+0x5c4>
  return __builtin_clz(value);
 800137e:	fab5 f585 	clz	r5, r5
 8001382:	2601      	movs	r6, #1
 8001384:	3501      	adds	r5, #1
 8001386:	f005 051f 	and.w	r5, r5, #31
 800138a:	fa06 f505 	lsl.w	r5, r6, r5
 800138e:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001394:	2800      	cmp	r0, #0
 8001396:	f000 81cb 	beq.w	8001730 <HAL_ADC_ConfigChannel+0x5c0>
  return __builtin_clz(value);
 800139a:	fab0 f080 	clz	r0, r0
 800139e:	f06f 061d 	mvn.w	r6, #29
 80013a2:	1c45      	adds	r5, r0, #1
 80013a4:	2003      	movs	r0, #3
 80013a6:	f005 051f 	and.w	r5, r5, #31
 80013aa:	fb10 6005 	smlabb	r0, r0, r5, r6
 80013ae:	0500      	lsls	r0, r0, #20
 80013b0:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013b4:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013b6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80013ba:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013bc:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80013be:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013c2:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80013c6:	4087      	lsls	r7, r0
 80013c8:	5974      	ldr	r4, [r6, r5]
 80013ca:	ea24 0407 	bic.w	r4, r4, r7
 80013ce:	688f      	ldr	r7, [r1, #8]
 80013d0:	4087      	lsls	r7, r0
 80013d2:	433c      	orrs	r4, r7
 80013d4:	5174      	str	r4, [r6, r5]
}
 80013d6:	e77c      	b.n	80012d2 <HAL_ADC_ConfigChannel+0x162>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013d8:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
 80013dc:	68d5      	ldr	r5, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013de:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013e0:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013e2:	f000 80ee 	beq.w	80015c2 <HAL_ADC_ConfigChannel+0x452>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013e6:	f3c5 05c1 	ubfx	r5, r5, #3, #2
    MODIFY_REG(*preg,
 80013ea:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 80013ee:	006d      	lsls	r5, r5, #1
 80013f0:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f4:	4c31      	ldr	r4, [pc, #196]	@ (80014bc <HAL_ADC_ConfigChannel+0x34c>)
    MODIFY_REG(*preg,
 80013f6:	4338      	orrs	r0, r7
 80013f8:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 80013fc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8001400:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001404:	690d      	ldr	r5, [r1, #16]
    MODIFY_REG(*preg,
 8001406:	69ce      	ldr	r6, [r1, #28]
 8001408:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800140c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8001410:	4330      	orrs	r0, r6
 8001412:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001416:	f891 5020 	ldrb.w	r5, [r1, #32]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141a:	690e      	ldr	r6, [r1, #16]
 800141c:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg,
 8001420:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8001424:	fab5 f585 	clz	r5, r5
 8001428:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800142c:	096d      	lsrs	r5, r5, #5
 800142e:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8001432:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001436:	4819      	ldr	r0, [pc, #100]	@ (800149c <HAL_ADC_ConfigChannel+0x32c>)
 8001438:	6880      	ldr	r0, [r0, #8]
 800143a:	07c0      	lsls	r0, r0, #31
 800143c:	f53f af78 	bmi.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001440:	6808      	ldr	r0, [r1, #0]
 8001442:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001444:	f8df c054 	ldr.w	ip, [pc, #84]	@ 800149c <HAL_ADC_ConfigChannel+0x32c>
 8001448:	f006 0418 	and.w	r4, r6, #24
 800144c:	4d15      	ldr	r5, [pc, #84]	@ (80014a4 <HAL_ADC_ConfigChannel+0x334>)
 800144e:	f3c0 0713 	ubfx	r7, r0, #0, #20
 8001452:	40e5      	lsrs	r5, r4
 8001454:	f8dc 40b0 	ldr.w	r4, [ip, #176]	@ 0xb0
 8001458:	4005      	ands	r5, r0
 800145a:	ea24 0407 	bic.w	r4, r4, r7
 800145e:	432c      	orrs	r4, r5
 8001460:	f8cc 40b0 	str.w	r4, [ip, #176]	@ 0xb0
 8001464:	e732      	b.n	80012cc <HAL_ADC_ConfigChannel+0x15c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001466:	0e80      	lsrs	r0, r0, #26
 8001468:	3001      	adds	r0, #1
 800146a:	f000 061f 	and.w	r6, r0, #31
 800146e:	0680      	lsls	r0, r0, #26
 8001470:	f000 45f8 	and.w	r5, r0, #2080374784	@ 0x7c000000
 8001474:	2001      	movs	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001476:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001478:	fa00 f006 	lsl.w	r0, r0, r6
 800147c:	ea45 0400 	orr.w	r4, r5, r0
 8001480:	eb06 0046 	add.w	r0, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001484:	f240 809b 	bls.w	80015be <HAL_ADC_ConfigChannel+0x44e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001488:	381e      	subs	r0, #30
 800148a:	0500      	lsls	r0, r0, #20
 800148c:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8001490:	e790      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x244>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001492:	0840      	lsrs	r0, r0, #1
 8001494:	f000 0008 	and.w	r0, r0, #8
 8001498:	4085      	lsls	r5, r0
 800149a:	e6db      	b.n	8001254 <HAL_ADC_ConfigChannel+0xe4>
 800149c:	58026000 	.word	0x58026000
 80014a0:	5c001000 	.word	0x5c001000
 80014a4:	000fffff 	.word	0x000fffff
 80014a8:	47ff0000 	.word	0x47ff0000
 80014ac:	40022000 	.word	0x40022000
 80014b0:	c7520000 	.word	0xc7520000
 80014b4:	c3210000 	.word	0xc3210000
 80014b8:	cb840000 	.word	0xcb840000
 80014bc:	58026060 	.word	0x58026060
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c0:	4da3      	ldr	r5, [pc, #652]	@ (8001750 <HAL_ADC_ConfigChannel+0x5e0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014c2:	48a4      	ldr	r0, [pc, #656]	@ (8001754 <HAL_ADC_ConfigChannel+0x5e4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c4:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014c8:	6884      	ldr	r4, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014ca:	f855 6cf8 	ldr.w	r6, [r5, #-248]
 80014ce:	68ad      	ldr	r5, [r5, #8]
 80014d0:	07ef      	lsls	r7, r5, #31
 80014d2:	f53f ae5e 	bmi.w	8001192 <HAL_ADC_ConfigChannel+0x22>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014d6:	07f5      	lsls	r5, r6, #31
 80014d8:	f53f ae5b 	bmi.w	8001192 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014dc:	4d9e      	ldr	r5, [pc, #632]	@ (8001758 <HAL_ADC_ConfigChannel+0x5e8>)
 80014de:	42a9      	cmp	r1, r5
 80014e0:	f43f af26 	beq.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014e4:	4d9d      	ldr	r5, [pc, #628]	@ (800175c <HAL_ADC_ConfigChannel+0x5ec>)
 80014e6:	42a9      	cmp	r1, r5
 80014e8:	f43f af22 	beq.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014ec:	f004 77e0 	and.w	r7, r4, #29360128	@ 0x1c00000
 80014f0:	e70f      	b.n	8001312 <HAL_ADC_ConfigChannel+0x1a2>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80014f2:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80014f4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80014f8:	66d0      	str	r0, [r2, #108]	@ 0x6c
 80014fa:	e6ca      	b.n	8001292 <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80014fc:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80014fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001502:	6690      	str	r0, [r2, #104]	@ 0x68
 8001504:	e6bf      	b.n	8001286 <HAL_ADC_ConfigChannel+0x116>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001506:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001508:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800150c:	6650      	str	r0, [r2, #100]	@ 0x64
 800150e:	e6b4      	b.n	800127a <HAL_ADC_ConfigChannel+0x10a>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001510:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001512:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001516:	6610      	str	r0, [r2, #96]	@ 0x60
 8001518:	e6a9      	b.n	800126e <HAL_ADC_ConfigChannel+0xfe>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151a:	f102 0760 	add.w	r7, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 800151e:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001522:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8001526:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800152a:	4320      	orrs	r0, r4
 800152c:	4328      	orrs	r0, r5
 800152e:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001532:	f891 4021 	ldrb.w	r4, [r1, #33]	@ 0x21
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001536:	690d      	ldr	r5, [r1, #16]
 8001538:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800153c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001540:	fab4 f484 	clz	r4, r4
 8001544:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001548:	0964      	lsrs	r4, r4, #5
 800154a:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 800154e:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001552:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001554:	690d      	ldr	r5, [r1, #16]
 8001556:	f1a0 0001 	sub.w	r0, r0, #1
 800155a:	6914      	ldr	r4, [r2, #16]
 800155c:	f005 051f 	and.w	r5, r5, #31
 8001560:	fab0 f080 	clz	r0, r0
 8001564:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8001568:	0940      	lsrs	r0, r0, #5
 800156a:	02c0      	lsls	r0, r0, #11
 800156c:	40a8      	lsls	r0, r5
 800156e:	4320      	orrs	r0, r4
 8001570:	6110      	str	r0, [r2, #16]
}
 8001572:	e68e      	b.n	8001292 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001578:	2c00      	cmp	r4, #0
 800157a:	f000 80e5 	beq.w	8001748 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800157e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001582:	3401      	adds	r4, #1
 8001584:	06a4      	lsls	r4, r4, #26
 8001586:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800158e:	2d00      	cmp	r5, #0
 8001590:	f000 80d8 	beq.w	8001744 <HAL_ADC_ConfigChannel+0x5d4>
  return __builtin_clz(value);
 8001594:	fab5 f585 	clz	r5, r5
 8001598:	2601      	movs	r6, #1
 800159a:	3501      	adds	r5, #1
 800159c:	f005 051f 	and.w	r5, r5, #31
 80015a0:	fa06 f505 	lsl.w	r5, r6, r5
 80015a4:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80015aa:	2800      	cmp	r0, #0
 80015ac:	f000 80c7 	beq.w	800173e <HAL_ADC_ConfigChannel+0x5ce>
  return __builtin_clz(value);
 80015b0:	fab0 f080 	clz	r0, r0
 80015b4:	3001      	adds	r0, #1
 80015b6:	f000 001f 	and.w	r0, r0, #31
 80015ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80015be:	0500      	lsls	r0, r0, #20
 80015c0:	e6f8      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x244>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015c2:	6e14      	ldr	r4, [r2, #96]	@ 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015c4:	f3c0 0513 	ubfx	r5, r0, #0, #20
 80015c8:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 80015ca:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80015ce:	bb25      	cbnz	r5, 800161a <HAL_ADC_ConfigChannel+0x4aa>
 80015d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80015d4:	42ac      	cmp	r4, r5
 80015d6:	f000 809a 	beq.w	800170e <HAL_ADC_ConfigChannel+0x59e>
 80015da:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80015dc:	6e54      	ldr	r4, [r2, #100]	@ 0x64
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015de:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80015e2:	42ac      	cmp	r4, r5
 80015e4:	f000 8083 	beq.w	80016ee <HAL_ADC_ConfigChannel+0x57e>
 80015e8:	4c5d      	ldr	r4, [pc, #372]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 80015ea:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 80015ec:	6ea4      	ldr	r4, [r4, #104]	@ 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ee:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80015f2:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80015f6:	42a5      	cmp	r5, r4
 80015f8:	d06a      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0x560>
 80015fa:	4c59      	ldr	r4, [pc, #356]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 80015fc:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80015fe:	6ee4      	ldr	r4, [r4, #108]	@ 0x6c
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001600:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001604:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001608:	42a0      	cmp	r0, r4
 800160a:	f47f ae48 	bne.w	800129e <HAL_ADC_ConfigChannel+0x12e>
    MODIFY_REG(*preg,
 800160e:	4c54      	ldr	r4, [pc, #336]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 8001610:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8001612:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001616:	66e0      	str	r0, [r4, #108]	@ 0x6c
 8001618:	e70d      	b.n	8001436 <HAL_ADC_ConfigChannel+0x2c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800161e:	b11d      	cbz	r5, 8001628 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 8001620:	fab5 f585 	clz	r5, r5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001624:	42ac      	cmp	r4, r5
 8001626:	d072      	beq.n	800170e <HAL_ADC_ConfigChannel+0x59e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001628:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 800162a:	6e54      	ldr	r4, [r2, #100]	@ 0x64
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800162c:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001634:	b11d      	cbz	r5, 800163e <HAL_ADC_ConfigChannel+0x4ce>
  return __builtin_clz(value);
 8001636:	fab5 f585 	clz	r5, r5
 800163a:	42a5      	cmp	r5, r4
 800163c:	d057      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x57e>
 800163e:	4c48      	ldr	r4, [pc, #288]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 8001640:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8001642:	6ea4      	ldr	r4, [r4, #104]	@ 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001644:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800164c:	b11d      	cbz	r5, 8001656 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800164e:	fab5 f585 	clz	r5, r5
 8001652:	42a5      	cmp	r5, r4
 8001654:	d03c      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0x560>
 8001656:	4c42      	ldr	r4, [pc, #264]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 8001658:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800165a:	6ee4      	ldr	r4, [r4, #108]	@ 0x6c
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800165c:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001664:	2800      	cmp	r0, #0
 8001666:	f43f ae1a 	beq.w	800129e <HAL_ADC_ConfigChannel+0x12e>
  return __builtin_clz(value);
 800166a:	fab0 f080 	clz	r0, r0
 800166e:	e7cb      	b.n	8001608 <HAL_ADC_ConfigChannel+0x498>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001670:	01e6      	lsls	r6, r4, #7
 8001672:	f53f ae5d 	bmi.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
 8001676:	42aa      	cmp	r2, r5
 8001678:	f47f ae5a 	bne.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800167c:	6882      	ldr	r2, [r0, #8]
 800167e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001682:	433a      	orrs	r2, r7
 8001684:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001688:	6082      	str	r2, [r0, #8]
}
 800168a:	e651      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800168c:	0221      	lsls	r1, r4, #8
 800168e:	f53f ae4f 	bmi.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001692:	42aa      	cmp	r2, r5
 8001694:	f47f ae4c 	bne.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001698:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800169a:	4932      	ldr	r1, [pc, #200]	@ (8001764 <HAL_ADC_ConfigChannel+0x5f4>)
 800169c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80016a0:	433a      	orrs	r2, r7
 80016a2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80016a6:	6082      	str	r2, [r0, #8]
 80016a8:	680a      	ldr	r2, [r1, #0]
 80016aa:	492f      	ldr	r1, [pc, #188]	@ (8001768 <HAL_ADC_ConfigChannel+0x5f8>)
 80016ac:	0992      	lsrs	r2, r2, #6
 80016ae:	fba1 1202 	umull	r1, r2, r1, r2
 80016b2:	0992      	lsrs	r2, r2, #6
 80016b4:	3201      	adds	r2, #1
 80016b6:	0052      	lsls	r2, r2, #1
 80016b8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80016ba:	9a01      	ldr	r2, [sp, #4]
 80016bc:	2a00      	cmp	r2, #0
 80016be:	f43f ae37 	beq.w	8001330 <HAL_ADC_ConfigChannel+0x1c0>
                wait_loop_index--;
 80016c2:	9a01      	ldr	r2, [sp, #4]
 80016c4:	3a01      	subs	r2, #1
 80016c6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80016c8:	9a01      	ldr	r2, [sp, #4]
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d1f9      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x552>
 80016ce:	e62f      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1c0>
    MODIFY_REG(*preg,
 80016d0:	4823      	ldr	r0, [pc, #140]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 80016d2:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80016d4:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80016d8:	6684      	str	r4, [r0, #104]	@ 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016da:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 80016dc:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	6808      	ldr	r0, [r1, #0]
 80016e0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80016e4:	f3c0 0513 	ubfx	r5, r0, #0, #20
 80016e8:	2d00      	cmp	r5, #0
 80016ea:	d08b      	beq.n	8001604 <HAL_ADC_ConfigChannel+0x494>
 80016ec:	e7b8      	b.n	8001660 <HAL_ADC_ConfigChannel+0x4f0>
    MODIFY_REG(*preg,
 80016ee:	481c      	ldr	r0, [pc, #112]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 80016f0:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 80016f2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80016f6:	6644      	str	r4, [r0, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016f8:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80016fa:	6e84      	ldr	r4, [r0, #104]	@ 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016fc:	6808      	ldr	r0, [r1, #0]
 80016fe:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001702:	f3c0 0513 	ubfx	r5, r0, #0, #20
 8001706:	2d00      	cmp	r5, #0
 8001708:	f43f af73 	beq.w	80015f2 <HAL_ADC_ConfigChannel+0x482>
 800170c:	e79c      	b.n	8001648 <HAL_ADC_ConfigChannel+0x4d8>
    MODIFY_REG(*preg,
 800170e:	4814      	ldr	r0, [pc, #80]	@ (8001760 <HAL_ADC_ConfigChannel+0x5f0>)
 8001710:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8001712:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8001716:	6604      	str	r4, [r0, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001718:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 800171a:	6e44      	ldr	r4, [r0, #100]	@ 0x64
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800171c:	6808      	ldr	r0, [r1, #0]
 800171e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001722:	f3c0 0513 	ubfx	r5, r0, #0, #20
 8001726:	2d00      	cmp	r5, #0
 8001728:	d182      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x4c0>
 800172a:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800172e:	e758      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x472>
 8001730:	480e      	ldr	r0, [pc, #56]	@ (800176c <HAL_ADC_ConfigChannel+0x5fc>)
 8001732:	e63f      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x244>
 8001734:	2502      	movs	r5, #2
 8001736:	e62a      	b.n	800138e <HAL_ADC_ConfigChannel+0x21e>
 8001738:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 800173c:	e61a      	b.n	8001374 <HAL_ADC_ConfigChannel+0x204>
 800173e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8001742:	e637      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x244>
 8001744:	2502      	movs	r5, #2
 8001746:	e72d      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x434>
 8001748:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 800174c:	e71d      	b.n	800158a <HAL_ADC_ConfigChannel+0x41a>
 800174e:	bf00      	nop
 8001750:	40022000 	.word	0x40022000
 8001754:	40022300 	.word	0x40022300
 8001758:	c7520000 	.word	0xc7520000
 800175c:	c3210000 	.word	0xc3210000
 8001760:	58026000 	.word	0x58026000
 8001764:	24000004 	.word	0x24000004
 8001768:	053e2d63 	.word	0x053e2d63
 800176c:	fe500000 	.word	0xfe500000

08001770 <ADC_ConfigureBoostMode>:
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001770:	4a49      	ldr	r2, [pc, #292]	@ (8001898 <ADC_ConfigureBoostMode+0x128>)
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	4293      	cmp	r3, r2
{
 8001776:	b510      	push	{r4, lr}
 8001778:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800177a:	d023      	beq.n	80017c4 <ADC_ConfigureBoostMode+0x54>
 800177c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001780:	4293      	cmp	r3, r2
 8001782:	d01f      	beq.n	80017c4 <ADC_ConfigureBoostMode+0x54>
 8001784:	4b45      	ldr	r3, [pc, #276]	@ (800189c <ADC_ConfigureBoostMode+0x12c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 800178c:	d01f      	beq.n	80017ce <ADC_ConfigureBoostMode+0x5e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800178e:	f002 f84d 	bl	800382c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001792:	6863      	ldr	r3, [r4, #4]
 8001794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001798:	d073      	beq.n	8001882 <ADC_ConfigureBoostMode+0x112>
 800179a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800179e:	d058      	beq.n	8001852 <ADC_ConfigureBoostMode+0xe2>
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a4:	d06d      	beq.n	8001882 <ADC_ConfigureBoostMode+0x112>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 80017a6:	4b3e      	ldr	r3, [pc, #248]	@ (80018a0 <ADC_ConfigureBoostMode+0x130>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
  }
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80017a8:	6822      	ldr	r2, [r4, #0]
  if (freq <= 6250000UL)
 80017aa:	4298      	cmp	r0, r3
 80017ac:	d92c      	bls.n	8001808 <ADC_ConfigureBoostMode+0x98>
  else if (freq <= 12500000UL)
 80017ae:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <ADC_ConfigureBoostMode+0x134>)
 80017b0:	4298      	cmp	r0, r3
 80017b2:	d947      	bls.n	8001844 <ADC_ConfigureBoostMode+0xd4>
  else if (freq <= 25000000UL)
 80017b4:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <ADC_ConfigureBoostMode+0x138>)
 80017b6:	4298      	cmp	r0, r3
 80017b8:	d95a      	bls.n	8001870 <ADC_ConfigureBoostMode+0x100>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80017ba:	6893      	ldr	r3, [r2, #8]
 80017bc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80017c0:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80017c2:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80017c4:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <ADC_ConfigureBoostMode+0x13c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80017cc:	d1df      	bne.n	800178e <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80017ce:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80017d2:	f003 f997 	bl	8004b04 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80017d6:	6863      	ldr	r3, [r4, #4]
 80017d8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80017dc:	d059      	beq.n	8001892 <ADC_ConfigureBoostMode+0x122>
 80017de:	d808      	bhi.n	80017f2 <ADC_ConfigureBoostMode+0x82>
 80017e0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80017e4:	d04b      	beq.n	800187e <ADC_ConfigureBoostMode+0x10e>
 80017e6:	d914      	bls.n	8001812 <ADC_ConfigureBoostMode+0xa2>
 80017e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017ec:	d1db      	bne.n	80017a6 <ADC_ConfigureBoostMode+0x36>
        freq /= 32UL;
 80017ee:	0940      	lsrs	r0, r0, #5
        break;
 80017f0:	e7d9      	b.n	80017a6 <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 80017f2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80017f6:	d032      	beq.n	800185e <ADC_ConfigureBoostMode+0xee>
 80017f8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80017fc:	d1d3      	bne.n	80017a6 <ADC_ConfigureBoostMode+0x36>
  if (freq <= 6250000UL)
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <ADC_ConfigureBoostMode+0x130>)
 8001800:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 8001804:	d31d      	bcc.n	8001842 <ADC_ConfigureBoostMode+0xd2>
 8001806:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001808:	6893      	ldr	r3, [r2, #8]
 800180a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800180e:	6093      	str	r3, [r2, #8]
}
 8001810:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 8001812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001816:	d006      	beq.n	8001826 <ADC_ConfigureBoostMode+0xb6>
 8001818:	d90a      	bls.n	8001830 <ADC_ConfigureBoostMode+0xc0>
 800181a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800181e:	d002      	beq.n	8001826 <ADC_ConfigureBoostMode+0xb6>
 8001820:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001824:	d1bf      	bne.n	80017a6 <ADC_ConfigureBoostMode+0x36>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001826:	0c9b      	lsrs	r3, r3, #18
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800182e:	e7ba      	b.n	80017a6 <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 8001830:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001834:	d0f7      	beq.n	8001826 <ADC_ConfigureBoostMode+0xb6>
 8001836:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800183a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800183e:	d0f2      	beq.n	8001826 <ADC_ConfigureBoostMode+0xb6>
 8001840:	e7b1      	b.n	80017a6 <ADC_ConfigureBoostMode+0x36>
 8001842:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001844:	6893      	ldr	r3, [r2, #8]
 8001846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800184a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184e:	6093      	str	r3, [r2, #8]
}
 8001850:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 8001852:	0880      	lsrs	r0, r0, #2
  if (freq <= 6250000UL)
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <ADC_ConfigureBoostMode+0x130>)
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001856:	6822      	ldr	r2, [r4, #0]
  if (freq <= 6250000UL)
 8001858:	4298      	cmp	r0, r3
 800185a:	d9d5      	bls.n	8001808 <ADC_ConfigureBoostMode+0x98>
 800185c:	e7a7      	b.n	80017ae <ADC_ConfigureBoostMode+0x3e>
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <ADC_ConfigureBoostMode+0x130>)
        freq /= 128UL;
 8001860:	09c2      	lsrs	r2, r0, #7
  if (freq <= 6250000UL)
 8001862:	ebb3 1fd0 	cmp.w	r3, r0, lsr #7
 8001866:	d2ce      	bcs.n	8001806 <ADC_ConfigureBoostMode+0x96>
  else if (freq <= 12500000UL)
 8001868:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <ADC_ConfigureBoostMode+0x134>)
 800186a:	429a      	cmp	r2, r3
 800186c:	d9e9      	bls.n	8001842 <ADC_ConfigureBoostMode+0xd2>
 800186e:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001870:	6893      	ldr	r3, [r2, #8]
 8001872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6093      	str	r3, [r2, #8]
}
 800187c:	bd10      	pop	{r4, pc}
        freq /= 16UL;
 800187e:	0900      	lsrs	r0, r0, #4
        break;
 8001880:	e791      	b.n	80017a6 <ADC_ConfigureBoostMode+0x36>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001882:	0c1b      	lsrs	r3, r3, #16
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001884:	6822      	ldr	r2, [r4, #0]
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001886:	fbb0 f0f3 	udiv	r0, r0, r3
  if (freq <= 6250000UL)
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <ADC_ConfigureBoostMode+0x130>)
 800188c:	4298      	cmp	r0, r3
 800188e:	d9bb      	bls.n	8001808 <ADC_ConfigureBoostMode+0x98>
 8001890:	e78d      	b.n	80017ae <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8001892:	0980      	lsrs	r0, r0, #6
        break;
 8001894:	e787      	b.n	80017a6 <ADC_ConfigureBoostMode+0x36>
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	58026300 	.word	0x58026300
 80018a0:	00bebc21 	.word	0x00bebc21
 80018a4:	017d7841 	.word	0x017d7841
 80018a8:	02faf081 	.word	0x02faf081
 80018ac:	40022300 	.word	0x40022300

080018b0 <HAL_ADC_Init>:
{
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80018b2:	2300      	movs	r3, #0
{
 80018b4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80018b6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d039      	beq.n	8001930 <HAL_ADC_Init+0x80>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018bc:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80018be:	4604      	mov	r4, r0
 80018c0:	2d00      	cmp	r5, #0
 80018c2:	f000 80a7 	beq.w	8001a14 <HAL_ADC_Init+0x164>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018c6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018c8:	6893      	ldr	r3, [r2, #8]
 80018ca:	009e      	lsls	r6, r3, #2
 80018cc:	d503      	bpl.n	80018d6 <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018ce:	6891      	ldr	r1, [r2, #8]
 80018d0:	4b94      	ldr	r3, [pc, #592]	@ (8001b24 <HAL_ADC_Init+0x274>)
 80018d2:	400b      	ands	r3, r1
 80018d4:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018d6:	6893      	ldr	r3, [r2, #8]
 80018d8:	00dd      	lsls	r5, r3, #3
 80018da:	d416      	bmi.n	800190a <HAL_ADC_Init+0x5a>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018dc:	4b92      	ldr	r3, [pc, #584]	@ (8001b28 <HAL_ADC_Init+0x278>)
 80018de:	4993      	ldr	r1, [pc, #588]	@ (8001b2c <HAL_ADC_Init+0x27c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80018e2:	6890      	ldr	r0, [r2, #8]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	fba1 1303 	umull	r1, r3, r1, r3
 80018ea:	4991      	ldr	r1, [pc, #580]	@ (8001b30 <HAL_ADC_Init+0x280>)
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	4001      	ands	r1, r0
 80018f0:	3301      	adds	r3, #1
 80018f2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80018f6:	6091      	str	r1, [r2, #8]
 80018f8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80018fa:	9b01      	ldr	r3, [sp, #4]
 80018fc:	b12b      	cbz	r3, 800190a <HAL_ADC_Init+0x5a>
      wait_loop_index--;
 80018fe:	9b01      	ldr	r3, [sp, #4]
 8001900:	3b01      	subs	r3, #1
 8001902:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001904:	9b01      	ldr	r3, [sp, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <HAL_ADC_Init+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800190a:	6893      	ldr	r3, [r2, #8]
 800190c:	00d8      	lsls	r0, r3, #3
 800190e:	d413      	bmi.n	8001938 <HAL_ADC_Init+0x88>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001910:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    tmp_hal_status = HAL_ERROR;
 8001912:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800191c:	432b      	orrs	r3, r5
 800191e:	6663      	str	r3, [r4, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001920:	6893      	ldr	r3, [r2, #8]
 8001922:	0759      	lsls	r1, r3, #29
 8001924:	d50c      	bpl.n	8001940 <HAL_ADC_Init+0x90>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001926:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001928:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_ERROR;
 8001930:	2501      	movs	r5, #1
}
 8001932:	4628      	mov	r0, r5
 8001934:	b003      	add	sp, #12
 8001936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001938:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193a:	2500      	movs	r5, #0
 800193c:	0759      	lsls	r1, r3, #29
 800193e:	d4f2      	bmi.n	8001926 <HAL_ADC_Init+0x76>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001940:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001942:	f011 0110 	ands.w	r1, r1, #16
 8001946:	d1ef      	bne.n	8001928 <HAL_ADC_Init+0x78>
    ADC_STATE_CLR_SET(hadc->State,
 8001948:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800194a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001954:	6893      	ldr	r3, [r2, #8]
 8001956:	07db      	lsls	r3, r3, #31
 8001958:	d562      	bpl.n	8001a20 <HAL_ADC_Init+0x170>
    if (hadc->Instance == ADC3)
 800195a:	4e76      	ldr	r6, [pc, #472]	@ (8001b34 <HAL_ADC_Init+0x284>)
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800195c:	f894 c019 	ldrb.w	ip, [r4, #25]
    if (hadc->Instance == ADC3)
 8001960:	42b2      	cmp	r2, r6
                  hadc->Init.Overrun                                                     |
 8001962:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001964:	68a0      	ldr	r0, [r4, #8]
    if (hadc->Instance == ADC3)
 8001966:	d076      	beq.n	8001a56 <HAL_ADC_Init+0x1a6>
                  hadc->Init.Overrun                                                    |
 8001968:	4303      	orrs	r3, r0
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800196a:	f894 0020 	ldrb.w	r0, [r4, #32]
                  hadc->Init.Overrun                                                    |
 800196e:	ea43 334c 	orr.w	r3, r3, ip, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001972:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001976:	2801      	cmp	r0, #1
 8001978:	d103      	bne.n	8001982 <HAL_ADC_Init+0xd2>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800197a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800197c:	3901      	subs	r1, #1
 800197e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001982:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001984:	b121      	cbz	r1, 8001990 <HAL_ADC_Init+0xe0>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001986:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800198a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800198c:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800198e:	430b      	orrs	r3, r1
    if (hadc->Instance == ADC3)
 8001990:	4968      	ldr	r1, [pc, #416]	@ (8001b34 <HAL_ADC_Init+0x284>)
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001992:	68d0      	ldr	r0, [r2, #12]
    if (hadc->Instance == ADC3)
 8001994:	428a      	cmp	r2, r1
 8001996:	d071      	beq.n	8001a7c <HAL_ADC_Init+0x1cc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001998:	4967      	ldr	r1, [pc, #412]	@ (8001b38 <HAL_ADC_Init+0x288>)
 800199a:	4001      	ands	r1, r0
 800199c:	4319      	orrs	r1, r3
 800199e:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019a0:	6893      	ldr	r3, [r2, #8]
 80019a2:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019a6:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019a8:	d124      	bne.n	80019f4 <HAL_ADC_Init+0x144>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019aa:	071b      	lsls	r3, r3, #28
 80019ac:	d422      	bmi.n	80019f4 <HAL_ADC_Init+0x144>
      if (hadc->Instance == ADC3)
 80019ae:	4b61      	ldr	r3, [pc, #388]	@ (8001b34 <HAL_ADC_Init+0x284>)
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019b0:	7e21      	ldrb	r1, [r4, #24]
      if (hadc->Instance == ADC3)
 80019b2:	429a      	cmp	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019b4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019b6:	ea4f 3181 	mov.w	r1, r1, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 80019ba:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019be:	68d7      	ldr	r7, [r2, #12]
      if (hadc->Instance == ADC3)
 80019c0:	f000 808b 	beq.w	8001ada <HAL_ADC_Init+0x22a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019c4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b3c <HAL_ADC_Init+0x28c>)
      if (hadc->Init.OversamplingMode == ENABLE)
 80019c6:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019c8:	ea03 0307 	and.w	r3, r3, r7
 80019cc:	ea43 0301 	orr.w	r3, r3, r1
 80019d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80019d2:	ea43 0301 	orr.w	r3, r3, r1
 80019d6:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80019d8:	d06f      	beq.n	8001aba <HAL_ADC_Init+0x20a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019da:	6913      	ldr	r3, [r2, #16]
 80019dc:	f023 0301 	bic.w	r3, r3, #1
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019e0:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019e2:	6913      	ldr	r3, [r2, #16]
 80019e4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80019e8:	4303      	orrs	r3, r0
        ADC_ConfigureBoostMode(hadc);
 80019ea:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019ec:	6113      	str	r3, [r2, #16]
        ADC_ConfigureBoostMode(hadc);
 80019ee:	f7ff febf 	bl	8001770 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019f2:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019f4:	6923      	ldr	r3, [r4, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d025      	beq.n	8001a46 <HAL_ADC_Init+0x196>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019fa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80019fc:	f023 030f 	bic.w	r3, r3, #15
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a02:	6e23      	ldr	r3, [r4, #96]	@ 0x60
}
 8001a04:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8001a10:	b003      	add	sp, #12
 8001a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8001a14:	f7ff f890 	bl	8000b38 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	6665      	str	r5, [r4, #100]	@ 0x64
    hadc->Lock = HAL_UNLOCKED;
 8001a1a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8001a1e:	e752      	b.n	80018c6 <HAL_ADC_Init+0x16>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a20:	4b47      	ldr	r3, [pc, #284]	@ (8001b40 <HAL_ADC_Init+0x290>)
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d035      	beq.n	8001a92 <HAL_ADC_Init+0x1e2>
 8001a26:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d031      	beq.n	8001a92 <HAL_ADC_Init+0x1e2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a2e:	4b41      	ldr	r3, [pc, #260]	@ (8001b34 <HAL_ADC_Init+0x284>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	07d8      	lsls	r0, r3, #31
 8001a34:	d491      	bmi.n	800195a <HAL_ADC_Init+0xaa>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a36:	4843      	ldr	r0, [pc, #268]	@ (8001b44 <HAL_ADC_Init+0x294>)
 8001a38:	6866      	ldr	r6, [r4, #4]
 8001a3a:	6883      	ldr	r3, [r0, #8]
 8001a3c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001a40:	4333      	orrs	r3, r6
 8001a42:	6083      	str	r3, [r0, #8]
}
 8001a44:	e789      	b.n	800195a <HAL_ADC_Init+0xaa>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a46:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001a48:	69e3      	ldr	r3, [r4, #28]
 8001a4a:	f021 010f 	bic.w	r1, r1, #15
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a54:	e7d5      	b.n	8001a02 <HAL_ADC_Init+0x152>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a56:	68e6      	ldr	r6, [r4, #12]
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001a58:	2808      	cmp	r0, #8
 8001a5a:	ea43 0306 	orr.w	r3, r3, r6
 8001a5e:	ea43 334c 	orr.w	r3, r3, ip, lsl #13
 8001a62:	d005      	beq.n	8001a70 <HAL_ADC_Init+0x1c0>
 8001a64:	380c      	subs	r0, #12
 8001a66:	2810      	cmp	r0, #16
 8001a68:	d802      	bhi.n	8001a70 <HAL_ADC_Init+0x1c0>
 8001a6a:	4937      	ldr	r1, [pc, #220]	@ (8001b48 <HAL_ADC_Init+0x298>)
 8001a6c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a70:	f894 0020 	ldrb.w	r0, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	e77c      	b.n	8001976 <HAL_ADC_Init+0xc6>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001a7c:	4933      	ldr	r1, [pc, #204]	@ (8001b4c <HAL_ADC_Init+0x29c>)
 8001a7e:	4001      	ands	r1, r0
 8001a80:	4319      	orrs	r1, r3
 8001a82:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a84:	6913      	ldr	r3, [r2, #16]
 8001a86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a88:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6113      	str	r3, [r2, #16]
 8001a90:	e786      	b.n	80019a0 <HAL_ADC_Init+0xf0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a92:	492b      	ldr	r1, [pc, #172]	@ (8001b40 <HAL_ADC_Init+0x290>)
 8001a94:	4b2e      	ldr	r3, [pc, #184]	@ (8001b50 <HAL_ADC_Init+0x2a0>)
 8001a96:	6889      	ldr	r1, [r1, #8]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	07df      	lsls	r7, r3, #31
 8001a9c:	d408      	bmi.n	8001ab0 <HAL_ADC_Init+0x200>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a9e:	07ce      	lsls	r6, r1, #31
 8001aa0:	d406      	bmi.n	8001ab0 <HAL_ADC_Init+0x200>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aa2:	492c      	ldr	r1, [pc, #176]	@ (8001b54 <HAL_ADC_Init+0x2a4>)
 8001aa4:	6860      	ldr	r0, [r4, #4]
 8001aa6:	688b      	ldr	r3, [r1, #8]
 8001aa8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001aac:	4303      	orrs	r3, r0
 8001aae:	608b      	str	r3, [r1, #8]
    if (hadc->Instance == ADC3)
 8001ab0:	f894 c019 	ldrb.w	ip, [r4, #25]
 8001ab4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001ab6:	68a0      	ldr	r0, [r4, #8]
 8001ab8:	e756      	b.n	8001968 <HAL_ADC_Init+0xb8>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001aba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001abc:	6916      	ldr	r6, [r2, #16]
 8001abe:	1e59      	subs	r1, r3, #1
 8001ac0:	e9d4 3713 	ldrd	r3, r7, [r4, #76]	@ 0x4c
 8001ac4:	433b      	orrs	r3, r7
 8001ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001aca:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001acc:	430b      	orrs	r3, r1
 8001ace:	4922      	ldr	r1, [pc, #136]	@ (8001b58 <HAL_ADC_Init+0x2a8>)
 8001ad0:	4031      	ands	r1, r6
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	e782      	b.n	80019e0 <HAL_ADC_Init+0x130>
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ada:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
      if (hadc->Init.OversamplingMode == ENABLE)
 8001ade:	2e01      	cmp	r6, #1
        tmpCFGR = (
 8001ae0:	ea41 0343 	orr.w	r3, r1, r3, lsl #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ae4:	4915      	ldr	r1, [pc, #84]	@ (8001b3c <HAL_ADC_Init+0x28c>)
 8001ae6:	ea01 0107 	and.w	r1, r1, r7
 8001aea:	ea43 0301 	orr.w	r3, r3, r1
 8001aee:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001af0:	d009      	beq.n	8001b06 <HAL_ADC_Init+0x256>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001af2:	6913      	ldr	r3, [r2, #16]
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001afa:	6913      	ldr	r3, [r2, #16]
 8001afc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b00:	4303      	orrs	r3, r0
 8001b02:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 8001b04:	e776      	b.n	80019f4 <HAL_ADC_Init+0x144>
          MODIFY_REG(hadc->Instance->CFGR2,
 8001b06:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001b08:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001b0a:	6916      	ldr	r6, [r2, #16]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	4913      	ldr	r1, [pc, #76]	@ (8001b5c <HAL_ADC_Init+0x2ac>)
 8001b10:	4031      	ands	r1, r6
 8001b12:	430b      	orrs	r3, r1
 8001b14:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001b16:	430b      	orrs	r3, r1
 8001b18:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	e7ea      	b.n	8001af8 <HAL_ADC_Init+0x248>
 8001b22:	bf00      	nop
 8001b24:	5fffffc0 	.word	0x5fffffc0
 8001b28:	24000004 	.word	0x24000004
 8001b2c:	053e2d63 	.word	0x053e2d63
 8001b30:	6fffffc0 	.word	0x6fffffc0
 8001b34:	58026000 	.word	0x58026000
 8001b38:	fff0c003 	.word	0xfff0c003
 8001b3c:	ffffbffc 	.word	0xffffbffc
 8001b40:	40022000 	.word	0x40022000
 8001b44:	58026300 	.word	0x58026300
 8001b48:	08015a28 	.word	0x08015a28
 8001b4c:	fff04007 	.word	0xfff04007
 8001b50:	40022100 	.word	0x40022100
 8001b54:	40022300 	.word	0x40022300
 8001b58:	fc00f81e 	.word	0xfc00f81e
 8001b5c:	fc00f81f 	.word	0xfc00f81f

08001b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001b60:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b62:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
{
 8001b66:	b09c      	sub	sp, #112	@ 0x70
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b68:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d038      	beq.n	8001be0 <HAL_ADCEx_MultiModeConfigChannel+0x80>
 8001b6e:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b70:	4d28      	ldr	r5, [pc, #160]	@ (8001c14 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001b72:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001b74:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b76:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001b78:	9218      	str	r2, [sp, #96]	@ 0x60
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b7a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8001b7c:	f883 005c 	strb.w	r0, [r3, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001b80:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b82:	d008      	beq.n	8001b96 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	6e19      	ldr	r1, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8a:	f041 0120 	orr.w	r1, r1, #32
 8001b8e:	6619      	str	r1, [r3, #96]	@ 0x60
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001b90:	b01c      	add	sp, #112	@ 0x70
 8001b92:	bcf0      	pop	{r4, r5, r6, r7}
 8001b94:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b96:	4a20      	ldr	r2, [pc, #128]	@ (8001c18 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8001b98:	6890      	ldr	r0, [r2, #8]
 8001b9a:	0740      	lsls	r0, r0, #29
 8001b9c:	d50b      	bpl.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b9e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    tmp_hal_status = HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	661a      	str	r2, [r3, #96]	@ 0x60
  __HAL_UNLOCK(hadc);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
}
 8001bb0:	b01c      	add	sp, #112	@ 0x70
 8001bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	68a0      	ldr	r0, [r4, #8]
 8001bb8:	0745      	lsls	r5, r0, #29
 8001bba:	d4f1      	bmi.n	8001ba0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bbc:	b9a6      	cbnz	r6, 8001be8 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001bbe:	4917      	ldr	r1, [pc, #92]	@ (8001c1c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8001bc0:	6888      	ldr	r0, [r1, #8]
 8001bc2:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8001bc6:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc8:	68a0      	ldr	r0, [r4, #8]
 8001bca:	6892      	ldr	r2, [r2, #8]
 8001bcc:	07d4      	lsls	r4, r2, #31
 8001bce:	d405      	bmi.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x7c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd0:	07c5      	lsls	r5, r0, #31
 8001bd2:	d403      	bmi.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001bd4:	6888      	ldr	r0, [r1, #8]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8001bd8:	4002      	ands	r2, r0
 8001bda:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e7e4      	b.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8001be0:	2002      	movs	r0, #2
}
 8001be2:	b01c      	add	sp, #112	@ 0x70
 8001be4:	bcf0      	pop	{r4, r5, r6, r7}
 8001be6:	4770      	bx	lr
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001be8:	4f0c      	ldr	r7, [pc, #48]	@ (8001c1c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8001bea:	684d      	ldr	r5, [r1, #4]
 8001bec:	68b8      	ldr	r0, [r7, #8]
 8001bee:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8001bf2:	4328      	orrs	r0, r5
 8001bf4:	60b8      	str	r0, [r7, #8]
 8001bf6:	68a0      	ldr	r0, [r4, #8]
 8001bf8:	6892      	ldr	r2, [r2, #8]
 8001bfa:	07d4      	lsls	r4, r2, #31
 8001bfc:	d4ee      	bmi.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x7c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bfe:	07c2      	lsls	r2, r0, #31
 8001c00:	d4ec      	bmi.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        MODIFY_REG(tmpADC_Common->CCR,
 8001c02:	688a      	ldr	r2, [r1, #8]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	4906      	ldr	r1, [pc, #24]	@ (8001c20 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8001c08:	4332      	orrs	r2, r6
 8001c0a:	4001      	ands	r1, r0
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	e7e4      	b.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40022100 	.word	0x40022100
 8001c1c:	40022300 	.word	0x40022300
 8001c20:	fffff0e0 	.word	0xfffff0e0

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4906      	ldr	r1, [pc, #24]	@ (8001c40 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c34:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001c3a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001c3c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00
 8001c44:	05fa0000 	.word	0x05fa0000

08001c48 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_NVIC_SetPriority+0x6c>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c52:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5a:	f1be 0f04 	cmp.w	lr, #4
 8001c5e:	bf28      	it	cs
 8001c60:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c64:	f1bc 0f06 	cmp.w	ip, #6
 8001c68:	d91a      	bls.n	8001ca0 <HAL_NVIC_SetPriority+0x58>
 8001c6a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	fa03 f30c 	lsl.w	r3, r3, ip
 8001c76:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	fa03 f30e 	lsl.w	r3, r3, lr
 8001c84:	ea21 0303 	bic.w	r3, r1, r3
 8001c88:	fa03 f30c 	lsl.w	r3, r3, ip
 8001c8c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001c94:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001c96:	db06      	blt.n	8001ca6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <HAL_NVIC_SetPriority+0x70>)
 8001c9a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	4694      	mov	ip, r2
 8001ca4:	e7e9      	b.n	8001c7a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	f000 000f 	and.w	r0, r0, #15
 8001caa:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <HAL_NVIC_SetPriority+0x74>)
 8001cac:	5413      	strb	r3, [r2, r0]
 8001cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00
 8001cb8:	e000e400 	.word	0xe000e400
 8001cbc:	e000ed14 	.word	0xe000ed14

08001cc0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	db07      	blt.n	8001cd4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f000 011f 	and.w	r1, r0, #31
 8001cca:	4a03      	ldr	r2, [pc, #12]	@ (8001cd8 <HAL_NVIC_EnableIRQ+0x18>)
 8001ccc:	0940      	lsrs	r0, r0, #5
 8001cce:	408b      	lsls	r3, r1
 8001cd0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001cdc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ce2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8001cec:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_MPU_Enable+0x1c>)
 8001cfa:	f040 0001 	orr.w	r0, r0, #1
 8001cfe:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d04:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d0e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d18:	4a17      	ldr	r2, [pc, #92]	@ (8001d78 <HAL_MPU_ConfigRegion+0x60>)
 8001d1a:	7843      	ldrb	r3, [r0, #1]
 8001d1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 8001d20:	7801      	ldrb	r1, [r0, #0]
 8001d22:	b321      	cbz	r1, 8001d6e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001d24:	6843      	ldr	r3, [r0, #4]
{
 8001d26:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001d28:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d2c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d2e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d32:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d34:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d38:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d3c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d40:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d42:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d44:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d48:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d4c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d50:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d54:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001d58:	7a01      	ldrb	r1, [r0, #8]
 8001d5a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001d5e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001d62:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d66:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001d6a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8001d6e:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 8001d72:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d7c:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d7e:	688b      	ldr	r3, [r1, #8]
 8001d80:	680d      	ldr	r5, [r1, #0]
 8001d82:	694c      	ldr	r4, [r1, #20]
 8001d84:	432b      	orrs	r3, r5
 8001d86:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d88:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d8c:	4323      	orrs	r3, r4
 8001d8e:	698c      	ldr	r4, [r1, #24]
 8001d90:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d92:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d96:	4323      	orrs	r3, r4
 8001d98:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d9a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d9e:	4d52      	ldr	r5, [pc, #328]	@ (8001ee8 <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001da0:	4323      	orrs	r3, r4
 8001da2:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8001da4:	4323      	orrs	r3, r4
 8001da6:	4c51      	ldr	r4, [pc, #324]	@ (8001eec <ETH_SetMACConfig+0x170>)
 8001da8:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001daa:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dac:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001dae:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001db0:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001db4:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001db6:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001dba:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dbc:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001dc0:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dc2:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 8001dc6:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dc8:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001dcc:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001dd2:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dd4:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001dd8:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dda:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001dde:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001de2:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001de6:	7c08      	ldrb	r0, [r1, #16]
 8001de8:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001df0:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001df2:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001df4:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001df8:	7f88      	ldrb	r0, [r1, #30]
 8001dfa:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001dfe:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001e02:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e04:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001e08:	f891 0020 	ldrb.w	r0, [r1, #32]
 8001e0c:	fab0 f080 	clz	r0, r0
 8001e10:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e12:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e16:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e18:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e1a:	6853      	ldr	r3, [r2, #4]
 8001e1c:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e1e:	f64f 750d 	movw	r5, #65293	@ 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e22:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001e26:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e2a:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001e2c:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e30:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001e34:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e38:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001e3c:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 8001e40:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e44:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001e48:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001e4e:	4828      	ldr	r0, [pc, #160]	@ (8001ef0 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e50:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001e52:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8001e54:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001e56:	4018      	ands	r0, r3
 8001e58:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8001e5a:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001e5c:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001e60:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001e64:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e66:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001e68:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 8001e6a:	402b      	ands	r3, r5
 8001e6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e70:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e74:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e76:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 8001e7a:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e7e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e82:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e84:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e88:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e8c:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e8e:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e92:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e96:	f020 0003 	bic.w	r0, r0, #3
 8001e9a:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e9c:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001ea0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001ea8:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 8001eac:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 8001eb0:	432b      	orrs	r3, r5
 8001eb2:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001eb6:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001eba:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ebe:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ec2:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ecc:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 8001ed0:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ed4:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ed8:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001eda:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8001ede:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ee0:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	c0f88000 	.word	0xc0f88000
 8001eec:	00048083 	.word	0x00048083
 8001ef0:	fffffef0 	.word	0xfffffef0

08001ef4 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ef4:	6803      	ldr	r3, [r0, #0]
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <ETH_SetDMAConfig+0x7c>)
 8001ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efc:	6808      	ldr	r0, [r1, #0]
{
 8001efe:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001f00:	681c      	ldr	r4, [r3, #0]
 8001f02:	4022      	ands	r2, r4
 8001f04:	4302      	orrs	r2, r0
 8001f06:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f08:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f0a:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f0c:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f0e:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f10:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001f14:	688c      	ldr	r4, [r1, #8]
 8001f16:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f18:	4c16      	ldr	r4, [pc, #88]	@ (8001f74 <ETH_SetDMAConfig+0x80>)
 8001f1a:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f1c:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f1e:	4322      	orrs	r2, r4
 8001f20:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f22:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f24:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f28:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f2c:	4812      	ldr	r0, [pc, #72]	@ (8001f78 <ETH_SetDMAConfig+0x84>)
 8001f2e:	4020      	ands	r0, r4
 8001f30:	4302      	orrs	r2, r0
 8001f32:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f36:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f38:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f3a:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f3c:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f40:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001f44:	690c      	ldr	r4, [r1, #16]
 8001f46:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f48:	4c0c      	ldr	r4, [pc, #48]	@ (8001f7c <ETH_SetDMAConfig+0x88>)
 8001f4a:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f4c:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f4e:	4322      	orrs	r2, r4
 8001f50:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f54:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f58:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f5a:	4909      	ldr	r1, [pc, #36]	@ (8001f80 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f5c:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f60:	4021      	ands	r1, r4
}
 8001f62:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f66:	430a      	orrs	r2, r1
 8001f68:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	ffff87fd 	.word	0xffff87fd
 8001f74:	ffff2ffe 	.word	0xffff2ffe
 8001f78:	fffec000 	.word	0xfffec000
 8001f7c:	ffc0efef 	.word	0xffc0efef
 8001f80:	7fc0ffff 	.word	0x7fc0ffff

08001f84 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f88:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 8001f8a:	4692      	mov	sl, r2
 8001f8c:	b085      	sub	sp, #20
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001f8e:	688e      	ldr	r6, [r1, #8]
 8001f90:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001f94:	f8de 3018 	ldr.w	r3, [lr, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	f2c0 8141 	blt.w	8002222 <ETH_Prepare_Tx_Descriptors+0x29e>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001fa0:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	f040 813c 	bne.w	8002222 <ETH_Prepare_Tx_Descriptors+0x29e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001faa:	680d      	ldr	r5, [r1, #0]
 8001fac:	f015 0c04 	ands.w	ip, r5, #4
 8001fb0:	d02a      	beq.n	8002008 <ETH_Prepare_Tx_Descriptors+0x84>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4fa9      	ldr	r7, [pc, #676]	@ (800225c <ETH_Prepare_Tx_Descriptors+0x2d8>)
 8001fb6:	4017      	ands	r7, r2
 8001fb8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8001fba:	4317      	orrs	r7, r2
 8001fbc:	60df      	str	r7, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8001fbe:	68da      	ldr	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001fc0:	6807      	ldr	r7, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8001fc2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fc6:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001fc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001fce:	663a      	str	r2, [r7, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8001fd0:	072a      	lsls	r2, r5, #28
 8001fd2:	d519      	bpl.n	8002008 <ETH_Prepare_Tx_Descriptors+0x84>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	fa1f f882 	uxth.w	r8, r2
 8001fda:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8001fdc:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001fe0:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001fe8:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	f422 2840 	bic.w	r8, r2, #786432	@ 0xc0000
 8001ff0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001ff2:	ea48 0202 	orr.w	r2, r8, r2
 8001ff6:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001ff8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001ffa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ffe:	667a      	str	r2, [r7, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002000:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002002:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002006:	653a      	str	r2, [r7, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002008:	f015 0810 	ands.w	r8, r5, #16
 800200c:	d009      	beq.n	8002022 <ETH_Prepare_Tx_Descriptors+0x9e>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4f93      	ldr	r7, [pc, #588]	@ (8002260 <ETH_Prepare_Tx_Descriptors+0x2dc>)
 8002012:	4017      	ands	r7, r2
 8002014:	698a      	ldr	r2, [r1, #24]
 8002016:	4317      	orrs	r7, r2
 8002018:	609f      	str	r7, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002020:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002022:	f015 0f14 	tst.w	r5, #20
 8002026:	f040 80c1 	bne.w	80021ac <ETH_Prepare_Tx_Descriptors+0x228>
 800202a:	2701      	movs	r7, #1
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800202c:	4622      	mov	r2, r4
 800202e:	9701      	str	r7, [sp, #4]
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002030:	6837      	ldr	r7, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002032:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8002260 <ETH_Prepare_Tx_Descriptors+0x2dc>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002036:	601f      	str	r7, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002038:	689f      	ldr	r7, [r3, #8]
 800203a:	ea07 0909 	and.w	r9, r7, r9
 800203e:	6877      	ldr	r7, [r6, #4]
 8002040:	ea49 0707 	orr.w	r7, r9, r7
 8002044:	609f      	str	r7, [r3, #8]

  if (txbuffer->next != NULL)
 8002046:	68b7      	ldr	r7, [r6, #8]
 8002048:	2f00      	cmp	r7, #0
 800204a:	f000 812d 	beq.w	80022a8 <ETH_Prepare_Tx_Descriptors+0x324>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800204e:	683e      	ldr	r6, [r7, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002050:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8002268 <ETH_Prepare_Tx_Descriptors+0x2e4>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002054:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002056:	689e      	ldr	r6, [r3, #8]
 8002058:	ea06 0909 	and.w	r9, r6, r9
 800205c:	687e      	ldr	r6, [r7, #4]
 800205e:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8002062:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002064:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002066:	f1b8 0f00 	cmp.w	r8, #0
 800206a:	f000 80dc 	beq.w	8002226 <ETH_Prepare_Tx_Descriptors+0x2a2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800206e:	6a0d      	ldr	r5, [r1, #32]
 8002070:	f426 06f0 	bic.w	r6, r6, #7864320	@ 0x780000
 8002074:	ea46 45c5 	orr.w	r5, r6, r5, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002078:	4e7a      	ldr	r6, [pc, #488]	@ (8002264 <ETH_Prepare_Tx_Descriptors+0x2e0>)
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800207a:	60dd      	str	r5, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800207c:	68dd      	ldr	r5, [r3, #12]
 800207e:	402e      	ands	r6, r5
 8002080:	69cd      	ldr	r5, [r1, #28]
 8002082:	432e      	orrs	r6, r5
 8002084:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002086:	68dd      	ldr	r5, [r3, #12]
 8002088:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 800208c:	60dd      	str	r5, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800208e:	f1bc 0f00 	cmp.w	ip, #0
 8002092:	d005      	beq.n	80020a0 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002094:	689e      	ldr	r6, [r3, #8]
 8002096:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8002098:	f426 4640 	bic.w	r6, r6, #49152	@ 0xc000
 800209c:	4335      	orrs	r5, r6
 800209e:	609d      	str	r5, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80020a0:	68dd      	ldr	r5, [r3, #12]
 80020a2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80020a6:	60dd      	str	r5, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80020a8:	68dd      	ldr	r5, [r3, #12]
 80020aa:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 80020ae:	60dd      	str	r5, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80020b0:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80020b4:	68dd      	ldr	r5, [r3, #12]
 80020b6:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 80020ba:	60dd      	str	r5, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80020bc:	680d      	ldr	r5, [r1, #0]
 80020be:	07ad      	lsls	r5, r5, #30
 80020c0:	d505      	bpl.n	80020ce <ETH_Prepare_Tx_Descriptors+0x14a>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80020c2:	68de      	ldr	r6, [r3, #12]
 80020c4:	68cd      	ldr	r5, [r1, #12]
 80020c6:	f026 7660 	bic.w	r6, r6, #58720256	@ 0x3800000
 80020ca:	4335      	orrs	r5, r6
 80020cc:	60dd      	str	r5, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80020ce:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80020d2:	f1b9 0f00 	cmp.w	r9, #0
 80020d6:	f000 80fd 	beq.w	80022d4 <ETH_Prepare_Tx_Descriptors+0x350>
 80020da:	2500      	movs	r5, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80020dc:	4f60      	ldr	r7, [pc, #384]	@ (8002260 <ETH_Prepare_Tx_Descriptors+0x2dc>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80020de:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002268 <ETH_Prepare_Tx_Descriptors+0x2e4>
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80020e2:	464e      	mov	r6, r9
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80020e4:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 800226c <ETH_Prepare_Tx_Descriptors+0x2e8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80020e8:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8002264 <ETH_Prepare_Tx_Descriptors+0x2e0>
 80020ec:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 80020f0:	e018      	b.n	8002124 <ETH_Prepare_Tx_Descriptors+0x1a0>
 80020f2:	ea06 090b 	and.w	r9, r6, fp
 80020f6:	69ce      	ldr	r6, [r1, #28]
 80020f8:	ea49 0606 	orr.w	r6, r9, r6
 80020fc:	60de      	str	r6, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80020fe:	68de      	ldr	r6, [r3, #12]
 8002100:	f446 2680 	orr.w	r6, r6, #262144	@ 0x40000
 8002104:	60de      	str	r6, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8002106:	3501      	adds	r5, #1
 8002108:	f3bf 8f5f 	dmb	sy
  while (txbuffer->next != NULL)
 800210c:	68a6      	ldr	r6, [r4, #8]

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800210e:	68dc      	ldr	r4, [r3, #12]
 8002110:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8002114:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002116:	68dc      	ldr	r4, [r3, #12]
 8002118:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 800211c:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 800211e:	2e00      	cmp	r6, #0
 8002120:	f000 80a6 	beq.w	8002270 <ETH_Prepare_Tx_Descriptors+0x2ec>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002124:	68dc      	ldr	r4, [r3, #12]
 8002126:	f024 5480 	bic.w	r4, r4, #268435456	@ 0x10000000
 800212a:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 800212c:	1c53      	adds	r3, r2, #1
 800212e:	2b03      	cmp	r3, #3
 8002130:	bf94      	ite	ls
 8002132:	461a      	movls	r2, r3
 8002134:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002136:	eb00 0982 	add.w	r9, r0, r2, lsl #2
 800213a:	f8d9 3018 	ldr.w	r3, [r9, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800213e:	68dc      	ldr	r4, [r3, #12]
 8002140:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8002144:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002146:	68dc      	ldr	r4, [r3, #12]
 8002148:	2c00      	cmp	r4, #0
 800214a:	db52      	blt.n	80021f2 <ETH_Prepare_Tx_Descriptors+0x26e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800214c:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8002150:	2c00      	cmp	r4, #0
 8002152:	d14e      	bne.n	80021f2 <ETH_Prepare_Tx_Descriptors+0x26e>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002154:	6834      	ldr	r4, [r6, #0]
 8002156:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002158:	689c      	ldr	r4, [r3, #8]
 800215a:	ea04 0907 	and.w	r9, r4, r7
 800215e:	6874      	ldr	r4, [r6, #4]
 8002160:	ea49 0404 	orr.w	r4, r9, r4
 8002164:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8002166:	68b4      	ldr	r4, [r6, #8]
 8002168:	2c00      	cmp	r4, #0
 800216a:	d03b      	beq.n	80021e4 <ETH_Prepare_Tx_Descriptors+0x260>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800216c:	6826      	ldr	r6, [r4, #0]
 800216e:	605e      	str	r6, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002170:	689e      	ldr	r6, [r3, #8]
 8002172:	ea06 090c 	and.w	r9, r6, ip
 8002176:	6866      	ldr	r6, [r4, #4]
 8002178:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 800217c:	609e      	str	r6, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800217e:	f8d1 a000 	ldr.w	sl, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002182:	68de      	ldr	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002184:	f01a 0f10 	tst.w	sl, #16
 8002188:	d1b3      	bne.n	80020f2 <ETH_Prepare_Tx_Descriptors+0x16e>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800218a:	ea06 0908 	and.w	r9, r6, r8
 800218e:	684e      	ldr	r6, [r1, #4]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002190:	f01a 0f01 	tst.w	sl, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002194:	ea49 0606 	orr.w	r6, r9, r6
 8002198:	60de      	str	r6, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800219a:	d0b4      	beq.n	8002106 <ETH_Prepare_Tx_Descriptors+0x182>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800219c:	68de      	ldr	r6, [r3, #12]
 800219e:	f426 3940 	bic.w	r9, r6, #196608	@ 0x30000
 80021a2:	694e      	ldr	r6, [r1, #20]
 80021a4:	ea49 0606 	orr.w	r6, r9, r6
 80021a8:	60de      	str	r6, [r3, #12]
 80021aa:	e7ac      	b.n	8002106 <ETH_Prepare_Tx_Descriptors+0x182>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80021be:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80021c0:	1c62      	adds	r2, r4, #1
 80021c2:	2a03      	cmp	r2, #3
 80021c4:	bf88      	it	hi
 80021c6:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021c8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80021cc:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80021ce:	68dd      	ldr	r5, [r3, #12]
 80021d0:	2d00      	cmp	r5, #0
 80021d2:	db76      	blt.n	80022c2 <ETH_Prepare_Tx_Descriptors+0x33e>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80021d4:	680d      	ldr	r5, [r1, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80021d6:	2702      	movs	r7, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80021d8:	f005 0810 	and.w	r8, r5, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80021dc:	f005 0c04 	and.w	ip, r5, #4
 80021e0:	9701      	str	r7, [sp, #4]
 80021e2:	e725      	b.n	8002030 <ETH_Prepare_Tx_Descriptors+0xac>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80021e4:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80021e6:	4634      	mov	r4, r6
 80021e8:	689e      	ldr	r6, [r3, #8]
 80021ea:	ea06 060c 	and.w	r6, r6, ip
 80021ee:	609e      	str	r6, [r3, #8]
 80021f0:	e7c5      	b.n	800217e <ETH_Prepare_Tx_Descriptors+0x1fa>
      for (idx = 0; idx < descnbr; idx ++)
 80021f2:	9b01      	ldr	r3, [sp, #4]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021f4:	9c02      	ldr	r4, [sp, #8]
      for (idx = 0; idx < descnbr; idx ++)
 80021f6:	195e      	adds	r6, r3, r5
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021f8:	f8de 2018 	ldr.w	r2, [lr, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80021fc:	d011      	beq.n	8002222 <ETH_Prepare_Tx_Descriptors+0x29e>
 80021fe:	2100      	movs	r1, #0
 8002200:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002204:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002206:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002208:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 800220a:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 800220c:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800220e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002212:	bf98      	it	ls
 8002214:	462c      	movls	r4, r5
 8002216:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8002218:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800221a:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800221e:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002220:	d1ee      	bne.n	8002200 <ETH_Prepare_Tx_Descriptors+0x27c>
    return HAL_ETH_ERROR_BUSY;
 8002222:	2002      	movs	r0, #2
 8002224:	e03d      	b.n	80022a2 <ETH_Prepare_Tx_Descriptors+0x31e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002226:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 800226c <ETH_Prepare_Tx_Descriptors+0x2e8>
 800222a:	ea06 0808 	and.w	r8, r6, r8
 800222e:	684e      	ldr	r6, [r1, #4]
 8002230:	ea48 0606 	orr.w	r6, r8, r6
 8002234:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002236:	07ee      	lsls	r6, r5, #31
 8002238:	d506      	bpl.n	8002248 <ETH_Prepare_Tx_Descriptors+0x2c4>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800223a:	68de      	ldr	r6, [r3, #12]
 800223c:	f426 3840 	bic.w	r8, r6, #196608	@ 0x30000
 8002240:	694e      	ldr	r6, [r1, #20]
 8002242:	ea48 0606 	orr.w	r6, r8, r6
 8002246:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002248:	06ae      	lsls	r6, r5, #26
 800224a:	f57f af20 	bpl.w	800208e <ETH_Prepare_Tx_Descriptors+0x10a>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800224e:	68de      	ldr	r6, [r3, #12]
 8002250:	690d      	ldr	r5, [r1, #16]
 8002252:	f026 6640 	bic.w	r6, r6, #201326592	@ 0xc000000
 8002256:	4335      	orrs	r5, r6
 8002258:	60dd      	str	r5, [r3, #12]
 800225a:	e718      	b.n	800208e <ETH_Prepare_Tx_Descriptors+0x10a>
 800225c:	ffff0000 	.word	0xffff0000
 8002260:	ffffc000 	.word	0xffffc000
 8002264:	fffc0000 	.word	0xfffc0000
 8002268:	c000ffff 	.word	0xc000ffff
 800226c:	ffff8000 	.word	0xffff8000
 8002270:	f8dd a00c 	ldr.w	sl, [sp, #12]
  }

  if (ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002274:	6899      	ldr	r1, [r3, #8]
  if (ItMode != ((uint32_t)RESET))
 8002276:	f1ba 0f00 	cmp.w	sl, #0
 800227a:	d01e      	beq.n	80022ba <ETH_Prepare_Tx_Descriptors+0x336>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800227c:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8002280:	6099      	str	r1, [r3, #8]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002282:	68d9      	ldr	r1, [r3, #12]
 8002284:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002288:	60d9      	str	r1, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800228a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800228e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002290:	62d9      	str	r1, [r3, #44]	@ 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 8002292:	6282      	str	r2, [r0, #40]	@ 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002296:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002298:	3301      	adds	r3, #1
 800229a:	442b      	add	r3, r5
 800229c:	6403      	str	r3, [r0, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800229e:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80022a0:	2000      	movs	r0, #0
}
 80022a2:	b005      	add	sp, #20
 80022a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80022a8:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80022aa:	4637      	mov	r7, r6
 80022ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80022b0:	4e09      	ldr	r6, [pc, #36]	@ (80022d8 <ETH_Prepare_Tx_Descriptors+0x354>)
 80022b2:	ea09 0606 	and.w	r6, r9, r6
 80022b6:	609e      	str	r6, [r3, #8]
 80022b8:	e6d4      	b.n	8002064 <ETH_Prepare_Tx_Descriptors+0xe0>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80022ba:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80022be:	6099      	str	r1, [r3, #8]
 80022c0:	e7df      	b.n	8002282 <ETH_Prepare_Tx_Descriptors+0x2fe>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80022c2:	f8de 2018 	ldr.w	r2, [lr, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80022c6:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80022ca:	68d3      	ldr	r3, [r2, #12]
 80022cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d0:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 80022d2:	e7a6      	b.n	8002222 <ETH_Prepare_Tx_Descriptors+0x29e>
  while (txbuffer->next != NULL)
 80022d4:	464d      	mov	r5, r9
 80022d6:	e7cd      	b.n	8002274 <ETH_Prepare_Tx_Descriptors+0x2f0>
 80022d8:	c000ffff 	.word	0xc000ffff

080022dc <ETH_UpdateDescriptor>:
{
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buff = NULL;
 80022de:	2300      	movs	r3, #0
{
 80022e0:	b083      	sub	sp, #12
 80022e2:	4605      	mov	r5, r0
  uint8_t *buff = NULL;
 80022e4:	9301      	str	r3, [sp, #4]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80022e6:	e9d0 761a 	ldrd	r7, r6, [r0, #104]	@ 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022ea:	f107 0312 	add.w	r3, r7, #18
 80022ee:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 80022f2:	b1ee      	cbz	r6, 8002330 <ETH_UpdateDescriptor+0x54>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80022f4:	6923      	ldr	r3, [r4, #16]
 80022f6:	b19b      	cbz	r3, 8002320 <ETH_UpdateDescriptor+0x44>
 80022f8:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 80022fc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80022fe:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002302:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8002306:	bb03      	cbnz	r3, 800234a <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002308:	60e2      	str	r2, [r4, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 800230a:	1c7b      	adds	r3, r7, #1
      desccount--;
 800230c:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 800230e:	2b03      	cmp	r3, #3
 8002310:	bf88      	it	hi
 8002312:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002314:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8002318:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800231a:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
      desccount--;
 800231e:	e7e8      	b.n	80022f2 <ETH_UpdateDescriptor+0x16>
      HAL_ETH_RxAllocateCallback(&buff);
 8002320:	a801      	add	r0, sp, #4
 8002322:	f003 ff0b 	bl	800613c <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8002326:	9b01      	ldr	r3, [sp, #4]
 8002328:	b113      	cbz	r3, 8002330 <ETH_UpdateDescriptor+0x54>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800232a:	6123      	str	r3, [r4, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800232c:	6023      	str	r3, [r4, #0]
    if (allocStatus != 0U)
 800232e:	e7e3      	b.n	80022f8 <ETH_UpdateDescriptor+0x1c>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002330:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002332:	42b3      	cmp	r3, r6
 8002334:	d007      	beq.n	8002346 <ETH_UpdateDescriptor+0x6a>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002342:	e9c5 761a 	strd	r7, r6, [r5, #104]	@ 0x68
}
 8002346:	b003      	add	sp, #12
 8002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800234a:	60e1      	str	r1, [r4, #12]
 800234c:	e7dd      	b.n	800230a <ETH_UpdateDescriptor+0x2e>
 800234e:	bf00      	nop

08002350 <HAL_ETH_Start_IT>:
{
 8002350:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002352:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002356:	2b10      	cmp	r3, #16
 8002358:	d001      	beq.n	800235e <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 800235a:	2001      	movs	r0, #1
}
 800235c:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800235e:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8002360:	2523      	movs	r5, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 8002362:	2201      	movs	r2, #1
 8002364:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8002366:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    heth->RxDescList.ItMode = 1U;
 800236a:	6582      	str	r2, [r0, #88]	@ 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800236c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002370:	4a1d      	ldr	r2, [pc, #116]	@ (80023e8 <HAL_ETH_Start_IT+0x98>)
 8002372:	430a      	orrs	r2, r1
 8002374:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002378:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_ETH_Start_IT+0x9c>)
 800237a:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800237e:	430a      	orrs	r2, r1
 8002380:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002384:	2304      	movs	r3, #4
 8002386:	66c3      	str	r3, [r0, #108]	@ 0x6c
    ETH_UpdateDescriptor(heth);
 8002388:	f7ff ffa8 	bl	80022dc <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800238c:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 800238e:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002390:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002392:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002396:	f041 0102 	orr.w	r1, r1, #2
 800239a:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800239c:	6811      	ldr	r1, [r2, #0]
 800239e:	f041 0101 	orr.w	r1, r1, #1
 80023a2:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80023a4:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	@ 0xd00
 80023a8:	f041 0101 	orr.w	r1, r1, #1
 80023ac:	f8c2 1d00 	str.w	r1, [r2, #3328]	@ 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80023b0:	f24d 02c1 	movw	r2, #53441	@ 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80023b4:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 80023b8:	f041 0101 	orr.w	r1, r1, #1
 80023bc:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80023c0:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 80023c4:	f041 0101 	orr.w	r1, r1, #1
 80023c8:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80023cc:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 80023d0:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 80023d4:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80023d8:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80023dc:	430a      	orrs	r2, r1
 80023de:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 80023e2:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 80023e6:	bd38      	pop	{r3, r4, r5, pc}
 80023e8:	0c020060 	.word	0x0c020060
 80023ec:	0c20c000 	.word	0x0c20c000

080023f0 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023f0:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80023f4:	2a23      	cmp	r2, #35	@ 0x23
 80023f6:	d001      	beq.n	80023fc <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
}
 80023fa:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80023fc:	4601      	mov	r1, r0
 80023fe:	4603      	mov	r3, r0
{
 8002400:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002402:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002406:	f103 0c54 	add.w	ip, r3, #84	@ 0x54
 800240a:	f851 2b44 	ldr.w	r2, [r1], #68
 800240e:	4c19      	ldr	r4, [pc, #100]	@ (8002474 <HAL_ETH_Stop_IT+0x84>)
 8002410:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8002414:	f8d0 5134 	ldr.w	r5, [r0, #308]	@ 0x134
 8002418:	402c      	ands	r4, r5
 800241a:	f8c0 4134 	str.w	r4, [r0, #308]	@ 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800241e:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
 8002422:	f024 0401 	bic.w	r4, r4, #1
 8002426:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800242a:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 800242e:	f024 0401 	bic.w	r4, r4, #1
 8002432:	f8c0 4108 	str.w	r4, [r0, #264]	@ 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002436:	6810      	ldr	r0, [r2, #0]
 8002438:	f020 0001 	bic.w	r0, r0, #1
 800243c:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800243e:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	@ 0xd00
 8002442:	f040 0001 	orr.w	r0, r0, #1
 8002446:	f8c2 0d00 	str.w	r0, [r2, #3328]	@ 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800244a:	6810      	ldr	r0, [r2, #0]
 800244c:	f020 0002 	bic.w	r0, r0, #2
 8002450:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002452:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002456:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002458:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800245a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800245e:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002460:	d1f7      	bne.n	8002452 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8002462:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8002464:	2110      	movs	r1, #16
    return HAL_OK;
 8002466:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8002468:	659a      	str	r2, [r3, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 800246a:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
}
 800246e:	bc30      	pop	{r4, r5}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	ffff2f3e 	.word	0xffff2f3e

08002478 <HAL_ETH_Transmit_IT>:
{
 8002478:	b510      	push	{r4, lr}
 800247a:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 800247c:	b321      	cbz	r1, 80024c8 <HAL_ETH_Transmit_IT+0x50>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800247e:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8002482:	2a23      	cmp	r2, #35	@ 0x23
 8002484:	d001      	beq.n	800248a <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8002486:	2001      	movs	r0, #1
}
 8002488:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800248a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800248c:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800248e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002490:	f7ff fd78 	bl	8001f84 <ETH_Prepare_Tx_Descriptors>
 8002494:	b130      	cbz	r0, 80024a4 <HAL_ETH_Transmit_IT+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002496:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 80024a2:	e7f0      	b.n	8002486 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 80024a4:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    return HAL_OK;
 80024aa:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024ac:	1c53      	adds	r3, r2, #1
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	bf88      	it	hi
 80024b2:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	1d99      	adds	r1, r3, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024b8:	62a3      	str	r3, [r4, #40]	@ 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80024ba:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 80024be:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80024c2:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
}
 80024c6:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024c8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 80024d4:	e7d7      	b.n	8002486 <HAL_ETH_Transmit_IT+0xe>
 80024d6:	bf00      	nop

080024d8 <HAL_ETH_ReadData>:
{
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	4604      	mov	r4, r0
 80024de:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 80024e0:	2900      	cmp	r1, #0
 80024e2:	d070      	beq.n	80025c6 <HAL_ETH_ReadData+0xee>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80024e4:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80024e8:	2b23      	cmp	r3, #35	@ 0x23
 80024ea:	d162      	bne.n	80025b2 <HAL_ETH_ReadData+0xda>
  descidx = heth->RxDescList.RxDescIdx;
 80024ec:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
 80024f0:	460f      	mov	r7, r1
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024f2:	f108 0312 	add.w	r3, r8, #18
 80024f6:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80024fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80024fc:	68e9      	ldr	r1, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80024fe:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8002502:	2900      	cmp	r1, #0
 8002504:	db6a      	blt.n	80025dc <HAL_ETH_ReadData+0x104>
 8002506:	f1bb 0f00 	cmp.w	fp, #0
 800250a:	d069      	beq.n	80025e0 <HAL_ETH_ReadData+0x108>
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800250c:	f100 0380 	add.w	r3, r0, #128	@ 0x80
  uint32_t desccnt = 0U;
 8002510:	f04f 0900 	mov.w	r9, #0
      dmarxdesc->BackupAddr0 = 0;
 8002514:	9703      	str	r7, [sp, #12]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	f100 037c 	add.w	r3, r0, #124	@ 0x7c
      dmarxdesc->BackupAddr0 = 0;
 800251c:	46ca      	mov	sl, r9
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	e003      	b.n	800252a <HAL_ETH_ReadData+0x52>
         && (rxdataready == 0U))
 8002522:	45cb      	cmp	fp, r9
 8002524:	d93d      	bls.n	80025a2 <HAL_ETH_ReadData+0xca>
 8002526:	2e00      	cmp	r6, #0
 8002528:	d13b      	bne.n	80025a2 <HAL_ETH_ReadData+0xca>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800252a:	68eb      	ldr	r3, [r5, #12]
 800252c:	0059      	lsls	r1, r3, #1
 800252e:	d503      	bpl.n	8002538 <HAL_ETH_ReadData+0x60>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002530:	686b      	ldr	r3, [r5, #4]
 8002532:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002538:	68eb      	ldr	r3, [r5, #12]
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	d401      	bmi.n	8002542 <HAL_ETH_ReadData+0x6a>
 800253e:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 8002540:	b1fe      	cbz	r6, 8002582 <HAL_ETH_ReadData+0xaa>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002542:	68eb      	ldr	r3, [r5, #12]
      bufflength = heth->Init.RxBuffLen;
 8002544:	6967      	ldr	r7, [r4, #20]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002546:	009b      	lsls	r3, r3, #2
        heth->RxDescList.RxDescCnt = 0;
 8002548:	bf48      	it	mi
 800254a:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800254e:	68ee      	ldr	r6, [r5, #12]
 8002550:	f016 5680 	ands.w	r6, r6, #268435456	@ 0x10000000
 8002554:	d007      	beq.n	8002566 <HAL_ETH_ReadData+0x8e>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002556:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 8002558:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800255a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800255c:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8002560:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002562:	68eb      	ldr	r3, [r5, #12]
 8002564:	6723      	str	r3, [r4, #112]	@ 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002566:	b2bb      	uxth	r3, r7
 8002568:	692a      	ldr	r2, [r5, #16]
 800256a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800256e:	f003 fe09 	bl	8006184 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8002572:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002574:	3301      	adds	r3, #1
 8002576:	6623      	str	r3, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002578:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800257a:	443b      	add	r3, r7
 800257c:	6663      	str	r3, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 800257e:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002582:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8002586:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 800258a:	2b03      	cmp	r3, #3
 800258c:	bf8c      	ite	hi
 800258e:	f1a8 0803 	subhi.w	r8, r8, #3
 8002592:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002594:	f108 0312 	add.w	r3, r8, #18
 8002598:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800259c:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 800259e:	2b00      	cmp	r3, #0
 80025a0:	dabf      	bge.n	8002522 <HAL_ETH_ReadData+0x4a>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80025a2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80025a4:	9f03      	ldr	r7, [sp, #12]
 80025a6:	444b      	add	r3, r9
 80025a8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80025aa:	b99b      	cbnz	r3, 80025d4 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 80025ac:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 80025b0:	b91e      	cbnz	r6, 80025ba <HAL_ETH_ReadData+0xe2>
    return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
}
 80025b4:	b005      	add	sp, #20
 80025b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 80025ba:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 80025bc:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 80025be:	603a      	str	r2, [r7, #0]
    return HAL_OK;
 80025c0:	4618      	mov	r0, r3
    heth->RxDescList.pRxStart = NULL;
 80025c2:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80025c4:	e7f6      	b.n	80025b4 <HAL_ETH_ReadData+0xdc>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025c6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 80025d2:	e7ee      	b.n	80025b2 <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff fe81 	bl	80022dc <ETH_UpdateDescriptor>
 80025da:	e7e7      	b.n	80025ac <HAL_ETH_ReadData+0xd4>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0e8      	beq.n	80025b2 <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 80025e0:	f7ff fe7c 	bl	80022dc <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 80025e4:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 80025e8:	e7e3      	b.n	80025b2 <HAL_ETH_ReadData+0xda>
 80025ea:	bf00      	nop

080025ec <HAL_ETH_ReleaseTxPacket>:
{
 80025ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80025f0:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80025f4:	b17d      	cbz	r5, 8002616 <HAL_ETH_ReleaseTxPacket+0x2a>
 80025f6:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 80025f8:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80025fa:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 80025fe:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002600:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002604:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002608:	b140      	cbz	r0, 800261c <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800260a:	68f3      	ldr	r3, [r6, #12]
 800260c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	da0a      	bge.n	800262c <HAL_ETH_ReleaseTxPacket+0x40>
}
 8002616:	2000      	movs	r0, #0
 8002618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800261c:	3401      	adds	r4, #1
 800261e:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002622:	2d00      	cmp	r5, #0
 8002624:	d1e9      	bne.n	80025fa <HAL_ETH_ReleaseTxPacket+0xe>
}
 8002626:	2000      	movs	r0, #0
 8002628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800262c:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800262e:	f003 fdd9 	bl	80061e4 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002632:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002636:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 800263a:	6435      	str	r5, [r6, #64]	@ 0x40
        dmatxdesclist->releaseIndex = idx;
 800263c:	6474      	str	r4, [r6, #68]	@ 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800263e:	2d00      	cmp	r5, #0
 8002640:	d1db      	bne.n	80025fa <HAL_ETH_ReleaseTxPacket+0xe>
 8002642:	e7f0      	b.n	8002626 <HAL_ETH_ReleaseTxPacket+0x3a>

08002644 <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <HAL_ETH_EEECallback>:
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8002656:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 800265a:	0649      	lsls	r1, r1, #25
{
 800265c:	b510      	push	{r4, lr}
 800265e:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002660:	d504      	bpl.n	800266c <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002662:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8002666:	0649      	lsls	r1, r1, #25
 8002668:	f100 808a 	bmi.w	8002780 <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800266c:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8002670:	07c8      	lsls	r0, r1, #31
 8002672:	d503      	bpl.n	800267c <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002674:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8002678:	07c9      	lsls	r1, r1, #31
 800267a:	d476      	bmi.n	800276a <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800267c:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8002680:	0448      	lsls	r0, r1, #17
 8002682:	d503      	bpl.n	800268c <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002684:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8002688:	0449      	lsls	r1, r1, #17
 800268a:	d41b      	bmi.n	80026c4 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 800268c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002690:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 8002694:	d133      	bne.n	80026fe <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002696:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800269a:	06d0      	lsls	r0, r2, #27
 800269c:	d447      	bmi.n	800272e <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800269e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80026a2:	0691      	lsls	r1, r2, #26
 80026a4:	d454      	bmi.n	8002750 <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026aa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80026ae:	0252      	lsls	r2, r2, #9
 80026b0:	d400      	bmi.n	80026b4 <HAL_ETH_IRQHandler+0x64>
}
 80026b2:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80026b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    HAL_ETH_WakeUpCallback(heth);
 80026b8:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80026ba:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 80026be:	f7ff ffc5 	bl	800264c <HAL_ETH_WakeUpCallback>
}
 80026c2:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80026c4:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80026d0:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
 80026d4:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80026d8:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80026dc:	d15a      	bne.n	8002794 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80026de:	f44f 41cd 	mov.w	r1, #26240	@ 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80026e2:	400b      	ands	r3, r1
 80026e4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80026e8:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
      HAL_ETH_ErrorCallback(heth);
 80026ec:	4620      	mov	r0, r4
 80026ee:	f003 fb7f 	bl	8005df0 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80026f8:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 80026fc:	d0cb      	beq.n	8002696 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80026fe:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002702:	21e0      	movs	r1, #224	@ 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002704:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002706:	f042 0210 	orr.w	r2, r2, #16
 800270a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800270e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002712:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002716:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 800271a:	f003 fb69 	bl	8005df0 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 800271e:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002720:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002722:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002726:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800272a:	06d0      	lsls	r0, r2, #27
 800272c:	d5b7      	bpl.n	800269e <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800272e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_PMTCallback(heth);
 8002732:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002734:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002738:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 800273c:	f7ff ff82 	bl	8002644 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002740:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002742:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002744:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002748:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800274c:	0691      	lsls	r1, r2, #26
 800274e:	d5aa      	bpl.n	80026a6 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002750:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_EEECallback(heth);
 8002754:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    HAL_ETH_EEECallback(heth);
 800275e:	f7ff ff73 	bl	8002648 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002762:	2300      	movs	r3, #0
 8002764:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8002768:	e79d      	b.n	80026a6 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800276a:	f248 0301 	movw	r3, #32769	@ 0x8001
      HAL_ETH_TxCpltCallback(heth);
 800276e:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002770:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_TxCpltCallback(heth);
 8002774:	f003 fb36 	bl	8005de4 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800277e:	e77d      	b.n	800267c <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002780:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002784:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_RxCpltCallback(heth);
 8002788:	f003 fb26 	bl	8005dd8 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8002792:	e76b      	b.n	800266c <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002794:	f241 1002 	movw	r0, #4354	@ 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8002798:	21e0      	movs	r1, #224	@ 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800279a:	4003      	ands	r3, r0
 800279c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80027a0:	f8d2 3134 	ldr.w	r3, [r2, #308]	@ 0x134
 80027a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80027a8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 80027ac:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80027b0:	e79c      	b.n	80026ec <HAL_ETH_IRQHandler+0x9c>
 80027b2:	bf00      	nop

080027b4 <HAL_ETH_ReadPHYRegister>:
{
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80027b8:	6800      	ldr	r0, [r0, #0]
{
 80027ba:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80027bc:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 80027c0:	07db      	lsls	r3, r3, #31
 80027c2:	d501      	bpl.n	80027c8 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 80027c4:	2001      	movs	r0, #1
}
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80027c8:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80027cc:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 80027d0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80027d4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027d8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80027dc:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80027e0:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  tickstart = HAL_GetTick();
 80027e4:	f7fe fcb4 	bl	8001150 <HAL_GetTick>
 80027e8:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80027ea:	e005      	b.n	80027f8 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80027ec:	f7fe fcb0 	bl	8001150 <HAL_GetTick>
 80027f0:	1b82      	subs	r2, r0, r6
 80027f2:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80027f6:	d8e5      	bhi.n	80027c4 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80027f8:	6821      	ldr	r1, [r4, #0]
 80027fa:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 80027fe:	f012 0201 	ands.w	r2, r2, #1
 8002802:	d1f3      	bne.n	80027ec <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002804:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
  return HAL_OK;
 8002808:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800280a:	b29b      	uxth	r3, r3
 800280c:	602b      	str	r3, [r5, #0]
}
 800280e:	bd70      	pop	{r4, r5, r6, pc}

08002810 <HAL_ETH_WritePHYRegister>:
{
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002814:	6800      	ldr	r0, [r0, #0]
 8002816:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 800281a:	07ed      	lsls	r5, r5, #31
 800281c:	d501      	bpl.n	8002822 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 800281e:	2001      	movs	r0, #1
}
 8002820:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002822:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002826:	b29d      	uxth	r5, r3
 8002828:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 800282c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002830:	490f      	ldr	r1, [pc, #60]	@ (8002870 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002832:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002836:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800283a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800283e:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002842:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002846:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
  tickstart = HAL_GetTick();
 800284a:	f7fe fc81 	bl	8001150 <HAL_GetTick>
 800284e:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002850:	e005      	b.n	800285e <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002852:	f7fe fc7d 	bl	8001150 <HAL_GetTick>
 8002856:	1b43      	subs	r3, r0, r5
 8002858:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800285c:	d8df      	bhi.n	800281e <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002864:	f013 0301 	ands.w	r3, r3, #1
 8002868:	d1f3      	bne.n	8002852 <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 800286a:	4618      	mov	r0, r3
}
 800286c:	bd38      	pop	{r3, r4, r5, pc}
 800286e:	bf00      	nop
 8002870:	40028000 	.word	0x40028000

08002874 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8002874:	2900      	cmp	r1, #0
 8002876:	f000 80c4 	beq.w	8002a02 <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800287a:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 800287c:	2000      	movs	r0, #0
{
 800287e:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002880:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002882:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002884:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002888:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800288c:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002890:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002892:	62cc      	str	r4, [r1, #44]	@ 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002894:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8002898:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 80028a0:	f3c2 2200 	ubfx	r2, r2, #8, #1
 80028a4:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80028a8:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 80028aa:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80028ae:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 80028b6:	f3c2 2280 	ubfx	r2, r2, #10, #1
 80028ba:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80028bc:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80028be:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80028c2:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80028ca:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80028cc:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80028ce:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80028d0:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80028d4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80028d8:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80028e2:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 80028ea:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80028ee:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80028f6:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 80028fa:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8002902:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800290a:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8002912:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002914:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002916:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800291a:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800291c:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800291e:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002920:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002924:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002928:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800292a:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800292c:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800292e:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002930:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002934:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002938:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800293a:	634a      	str	r2, [r1, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 8002942:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002946:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002950:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002954:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002956:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800295a:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800295e:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8002960:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002964:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002968:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800296a:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800296c:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002970:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002974:	63cc      	str	r4, [r1, #60]	@ 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002976:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800297a:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800297c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800297e:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002982:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002986:	644c      	str	r4, [r1, #68]	@ 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002988:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800298c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800298e:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8002992:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002996:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800299a:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800299c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800299e:	f004 0470 	and.w	r4, r4, #112	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80029a2:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80029a4:	650c      	str	r4, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80029a6:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80029a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80029ac:	f002 0201 	and.w	r2, r2, #1
 80029b0:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80029b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
                                      ? ENABLE : DISABLE;
 80029b8:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80029bc:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80029c0:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80029c4:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80029c8:	f004 0472 	and.w	r4, r4, #114	@ 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80029cc:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 80029d0:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029d4:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
}
 80029d8:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80029dc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029e0:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80029e4:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 80029e8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80029ec:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80029f4:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80029f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029fc:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
}
 8002a00:	4770      	bx	lr
    return HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002a08:	b131      	cbz	r1, 8002a18 <HAL_ETH_SetMACConfig+0x10>
{
 8002a0a:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002a0c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d003      	beq.n	8002a1c <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
}
 8002a16:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
}
 8002a1a:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002a1c:	f7ff f9ae 	bl	8001d7c <ETH_SetMACConfig>
    return HAL_OK;
 8002a20:	2000      	movs	r0, #0
}
 8002a22:	bd08      	pop	{r3, pc}

08002a24 <HAL_ETH_SetMDIOClockRange>:
{
 8002a24:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a26:	6803      	ldr	r3, [r0, #0]
{
 8002a28:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a2a:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8002a2e:	f000 fefd 	bl	800382c <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002a34:	4a15      	ldr	r2, [pc, #84]	@ (8002a8c <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a36:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002a3a:	4403      	add	r3, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d205      	bcs.n	8002a4c <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a40:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002a4c:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8002a4e:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_ETH_SetMDIOClockRange+0x70>)
 8002a50:	4403      	add	r3, r0
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d805      	bhi.n	8002a62 <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a56:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a5a:	682b      	ldr	r3, [r5, #0]
 8002a5c:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8002a60:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <HAL_ETH_SetMDIOClockRange+0x78>)
 8002a66:	4403      	add	r3, r0
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d3eb      	bcc.n	8002a44 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002a70:	4403      	add	r3, r0
 8002a72:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a74:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a76:	bf94      	ite	ls
 8002a78:	f444 7480 	orrls.w	r4, r4, #256	@ 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a7c:	f444 6480 	orrhi.w	r4, r4, #1024	@ 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a80:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8002a84:	bd38      	pop	{r3, r4, r5, pc}
 8002a86:	bf00      	nop
 8002a88:	feced300 	.word	0xfeced300
 8002a8c:	00e4e1c0 	.word	0x00e4e1c0
 8002a90:	fde9f140 	.word	0xfde9f140
 8002a94:	017d783f 	.word	0x017d783f
 8002a98:	fc6c7900 	.word	0xfc6c7900
 8002a9c:	02625a00 	.word	0x02625a00
 8002aa0:	fa0a1f00 	.word	0xfa0a1f00
 8002aa4:	02faf07f 	.word	0x02faf07f

08002aa8 <HAL_ETH_Init>:
  if (heth == NULL)
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f000 810b 	beq.w	8002cc4 <HAL_ETH_Init+0x21c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002aae:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8002ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	b0a5      	sub	sp, #148	@ 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80af 	beq.w	8002c1c <HAL_ETH_Init+0x174>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	4b82      	ldr	r3, [pc, #520]	@ (8002cc8 <HAL_ETH_Init+0x220>)
 8002ac0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002ac4:	f042 0202 	orr.w	r2, r2, #2
 8002ac8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002ad0:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002ada:	2800      	cmp	r0, #0
 8002adc:	f040 8094 	bne.w	8002c08 <HAL_ETH_Init+0x160>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002ae0:	f7fe fb3c 	bl	800115c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002ae4:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8002ae6:	4a79      	ldr	r2, [pc, #484]	@ (8002ccc <HAL_ETH_Init+0x224>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  (void)SYSCFG->PMCR;
 8002aec:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002af6:	f7fe fb2b 	bl	8001150 <HAL_GetTick>
 8002afa:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002afc:	e006      	b.n	8002b0c <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002afe:	f7fe fb27 	bl	8001150 <HAL_GetTick>
 8002b02:	1b80      	subs	r0, r0, r6
 8002b04:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8002b08:	f200 8081 	bhi.w	8002c0e <HAL_ETH_Init+0x166>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b12:	681c      	ldr	r4, [r3, #0]
 8002b14:	f014 0401 	ands.w	r4, r4, #1
 8002b18:	d1f1      	bne.n	8002afe <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8002b1a:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b1c:	2701      	movs	r7, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8002b1e:	f7ff ff81 	bl	8002a24 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b22:	f000 fe83 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8002b26:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_ETH_Init+0x228>)
 8002b28:	682e      	ldr	r6, [r5, #0]
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b2a:	a90b      	add	r1, sp, #44	@ 0x2c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b2c:	fba3 2300 	umull	r2, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b30:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b32:	9414      	str	r4, [sp, #80]	@ 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b34:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8002b36:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b3a:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b3e:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b40:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b42:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b46:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b4e:	940d      	str	r4, [sp, #52]	@ 0x34
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b50:	9311      	str	r3, [sp, #68]	@ 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b52:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b56:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b5a:	9318      	str	r3, [sp, #96]	@ 0x60
  macDefaultConf.LoopbackMode = DISABLE;
 8002b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b60:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
  macDefaultConf.LoopbackMode = DISABLE;
 8002b64:	9312      	str	r3, [sp, #72]	@ 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b66:	2320      	movs	r3, #32
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b68:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b6c:	9322      	str	r3, [sp, #136]	@ 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b6e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
  macDefaultConf.JumboPacket = DISABLE;
 8002b72:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b76:	930b      	str	r3, [sp, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002b7c:	941f      	str	r4, [sp, #124]	@ 0x7c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b7e:	9310      	str	r3, [sp, #64]	@ 0x40
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b80:	4b54      	ldr	r3, [pc, #336]	@ (8002cd4 <HAL_ETH_Init+0x22c>)
  macDefaultConf.PauseTime = 0x0;
 8002b82:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b84:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b86:	2302      	movs	r3, #2
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002b88:	9416      	str	r4, [sp, #88]	@ 0x58
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b8a:	9321      	str	r3, [sp, #132]	@ 0x84
  macDefaultConf.Watchdog = ENABLE;
 8002b8c:	f240 1301 	movw	r3, #257	@ 0x101
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002b90:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
  macDefaultConf.Watchdog = ENABLE;
 8002b94:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b98:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
  macDefaultConf.RetryTransmission = ENABLE;
 8002b9c:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ba0:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ba4:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002ba8:	941c      	str	r4, [sp, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002baa:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bae:	f7ff f8e5 	bl	8001d7c <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bb2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bb6:	a902      	add	r1, sp, #8
 8002bb8:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bba:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bbe:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bc0:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002bc2:	f44f 7306 	mov.w	r3, #536	@ 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bc6:	9704      	str	r7, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002bc8:	930a      	str	r3, [sp, #40]	@ 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002bca:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002bcc:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002bd0:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002bd4:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bd8:	f7ff f98c 	bl	8001ef4 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002bdc:	f506 5180 	add.w	r1, r6, #4096	@ 0x1000
 8002be0:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 8002be4:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002be8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bec:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002bf0:	696b      	ldr	r3, [r5, #20]
 8002bf2:	f013 0203 	ands.w	r2, r3, #3
 8002bf6:	d017      	beq.n	8002c28 <HAL_ETH_Init+0x180>
    heth->gState = HAL_ETH_STATE_ERROR;
 8002bf8:	23e0      	movs	r3, #224	@ 0xe0
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002bfa:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002bfe:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
    return HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
}
 8002c04:	b025      	add	sp, #148	@ 0x94
 8002c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002c08:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002c0c:	e768      	b.n	8002ae0 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c0e:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c10:	23e0      	movs	r3, #224	@ 0xe0
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c12:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c16:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
      return HAL_ERROR;
 8002c1a:	e7f2      	b.n	8002c02 <HAL_ETH_Init+0x15a>
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c1c:	2323      	movs	r3, #35	@ 0x23
 8002c1e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 8002c22:	f003 f9e3 	bl	8005fec <HAL_ETH_MspInit>
 8002c26:	e74a      	b.n	8002abe <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002c28:	f8d1 4108 	ldr.w	r4, [r1, #264]	@ 0x108
 8002c2c:	482a      	ldr	r0, [pc, #168]	@ (8002cd8 <HAL_ETH_Init+0x230>)
 8002c2e:	68ef      	ldr	r7, [r5, #12]
 8002c30:	4020      	ands	r0, r4
 8002c32:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8002c36:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8002c3a:	463b      	mov	r3, r7
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002c3c:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c40:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c4a:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c4c:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c50:	3318      	adds	r3, #24
 8002c52:	429c      	cmp	r4, r3
 8002c54:	d1f6      	bne.n	8002c44 <HAL_ETH_Init+0x19c>
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c56:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002c58:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8002c5a:	62aa      	str	r2, [r5, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002c5c:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 8002c60:	f8c1 312c 	str.w	r3, [r1, #300]	@ 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c64:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c66:	f8c1 7114 	str.w	r7, [r1, #276]	@ 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c6a:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c6c:	f8c1 7120 	str.w	r7, [r1, #288]	@ 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c70:	f105 0754 	add.w	r7, r5, #84	@ 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c76:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c78:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c7a:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c7e:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c80:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c84:	4287      	cmp	r7, r0
 8002c86:	f103 0318 	add.w	r3, r3, #24
 8002c8a:	d1f3      	bne.n	8002c74 <HAL_ETH_Init+0x1cc>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002c8c:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002c8e:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c90:	65aa      	str	r2, [r5, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c92:	e9c5 2217 	strd	r2, r2, [r5, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c96:	e9c5 221a 	strd	r2, r2, [r5, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002c9a:	f8c1 0130 	str.w	r0, [r1, #304]	@ 0x130
  return HAL_OK;
 8002c9e:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ca0:	f8c1 411c 	str.w	r4, [r1, #284]	@ 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002ca4:	3448      	adds	r4, #72	@ 0x48
 8002ca6:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002caa:	8899      	ldrh	r1, [r3, #4]
 8002cac:	f8c6 1300 	str.w	r1, [r6, #768]	@ 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8002cb0:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cb2:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cb4:	f8c6 3304 	str.w	r3, [r6, #772]	@ 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cb8:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cbc:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
}
 8002cc0:	b025      	add	sp, #148	@ 0x94
 8002cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
}
 8002cc6:	4770      	bx	lr
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58000400 	.word	0x58000400
 8002cd0:	431bde83 	.word	0x431bde83
 8002cd4:	01010000 	.word	0x01010000
 8002cd8:	ffff8001 	.word	0xffff8001

08002cdc <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002cdc:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ce8:	680c      	ldr	r4, [r1, #0]
{
 8002cea:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cec:	2c00      	cmp	r4, #0
 8002cee:	f000 80a0 	beq.w	8002e32 <HAL_GPIO_Init+0x14e>
  uint32_t position = 0x00U;
 8002cf2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cf4:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf8:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cfc:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cfe:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 8002d02:	ea1c 0a04 	ands.w	sl, ip, r4
 8002d06:	f000 808f 	beq.w	8002e28 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0a:	9900      	ldr	r1, [sp, #0]
 8002d0c:	005f      	lsls	r7, r3, #1
 8002d0e:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d10:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d12:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d16:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d1a:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d1e:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d20:	f1b8 0f01 	cmp.w	r8, #1
 8002d24:	f240 8088 	bls.w	8002e38 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d28:	2a03      	cmp	r2, #3
 8002d2a:	f040 80c6 	bne.w	8002eba <HAL_GPIO_Init+0x1d6>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d2e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8002d30:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d32:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d36:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3a:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002d3e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d40:	d072      	beq.n	8002e28 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	4e79      	ldr	r6, [pc, #484]	@ (8002f28 <HAL_GPIO_Init+0x244>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d44:	f003 0703 	and.w	r7, r3, #3
 8002d48:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d4e:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d50:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d54:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d58:	4974      	ldr	r1, [pc, #464]	@ (8002f2c <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 8002d5e:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 8002d62:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d66:	4288      	cmp	r0, r1
 8002d68:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6c:	f002 0202 	and.w	r2, r2, #2
 8002d70:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002d74:	9203      	str	r2, [sp, #12]
 8002d76:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d78:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d7a:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d7e:	d02c      	beq.n	8002dda <HAL_GPIO_Init+0xf6>
 8002d80:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002d84:	4288      	cmp	r0, r1
 8002d86:	f000 80ab 	beq.w	8002ee0 <HAL_GPIO_Init+0x1fc>
 8002d8a:	4969      	ldr	r1, [pc, #420]	@ (8002f30 <HAL_GPIO_Init+0x24c>)
 8002d8c:	4288      	cmp	r0, r1
 8002d8e:	f000 80ad 	beq.w	8002eec <HAL_GPIO_Init+0x208>
 8002d92:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8002f34 <HAL_GPIO_Init+0x250>
 8002d96:	4560      	cmp	r0, ip
 8002d98:	f000 809c 	beq.w	8002ed4 <HAL_GPIO_Init+0x1f0>
 8002d9c:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8002f38 <HAL_GPIO_Init+0x254>
 8002da0:	4560      	cmp	r0, ip
 8002da2:	f000 80af 	beq.w	8002f04 <HAL_GPIO_Init+0x220>
 8002da6:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8002f3c <HAL_GPIO_Init+0x258>
 8002daa:	4560      	cmp	r0, ip
 8002dac:	f000 80b0 	beq.w	8002f10 <HAL_GPIO_Init+0x22c>
 8002db0:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8002f40 <HAL_GPIO_Init+0x25c>
 8002db4:	4560      	cmp	r0, ip
 8002db6:	f000 809f 	beq.w	8002ef8 <HAL_GPIO_Init+0x214>
 8002dba:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002f44 <HAL_GPIO_Init+0x260>
 8002dbe:	4560      	cmp	r0, ip
 8002dc0:	f000 80ac 	beq.w	8002f1c <HAL_GPIO_Init+0x238>
 8002dc4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8002f48 <HAL_GPIO_Init+0x264>
 8002dc8:	4560      	cmp	r0, ip
 8002dca:	bf0c      	ite	eq
 8002dcc:	f04f 0c09 	moveq.w	ip, #9
 8002dd0:	f04f 0c0a 	movne.w	ip, #10
 8002dd4:	fa0c f707 	lsl.w	r7, ip, r7
 8002dd8:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dda:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ddc:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8002dde:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8002de2:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8002de6:	bf4c      	ite	mi
 8002de8:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8002dec:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dee:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8002df0:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8002df4:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8002df8:	bf54      	ite	pl
 8002dfa:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002dfc:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e00:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8002e02:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002e06:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002e0a:	bf54      	ite	pl
 8002e0c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002e0e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e12:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002e14:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002e18:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002e1c:	bf54      	ite	pl
 8002e1e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002e20:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e24:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8002e28:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e2a:	fa34 f203 	lsrs.w	r2, r4, r3
 8002e2e:	f47f af66 	bne.w	8002cfe <HAL_GPIO_Init+0x1a>
  }
}
 8002e32:	b005      	add	sp, #20
 8002e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e38:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8002e3c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e40:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e42:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e46:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4a:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4c:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e50:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8002e52:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e56:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002e5a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5e:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e62:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e66:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8002e6a:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6e:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8002e72:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e76:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7a:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002e7e:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e82:	f47f af54 	bne.w	8002d2e <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e86:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e8a:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8002e8c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e94:	6909      	ldr	r1, [r1, #16]
 8002e96:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002e9a:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8002e9e:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ea2:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ea4:	210f      	movs	r1, #15
 8002ea6:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eaa:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002eac:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eb0:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002eb4:	f8c8 c020 	str.w	ip, [r8, #32]
 8002eb8:	e739      	b.n	8002d2e <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eba:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8002ebc:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec0:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ec2:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec6:	fa01 fc07 	lsl.w	ip, r1, r7
 8002eca:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002ece:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed2:	e72c      	b.n	8002d2e <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ed4:	f04f 0c03 	mov.w	ip, #3
 8002ed8:	fa0c f707 	lsl.w	r7, ip, r7
 8002edc:	433a      	orrs	r2, r7
 8002ede:	e77c      	b.n	8002dda <HAL_GPIO_Init+0xf6>
 8002ee0:	f04f 0c01 	mov.w	ip, #1
 8002ee4:	fa0c f707 	lsl.w	r7, ip, r7
 8002ee8:	433a      	orrs	r2, r7
 8002eea:	e776      	b.n	8002dda <HAL_GPIO_Init+0xf6>
 8002eec:	f04f 0c02 	mov.w	ip, #2
 8002ef0:	fa0c f707 	lsl.w	r7, ip, r7
 8002ef4:	433a      	orrs	r2, r7
 8002ef6:	e770      	b.n	8002dda <HAL_GPIO_Init+0xf6>
 8002ef8:	f04f 0c06 	mov.w	ip, #6
 8002efc:	fa0c f707 	lsl.w	r7, ip, r7
 8002f00:	433a      	orrs	r2, r7
 8002f02:	e76a      	b.n	8002dda <HAL_GPIO_Init+0xf6>
 8002f04:	f04f 0c04 	mov.w	ip, #4
 8002f08:	fa0c f707 	lsl.w	r7, ip, r7
 8002f0c:	433a      	orrs	r2, r7
 8002f0e:	e764      	b.n	8002dda <HAL_GPIO_Init+0xf6>
 8002f10:	f04f 0c05 	mov.w	ip, #5
 8002f14:	fa0c f707 	lsl.w	r7, ip, r7
 8002f18:	433a      	orrs	r2, r7
 8002f1a:	e75e      	b.n	8002dda <HAL_GPIO_Init+0xf6>
 8002f1c:	f04f 0c07 	mov.w	ip, #7
 8002f20:	fa0c f707 	lsl.w	r7, ip, r7
 8002f24:	433a      	orrs	r2, r7
 8002f26:	e758      	b.n	8002dda <HAL_GPIO_Init+0xf6>
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	58020000 	.word	0x58020000
 8002f30:	58020800 	.word	0x58020800
 8002f34:	58020c00 	.word	0x58020c00
 8002f38:	58021000 	.word	0x58021000
 8002f3c:	58021400 	.word	0x58021400
 8002f40:	58021800 	.word	0x58021800
 8002f44:	58021c00 	.word	0x58021c00
 8002f48:	58022400 	.word	0x58022400

08002f4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f4c:	b902      	cbnz	r2, 8002f50 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f4e:	0409      	lsls	r1, r1, #16
 8002f50:	6181      	str	r1, [r0, #24]
  }
}
 8002f52:	4770      	bx	lr

08002f54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f54:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f56:	4c10      	ldr	r4, [pc, #64]	@ (8002f98 <HAL_PWREx_ConfigSupply+0x44>)
 8002f58:	68e3      	ldr	r3, [r4, #12]
 8002f5a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f5e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f60:	d105      	bne.n	8002f6e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	1a18      	subs	r0, r3, r0
 8002f68:	bf18      	it	ne
 8002f6a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002f6c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f6e:	f023 0307 	bic.w	r3, r3, #7
 8002f72:	4303      	orrs	r3, r0
 8002f74:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002f76:	f7fe f8eb 	bl	8001150 <HAL_GetTick>
 8002f7a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f7c:	e005      	b.n	8002f8a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f7e:	f7fe f8e7 	bl	8001150 <HAL_GetTick>
 8002f82:	1b40      	subs	r0, r0, r5
 8002f84:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002f88:	d804      	bhi.n	8002f94 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f8a:	6863      	ldr	r3, [r4, #4]
 8002f8c:	049b      	lsls	r3, r3, #18
 8002f8e:	d5f6      	bpl.n	8002f7e <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8002f90:	2000      	movs	r0, #0
}
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002f94:	2001      	movs	r0, #1
}
 8002f96:	bd38      	pop	{r3, r4, r5, pc}
 8002f98:	58024800 	.word	0x58024800

08002f9c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f9c:	4b33      	ldr	r3, [pc, #204]	@ (800306c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002f9e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fa0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002fa2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fa4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8002fa6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002fac:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8002fb0:	d036      	beq.n	8003020 <HAL_RCC_GetSysClockFreq.part.0+0x84>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002fb2:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fb6:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fba:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fbe:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002fc2:	fb05 f202 	mul.w	r2, r5, r2
 8002fc6:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fcc:	ee06 2a90 	vmov	s13, r2
 8002fd0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8002fd4:	d002      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8002fd6:	2902      	cmp	r1, #2
 8002fd8:	d042      	beq.n	8003060 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8002fda:	b319      	cbz	r1, 8003024 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fdc:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003070 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002fe0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002ffe:	ee67 7a86 	vmul.f32	s15, s15, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800300a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800300c:	ee07 3a10 	vmov	s14, r3
 8003010:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003014:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003018:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800301c:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003020:	bc30      	pop	{r4, r5}
 8003022:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	0692      	lsls	r2, r2, #26
 8003028:	d51d      	bpl.n	8003066 <HAL_RCC_GetSysClockFreq.part.0+0xca>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800302a:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800302c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003030:	4a10      	ldr	r2, [pc, #64]	@ (8003074 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003034:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003038:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800303c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	ee06 2a10 	vmov	s12, r2
 8003046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800304e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003052:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8003056:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800305a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305e:	e7d0      	b.n	8003002 <HAL_RCC_GetSysClockFreq.part.0+0x66>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003060:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003078 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8003064:	e7bc      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003066:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800307c <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800306a:	e7b9      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800306c:	58024400 	.word	0x58024400
 8003070:	4a742400 	.word	0x4a742400
 8003074:	03d09000 	.word	0x03d09000
 8003078:	4af42400 	.word	0x4af42400
 800307c:	4c742400 	.word	0x4c742400

08003080 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003080:	2800      	cmp	r0, #0
 8003082:	f000 827f 	beq.w	8003584 <HAL_RCC_OscConfig+0x504>
{
 8003086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003088:	6803      	ldr	r3, [r0, #0]
 800308a:	4604      	mov	r4, r0
 800308c:	07d9      	lsls	r1, r3, #31
 800308e:	d52e      	bpl.n	80030ee <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003090:	4993      	ldr	r1, [pc, #588]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 8003092:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003094:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800309a:	2a10      	cmp	r2, #16
 800309c:	f000 80f0 	beq.w	8003280 <HAL_RCC_OscConfig+0x200>
 80030a0:	2a18      	cmp	r2, #24
 80030a2:	f000 80e8 	beq.w	8003276 <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	6863      	ldr	r3, [r4, #4]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ac:	f000 8108 	beq.w	80032c0 <HAL_RCC_OscConfig+0x240>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8146 	beq.w	8003342 <HAL_RCC_OscConfig+0x2c2>
 80030b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ba:	4b89      	ldr	r3, [pc, #548]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f000 8232 	beq.w	8003526 <HAL_RCC_OscConfig+0x4a6>
 80030c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030d0:	f7fe f83e 	bl	8001150 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030d4:	4e82      	ldr	r6, [pc, #520]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80030d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030d8:	e005      	b.n	80030e6 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030da:	f7fe f839 	bl	8001150 <HAL_GetTick>
 80030de:	1b40      	subs	r0, r0, r5
 80030e0:	2864      	cmp	r0, #100	@ 0x64
 80030e2:	f200 812c 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030e6:	6833      	ldr	r3, [r6, #0]
 80030e8:	039b      	lsls	r3, r3, #14
 80030ea:	d5f6      	bpl.n	80030da <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	079d      	lsls	r5, r3, #30
 80030f0:	d47e      	bmi.n	80031f0 <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030f2:	06d9      	lsls	r1, r3, #27
 80030f4:	d528      	bpl.n	8003148 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f6:	497a      	ldr	r1, [pc, #488]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 80030f8:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003100:	2a08      	cmp	r2, #8
 8003102:	f000 80cd 	beq.w	80032a0 <HAL_RCC_OscConfig+0x220>
 8003106:	2a18      	cmp	r2, #24
 8003108:	f000 80c5 	beq.w	8003296 <HAL_RCC_OscConfig+0x216>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800310c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800310e:	4d74      	ldr	r5, [pc, #464]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 814e 	beq.w	80033b2 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8003116:	682b      	ldr	r3, [r5, #0]
 8003118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800311e:	f7fe f817 	bl	8001150 <HAL_GetTick>
 8003122:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003124:	e005      	b.n	8003132 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003126:	f7fe f813 	bl	8001150 <HAL_GetTick>
 800312a:	1b80      	subs	r0, r0, r6
 800312c:	2802      	cmp	r0, #2
 800312e:	f200 8106 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003132:	682b      	ldr	r3, [r5, #0]
 8003134:	05db      	lsls	r3, r3, #23
 8003136:	d5f6      	bpl.n	8003126 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003138:	68eb      	ldr	r3, [r5, #12]
 800313a:	6a22      	ldr	r2, [r4, #32]
 800313c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003140:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003144:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	071d      	lsls	r5, r3, #28
 800314a:	d516      	bpl.n	800317a <HAL_RCC_OscConfig+0xfa>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800314c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800314e:	4d64      	ldr	r5, [pc, #400]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 810c 	beq.w	800336e <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8003156:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800315e:	f7fd fff7 	bl	8001150 <HAL_GetTick>
 8003162:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003164:	e005      	b.n	8003172 <HAL_RCC_OscConfig+0xf2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003166:	f7fd fff3 	bl	8001150 <HAL_GetTick>
 800316a:	1b80      	subs	r0, r0, r6
 800316c:	2802      	cmp	r0, #2
 800316e:	f200 80e6 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003172:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003174:	0798      	lsls	r0, r3, #30
 8003176:	d5f6      	bpl.n	8003166 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	069a      	lsls	r2, r3, #26
 800317c:	d516      	bpl.n	80031ac <HAL_RCC_OscConfig+0x12c>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800317e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003180:	4d57      	ldr	r5, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8104 	beq.w	8003390 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800318e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003190:	f7fd ffde 	bl	8001150 <HAL_GetTick>
 8003194:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003196:	e005      	b.n	80031a4 <HAL_RCC_OscConfig+0x124>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003198:	f7fd ffda 	bl	8001150 <HAL_GetTick>
 800319c:	1b80      	subs	r0, r0, r6
 800319e:	2802      	cmp	r0, #2
 80031a0:	f200 80cd 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	049f      	lsls	r7, r3, #18
 80031a8:	d5f6      	bpl.n	8003198 <HAL_RCC_OscConfig+0x118>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	0759      	lsls	r1, r3, #29
 80031ae:	f100 808d 	bmi.w	80032cc <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80031b4:	b1d2      	cbz	r2, 80031ec <HAL_RCC_OscConfig+0x16c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031b6:	4d4a      	ldr	r5, [pc, #296]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 80031b8:	692b      	ldr	r3, [r5, #16]
 80031ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031be:	2b18      	cmp	r3, #24
 80031c0:	f000 8183 	beq.w	80034ca <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_PLL_DISABLE();
 80031c4:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80031c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031cc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	f000 8117 	beq.w	8003400 <HAL_RCC_OscConfig+0x380>
        tickstart = HAL_GetTick();
 80031d2:	f7fd ffbd 	bl	8001150 <HAL_GetTick>
 80031d6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d8:	e005      	b.n	80031e6 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7fd ffb9 	bl	8001150 <HAL_GetTick>
 80031de:	1b00      	subs	r0, r0, r4
 80031e0:	2802      	cmp	r0, #2
 80031e2:	f200 80ac 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	019b      	lsls	r3, r3, #6
 80031ea:	d4f6      	bmi.n	80031da <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 80031ec:	2000      	movs	r0, #0
}
 80031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f0:	4a3b      	ldr	r2, [pc, #236]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 80031f2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031f6:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80031fa:	d122      	bne.n	8003242 <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031fc:	4b38      	ldr	r3, [pc, #224]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031fe:	68e2      	ldr	r2, [r4, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0759      	lsls	r1, r3, #29
 8003204:	d501      	bpl.n	800320a <HAL_RCC_OscConfig+0x18a>
 8003206:	2a00      	cmp	r2, #0
 8003208:	d043      	beq.n	8003292 <HAL_RCC_OscConfig+0x212>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800320a:	4d35      	ldr	r5, [pc, #212]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	f023 0319 	bic.w	r3, r3, #25
 8003212:	4313      	orrs	r3, r2
 8003214:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8003216:	f7fd ff9b 	bl	8001150 <HAL_GetTick>
 800321a:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800321c:	e005      	b.n	800322a <HAL_RCC_OscConfig+0x1aa>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321e:	f7fd ff97 	bl	8001150 <HAL_GetTick>
 8003222:	1b80      	subs	r0, r0, r6
 8003224:	2802      	cmp	r0, #2
 8003226:	f200 808a 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800322a:	682b      	ldr	r3, [r5, #0]
 800322c:	075b      	lsls	r3, r3, #29
 800322e:	d5f6      	bpl.n	800321e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	686b      	ldr	r3, [r5, #4]
 8003232:	6922      	ldr	r2, [r4, #16]
 8003234:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800323c:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	e757      	b.n	80030f2 <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003242:	2b18      	cmp	r3, #24
 8003244:	f000 80d8 	beq.w	80033f8 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003248:	4d25      	ldr	r5, [pc, #148]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800324a:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800324c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800324e:	2a00      	cmp	r2, #0
 8003250:	f000 80c1 	beq.w	80033d6 <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003254:	f023 0319 	bic.w	r3, r3, #25
 8003258:	4313      	orrs	r3, r2
 800325a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800325c:	f7fd ff78 	bl	8001150 <HAL_GetTick>
 8003260:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003262:	e004      	b.n	800326e <HAL_RCC_OscConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003264:	f7fd ff74 	bl	8001150 <HAL_GetTick>
 8003268:	1b80      	subs	r0, r0, r6
 800326a:	2802      	cmp	r0, #2
 800326c:	d867      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	075f      	lsls	r7, r3, #29
 8003272:	d5f7      	bpl.n	8003264 <HAL_RCC_OscConfig+0x1e4>
 8003274:	e7dc      	b.n	8003230 <HAL_RCC_OscConfig+0x1b0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003276:	f001 0103 	and.w	r1, r1, #3
 800327a:	2902      	cmp	r1, #2
 800327c:	f47f af13 	bne.w	80030a6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	4a17      	ldr	r2, [pc, #92]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	0392      	lsls	r2, r2, #14
 8003286:	f57f af32 	bpl.w	80030ee <HAL_RCC_OscConfig+0x6e>
 800328a:	6862      	ldr	r2, [r4, #4]
 800328c:	2a00      	cmp	r2, #0
 800328e:	f47f af2e 	bne.w	80030ee <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8003292:	2001      	movs	r0, #1
}
 8003294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003296:	f001 0103 	and.w	r1, r1, #3
 800329a:	2901      	cmp	r1, #1
 800329c:	f47f af36 	bne.w	800310c <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032a0:	4a0f      	ldr	r2, [pc, #60]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	05d2      	lsls	r2, r2, #23
 80032a6:	d502      	bpl.n	80032ae <HAL_RCC_OscConfig+0x22e>
 80032a8:	69e2      	ldr	r2, [r4, #28]
 80032aa:	2a80      	cmp	r2, #128	@ 0x80
 80032ac:	d1f1      	bne.n	8003292 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032ae:	490c      	ldr	r1, [pc, #48]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 80032b0:	6a20      	ldr	r0, [r4, #32]
 80032b2:	68ca      	ldr	r2, [r1, #12]
 80032b4:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 80032b8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80032bc:	60ca      	str	r2, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032be:	e743      	b.n	8003148 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	4a07      	ldr	r2, [pc, #28]	@ (80032e0 <HAL_RCC_OscConfig+0x260>)
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ca:	e701      	b.n	80030d0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80032cc:	4d05      	ldr	r5, [pc, #20]	@ (80032e4 <HAL_RCC_OscConfig+0x264>)
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80032d6:	f7fd ff3b 	bl	8001150 <HAL_GetTick>
 80032da:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032dc:	e009      	b.n	80032f2 <HAL_RCC_OscConfig+0x272>
 80032de:	bf00      	nop
 80032e0:	58024400 	.word	0x58024400
 80032e4:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032e8:	f7fd ff32 	bl	8001150 <HAL_GetTick>
 80032ec:	1b80      	subs	r0, r0, r6
 80032ee:	2864      	cmp	r0, #100	@ 0x64
 80032f0:	d825      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	05da      	lsls	r2, r3, #23
 80032f6:	d5f7      	bpl.n	80032e8 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	68a3      	ldr	r3, [r4, #8]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f000 8134 	beq.w	8003568 <HAL_RCC_OscConfig+0x4e8>
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8118 	beq.w	8003536 <HAL_RCC_OscConfig+0x4b6>
 8003306:	2b05      	cmp	r3, #5
 8003308:	4b9f      	ldr	r3, [pc, #636]	@ (8003588 <HAL_RCC_OscConfig+0x508>)
 800330a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800330c:	f000 8132 	beq.w	8003574 <HAL_RCC_OscConfig+0x4f4>
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	671a      	str	r2, [r3, #112]	@ 0x70
 8003316:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003318:	f022 0204 	bic.w	r2, r2, #4
 800331c:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800331e:	f7fd ff17 	bl	8001150 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003322:	4e99      	ldr	r6, [pc, #612]	@ (8003588 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003328:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800332a:	e004      	b.n	8003336 <HAL_RCC_OscConfig+0x2b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fd ff10 	bl	8001150 <HAL_GetTick>
 8003330:	1b40      	subs	r0, r0, r5
 8003332:	42b8      	cmp	r0, r7
 8003334:	d803      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003336:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003338:	079b      	lsls	r3, r3, #30
 800333a:	d5f7      	bpl.n	800332c <HAL_RCC_OscConfig+0x2ac>
 800333c:	e739      	b.n	80031b2 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 800333e:	2003      	movs	r0, #3
}
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003342:	4d91      	ldr	r5, [pc, #580]	@ (8003588 <HAL_RCC_OscConfig+0x508>)
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003352:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003354:	f7fd fefc 	bl	8001150 <HAL_GetTick>
 8003358:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800335a:	e004      	b.n	8003366 <HAL_RCC_OscConfig+0x2e6>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fd fef8 	bl	8001150 <HAL_GetTick>
 8003360:	1b80      	subs	r0, r0, r6
 8003362:	2864      	cmp	r0, #100	@ 0x64
 8003364:	d8eb      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	039f      	lsls	r7, r3, #14
 800336a:	d4f7      	bmi.n	800335c <HAL_RCC_OscConfig+0x2dc>
 800336c:	e6be      	b.n	80030ec <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800336e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003376:	f7fd feeb 	bl	8001150 <HAL_GetTick>
 800337a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800337c:	e004      	b.n	8003388 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337e:	f7fd fee7 	bl	8001150 <HAL_GetTick>
 8003382:	1b80      	subs	r0, r0, r6
 8003384:	2802      	cmp	r0, #2
 8003386:	d8da      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003388:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800338a:	0799      	lsls	r1, r3, #30
 800338c:	d4f7      	bmi.n	800337e <HAL_RCC_OscConfig+0x2fe>
 800338e:	e6f3      	b.n	8003178 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8003390:	682b      	ldr	r3, [r5, #0]
 8003392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003396:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003398:	f7fd feda 	bl	8001150 <HAL_GetTick>
 800339c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800339e:	e004      	b.n	80033aa <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033a0:	f7fd fed6 	bl	8001150 <HAL_GetTick>
 80033a4:	1b80      	subs	r0, r0, r6
 80033a6:	2802      	cmp	r0, #2
 80033a8:	d8c9      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033aa:	682b      	ldr	r3, [r5, #0]
 80033ac:	0498      	lsls	r0, r3, #18
 80033ae:	d4f7      	bmi.n	80033a0 <HAL_RCC_OscConfig+0x320>
 80033b0:	e6fb      	b.n	80031aa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033ba:	f7fd fec9 	bl	8001150 <HAL_GetTick>
 80033be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033c0:	e004      	b.n	80033cc <HAL_RCC_OscConfig+0x34c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033c2:	f7fd fec5 	bl	8001150 <HAL_GetTick>
 80033c6:	1b80      	subs	r0, r0, r6
 80033c8:	2802      	cmp	r0, #2
 80033ca:	d8b8      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	05df      	lsls	r7, r3, #23
 80033d0:	d4f7      	bmi.n	80033c2 <HAL_RCC_OscConfig+0x342>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	e6b8      	b.n	8003148 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033dc:	f7fd feb8 	bl	8001150 <HAL_GetTick>
 80033e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033e2:	e004      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fd feb4 	bl	8001150 <HAL_GetTick>
 80033e8:	1b80      	subs	r0, r0, r6
 80033ea:	2802      	cmp	r0, #2
 80033ec:	d8a7      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	0758      	lsls	r0, r3, #29
 80033f2:	d4f7      	bmi.n	80033e4 <HAL_RCC_OscConfig+0x364>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	e67c      	b.n	80030f2 <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033f8:	0790      	lsls	r0, r2, #30
 80033fa:	f47f af25 	bne.w	8003248 <HAL_RCC_OscConfig+0x1c8>
 80033fe:	e6fd      	b.n	80031fc <HAL_RCC_OscConfig+0x17c>
        tickstart = HAL_GetTick();
 8003400:	f7fd fea6 	bl	8001150 <HAL_GetTick>
 8003404:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003406:	e004      	b.n	8003412 <HAL_RCC_OscConfig+0x392>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003408:	f7fd fea2 	bl	8001150 <HAL_GetTick>
 800340c:	1b80      	subs	r0, r0, r6
 800340e:	2802      	cmp	r0, #2
 8003410:	d895      	bhi.n	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	0199      	lsls	r1, r3, #6
 8003416:	d4f7      	bmi.n	8003408 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003418:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800341a:	4b5c      	ldr	r3, [pc, #368]	@ (800358c <HAL_RCC_OscConfig+0x50c>)
 800341c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800341e:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003420:	495b      	ldr	r1, [pc, #364]	@ (8003590 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003422:	4e59      	ldr	r6, [pc, #356]	@ (8003588 <HAL_RCC_OscConfig+0x508>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	4313      	orrs	r3, r2
 8003426:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003428:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800342c:	62ab      	str	r3, [r5, #40]	@ 0x28
 800342e:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8003432:	3b01      	subs	r3, #1
 8003434:	3a01      	subs	r2, #1
 8003436:	025b      	lsls	r3, r3, #9
 8003438:	0412      	lsls	r2, r2, #16
 800343a:	b29b      	uxth	r3, r3
 800343c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003440:	4313      	orrs	r3, r2
 8003442:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003444:	3a01      	subs	r2, #1
 8003446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800344a:	4313      	orrs	r3, r2
 800344c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800344e:	3a01      	subs	r2, #1
 8003450:	0612      	lsls	r2, r2, #24
 8003452:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003456:	4313      	orrs	r3, r2
 8003458:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800345a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003462:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003464:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003466:	4011      	ands	r1, r2
 8003468:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800346c:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800346e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003470:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003472:	f023 030c 	bic.w	r3, r3, #12
 8003476:	4313      	orrs	r3, r2
 8003478:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800347a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800347c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800347e:	f023 0302 	bic.w	r3, r3, #2
 8003482:	4313      	orrs	r3, r2
 8003484:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003486:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003494:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003496:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800349c:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800349e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034ae:	f7fd fe4f 	bl	8001150 <HAL_GetTick>
 80034b2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_OscConfig+0x442>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd fe4b 	bl	8001150 <HAL_GetTick>
 80034ba:	1b00      	subs	r0, r0, r4
 80034bc:	2802      	cmp	r0, #2
 80034be:	f63f af3e 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034c2:	6833      	ldr	r3, [r6, #0]
 80034c4:	019a      	lsls	r2, r3, #6
 80034c6:	d5f6      	bpl.n	80034b6 <HAL_RCC_OscConfig+0x436>
 80034c8:	e690      	b.n	80031ec <HAL_RCC_OscConfig+0x16c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	2a01      	cmp	r2, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034cc:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d0:	f43f aedf 	beq.w	8003292 <HAL_RCC_OscConfig+0x212>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80034da:	4282      	cmp	r2, r0
 80034dc:	f47f aed9 	bne.w	8003292 <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034e0:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80034e6:	4291      	cmp	r1, r2
 80034e8:	f47f aed3 	bne.w	8003292 <HAL_RCC_OscConfig+0x212>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80034ee:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80034f2:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f4:	4291      	cmp	r1, r2
 80034f6:	f47f aecc 	bne.w	8003292 <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034fa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80034fc:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003500:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003502:	4291      	cmp	r1, r2
 8003504:	f47f aec5 	bne.w	8003292 <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003508:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800350a:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800350e:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003510:	4291      	cmp	r1, r2
 8003512:	f47f aebe 	bne.w	8003292 <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003516:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003518:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800351c:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800351e:	1a98      	subs	r0, r3, r2
 8003520:	bf18      	it	ne
 8003522:	2001      	movne	r0, #1
}
 8003524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003526:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003532:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003534:	e5cc      	b.n	80030d0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003536:	4d14      	ldr	r5, [pc, #80]	@ (8003588 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	672b      	str	r3, [r5, #112]	@ 0x70
 8003544:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003546:	f023 0304 	bic.w	r3, r3, #4
 800354a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800354c:	f7fd fe00 	bl	8001150 <HAL_GetTick>
 8003550:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003552:	e005      	b.n	8003560 <HAL_RCC_OscConfig+0x4e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fd fdfc 	bl	8001150 <HAL_GetTick>
 8003558:	1b80      	subs	r0, r0, r6
 800355a:	42b8      	cmp	r0, r7
 800355c:	f63f aeef 	bhi.w	800333e <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003560:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003562:	0798      	lsls	r0, r3, #30
 8003564:	d4f6      	bmi.n	8003554 <HAL_RCC_OscConfig+0x4d4>
 8003566:	e624      	b.n	80031b2 <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	4a07      	ldr	r2, [pc, #28]	@ (8003588 <HAL_RCC_OscConfig+0x508>)
 800356a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003572:	e6d4      	b.n	800331e <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	f042 0204 	orr.w	r2, r2, #4
 8003578:	671a      	str	r2, [r3, #112]	@ 0x70
 800357a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003582:	e6cc      	b.n	800331e <HAL_RCC_OscConfig+0x29e>
    return HAL_ERROR;
 8003584:	2001      	movs	r0, #1
}
 8003586:	4770      	bx	lr
 8003588:	58024400 	.word	0x58024400
 800358c:	fffffc0c 	.word	0xfffffc0c
 8003590:	ffff0007 	.word	0xffff0007

08003594 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003594:	4a0c      	ldr	r2, [pc, #48]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x34>)
 8003596:	6913      	ldr	r3, [r2, #16]
 8003598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800359c:	2b10      	cmp	r3, #16
 800359e:	d004      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x16>
 80035a0:	2b18      	cmp	r3, #24
 80035a2:	d00d      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x2c>
 80035a4:	b11b      	cbz	r3, 80035ae <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80035a6:	4809      	ldr	r0, [pc, #36]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x38>)
 80035a8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035aa:	4809      	ldr	r0, [pc, #36]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035ac:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	d507      	bpl.n	80035c4 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035b4:	6813      	ldr	r3, [r2, #0]
 80035b6:	4807      	ldr	r0, [pc, #28]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x40>)
 80035b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80035bc:	40d8      	lsrs	r0, r3
 80035be:	4770      	bx	lr
 80035c0:	f7ff bcec 	b.w	8002f9c <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035c4:	4803      	ldr	r0, [pc, #12]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80035c6:	4770      	bx	lr
 80035c8:	58024400 	.word	0x58024400
 80035cc:	003d0900 	.word	0x003d0900
 80035d0:	007a1200 	.word	0x007a1200
 80035d4:	03d09000 	.word	0x03d09000

080035d8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80035d8:	2800      	cmp	r0, #0
 80035da:	f000 810e 	beq.w	80037fa <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035de:	4a8d      	ldr	r2, [pc, #564]	@ (8003814 <HAL_RCC_ClockConfig+0x23c>)
 80035e0:	6813      	ldr	r3, [r2, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	428b      	cmp	r3, r1
{
 80035e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ec:	4604      	mov	r4, r0
 80035ee:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	d20c      	bcs.n	800360c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	6813      	ldr	r3, [r2, #0]
 80035f4:	f023 030f 	bic.w	r3, r3, #15
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fc:	6813      	ldr	r3, [r2, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	428b      	cmp	r3, r1
 8003604:	d002      	beq.n	800360c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003606:	2001      	movs	r0, #1
}
 8003608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	0758      	lsls	r0, r3, #29
 8003610:	d50b      	bpl.n	800362a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003612:	4981      	ldr	r1, [pc, #516]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003614:	6920      	ldr	r0, [r4, #16]
 8003616:	698a      	ldr	r2, [r1, #24]
 8003618:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800361c:	4290      	cmp	r0, r2
 800361e:	d904      	bls.n	800362a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003620:	698a      	ldr	r2, [r1, #24]
 8003622:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003626:	4302      	orrs	r2, r0
 8003628:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362a:	0719      	lsls	r1, r3, #28
 800362c:	d50b      	bpl.n	8003646 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800362e:	497a      	ldr	r1, [pc, #488]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003630:	6960      	ldr	r0, [r4, #20]
 8003632:	69ca      	ldr	r2, [r1, #28]
 8003634:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003638:	4290      	cmp	r0, r2
 800363a:	d904      	bls.n	8003646 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800363c:	69ca      	ldr	r2, [r1, #28]
 800363e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003642:	4302      	orrs	r2, r0
 8003644:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	06da      	lsls	r2, r3, #27
 8003648:	d50b      	bpl.n	8003662 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800364a:	4973      	ldr	r1, [pc, #460]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 800364c:	69a0      	ldr	r0, [r4, #24]
 800364e:	69ca      	ldr	r2, [r1, #28]
 8003650:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003654:	4290      	cmp	r0, r2
 8003656:	d904      	bls.n	8003662 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003658:	69ca      	ldr	r2, [r1, #28]
 800365a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800365e:	4302      	orrs	r2, r0
 8003660:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003662:	069f      	lsls	r7, r3, #26
 8003664:	d50b      	bpl.n	800367e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003666:	496c      	ldr	r1, [pc, #432]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003668:	69e0      	ldr	r0, [r4, #28]
 800366a:	6a0a      	ldr	r2, [r1, #32]
 800366c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003670:	4290      	cmp	r0, r2
 8003672:	d904      	bls.n	800367e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003674:	6a0a      	ldr	r2, [r1, #32]
 8003676:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800367a:	4302      	orrs	r2, r0
 800367c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367e:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003680:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	f140 80ab 	bpl.w	80037de <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003688:	4e63      	ldr	r6, [pc, #396]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 800368a:	68e0      	ldr	r0, [r4, #12]
 800368c:	69b1      	ldr	r1, [r6, #24]
 800368e:	f001 010f 	and.w	r1, r1, #15
 8003692:	4288      	cmp	r0, r1
 8003694:	d904      	bls.n	80036a0 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003696:	69b1      	ldr	r1, [r6, #24]
 8003698:	f021 010f 	bic.w	r1, r1, #15
 800369c:	4301      	orrs	r1, r0
 800369e:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d030      	beq.n	8003706 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 80036a6:	68a1      	ldr	r1, [r4, #8]
 80036a8:	6993      	ldr	r3, [r2, #24]
 80036aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036b4:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b6:	2902      	cmp	r1, #2
 80036b8:	f000 80a1 	beq.w	80037fe <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036bc:	2903      	cmp	r1, #3
 80036be:	f000 8098 	beq.w	80037f2 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036c2:	2901      	cmp	r1, #1
 80036c4:	f000 80a1 	beq.w	800380a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c8:	075f      	lsls	r7, r3, #29
 80036ca:	d59c      	bpl.n	8003606 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036cc:	4e52      	ldr	r6, [pc, #328]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ce:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	6933      	ldr	r3, [r6, #16]
 80036d4:	f023 0307 	bic.w	r3, r3, #7
 80036d8:	430b      	orrs	r3, r1
 80036da:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 80036dc:	f7fd fd38 	bl	8001150 <HAL_GetTick>
 80036e0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e005      	b.n	80036f0 <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7fd fd34 	bl	8001150 <HAL_GetTick>
 80036e8:	1bc0      	subs	r0, r0, r7
 80036ea:	4540      	cmp	r0, r8
 80036ec:	f200 808b 	bhi.w	8003806 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f0:	6933      	ldr	r3, [r6, #16]
 80036f2:	6862      	ldr	r2, [r4, #4]
 80036f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036f8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80036fc:	d1f2      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	079e      	lsls	r6, r3, #30
 8003702:	d506      	bpl.n	8003712 <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003704:	68e0      	ldr	r0, [r4, #12]
 8003706:	4944      	ldr	r1, [pc, #272]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003708:	698a      	ldr	r2, [r1, #24]
 800370a:	f002 020f 	and.w	r2, r2, #15
 800370e:	4282      	cmp	r2, r0
 8003710:	d869      	bhi.n	80037e6 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003712:	4940      	ldr	r1, [pc, #256]	@ (8003814 <HAL_RCC_ClockConfig+0x23c>)
 8003714:	680a      	ldr	r2, [r1, #0]
 8003716:	f002 020f 	and.w	r2, r2, #15
 800371a:	42aa      	cmp	r2, r5
 800371c:	d90a      	bls.n	8003734 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	680a      	ldr	r2, [r1, #0]
 8003720:	f022 020f 	bic.w	r2, r2, #15
 8003724:	432a      	orrs	r2, r5
 8003726:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003728:	680a      	ldr	r2, [r1, #0]
 800372a:	f002 020f 	and.w	r2, r2, #15
 800372e:	42aa      	cmp	r2, r5
 8003730:	f47f af69 	bne.w	8003606 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003734:	0758      	lsls	r0, r3, #29
 8003736:	d50b      	bpl.n	8003750 <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003738:	4937      	ldr	r1, [pc, #220]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 800373a:	6920      	ldr	r0, [r4, #16]
 800373c:	698a      	ldr	r2, [r1, #24]
 800373e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003742:	4290      	cmp	r0, r2
 8003744:	d204      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003746:	698a      	ldr	r2, [r1, #24]
 8003748:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800374c:	4302      	orrs	r2, r0
 800374e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	0719      	lsls	r1, r3, #28
 8003752:	d50b      	bpl.n	800376c <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003754:	4930      	ldr	r1, [pc, #192]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003756:	6960      	ldr	r0, [r4, #20]
 8003758:	69ca      	ldr	r2, [r1, #28]
 800375a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800375e:	4290      	cmp	r0, r2
 8003760:	d204      	bcs.n	800376c <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003762:	69ca      	ldr	r2, [r1, #28]
 8003764:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003768:	4302      	orrs	r2, r0
 800376a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	06da      	lsls	r2, r3, #27
 800376e:	d50b      	bpl.n	8003788 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003770:	4929      	ldr	r1, [pc, #164]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003772:	69a0      	ldr	r0, [r4, #24]
 8003774:	69ca      	ldr	r2, [r1, #28]
 8003776:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800377a:	4290      	cmp	r0, r2
 800377c:	d204      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800377e:	69ca      	ldr	r2, [r1, #28]
 8003780:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003784:	4302      	orrs	r2, r0
 8003786:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003788:	069b      	lsls	r3, r3, #26
 800378a:	d50b      	bpl.n	80037a4 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800378c:	4a22      	ldr	r2, [pc, #136]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 800378e:	69e1      	ldr	r1, [r4, #28]
 8003790:	6a13      	ldr	r3, [r2, #32]
 8003792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003796:	4299      	cmp	r1, r3
 8003798:	d204      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800379a:	6a13      	ldr	r3, [r2, #32]
 800379c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037a4:	f7ff fef6 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 80037a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 80037aa:	4603      	mov	r3, r0
 80037ac:	481b      	ldr	r0, [pc, #108]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80037ae:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037b0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037b2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80037b6:	4d1a      	ldr	r5, [pc, #104]	@ (8003820 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037b8:	f002 020f 	and.w	r2, r2, #15
 80037bc:	4c19      	ldr	r4, [pc, #100]	@ (8003824 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037be:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037c0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037c2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 80037c6:	4818      	ldr	r0, [pc, #96]	@ (8003828 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037c8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037cc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 80037ce:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80037d0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037d2:	40d3      	lsrs	r3, r2
 80037d4:	6023      	str	r3, [r4, #0]
}
 80037d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80037da:	f7fd ba63 	b.w	8000ca4 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	2a00      	cmp	r2, #0
 80037e0:	f47f af60 	bne.w	80036a4 <HAL_RCC_ClockConfig+0xcc>
 80037e4:	e795      	b.n	8003712 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e6:	698a      	ldr	r2, [r1, #24]
 80037e8:	f022 020f 	bic.w	r2, r2, #15
 80037ec:	4302      	orrs	r2, r0
 80037ee:	618a      	str	r2, [r1, #24]
 80037f0:	e78f      	b.n	8003712 <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f2:	019a      	lsls	r2, r3, #6
 80037f4:	f53f af6a 	bmi.w	80036cc <HAL_RCC_ClockConfig+0xf4>
 80037f8:	e705      	b.n	8003606 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80037fa:	2001      	movs	r0, #1
}
 80037fc:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037fe:	0398      	lsls	r0, r3, #14
 8003800:	f53f af64 	bmi.w	80036cc <HAL_RCC_ClockConfig+0xf4>
 8003804:	e6ff      	b.n	8003606 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8003806:	2003      	movs	r0, #3
 8003808:	e6fe      	b.n	8003608 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800380a:	05db      	lsls	r3, r3, #23
 800380c:	f53f af5e 	bmi.w	80036cc <HAL_RCC_ClockConfig+0xf4>
 8003810:	e6f9      	b.n	8003606 <HAL_RCC_ClockConfig+0x2e>
 8003812:	bf00      	nop
 8003814:	52002000 	.word	0x52002000
 8003818:	58024400 	.word	0x58024400
 800381c:	08015a18 	.word	0x08015a18
 8003820:	24000004 	.word	0x24000004
 8003824:	24000000 	.word	0x24000000
 8003828:	2400000c 	.word	0x2400000c

0800382c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800382c:	4a18      	ldr	r2, [pc, #96]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003830:	6913      	ldr	r3, [r2, #16]
 8003832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003836:	2b10      	cmp	r3, #16
 8003838:	d019      	beq.n	800386e <HAL_RCC_GetHCLKFreq+0x42>
 800383a:	2b18      	cmp	r3, #24
 800383c:	d022      	beq.n	8003884 <HAL_RCC_GetHCLKFreq+0x58>
 800383e:	b1c3      	cbz	r3, 8003872 <HAL_RCC_GetHCLKFreq+0x46>
    sysclockfreq = CSI_VALUE;
 8003840:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003842:	4913      	ldr	r1, [pc, #76]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x64>)
 8003844:	4814      	ldr	r0, [pc, #80]	@ (8003898 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003846:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003848:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800384a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800384e:	4c13      	ldr	r4, [pc, #76]	@ (800389c <HAL_RCC_GetHCLKFreq+0x70>)
 8003850:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003854:	4d12      	ldr	r5, [pc, #72]	@ (80038a0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003856:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003858:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800385a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800385e:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003862:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003864:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003868:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800386a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800386c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <HAL_RCC_GetHCLKFreq+0x78>)
 8003870:	e7e7      	b.n	8003842 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003872:	6813      	ldr	r3, [r2, #0]
 8003874:	069b      	lsls	r3, r3, #26
 8003876:	d509      	bpl.n	800388c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800387c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003880:	40d3      	lsrs	r3, r2
 8003882:	e7de      	b.n	8003842 <HAL_RCC_GetHCLKFreq+0x16>
 8003884:	f7ff fb8a 	bl	8002f9c <HAL_RCC_GetSysClockFreq.part.0>
 8003888:	4603      	mov	r3, r0
 800388a:	e7da      	b.n	8003842 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800388e:	e7d8      	b.n	8003842 <HAL_RCC_GetHCLKFreq+0x16>
 8003890:	58024400 	.word	0x58024400
 8003894:	003d0900 	.word	0x003d0900
 8003898:	08015a18 	.word	0x08015a18
 800389c:	24000000 	.word	0x24000000
 80038a0:	24000004 	.word	0x24000004
 80038a4:	007a1200 	.word	0x007a1200
 80038a8:	03d09000 	.word	0x03d09000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038ae:	f7ff ffbd 	bl	800382c <HAL_RCC_GetHCLKFreq>
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80038b4:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038c2:	40d8      	lsrs	r0, r3
 80038c4:	bd08      	pop	{r3, pc}
 80038c6:	bf00      	nop
 80038c8:	58024400 	.word	0x58024400
 80038cc:	08015a18 	.word	0x08015a18

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038d2:	f7ff ffab 	bl	800382c <HAL_RCC_GetHCLKFreq>
 80038d6:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80038d8:	4a05      	ldr	r2, [pc, #20]	@ (80038f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80038e0:	5cd3      	ldrb	r3, [r2, r3]
 80038e2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038e6:	40d8      	lsrs	r0, r3
 80038e8:	bd08      	pop	{r3, pc}
 80038ea:	bf00      	nop
 80038ec:	58024400 	.word	0x58024400
 80038f0:	08015a18 	.word	0x08015a18

080038f4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80038f6:	223f      	movs	r2, #63	@ 0x3f
 80038f8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	f002 0207 	and.w	r2, r2, #7
 8003900:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8003908:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	f002 020f 	and.w	r2, r2, #15
 8003910:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003918:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003920:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003928:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800392a:	6a1b      	ldr	r3, [r3, #32]
{
 800392c:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800392e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003932:	4c05      	ldr	r4, [pc, #20]	@ (8003948 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003934:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003936:	6823      	ldr	r3, [r4, #0]
}
 8003938:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	600b      	str	r3, [r1, #0]
}
 8003942:	4770      	bx	lr
 8003944:	58024400 	.word	0x58024400
 8003948:	52002000 	.word	0x52002000

0800394c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800394e:	4c36      	ldr	r4, [pc, #216]	@ (8003a28 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8003950:	4606      	mov	r6, r0
 8003952:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800395a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395c:	f7fd fbf8 	bl	8001150 <HAL_GetTick>
 8003960:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003962:	e004      	b.n	800396e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003964:	f7fd fbf4 	bl	8001150 <HAL_GetTick>
 8003968:	1b40      	subs	r0, r0, r5
 800396a:	2802      	cmp	r0, #2
 800396c:	d856      	bhi.n	8003a1c <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	011a      	lsls	r2, r3, #4
 8003972:	d4f7      	bmi.n	8003964 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003974:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003976:	6832      	ldr	r2, [r6, #0]
 8003978:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800397c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003980:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003982:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003986:	3b01      	subs	r3, #1
 8003988:	3a01      	subs	r2, #1
 800398a:	025b      	lsls	r3, r3, #9
 800398c:	0412      	lsls	r2, r2, #16
 800398e:	b29b      	uxth	r3, r3
 8003990:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003994:	4313      	orrs	r3, r2
 8003996:	6872      	ldr	r2, [r6, #4]
 8003998:	3a01      	subs	r2, #1
 800399a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399e:	4313      	orrs	r3, r2
 80039a0:	6932      	ldr	r2, [r6, #16]
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0612      	lsls	r2, r2, #24
 80039a6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80039aa:	4313      	orrs	r3, r2
 80039ac:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80039b0:	6972      	ldr	r2, [r6, #20]
 80039b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80039b6:	4313      	orrs	r3, r2
 80039b8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80039bc:	69b3      	ldr	r3, [r6, #24]
 80039be:	f022 0220 	bic.w	r2, r2, #32
 80039c2:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039c4:	4b19      	ldr	r3, [pc, #100]	@ (8003a2c <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039c6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039c8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80039ca:	f022 0210 	bic.w	r2, r2, #16
 80039ce:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039d0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80039d2:	69f2      	ldr	r2, [r6, #28]
 80039d4:	400b      	ands	r3, r1
 80039d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80039da:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80039de:	f043 0310 	orr.w	r3, r3, #16
 80039e2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80039e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80039e6:	b1df      	cbz	r7, 8003a20 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039e8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80039ea:	bf0c      	ite	eq
 80039ec:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80039f0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80039f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80039f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003a28 <RCCEx_PLL2_Config.part.0+0xdc>)
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fd fba6 	bl	8001150 <HAL_GetTick>
 8003a04:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a06:	e004      	b.n	8003a12 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a08:	f7fd fba2 	bl	8001150 <HAL_GetTick>
 8003a0c:	1b40      	subs	r0, r0, r5
 8003a0e:	2802      	cmp	r0, #2
 8003a10:	d804      	bhi.n	8003a1c <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	d5f7      	bpl.n	8003a08 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8003a18:	2000      	movs	r0, #0
}
 8003a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003a1c:	2003      	movs	r0, #3
}
 8003a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a26:	e7e6      	b.n	80039f6 <RCCEx_PLL2_Config.part.0+0xaa>
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	ffff0007 	.word	0xffff0007

08003a30 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a32:	4c36      	ldr	r4, [pc, #216]	@ (8003b0c <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003a34:	4606      	mov	r6, r0
 8003a36:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fd fb86 	bl	8001150 <HAL_GetTick>
 8003a44:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a46:	e004      	b.n	8003a52 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a48:	f7fd fb82 	bl	8001150 <HAL_GetTick>
 8003a4c:	1b40      	subs	r0, r0, r5
 8003a4e:	2802      	cmp	r0, #2
 8003a50:	d856      	bhi.n	8003b00 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	009a      	lsls	r2, r3, #2
 8003a56:	d4f7      	bmi.n	8003a48 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a5a:	6832      	ldr	r2, [r6, #0]
 8003a5c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8003a60:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a66:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	025b      	lsls	r3, r3, #9
 8003a70:	0412      	lsls	r2, r2, #16
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	6872      	ldr	r2, [r6, #4]
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a82:	4313      	orrs	r3, r2
 8003a84:	6932      	ldr	r2, [r6, #16]
 8003a86:	3a01      	subs	r2, #1
 8003a88:	0612      	lsls	r2, r2, #24
 8003a8a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003a92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003a94:	6972      	ldr	r2, [r6, #20]
 8003a96:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003aa0:	69b3      	ldr	r3, [r6, #24]
 8003aa2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003aa6:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003aa8:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003aaa:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003aac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003aae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ab2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ab4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003ab6:	69f2      	ldr	r2, [r6, #28]
 8003ab8:	400b      	ands	r3, r1
 8003aba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003abe:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ac0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ac8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003aca:	b1df      	cbz	r7, 8003b04 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003acc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ace:	bf0c      	ite	eq
 8003ad0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ad4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003ada:	4c0c      	ldr	r4, [pc, #48]	@ (8003b0c <RCCEx_PLL3_Config.part.0+0xdc>)
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fd fb34 	bl	8001150 <HAL_GetTick>
 8003ae8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003aea:	e004      	b.n	8003af6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003aec:	f7fd fb30 	bl	8001150 <HAL_GetTick>
 8003af0:	1b40      	subs	r0, r0, r5
 8003af2:	2802      	cmp	r0, #2
 8003af4:	d804      	bhi.n	8003b00 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	d5f7      	bpl.n	8003aec <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8003afc:	2000      	movs	r0, #0
}
 8003afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003b00:	2003      	movs	r0, #3
}
 8003b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b0a:	e7e6      	b.n	8003ada <RCCEx_PLL3_Config.part.0+0xaa>
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	ffff0007 	.word	0xffff0007

08003b14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b18:	6803      	ldr	r3, [r0, #0]
{
 8003b1a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b1c:	f013 6600 	ands.w	r6, r3, #134217728	@ 0x8000000
 8003b20:	d025      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b22:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003b24:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8003b28:	f000 8527 	beq.w	800457a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003b2c:	d814      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b2e:	2a00      	cmp	r2, #0
 8003b30:	f000 8429 	beq.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x872>
 8003b34:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8003b38:	f040 839b 	bne.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b3c:	4aaa      	ldr	r2, [pc, #680]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b3e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b40:	f002 0203 	and.w	r2, r2, #3
 8003b44:	2a03      	cmp	r2, #3
 8003b46:	f000 8394 	beq.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	3004      	adds	r0, #4
 8003b4e:	f7ff fefd 	bl	800394c <RCCEx_PLL2_Config.part.0>
 8003b52:	4606      	mov	r6, r0
 8003b54:	f000 bd1d 	b.w	8004592 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b58:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8003b5c:	f040 8389 	bne.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x75e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b60:	48a1      	ldr	r0, [pc, #644]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b62:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b64:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003b66:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	6502      	str	r2, [r0, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b6e:	05d8      	lsls	r0, r3, #23
 8003b70:	d50a      	bpl.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b74:	2a04      	cmp	r2, #4
 8003b76:	d806      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b78:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003b7c:	053603e0 	.word	0x053603e0
 8003b80:	03e50512 	.word	0x03e50512
 8003b84:	03e5      	.short	0x03e5
      ret = HAL_ERROR;
 8003b86:	2601      	movs	r6, #1
 8003b88:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b8a:	0559      	lsls	r1, r3, #21
 8003b8c:	d526      	bpl.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b8e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 8003b92:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8003b96:	f000 8545 	beq.w	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8003b9a:	f200 80ef 	bhi.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003b9e:	2a00      	cmp	r2, #0
 8003ba0:	f000 83dd 	beq.w	800435e <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8003ba4:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8003ba8:	f040 80f2 	bne.w	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bac:	4a8e      	ldr	r2, [pc, #568]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003bb0:	f002 0203 	and.w	r2, r2, #3
 8003bb4:	2a03      	cmp	r2, #3
 8003bb6:	f000 80eb 	beq.w	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bba:	2100      	movs	r1, #0
 8003bbc:	1d20      	adds	r0, r4, #4
 8003bbe:	f7ff fec5 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003bc6:	2d00      	cmp	r5, #0
 8003bc8:	f040 83d1 	bne.w	800436e <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bcc:	4986      	ldr	r1, [pc, #536]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bce:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8003bd2:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003bd4:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 8003bd8:	4302      	orrs	r2, r0
 8003bda:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bdc:	051a      	lsls	r2, r3, #20
 8003bde:	d526      	bpl.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003be0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8003be4:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8003be8:	f000 850c 	beq.w	8004604 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003bec:	f200 80d3 	bhi.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	f000 8399 	beq.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8003bf6:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8003bfa:	f040 80d6 	bne.w	8003daa <HAL_RCCEx_PeriphCLKConfig+0x296>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bfe:	4a7a      	ldr	r2, [pc, #488]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c02:	f002 0203 	and.w	r2, r2, #3
 8003c06:	2a03      	cmp	r2, #3
 8003c08:	f000 80cf 	beq.w	8003daa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	1d20      	adds	r0, r4, #4
 8003c10:	f7ff fe9c 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	f040 838d 	bne.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c1e:	4972      	ldr	r1, [pc, #456]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c20:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8003c24:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003c26:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8003c2a:	4302      	orrs	r2, r0
 8003c2c:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c2e:	019f      	lsls	r7, r3, #6
 8003c30:	d518      	bpl.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->OspiClockSelection)
 8003c32:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003c34:	2a20      	cmp	r2, #32
 8003c36:	f000 8423 	beq.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 8003c3a:	f200 80b9 	bhi.w	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003c3e:	b13a      	cbz	r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c40:	2a10      	cmp	r2, #16
 8003c42:	f040 80b8 	bne.w	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c46:	4968      	ldr	r1, [pc, #416]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c48:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003c4a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003c4e:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	f040 83d7 	bne.w	8004404 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c56:	4964      	ldr	r1, [pc, #400]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c58:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003c5a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8003c5c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003c60:	4302      	orrs	r2, r0
 8003c62:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c64:	04d8      	lsls	r0, r3, #19
 8003c66:	d524      	bpl.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c68:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003c6a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003c6e:	f000 84ab 	beq.w	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003c72:	f200 80a3 	bhi.w	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	f000 837b 	beq.w	8004372 <HAL_RCCEx_PeriphCLKConfig+0x85e>
 8003c7c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8003c80:	f040 80a4 	bne.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c84:	4a58      	ldr	r2, [pc, #352]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c86:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c88:	f002 0203 	and.w	r2, r2, #3
 8003c8c:	2a03      	cmp	r2, #3
 8003c8e:	f000 809d 	beq.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003c92:	2100      	movs	r1, #0
 8003c94:	1d20      	adds	r0, r4, #4
 8003c96:	f7ff fe59 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c9e:	2d00      	cmp	r5, #0
 8003ca0:	f040 836f 	bne.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x86e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ca4:	4950      	ldr	r1, [pc, #320]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ca6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ca8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8003caa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003cae:	4302      	orrs	r2, r0
 8003cb0:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cb2:	0499      	lsls	r1, r3, #18
 8003cb4:	d522      	bpl.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003cb6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003cb8:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8003cbc:	f000 83ca 	beq.w	8004454 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8003cc0:	f200 8087 	bhi.w	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8003cc4:	b182      	cbz	r2, 8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003cc6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003cca:	f040 808a 	bne.w	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cce:	4a46      	ldr	r2, [pc, #280]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cd0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003cd2:	f002 0203 	and.w	r2, r2, #3
 8003cd6:	2a03      	cmp	r2, #3
 8003cd8:	f000 8083 	beq.w	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003cdc:	2101      	movs	r1, #1
 8003cde:	1d20      	adds	r0, r4, #4
 8003ce0:	f7ff fe34 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	f040 84b4 	bne.w	8004656 <HAL_RCCEx_PeriphCLKConfig+0xb42>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cee:	493e      	ldr	r1, [pc, #248]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cf0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003cf2:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8003cf4:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8003cf8:	4302      	orrs	r2, r0
 8003cfa:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cfc:	045a      	lsls	r2, r3, #17
 8003cfe:	d521      	bpl.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x230>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d00:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 8003d04:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8003d08:	f000 8380 	beq.w	800440c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8003d0c:	d86e      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003d0e:	b172      	cbz	r2, 8003d2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003d10:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8003d14:	d172      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d16:	4a34      	ldr	r2, [pc, #208]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d1a:	f002 0203 	and.w	r2, r2, #3
 8003d1e:	2a03      	cmp	r2, #3
 8003d20:	d06c      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003d22:	2101      	movs	r1, #1
 8003d24:	1d20      	adds	r0, r4, #4
 8003d26:	f7ff fe11 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d2e:	2d00      	cmp	r5, #0
 8003d30:	f040 848c 	bne.w	800464c <HAL_RCCEx_PeriphCLKConfig+0xb38>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d34:	492c      	ldr	r1, [pc, #176]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d36:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8003d3a:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003d3c:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8003d40:	4302      	orrs	r2, r0
 8003d42:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d44:	041f      	lsls	r7, r3, #16
 8003d46:	d50d      	bpl.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x250>
    switch(PeriphClkInit->FdcanClockSelection)
 8003d48:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8003d4a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8003d4e:	f000 8255 	beq.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8003d52:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8003d56:	f000 8340 	beq.w	80043da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	f000 8253 	beq.w	8004206 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
      ret = HAL_ERROR;
 8003d60:	2601      	movs	r6, #1
 8003d62:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d64:	01d8      	lsls	r0, r3, #7
 8003d66:	d55b      	bpl.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    switch(PeriphClkInit->FmcClockSelection)
 8003d68:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003d6a:	2a03      	cmp	r2, #3
 8003d6c:	f200 84be 	bhi.w	80046ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003d70:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003d74:	0047004c 	.word	0x0047004c
 8003d78:	004c03a9 	.word	0x004c03a9
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d7c:	f422 1100 	bic.w	r1, r2, #2097152	@ 0x200000
 8003d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8003d84:	f43f af1f 	beq.w	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8003d88:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8003d8c:	f43f af1b 	beq.w	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      ret = HAL_ERROR;
 8003d90:	2601      	movs	r6, #1
 8003d92:	4635      	mov	r5, r6
 8003d94:	e722      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d96:	f022 7180 	bic.w	r1, r2, #16777216	@ 0x1000000
 8003d9a:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8003d9e:	f43f af3b 	beq.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003da2:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8003da6:	f43f af37 	beq.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8003daa:	2601      	movs	r6, #1
 8003dac:	4635      	mov	r5, r6
 8003dae:	e73e      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->OspiClockSelection)
 8003db0:	2a30      	cmp	r2, #48	@ 0x30
 8003db2:	f43f af4d 	beq.w	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      ret = HAL_ERROR;
 8003db6:	2601      	movs	r6, #1
 8003db8:	4635      	mov	r5, r6
 8003dba:	e753      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003dbc:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8003dc0:	f43f af6d 	beq.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dc4:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003dc8:	f43f af69 	beq.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = HAL_ERROR;
 8003dcc:	2601      	movs	r6, #1
 8003dce:	4635      	mov	r5, r6
 8003dd0:	e76f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003dd2:	f422 3180 	bic.w	r1, r2, #65536	@ 0x10000
 8003dd6:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8003dda:	d085      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003ddc:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8003de0:	d082      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = HAL_ERROR;
 8003de2:	2601      	movs	r6, #1
 8003de4:	4635      	mov	r5, r6
 8003de6:	e789      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003de8:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi6ClockSelection)
 8003dec:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8003df0:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8003df4:	d09b      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003df6:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8003dfa:	d098      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
      ret = HAL_ERROR;
 8003dfc:	2601      	movs	r6, #1
 8003dfe:	4635      	mov	r5, r6
 8003e00:	e7a0      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e02:	493c      	ldr	r1, [pc, #240]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e04:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003e06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e0a:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	f040 82f5 	bne.w	80043fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e12:	4938      	ldr	r1, [pc, #224]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e14:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003e16:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8003e18:	f022 0203 	bic.w	r2, r2, #3
 8003e1c:	4302      	orrs	r2, r0
 8003e1e:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e20:	0259      	lsls	r1, r3, #9
 8003e22:	f100 8240 	bmi.w	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x792>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e26:	07df      	lsls	r7, r3, #31
 8003e28:	d52f      	bpl.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x376>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e2a:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8003e2c:	2a28      	cmp	r2, #40	@ 0x28
 8003e2e:	d82a      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003e30:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003e34:	0029022e 	.word	0x0029022e
 8003e38:	00290029 	.word	0x00290029
 8003e3c:	00290029 	.word	0x00290029
 8003e40:	00290029 	.word	0x00290029
 8003e44:	00290221 	.word	0x00290221
 8003e48:	00290029 	.word	0x00290029
 8003e4c:	00290029 	.word	0x00290029
 8003e50:	00290029 	.word	0x00290029
 8003e54:	0029043e 	.word	0x0029043e
 8003e58:	00290029 	.word	0x00290029
 8003e5c:	00290029 	.word	0x00290029
 8003e60:	00290029 	.word	0x00290029
 8003e64:	0029022e 	.word	0x0029022e
 8003e68:	00290029 	.word	0x00290029
 8003e6c:	00290029 	.word	0x00290029
 8003e70:	00290029 	.word	0x00290029
 8003e74:	0029022e 	.word	0x0029022e
 8003e78:	00290029 	.word	0x00290029
 8003e7c:	00290029 	.word	0x00290029
 8003e80:	00290029 	.word	0x00290029
 8003e84:	022e      	.short	0x022e
      ret = HAL_ERROR;
 8003e86:	2601      	movs	r6, #1
 8003e88:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e8a:	0798      	lsls	r0, r3, #30
 8003e8c:	d522      	bpl.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e8e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8003e90:	2a05      	cmp	r2, #5
 8003e92:	f200 8424 	bhi.w	80046de <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8003e96:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003e9a:	0013      	.short	0x0013
 8003e9c:	03e90006 	.word	0x03e90006
 8003ea0:	00130013 	.word	0x00130013
 8003ea4:	0013      	.short	0x0013
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea6:	4a13      	ldr	r2, [pc, #76]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003eaa:	f002 0203 	and.w	r2, r2, #3
 8003eae:	2a03      	cmp	r2, #3
 8003eb0:	f000 8415 	beq.w	80046de <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	1d20      	adds	r0, r4, #4
 8003eb8:	f7ff fd48 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	f040 83bf 	bne.w	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ec6:	490b      	ldr	r1, [pc, #44]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003eca:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003ecc:	f022 0207 	bic.w	r2, r2, #7
 8003ed0:	4302      	orrs	r2, r0
 8003ed2:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed4:	0759      	lsls	r1, r3, #29
 8003ed6:	d527      	bpl.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x414>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ed8:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8003edc:	2a05      	cmp	r2, #5
 8003ede:	f200 8402 	bhi.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
 8003ee2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003ee6:	0016      	.short	0x0016
 8003ee8:	03d40009 	.word	0x03d40009
 8003eec:	00160016 	.word	0x00160016
 8003ef0:	0016      	.short	0x0016
 8003ef2:	bf00      	nop
 8003ef4:	58024400 	.word	0x58024400
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ef8:	4aad      	ldr	r2, [pc, #692]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8003efa:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003efc:	f002 0203 	and.w	r2, r2, #3
 8003f00:	2a03      	cmp	r2, #3
 8003f02:	f000 83f0 	beq.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
 8003f06:	2101      	movs	r1, #1
 8003f08:	1d20      	adds	r0, r4, #4
 8003f0a:	f7ff fd1f 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	f040 8398 	bne.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb34>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f18:	49a5      	ldr	r1, [pc, #660]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8003f1a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8003f1e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003f20:	f022 0207 	bic.w	r2, r2, #7
 8003f24:	4302      	orrs	r2, r0
 8003f26:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f28:	069a      	lsls	r2, r3, #26
 8003f2a:	d524      	bpl.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f2c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8003f30:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8003f34:	f000 827c 	beq.w	8004430 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 8003f38:	f200 8105 	bhi.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003f3c:	b182      	cbz	r2, 8003f60 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8003f3e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8003f42:	f040 810a 	bne.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x646>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f46:	4a9a      	ldr	r2, [pc, #616]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8003f48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f4a:	f002 0203 	and.w	r2, r2, #3
 8003f4e:	2a03      	cmp	r2, #3
 8003f50:	f000 8103 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003f54:	2100      	movs	r1, #0
 8003f56:	1d20      	adds	r0, r4, #4
 8003f58:	f7ff fcf8 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f60:	2d00      	cmp	r5, #0
 8003f62:	f040 837b 	bne.w	800465c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f66:	4992      	ldr	r1, [pc, #584]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8003f68:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003f6c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003f6e:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8003f72:	4302      	orrs	r2, r0
 8003f74:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f76:	065f      	lsls	r7, r3, #25
 8003f78:	d524      	bpl.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f7a:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 8003f7e:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8003f82:	f000 82b1 	beq.w	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003f86:	f200 80eb 	bhi.w	8004160 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f8a:	b182      	cbz	r2, 8003fae <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003f8c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003f90:	f040 80f0 	bne.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x660>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f94:	4a86      	ldr	r2, [pc, #536]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8003f96:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f98:	f002 0203 	and.w	r2, r2, #3
 8003f9c:	2a03      	cmp	r2, #3
 8003f9e:	f000 80e9 	beq.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	1d20      	adds	r0, r4, #4
 8003fa6:	f7ff fcd1 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	f040 834f 	bne.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb4:	497e      	ldr	r1, [pc, #504]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8003fb6:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8003fba:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003fbc:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8003fc0:	4302      	orrs	r2, r0
 8003fc2:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fc4:	0618      	lsls	r0, r3, #24
 8003fc6:	d524      	bpl.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fc8:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8003fcc:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003fd0:	f000 829c 	beq.w	800450c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 8003fd4:	f200 80d1 	bhi.w	800417a <HAL_RCCEx_PeriphCLKConfig+0x666>
 8003fd8:	b182      	cbz	r2, 8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 8003fda:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003fde:	f040 80d6 	bne.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x67a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fe2:	4a73      	ldr	r2, [pc, #460]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8003fe4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fe6:	f002 0203 	and.w	r2, r2, #3
 8003fea:	2a03      	cmp	r2, #3
 8003fec:	f000 80cf 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	1d20      	adds	r0, r4, #4
 8003ff4:	f7ff fcaa 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	f040 8333 	bne.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0xb54>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004002:	496b      	ldr	r1, [pc, #428]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004004:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8004008:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800400a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800400e:	4302      	orrs	r2, r0
 8004010:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004012:	0719      	lsls	r1, r3, #28
 8004014:	d50a      	bpl.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x518>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004016:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004018:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800401c:	f000 829b 	beq.w	8004556 <HAL_RCCEx_PeriphCLKConfig+0xa42>
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004020:	4863      	ldr	r0, [pc, #396]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004022:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8004024:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004028:	430a      	orrs	r2, r1
 800402a:	6542      	str	r2, [r0, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800402c:	06da      	lsls	r2, r3, #27
 800402e:	d50b      	bpl.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x534>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004030:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8004034:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004038:	f000 827a 	beq.w	8004530 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800403c:	485c      	ldr	r0, [pc, #368]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 800403e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004040:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004044:	430a      	orrs	r2, r1
 8004046:	6582      	str	r2, [r0, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004048:	031f      	lsls	r7, r3, #12
 800404a:	d50e      	bpl.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->AdcClockSelection)
 800404c:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8004050:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004054:	f000 80f3 	beq.w	800423e <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8004058:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800405c:	f000 80fd 	beq.w	800425a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004060:	2900      	cmp	r1, #0
 8004062:	f000 81aa 	beq.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      ret = HAL_ERROR;
 8004066:	2601      	movs	r6, #1
 8004068:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800406a:	0358      	lsls	r0, r3, #13
 800406c:	d50f      	bpl.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->UsbClockSelection)
 800406e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8004072:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8004076:	f000 8214 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800407a:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 800407e:	f000 80d2 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004082:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8004086:	f000 80c9 	beq.w	800421c <HAL_RCCEx_PeriphCLKConfig+0x708>
      ret = HAL_ERROR;
 800408a:	2601      	movs	r6, #1
 800408c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800408e:	03d9      	lsls	r1, r3, #15
 8004090:	d51e      	bpl.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004092:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004094:	2a00      	cmp	r2, #0
 8004096:	f000 8186 	beq.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x892>
 800409a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800409e:	f040 8097 	bne.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040a2:	4a43      	ldr	r2, [pc, #268]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 80040a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	2a03      	cmp	r2, #3
 80040ac:	f000 8090 	beq.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80040b0:	2102      	movs	r1, #2
 80040b2:	1d20      	adds	r0, r4, #4
 80040b4:	f7ff fc4a 	bl	800394c <RCCEx_PLL2_Config.part.0>
 80040b8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040ba:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80040bc:	2d00      	cmp	r5, #0
 80040be:	f040 817a 	bne.w	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040c2:	493b      	ldr	r1, [pc, #236]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 80040c4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80040c6:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80040c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80040cc:	4302      	orrs	r2, r0
 80040ce:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d0:	009a      	lsls	r2, r3, #2
 80040d2:	f100 8082 	bmi.w	80041da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040d6:	039f      	lsls	r7, r3, #14
 80040d8:	d45c      	bmi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x680>
  if (status == HAL_OK)
 80040da:	1e30      	subs	r0, r6, #0
 80040dc:	bf18      	it	ne
 80040de:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040e0:	02dd      	lsls	r5, r3, #11
 80040e2:	d506      	bpl.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040e4:	4932      	ldr	r1, [pc, #200]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 80040e6:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80040e8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80040ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040ee:	432a      	orrs	r2, r5
 80040f0:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f2:	0299      	lsls	r1, r3, #10
 80040f4:	d506      	bpl.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040f6:	492e      	ldr	r1, [pc, #184]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 80040f8:	6e65      	ldr	r5, [r4, #100]	@ 0x64
 80040fa:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80040fc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004100:	432a      	orrs	r2, r5
 8004102:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004104:	005a      	lsls	r2, r3, #1
 8004106:	d509      	bpl.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x608>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004108:	4a29      	ldr	r2, [pc, #164]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 800410a:	6911      	ldr	r1, [r2, #16]
 800410c:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8004110:	6111      	str	r1, [r2, #16]
 8004112:	6911      	ldr	r1, [r2, #16]
 8004114:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8004118:	4329      	orrs	r1, r5
 800411a:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800411c:	2b00      	cmp	r3, #0
 800411e:	da06      	bge.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004120:	4923      	ldr	r1, [pc, #140]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004122:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8004124:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8004126:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800412a:	432a      	orrs	r2, r5
 800412c:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	d507      	bpl.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004132:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004134:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8004138:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800413a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800413e:	430b      	orrs	r3, r1
 8004140:	6553      	str	r3, [r2, #84]	@ 0x54
}
 8004142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004146:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 800414a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800414e:	f43f af07 	beq.w	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8004152:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8004156:	f43f af03 	beq.w	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      ret = HAL_ERROR;
 800415a:	2601      	movs	r6, #1
 800415c:	4635      	mov	r5, r6
 800415e:	e70a      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004160:	f422 6180 	bic.w	r1, r2, #1024	@ 0x400
 8004164:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004168:	f43f af21 	beq.w	8003fae <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800416c:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8004170:	f43f af1d 	beq.w	8003fae <HAL_RCCEx_PeriphCLKConfig+0x49a>
      ret = HAL_ERROR;
 8004174:	2601      	movs	r6, #1
 8004176:	4635      	mov	r5, r6
 8004178:	e724      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800417a:	f422 5100 	bic.w	r1, r2, #8192	@ 0x2000
 800417e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004182:	f43f af3b 	beq.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 8004186:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 800418a:	f43f af37 	beq.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      ret = HAL_ERROR;
 800418e:	2601      	movs	r6, #1
 8004190:	4635      	mov	r5, r6
 8004192:	e73e      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->RngClockSelection)
 8004194:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8004196:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800419a:	f000 80fb 	beq.w	8004394 <HAL_RCCEx_PeriphCLKConfig+0x880>
 800419e:	d909      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80041a0:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 80041a4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80041a8:	d006      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      status=HAL_ERROR;
 80041aa:	2001      	movs	r0, #1
 80041ac:	e798      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->RngClockSelection)
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	d1f8      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x696>
    if(ret == HAL_OK)
 80041b8:	2d00      	cmp	r5, #0
 80041ba:	d1f6      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041bc:	4dae      	ldr	r5, [pc, #696]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
  if (status == HAL_OK)
 80041be:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c0:	6d69      	ldr	r1, [r5, #84]	@ 0x54
  if (status == HAL_OK)
 80041c2:	bf18      	it	ne
 80041c4:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c6:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80041ca:	430a      	orrs	r2, r1
 80041cc:	656a      	str	r2, [r5, #84]	@ 0x54
 80041ce:	e787      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = HAL_ERROR;
 80041d0:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041d2:	009a      	lsls	r2, r3, #2
      ret = HAL_ERROR;
 80041d4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041d6:	f57f af7e 	bpl.w	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041da:	4aa7      	ldr	r2, [pc, #668]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80041dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80041de:	f002 0203 	and.w	r2, r2, #3
 80041e2:	2a03      	cmp	r2, #3
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80041e6:	2102      	movs	r1, #2
 80041e8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80041ec:	f7ff fc20 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041f0:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041f2:	2800      	cmp	r0, #0
 80041f4:	f43f af6f 	beq.w	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      status=HAL_ERROR;
 80041f8:	2601      	movs	r6, #1
 80041fa:	e76c      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fc:	499e      	ldr	r1, [pc, #632]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80041fe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004200:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004204:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004206:	2d00      	cmp	r5, #0
 8004208:	f040 80fa 	bne.w	8004400 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800420c:	499a      	ldr	r1, [pc, #616]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800420e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8004210:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004212:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004216:	4302      	orrs	r2, r0
 8004218:	650a      	str	r2, [r1, #80]	@ 0x50
 800421a:	e5a3      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421c:	4996      	ldr	r1, [pc, #600]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800421e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004220:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004224:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004226:	2d00      	cmp	r5, #0
 8004228:	f040 80ee 	bne.w	8004408 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800422c:	4992      	ldr	r1, [pc, #584]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800422e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004232:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004234:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004238:	4302      	orrs	r2, r0
 800423a:	654a      	str	r2, [r1, #84]	@ 0x54
 800423c:	e727      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x57a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800423e:	4a8e      	ldr	r2, [pc, #568]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004240:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004242:	f002 0203 	and.w	r2, r2, #3
 8004246:	2a03      	cmp	r2, #3
 8004248:	f43f af0d 	beq.w	8004066 <HAL_RCCEx_PeriphCLKConfig+0x552>
 800424c:	2102      	movs	r1, #2
 800424e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004252:	f7ff fbed 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800425a:	2d00      	cmp	r5, #0
 800425c:	f040 8200 	bne.w	8004660 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004260:	4985      	ldr	r1, [pc, #532]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004262:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8004266:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004268:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800426c:	4302      	orrs	r2, r0
 800426e:	658a      	str	r2, [r1, #88]	@ 0x58
 8004270:	e6fb      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x556>
      ret = HAL_ERROR;
 8004272:	2601      	movs	r6, #1
 8004274:	e47b      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004276:	4a80      	ldr	r2, [pc, #512]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004278:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800427a:	f002 0203 	and.w	r2, r2, #3
 800427e:	2a03      	cmp	r2, #3
 8004280:	f43f ae01 	beq.w	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004284:	2101      	movs	r1, #1
 8004286:	1d20      	adds	r0, r4, #4
 8004288:	f7ff fb60 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004290:	2d00      	cmp	r5, #0
 8004292:	f040 81e7 	bne.w	8004664 <HAL_RCCEx_PeriphCLKConfig+0xb50>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004296:	4978      	ldr	r1, [pc, #480]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004298:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800429a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800429c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80042a0:	4302      	orrs	r2, r0
 80042a2:	654a      	str	r2, [r1, #84]	@ 0x54
 80042a4:	e5f1      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x376>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a6:	4f75      	ldr	r7, [pc, #468]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ae:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80042b0:	f7fc ff4e 	bl	8001150 <HAL_GetTick>
 80042b4:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b6:	e006      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b8:	f7fc ff4a 	bl	8001150 <HAL_GetTick>
 80042bc:	eba0 0008 	sub.w	r0, r0, r8
 80042c0:	2864      	cmp	r0, #100	@ 0x64
 80042c2:	f200 8207 	bhi.w	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	05da      	lsls	r2, r3, #23
 80042ca:	d5f5      	bpl.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
    if(ret == HAL_OK)
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	f040 8202 	bne.w	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042d2:	4a69      	ldr	r2, [pc, #420]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80042d4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80042d8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80042da:	4059      	eors	r1, r3
 80042dc:	f411 7f40 	tst.w	r1, #768	@ 0x300
 80042e0:	d00b      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e2:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80042e4:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e6:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ea:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80042ee:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042f0:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80042f2:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80042f6:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80042f8:	6711      	str	r1, [r2, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fe:	f000 81f9 	beq.w	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004302:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004306:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800430a:	f000 8207 	beq.w	800471c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800430e:	495a      	ldr	r1, [pc, #360]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004310:	690a      	ldr	r2, [r1, #16]
 8004312:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004316:	610a      	str	r2, [r1, #16]
 8004318:	4a57      	ldr	r2, [pc, #348]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800431a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004320:	430b      	orrs	r3, r1
 8004322:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	e57e      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004328:	4953      	ldr	r1, [pc, #332]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800432a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800432c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004330:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004332:	2d00      	cmp	r5, #0
 8004334:	f43f ac73 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004338:	462e      	mov	r6, r5
 800433a:	e478      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433c:	494e      	ldr	r1, [pc, #312]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800433e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004340:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004344:	62ca      	str	r2, [r1, #44]	@ 0x2c
      ret = HAL_ERROR;
 8004346:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8004348:	2d00      	cmp	r5, #0
 800434a:	f040 813a 	bne.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800434e:	494a      	ldr	r1, [pc, #296]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004350:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004352:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004354:	f022 0207 	bic.w	r2, r2, #7
 8004358:	4302      	orrs	r2, r0
 800435a:	650a      	str	r2, [r1, #80]	@ 0x50
 800435c:	e415      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435e:	4946      	ldr	r1, [pc, #280]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004360:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004362:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004366:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004368:	2d00      	cmp	r5, #0
 800436a:	f43f ac2f 	beq.w	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800436e:	462e      	mov	r6, r5
 8004370:	e434      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004372:	4941      	ldr	r1, [pc, #260]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004374:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004376:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800437a:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 800437c:	2d00      	cmp	r5, #0
 800437e:	f43f ac91 	beq.w	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004382:	462e      	mov	r6, r5
 8004384:	e495      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004386:	483c      	ldr	r0, [pc, #240]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004388:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800438a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800438e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004390:	f7ff bbe6 	b.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004394:	4838      	ldr	r0, [pc, #224]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004396:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004398:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800439c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 800439e:	2d00      	cmp	r5, #0
 80043a0:	f47f af03 	bne.w	80041aa <HAL_RCCEx_PeriphCLKConfig+0x696>
 80043a4:	e70a      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a6:	4934      	ldr	r1, [pc, #208]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80043a8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80043aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80043ae:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	f43f ae86 	beq.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 80043b6:	462e      	mov	r6, r5
 80043b8:	e68a      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80043bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043be:	f002 0203 	and.w	r2, r2, #3
 80043c2:	2a03      	cmp	r2, #3
 80043c4:	f43f ae4f 	beq.w	8004066 <HAL_RCCEx_PeriphCLKConfig+0x552>
 80043c8:	1d20      	adds	r0, r4, #4
 80043ca:	f7ff fabf 	bl	800394c <RCCEx_PLL2_Config.part.0>
 80043ce:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043d0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	f43f af44 	beq.w	8004260 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80043d8:	e142      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043da:	4a27      	ldr	r2, [pc, #156]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80043dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043de:	f002 0203 	and.w	r2, r2, #3
 80043e2:	2a03      	cmp	r2, #3
 80043e4:	f43f acbc 	beq.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80043e8:	2101      	movs	r1, #1
 80043ea:	1d20      	adds	r0, r4, #4
 80043ec:	f7ff faae 	bl	800394c <RCCEx_PLL2_Config.part.0>
 80043f0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80043f4:	2d00      	cmp	r5, #0
 80043f6:	f43f af09 	beq.w	800420c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80043fa:	e001      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80043fc:	462e      	mov	r6, r5
 80043fe:	e50f      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004400:	462e      	mov	r6, r5
 8004402:	e4af      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8004404:	462e      	mov	r6, r5
 8004406:	e42d      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004408:	462e      	mov	r6, r5
 800440a:	e640      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x57a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800440c:	4a1a      	ldr	r2, [pc, #104]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800440e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004410:	f002 0203 	and.w	r2, r2, #3
 8004414:	2a03      	cmp	r2, #3
 8004416:	f43f acf1 	beq.w	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800441a:	2101      	movs	r1, #1
 800441c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004420:	f7ff fb06 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 8004424:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004426:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004428:	2d00      	cmp	r5, #0
 800442a:	f43f ac83 	beq.w	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800442e:	e10d      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004430:	4a11      	ldr	r2, [pc, #68]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004432:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004434:	f002 0203 	and.w	r2, r2, #3
 8004438:	2a03      	cmp	r2, #3
 800443a:	f43f ae8e 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x646>
 800443e:	2102      	movs	r1, #2
 8004440:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004444:	f7ff faf4 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 8004448:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800444a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800444c:	2d00      	cmp	r5, #0
 800444e:	f43f ad8a 	beq.w	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004452:	e103      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004454:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004456:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004458:	f002 0203 	and.w	r2, r2, #3
 800445c:	2a03      	cmp	r2, #3
 800445e:	f43f acc0 	beq.w	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004462:	2101      	movs	r1, #1
 8004464:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004468:	f7ff fae2 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 800446c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800446e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004470:	2d00      	cmp	r5, #0
 8004472:	f43f ac3c 	beq.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004476:	e0ee      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8004478:	58024400 	.word	0x58024400
 800447c:	58024800 	.word	0x58024800
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004480:	4aae      	ldr	r2, [pc, #696]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 8004482:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004484:	f002 0203 	and.w	r2, r2, #3
 8004488:	2a03      	cmp	r2, #3
 800448a:	f43f ac94 	beq.w	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800448e:	2102      	movs	r1, #2
 8004490:	1d20      	adds	r0, r4, #4
 8004492:	f7ff fa5b 	bl	800394c <RCCEx_PLL2_Config.part.0>
 8004496:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004498:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800449a:	2d00      	cmp	r5, #0
 800449c:	f43f abdb 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80044a0:	e7b0      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044a2:	4aa6      	ldr	r2, [pc, #664]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80044a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044a6:	f002 0203 	and.w	r2, r2, #3
 80044aa:	2a03      	cmp	r2, #3
 80044ac:	f43f aded 	beq.w	800408a <HAL_RCCEx_PeriphCLKConfig+0x576>
 80044b0:	2101      	movs	r1, #1
 80044b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80044b6:	f7ff fabb 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 80044ba:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044bc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80044be:	2d00      	cmp	r5, #0
 80044c0:	f43f aeb4 	beq.w	800422c <HAL_RCCEx_PeriphCLKConfig+0x718>
 80044c4:	e7a0      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044c6:	4a9d      	ldr	r2, [pc, #628]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80044c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044ca:	f002 0203 	and.w	r2, r2, #3
 80044ce:	2a03      	cmp	r2, #3
 80044d0:	f000 810c 	beq.w	80046ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80044d4:	2102      	movs	r1, #2
 80044d6:	1d20      	adds	r0, r4, #4
 80044d8:	f7ff fa38 	bl	800394c <RCCEx_PLL2_Config.part.0>
 80044dc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044de:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80044e0:	2d00      	cmp	r5, #0
 80044e2:	f43f ac96 	beq.w	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80044e6:	e789      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044e8:	4a94      	ldr	r2, [pc, #592]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80044ea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044ec:	f002 0203 	and.w	r2, r2, #3
 80044f0:	2a03      	cmp	r2, #3
 80044f2:	f43f ae3f 	beq.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x660>
 80044f6:	2102      	movs	r1, #2
 80044f8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80044fc:	f7ff fa98 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 8004500:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004502:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004504:	2d00      	cmp	r5, #0
 8004506:	f43f ad55 	beq.w	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800450a:	e0a2      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800450c:	4a8b      	ldr	r2, [pc, #556]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 800450e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004510:	f002 0203 	and.w	r2, r2, #3
 8004514:	2a03      	cmp	r2, #3
 8004516:	f43f ae3a 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800451a:	2102      	movs	r1, #2
 800451c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004520:	f7ff fa86 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 8004524:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004526:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004528:	2d00      	cmp	r5, #0
 800452a:	f43f ad6a 	beq.w	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800452e:	e09b      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xb54>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004530:	4a82      	ldr	r2, [pc, #520]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 8004532:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004534:	f002 0203 	and.w	r2, r2, #3
 8004538:	2a03      	cmp	r2, #3
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
 800453c:	2102      	movs	r1, #2
 800453e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004542:	f7ff fa75 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004546:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800454a:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800454c:	2800      	cmp	r0, #0
 800454e:	f43f ad75 	beq.w	800403c <HAL_RCCEx_PeriphCLKConfig+0x528>
        status = HAL_ERROR;
 8004552:	2601      	movs	r6, #1
 8004554:	e572      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x528>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004556:	4a79      	ldr	r2, [pc, #484]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 8004558:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800455a:	f002 0203 	and.w	r2, r2, #3
 800455e:	2a03      	cmp	r2, #3
 8004560:	d009      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004562:	2102      	movs	r1, #2
 8004564:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004568:	f7ff fa62 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800456c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800456e:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004570:	2800      	cmp	r0, #0
 8004572:	f43f ad55 	beq.w	8004020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
          status = HAL_ERROR;
 8004576:	2601      	movs	r6, #1
 8004578:	e552      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800457a:	4a70      	ldr	r2, [pc, #448]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 800457c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800457e:	f002 0203 	and.w	r2, r2, #3
 8004582:	2a03      	cmp	r2, #3
 8004584:	f43f ae75 	beq.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8004588:	2102      	movs	r1, #2
 800458a:	3024      	adds	r0, #36	@ 0x24
 800458c:	f7ff fa50 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 8004590:	4606      	mov	r6, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004592:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004594:	2e00      	cmp	r6, #0
 8004596:	f47f aaea 	bne.w	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800459a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800459c:	f7ff bae0 	b.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045a0:	4a66      	ldr	r2, [pc, #408]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80045a2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045a4:	f002 0203 	and.w	r2, r2, #3
 80045a8:	2a03      	cmp	r2, #3
 80045aa:	f43f aaec 	beq.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80045ae:	2100      	movs	r1, #0
 80045b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80045b4:	f7ff fa3c 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 80045b8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045ba:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80045bc:	2d00      	cmp	r5, #0
 80045be:	f43f aec6 	beq.w	800434e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80045c2:	462e      	mov	r6, r5
 80045c4:	f7ff bae1 	b.w	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045c8:	4a5c      	ldr	r2, [pc, #368]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80045ca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045cc:	f002 0203 	and.w	r2, r2, #3
 80045d0:	2a03      	cmp	r2, #3
 80045d2:	f43f abfb 	beq.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80045d6:	2100      	movs	r1, #0
 80045d8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80045dc:	f7ff fa28 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	4605      	mov	r5, r0
 80045e4:	f7ff bb5b 	b.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045e8:	4a54      	ldr	r2, [pc, #336]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80045ea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045ec:	f002 0203 	and.w	r2, r2, #3
 80045f0:	2a03      	cmp	r2, #3
 80045f2:	f43f aac8 	beq.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80045f6:	2100      	movs	r1, #0
 80045f8:	1d20      	adds	r0, r4, #4
 80045fa:	f7ff f9a7 	bl	800394c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	4605      	mov	r5, r0
 8004602:	e6a1      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x834>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004604:	4a4d      	ldr	r2, [pc, #308]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 8004606:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004608:	f002 0203 	and.w	r2, r2, #3
 800460c:	2a03      	cmp	r2, #3
 800460e:	f43f abcc 	beq.w	8003daa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004612:	2100      	movs	r1, #0
 8004614:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004618:	f7ff fa0a 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	4605      	mov	r5, r0
 8004620:	f7ff bafa 	b.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x104>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004624:	4a45      	ldr	r2, [pc, #276]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 8004626:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004628:	f002 0203 	and.w	r2, r2, #3
 800462c:	2a03      	cmp	r2, #3
 800462e:	f43f abaf 	beq.w	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004632:	2100      	movs	r1, #0
 8004634:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004638:	f7ff f9fa 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	4605      	mov	r5, r0
 8004640:	f7ff bac1 	b.w	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8004644:	462e      	mov	r6, r5
 8004646:	e445      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004648:	462e      	mov	r6, r5
 800464a:	e46d      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800464c:	462e      	mov	r6, r5
 800464e:	f7ff bb79 	b.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004652:	462e      	mov	r6, r5
 8004654:	e4b6      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004656:	462e      	mov	r6, r5
 8004658:	f7ff bb50 	b.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800465c:	462e      	mov	r6, r5
 800465e:	e48a      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8004660:	462e      	mov	r6, r5
 8004662:	e502      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x556>
 8004664:	462e      	mov	r6, r5
 8004666:	e410      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004668:	462e      	mov	r6, r5
 800466a:	e4d2      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800466c:	4a33      	ldr	r2, [pc, #204]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 800466e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004670:	f002 0203 	and.w	r2, r2, #3
 8004674:	2a03      	cmp	r2, #3
 8004676:	d032      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8004678:	2101      	movs	r1, #1
 800467a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800467e:	f7ff f9d7 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 8004682:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004684:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004686:	2d00      	cmp	r5, #0
 8004688:	f43f ac1d 	beq.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800468c:	e7da      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800468e:	4a2b      	ldr	r2, [pc, #172]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 8004690:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004692:	f002 0203 	and.w	r2, r2, #3
 8004696:	2a03      	cmp	r2, #3
 8004698:	d025      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
 800469a:	2101      	movs	r1, #1
 800469c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80046a0:	f7ff f9c6 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 80046a4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046a6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	f43f ac35 	beq.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80046ae:	e7cb      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb34>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046b0:	4a22      	ldr	r2, [pc, #136]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80046b2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046b4:	f002 0203 	and.w	r2, r2, #3
 80046b8:	2a03      	cmp	r2, #3
 80046ba:	f43f abe4 	beq.w	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80046be:	2101      	movs	r1, #1
 80046c0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80046c4:	f7ff f9b4 	bl	8003a30 <RCCEx_PLL3_Config.part.0>
 80046c8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	f43f ade2 	beq.w	8004296 <HAL_RCCEx_PeriphCLKConfig+0x782>
 80046d2:	e7c7      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xb50>
        ret = HAL_TIMEOUT;
 80046d4:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	462e      	mov	r6, r5
 80046da:	f7ff bba4 	b.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = HAL_ERROR;
 80046de:	2601      	movs	r6, #1
 80046e0:	4635      	mov	r5, r6
 80046e2:	f7ff bbf7 	b.w	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      ret = HAL_ERROR;
 80046e6:	2601      	movs	r6, #1
 80046e8:	4635      	mov	r5, r6
 80046ea:	e41d      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x414>
      ret = HAL_ERROR;
 80046ec:	2601      	movs	r6, #1
 80046ee:	4635      	mov	r5, r6
 80046f0:	f7ff bb96 	b.w	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        tickstart = HAL_GetTick();
 80046f4:	f7fc fd2c 	bl	8001150 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>
        tickstart = HAL_GetTick();
 80046fc:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004702:	e004      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fc fd24 	bl	8001150 <HAL_GetTick>
 8004708:	1bc0      	subs	r0, r0, r7
 800470a:	4548      	cmp	r0, r9
 800470c:	d810      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800470e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004712:	079b      	lsls	r3, r3, #30
 8004714:	d5f6      	bpl.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800471a:	e5f2      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 800471c:	4807      	ldr	r0, [pc, #28]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 800471e:	4a08      	ldr	r2, [pc, #32]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 8004720:	6901      	ldr	r1, [r0, #16]
 8004722:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004726:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800472a:	430a      	orrs	r2, r1
 800472c:	6102      	str	r2, [r0, #16]
 800472e:	e5f3      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x804>
        status = ret;
 8004730:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	4635      	mov	r5, r6
 8004736:	f7ff bb76 	b.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
 8004740:	00ffffcf 	.word	0x00ffffcf

08004744 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004744:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004746:	f7ff f871 	bl	800382c <HAL_RCC_GetHCLKFreq>
 800474a:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800474c:	4a05      	ldr	r2, [pc, #20]	@ (8004764 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004754:	5cd3      	ldrb	r3, [r2, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
}
 800475a:	40d8      	lsrs	r0, r3
 800475c:	bd08      	pop	{r3, pc}
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	08015a18 	.word	0x08015a18

08004768 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004768:	4a47      	ldr	r2, [pc, #284]	@ (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800476a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800476c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800476e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004770:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8004772:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004776:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800477a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 800477c:	d05b      	beq.n	8004836 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800477e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004782:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004786:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800478a:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800478e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8004792:	2c01      	cmp	r4, #1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004798:	ee06 1a90 	vmov	s13, r1
 800479c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80047a0:	d003      	beq.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80047a2:	2c02      	cmp	r4, #2
 80047a4:	d06a      	beq.n	800487c <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 80047a6:	2c00      	cmp	r4, #0
 80047a8:	d04a      	beq.n	8004840 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047aa:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800488c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80047ae:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80047b2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80047b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80047c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80047cc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80047d2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80047d6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80047d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80047dc:	ee07 3a10 	vmov	s14, r3
 80047e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80047e4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80047ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80047f2:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80047f6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80047f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80047fc:	ee07 3a10 	vmov	s14, r3
 8004800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004804:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004808:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800480c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004810:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004814:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004816:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800481a:	ee06 3a90 	vmov	s13, r3
 800481e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004822:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004826:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800482a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800482e:	ee17 3a90 	vmov	r3, s15
 8004832:	6083      	str	r3, [r0, #8]
}
 8004834:	4770      	bx	lr
 8004836:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004838:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800483c:	6083      	str	r3, [r0, #8]
}
 800483e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	069b      	lsls	r3, r3, #26
 8004844:	d51d      	bpl.n	8004882 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004846:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004848:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800484c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800484e:	4910      	ldr	r1, [pc, #64]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8004850:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004854:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004858:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	ee06 1a10 	vmov	s12, r1
 8004862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004866:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800486a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800486e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8004872:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800487a:	e7a9      	b.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800487c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004880:	e795      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004882:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8004886:	e792      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004888:	58024400 	.word	0x58024400
 800488c:	4a742400 	.word	0x4a742400
 8004890:	03d09000 	.word	0x03d09000
 8004894:	4af42400 	.word	0x4af42400
 8004898:	4c742400 	.word	0x4c742400

0800489c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800489c:	4a47      	ldr	r2, [pc, #284]	@ (80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800489e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048a2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048a4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 80048a6:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048aa:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 80048b0:	d05b      	beq.n	800496a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048b2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048b6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048ba:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048be:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048c2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80048c6:	2c01      	cmp	r4, #1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048cc:	ee06 1a90 	vmov	s13, r1
 80048d0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80048d4:	d003      	beq.n	80048de <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80048d6:	2c02      	cmp	r4, #2
 80048d8:	d06a      	beq.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80048da:	2c00      	cmp	r4, #0
 80048dc:	d04a      	beq.n	8004974 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048de:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80048e2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80048e6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80048e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80048f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004900:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004904:	4a2d      	ldr	r2, [pc, #180]	@ (80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8004906:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800490a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800490c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004910:	ee07 3a10 	vmov	s14, r3
 8004914:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004918:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800491a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800491e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004922:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004926:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800492a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800492c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004930:	ee07 3a10 	vmov	s14, r3
 8004934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004938:	ee37 7a06 	vadd.f32	s14, s14, s12
 800493c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004940:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004944:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004948:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800494a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800494e:	ee06 3a90 	vmov	s13, r3
 8004952:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004956:	ee76 6a86 	vadd.f32	s13, s13, s12
 800495a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800495e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004962:	ee17 3a90 	vmov	r3, s15
 8004966:	6083      	str	r3, [r0, #8]
}
 8004968:	4770      	bx	lr
 800496a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800496c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004970:	6083      	str	r3, [r0, #8]
}
 8004972:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	069b      	lsls	r3, r3, #26
 8004978:	d51d      	bpl.n	80049b6 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800497a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800497c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004980:	6c13      	ldr	r3, [r2, #64]	@ 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004982:	4910      	ldr	r1, [pc, #64]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004984:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800498c:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	ee06 1a10 	vmov	s12, r1
 8004996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800499a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800499e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80049a2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80049a6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80049aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ae:	e7a9      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80049b4:	e795      	b.n	80048e2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049b6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 80049ba:	e792      	b.n	80048e2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80049bc:	58024400 	.word	0x58024400
 80049c0:	4a742400 	.word	0x4a742400
 80049c4:	03d09000 	.word	0x03d09000
 80049c8:	4af42400 	.word	0x4af42400
 80049cc:	4c742400 	.word	0x4c742400

080049d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d0:	4a47      	ldr	r2, [pc, #284]	@ (8004af0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 80049d2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80049d6:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80049d8:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 80049da:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80049de:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049e2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 80049e4:	d05b      	beq.n	8004a9e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049e6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80049ea:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ee:	f004 0403 	and.w	r4, r4, #3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049f2:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049f6:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80049fa:	2c01      	cmp	r4, #1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a00:	ee06 1a90 	vmov	s13, r1
 8004a04:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004a08:	d06f      	beq.n	8004aea <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8004a0a:	2c02      	cmp	r4, #2
 8004a0c:	d06a      	beq.n	8004ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	d04a      	beq.n	8004aa8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a12:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004af4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004a16:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004a1a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a30:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004a34:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004a38:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8004a3a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004a3e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004a40:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004a44:	ee07 3a10 	vmov	s14, r3
 8004a48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004a4c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004a4e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a56:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004a5a:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004a5e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004a60:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004a64:	ee07 3a10 	vmov	s14, r3
 8004a68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a74:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004a78:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004a7c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004a7e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004a82:	ee06 3a90 	vmov	s13, r3
 8004a86:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a8a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004a8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a92:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004a96:	ee17 3a90 	vmov	r3, s15
 8004a9a:	6083      	str	r3, [r0, #8]
}
 8004a9c:	4770      	bx	lr
 8004a9e:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004aa0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004aa4:	6083      	str	r3, [r0, #8]
}
 8004aa6:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	069b      	lsls	r3, r3, #26
 8004aac:	d5b1      	bpl.n	8004a12 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aae:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004ab4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ab6:	4910      	ldr	r1, [pc, #64]	@ (8004af8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8004ab8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ac0:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	ee06 1a10 	vmov	s12, r1
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004ad2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004ad6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8004ada:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae2:	e7a9      	b.n	8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ae4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004afc <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8004ae8:	e795      	b.n	8004a16 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aea:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8004aee:	e792      	b.n	8004a16 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8004af0:	58024400 	.word	0x58024400
 8004af4:	4c742400 	.word	0x4c742400
 8004af8:	03d09000 	.word	0x03d09000
 8004afc:	4af42400 	.word	0x4af42400
 8004b00:	4a742400 	.word	0x4a742400

08004b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b04:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
{
 8004b08:	b500      	push	{lr}
 8004b0a:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b0c:	d057      	beq.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004b0e:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8004b12:	d01a      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004b14:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8004b18:	f000 80ad 	beq.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b1c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8004b20:	d060      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004b22:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8004b26:	f000 80bc 	beq.w	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004b2a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004b2e:	f000 80e5 	beq.w	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004b32:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004b36:	f000 80fa 	beq.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004b3a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b3e:	f000 80bf 	beq.w	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
           frequency = 0;
 8004b42:	2000      	movs	r0, #0
}
 8004b44:	b005      	add	sp, #20
 8004b46:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004b4a:	4a98      	ldr	r2, [pc, #608]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004b4c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b4e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
      switch (saiclocksource)
 8004b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b56:	f000 8089 	beq.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8004b5a:	d91e      	bls.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8004b5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b60:	d029      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
 8004b62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b66:	d1ec      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b68:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b6a:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b70:	0749      	lsls	r1, r1, #29
 8004b72:	d502      	bpl.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80d4 	beq.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b7a:	4a8c      	ldr	r2, [pc, #560]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	05d0      	lsls	r0, r2, #23
 8004b80:	d503      	bpl.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8004b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b86:	f000 810e 	beq.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b8a:	4a88      	ldr	r2, [pc, #544]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	0391      	lsls	r1, r2, #14
 8004b90:	d5d7      	bpl.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b96:	d1d4      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004b98:	e0a4      	b.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
      switch (saiclocksource)
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d03f      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ba2:	d1ce      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ba4:	6810      	ldr	r0, [r2, #0]
 8004ba6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bac:	a801      	add	r0, sp, #4
 8004bae:	f7ff fddb 	bl	8004768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bb2:	9801      	ldr	r0, [sp, #4]
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bb6:	487e      	ldr	r0, [pc, #504]	@ (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
}
 8004bb8:	b005      	add	sp, #20
 8004bba:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc2:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d8bb      	bhi.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004bca:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004c3d 	.word	0x08004c3d
 8004bd4:	08004c31 	.word	0x08004c31
 8004bd8:	08004c4d 	.word	0x08004c4d
 8004bdc:	08004bb7 	.word	0x08004bb7
 8004be0:	08004c49 	.word	0x08004c49
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004be4:	4a71      	ldr	r2, [pc, #452]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004be6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004be8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
      switch (srcclk)
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf0:	d03c      	beq.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8004bf2:	d935      	bls.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bf8:	d0dd      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
 8004bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bfe:	d1a0      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c00:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c02:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c08:	0750      	lsls	r0, r2, #29
 8004c0a:	d5b6      	bpl.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1b4      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c10:	4b66      	ldr	r3, [pc, #408]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004c12:	4868      	ldr	r0, [pc, #416]	@ (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c1a:	40d8      	lsrs	r0, r3
 8004c1c:	e7cc      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c1e:	6810      	ldr	r0, [r2, #0]
 8004c20:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004c24:	d0c8      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c26:	a801      	add	r0, sp, #4
 8004c28:	f7ff fed2 	bl	80049d0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c2c:	9802      	ldr	r0, [sp, #8]
 8004c2e:	e7c3      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c30:	4b5e      	ldr	r3, [pc, #376]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004c38:	d0be      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004c3a:	e7b7      	b.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004c44:	d0b8      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004c46:	e7ee      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c48:	4a58      	ldr	r2, [pc, #352]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004c4a:	e78d      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c4c:	4b57      	ldr	r3, [pc, #348]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004c54:	d0b0      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c56:	a801      	add	r0, sp, #4
 8004c58:	f7ff fe20 	bl	800489c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c5c:	9801      	ldr	r0, [sp, #4]
 8004c5e:	e7ab      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0dc      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c68:	d09c      	beq.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004c6a:	e76a      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c6c:	6810      	ldr	r0, [r2, #0]
 8004c6e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004c72:	d0a1      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004c74:	e7ef      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004c76:	4a4d      	ldr	r2, [pc, #308]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004c78:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004c7a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
      switch (saiclocksource)
 8004c7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c82:	d0f3      	beq.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8004c84:	d805      	bhi.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0c9      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004c8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c8e:	d089      	beq.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004c90:	e757      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004c92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c96:	d08e      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
 8004c98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c9c:	f43f af64 	beq.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004ca0:	e74f      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004ca2:	4a42      	ldr	r2, [pc, #264]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004ca4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ca6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
      switch (srcclk)
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cae:	d01b      	beq.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 8004cb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb4:	f43f af58 	beq.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f47f af42 	bne.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004cbe:	e771      	b.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004cc2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004cc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (srcclk)
 8004cc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ccc:	d0a7      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd2:	d077      	beq.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f af34 	bne.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004cda:	6810      	ldr	r0, [r2, #0]
 8004cdc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004ce0:	f43f af6a 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = HSE_VALUE;
 8004ce4:	4834      	ldr	r0, [pc, #208]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004ce6:	e767      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ce8:	6810      	ldr	r0, [r2, #0]
 8004cea:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004cee:	f43f af63 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cf2:	a801      	add	r0, sp, #4
 8004cf4:	f7ff fdd2 	bl	800489c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004cf8:	9803      	ldr	r0, [sp, #12]
 8004cfa:	e75d      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
      switch (srcclk)
 8004d00:	03d2      	lsls	r2, r2, #15
 8004d02:	d59c      	bpl.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004d0a:	f43f af55 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d0e:	a801      	add	r0, sp, #4
 8004d10:	f7ff fd2a 	bl	8004768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d14:	9803      	ldr	r0, [sp, #12]
 8004d16:	e74f      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d18:	6810      	ldr	r0, [r2, #0]
 8004d1a:	f010 0004 	ands.w	r0, r0, #4
 8004d1e:	f43f af4b 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	4823      	ldr	r0, [pc, #140]	@ (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8004d26:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004d2a:	40d8      	lsrs	r0, r3
 8004d2c:	e744      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004d30:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004d32:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
      switch (srcclk)
 8004d36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d3a:	d0ed      	beq.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8004d3c:	d810      	bhi.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004d3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d42:	d03f      	beq.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d48:	d118      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d4a:	4b18      	ldr	r3, [pc, #96]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004d52:	f43f af31 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d56:	a801      	add	r0, sp, #4
 8004d58:	f7ff fda0 	bl	800489c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d5c:	9802      	ldr	r0, [sp, #8]
 8004d5e:	e72b      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d64:	d019      	beq.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
 8004d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d6a:	f47f aeea 	bne.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004d76:	f43f af1f 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004d7a:	e7b3      	b.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
      switch (srcclk)
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f aee0 	bne.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d82:	f7fe fd53 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8004d86:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004d88:	4a0c      	ldr	r2, [pc, #48]	@ (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004d90:	5cd3      	ldrb	r3, [r2, r3]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	40d8      	lsrs	r0, r3
          break;
 8004d98:	e70e      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d9a:	4b04      	ldr	r3, [pc, #16]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8004da2:	f43f af09 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = CSI_VALUE;
 8004da6:	4806      	ldr	r0, [pc, #24]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004da8:	e706      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400
 8004db0:	00bb8000 	.word	0x00bb8000
 8004db4:	03d09000 	.word	0x03d09000
 8004db8:	007a1200 	.word	0x007a1200
 8004dbc:	08015a18 	.word	0x08015a18
 8004dc0:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dc4:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004dcc:	f43f aef4 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd0:	a801      	add	r0, sp, #4
 8004dd2:	f7ff fcc9 	bl	8004768 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004dd6:	9802      	ldr	r0, [sp, #8]
 8004dd8:	e6ee      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004dda:	bf00      	nop
 8004ddc:	58024400 	.word	0x58024400

08004de0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop

08004de4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d149      	bne.n	8004e80 <HAL_TIM_Base_Start_IT+0x9c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dec:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004dee:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df0:	4b24      	ldr	r3, [pc, #144]	@ (8004e84 <HAL_TIM_Base_Start_IT+0xa0>)
 8004df2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004df6:	bf18      	it	ne
 8004df8:	429a      	cmpne	r2, r3
{
 8004dfa:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	4d21      	ldr	r5, [pc, #132]	@ (8004e88 <HAL_TIM_Base_Start_IT+0xa4>)
 8004e04:	4c21      	ldr	r4, [pc, #132]	@ (8004e8c <HAL_TIM_Base_Start_IT+0xa8>)
 8004e06:	42aa      	cmp	r2, r5
 8004e08:	bf08      	it	eq
 8004e0a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0e:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e12:	481f      	ldr	r0, [pc, #124]	@ (8004e90 <HAL_TIM_Base_Start_IT+0xac>)
 8004e14:	42a2      	cmp	r2, r4
 8004e16:	bf08      	it	eq
 8004e18:	f043 0301 	orreq.w	r3, r3, #1
 8004e1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e20:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	42a2      	cmp	r2, r4
 8004e24:	bf08      	it	eq
 8004e26:	f043 0301 	orreq.w	r3, r3, #1
 8004e2a:	f504 6440 	add.w	r4, r4, #3072	@ 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e2e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e32:	4282      	cmp	r2, r0
 8004e34:	bf08      	it	eq
 8004e36:	f043 0301 	orreq.w	r3, r3, #1
 8004e3a:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e3e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	42a2      	cmp	r2, r4
 8004e42:	bf08      	it	eq
 8004e44:	f043 0301 	orreq.w	r3, r3, #1
 8004e48:	4912      	ldr	r1, [pc, #72]	@ (8004e94 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e4a:	4282      	cmp	r2, r0
 8004e4c:	bf08      	it	eq
 8004e4e:	f043 0301 	orreq.w	r3, r3, #1
 8004e52:	428a      	cmp	r2, r1
 8004e54:	bf08      	it	eq
 8004e56:	f043 0301 	orreq.w	r3, r3, #1
 8004e5a:	b913      	cbnz	r3, 8004e62 <HAL_TIM_Base_Start_IT+0x7e>
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e62:	6891      	ldr	r1, [r2, #8]
 8004e64:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <HAL_TIM_Base_Start_IT+0xb8>)
 8004e66:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e68:	2b06      	cmp	r3, #6
 8004e6a:	d006      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x96>
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004e7a:	2000      	movs	r0, #0
}
 8004e7c:	bc30      	pop	{r4, r5}
 8004e7e:	4770      	bx	lr
    return HAL_ERROR;
 8004e80:	2001      	movs	r0, #1
}
 8004e82:	4770      	bx	lr
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40010400 	.word	0x40010400
 8004e94:	4000e000 	.word	0x4000e000
 8004e98:	4000e400 	.word	0x4000e400
 8004e9c:	00010007 	.word	0x00010007

08004ea0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop

08004ea4 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop

08004ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop

08004eac <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop

08004eb0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb0:	6803      	ldr	r3, [r0, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	0791      	lsls	r1, r2, #30
{
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eba:	d502      	bpl.n	8004ec2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	0792      	lsls	r2, r2, #30
 8004ec0:	d468      	bmi.n	8004f94 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	0752      	lsls	r2, r2, #29
 8004ec6:	d502      	bpl.n	8004ece <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	0750      	lsls	r0, r2, #29
 8004ecc:	d44f      	bmi.n	8004f6e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	0711      	lsls	r1, r2, #28
 8004ed2:	d502      	bpl.n	8004eda <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	0712      	lsls	r2, r2, #28
 8004ed8:	d437      	bmi.n	8004f4a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	06d0      	lsls	r0, r2, #27
 8004ede:	d502      	bpl.n	8004ee6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	06d1      	lsls	r1, r2, #27
 8004ee4:	d41e      	bmi.n	8004f24 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	07d2      	lsls	r2, r2, #31
 8004eea:	d502      	bpl.n	8004ef2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	07d0      	lsls	r0, r2, #31
 8004ef0:	d469      	bmi.n	8004fc6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	0611      	lsls	r1, r2, #24
 8004ef6:	d502      	bpl.n	8004efe <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	0612      	lsls	r2, r2, #24
 8004efc:	d46b      	bmi.n	8004fd6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	05d0      	lsls	r0, r2, #23
 8004f02:	d502      	bpl.n	8004f0a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	0611      	lsls	r1, r2, #24
 8004f08:	d46d      	bmi.n	8004fe6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	0652      	lsls	r2, r2, #25
 8004f0e:	d502      	bpl.n	8004f16 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	0650      	lsls	r0, r2, #25
 8004f14:	d46f      	bmi.n	8004ff6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	0691      	lsls	r1, r2, #26
 8004f1a:	d502      	bpl.n	8004f22 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	0692      	lsls	r2, r2, #26
 8004f20:	d449      	bmi.n	8004fb6 <HAL_TIM_IRQHandler+0x106>
}
 8004f22:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f24:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f28:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f2c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004f36:	d16f      	bne.n	8005018 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f38:	f7ff ffb2 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff ffb3 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f44:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	7722      	strb	r2, [r4, #28]
 8004f48:	e7cd      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f4a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004f50:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f52:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f54:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	079b      	lsls	r3, r3, #30
 8004f5a:	d15a      	bne.n	8005012 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5c:	f7ff ffa0 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7ff ffa1 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f68:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	7722      	strb	r2, [r4, #28]
 8004f6c:	e7b5      	b.n	8004eda <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f6e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f72:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004f74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f76:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f78:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004f80:	d144      	bne.n	800500c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	f7ff ff8d 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f86:	4620      	mov	r0, r4
 8004f88:	f7ff ff8e 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f8e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f90:	7722      	strb	r2, [r4, #28]
 8004f92:	e79c      	b.n	8004ece <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f94:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f98:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f9c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	0799      	lsls	r1, r3, #30
 8004fa2:	d130      	bne.n	8005006 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa4:	f7ff ff7c 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f7ff ff7d 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fb0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	7722      	strb	r2, [r4, #28]
 8004fb4:	e785      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fb6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004fba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fbc:	611a      	str	r2, [r3, #16]
}
 8004fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004fc2:	f000 b8d7 	b.w	8005174 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fc6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fcc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fce:	f7fb fd8b 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	e78d      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004fda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fdc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004fde:	f000 f8cb 	bl	8005178 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	e78b      	b.n	8004efe <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fe6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8004fea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004fee:	f000 f8c5 	bl	800517c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	e789      	b.n	8004f0a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ff6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8004ffa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ffc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004ffe:	f7ff ff55 	bl	8004eac <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	e787      	b.n	8004f16 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8005006:	f7ff ff4d 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 800500a:	e7d0      	b.n	8004fae <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800500c:	f7ff ff4a 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 8005010:	e7bc      	b.n	8004f8c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	f7ff ff47 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 8005016:	e7a6      	b.n	8004f66 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005018:	f7ff ff44 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 800501c:	e791      	b.n	8004f42 <HAL_TIM_IRQHandler+0x92>
 800501e:	bf00      	nop

08005020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005022:	4a35      	ldr	r2, [pc, #212]	@ (80050f8 <TIM_Base_SetConfig+0xd8>)
 8005024:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005028:	4c34      	ldr	r4, [pc, #208]	@ (80050fc <TIM_Base_SetConfig+0xdc>)
 800502a:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 800502e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005030:	eba0 0e04 	sub.w	lr, r0, r4
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005036:	fab2 f282 	clz	r2, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503a:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800503c:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005042:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005046:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800504a:	d028      	beq.n	800509e <TIM_Base_SetConfig+0x7e>
 800504c:	bb3a      	cbnz	r2, 800509e <TIM_Base_SetConfig+0x7e>
 800504e:	f8df c0bc 	ldr.w	ip, [pc, #188]	@ 800510c <TIM_Base_SetConfig+0xec>
 8005052:	4560      	cmp	r0, ip
 8005054:	d023      	beq.n	800509e <TIM_Base_SetConfig+0x7e>
 8005056:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800505a:	4560      	cmp	r0, ip
 800505c:	d01f      	beq.n	800509e <TIM_Base_SetConfig+0x7e>
 800505e:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005062:	4560      	cmp	r0, ip
 8005064:	d01b      	beq.n	800509e <TIM_Base_SetConfig+0x7e>
 8005066:	f1be 0f00 	cmp.w	lr, #0
 800506a:	d118      	bne.n	800509e <TIM_Base_SetConfig+0x7e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506c:	4a24      	ldr	r2, [pc, #144]	@ (8005100 <TIM_Base_SetConfig+0xe0>)
 800506e:	4290      	cmp	r0, r2
 8005070:	d036      	beq.n	80050e0 <TIM_Base_SetConfig+0xc0>
 8005072:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005076:	4290      	cmp	r0, r2
 8005078:	d032      	beq.n	80050e0 <TIM_Base_SetConfig+0xc0>
 800507a:	4c22      	ldr	r4, [pc, #136]	@ (8005104 <TIM_Base_SetConfig+0xe4>)
 800507c:	f5a2 42c8 	sub.w	r2, r2, #25600	@ 0x6400
 8005080:	4290      	cmp	r0, r2
 8005082:	bf18      	it	ne
 8005084:	42a0      	cmpne	r0, r4
 8005086:	d02b      	beq.n	80050e0 <TIM_Base_SetConfig+0xc0>
 8005088:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800508c:	4290      	cmp	r0, r2
 800508e:	d027      	beq.n	80050e0 <TIM_Base_SetConfig+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005094:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005096:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005098:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800509a:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509c:	e01d      	b.n	80050da <TIM_Base_SetConfig+0xba>
    tmpcr1 |= Structure->CounterMode;
 800509e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80050a4:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a6:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ac:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b2:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80050b4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b6:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050b8:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050ba:	b962      	cbnz	r2, 80050d6 <TIM_Base_SetConfig+0xb6>
 80050bc:	f1be 0f00 	cmp.w	lr, #0
 80050c0:	d109      	bne.n	80050d6 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	4a11      	ldr	r2, [pc, #68]	@ (8005108 <TIM_Base_SetConfig+0xe8>)
 80050c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <TIM_Base_SetConfig+0xe0>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c6:	4298      	cmp	r0, r3
 80050c8:	bf18      	it	ne
 80050ca:	4290      	cmpne	r0, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d2:	4298      	cmp	r0, r3
 80050d4:	d101      	bne.n	80050da <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050da:	2301      	movs	r3, #1
 80050dc:	6143      	str	r3, [r0, #20]
}
 80050de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ec:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80050ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f0:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050f2:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f4:	e7e5      	b.n	80050c2 <TIM_Base_SetConfig+0xa2>
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400
 8005100:	40014000 	.word	0x40014000
 8005104:	40014800 	.word	0x40014800
 8005108:	40014400 	.word	0x40014400
 800510c:	40000400 	.word	0x40000400

08005110 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005110:	b370      	cbz	r0, 8005170 <HAL_TIM_Base_Init+0x60>
{
 8005112:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005114:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005118:	4604      	mov	r4, r0
 800511a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800511e:	b313      	cbz	r3, 8005166 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005120:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005122:	2302      	movs	r3, #2
 8005124:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	f851 0b04 	ldr.w	r0, [r1], #4
 800512c:	f7ff ff78 	bl	8005020 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005130:	2301      	movs	r3, #1
  return HAL_OK;
 8005132:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005134:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800513c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005140:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005144:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800514c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005154:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005158:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800515c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005160:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005164:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005166:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800516a:	f7ff fe39 	bl	8004de0 <HAL_TIM_Base_MspInit>
 800516e:	e7d7      	b.n	8005120 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005170:	2001      	movs	r0, #1
}
 8005172:	4770      	bx	lr

08005174 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop

08005178 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop

0800517c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop

08005180 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005180:	6901      	ldr	r1, [r0, #16]
 8005182:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005184:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005186:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005188:	49a6      	ldr	r1, [pc, #664]	@ (8005424 <UART_SetConfig+0x2a4>)
{
 800518a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800518c:	6945      	ldr	r5, [r0, #20]
{
 800518e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005190:	69c0      	ldr	r0, [r0, #28]
{
 8005192:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005194:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005196:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005198:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519a:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800519c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80051aa:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ac:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ae:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b0:	4a9d      	ldr	r2, [pc, #628]	@ (8005428 <UART_SetConfig+0x2a8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	f000 811f 	beq.w	80053f6 <UART_SetConfig+0x276>
    tmpreg |= huart->Init.OneBitSampling;
 80051b8:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ba:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80051bc:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051be:	4a9b      	ldr	r2, [pc, #620]	@ (800542c <UART_SetConfig+0x2ac>)
 80051c0:	4032      	ands	r2, r6
 80051c2:	4311      	orrs	r1, r2
 80051c4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c8:	f022 020f 	bic.w	r2, r2, #15
 80051cc:	432a      	orrs	r2, r5
 80051ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051d0:	4a97      	ldr	r2, [pc, #604]	@ (8005430 <UART_SetConfig+0x2b0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d02e      	beq.n	8005234 <UART_SetConfig+0xb4>
 80051d6:	4a97      	ldr	r2, [pc, #604]	@ (8005434 <UART_SetConfig+0x2b4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d020      	beq.n	800521e <UART_SetConfig+0x9e>
 80051dc:	4a96      	ldr	r2, [pc, #600]	@ (8005438 <UART_SetConfig+0x2b8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01d      	beq.n	800521e <UART_SetConfig+0x9e>
 80051e2:	4a96      	ldr	r2, [pc, #600]	@ (800543c <UART_SetConfig+0x2bc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d01a      	beq.n	800521e <UART_SetConfig+0x9e>
 80051e8:	4a95      	ldr	r2, [pc, #596]	@ (8005440 <UART_SetConfig+0x2c0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d017      	beq.n	800521e <UART_SetConfig+0x9e>
 80051ee:	4a95      	ldr	r2, [pc, #596]	@ (8005444 <UART_SetConfig+0x2c4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01f      	beq.n	8005234 <UART_SetConfig+0xb4>
 80051f4:	4a94      	ldr	r2, [pc, #592]	@ (8005448 <UART_SetConfig+0x2c8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d011      	beq.n	800521e <UART_SetConfig+0x9e>
 80051fa:	4a94      	ldr	r2, [pc, #592]	@ (800544c <UART_SetConfig+0x2cc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <UART_SetConfig+0x9e>
 8005200:	4a93      	ldr	r2, [pc, #588]	@ (8005450 <UART_SetConfig+0x2d0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d016      	beq.n	8005234 <UART_SetConfig+0xb4>
 8005206:	4a93      	ldr	r2, [pc, #588]	@ (8005454 <UART_SetConfig+0x2d4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <UART_SetConfig+0xb4>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 800520c:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005210:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8005214:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 8005216:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005218:	6763      	str	r3, [r4, #116]	@ 0x74

  return ret;
}
 800521a:	b006      	add	sp, #24
 800521c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800521e:	4b8e      	ldr	r3, [pc, #568]	@ (8005458 <UART_SetConfig+0x2d8>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b05      	cmp	r3, #5
 8005228:	d8f0      	bhi.n	800520c <UART_SetConfig+0x8c>
 800522a:	e8df f003 	tbb	[pc, r3]
 800522e:	5f9d      	.short	0x5f9d
 8005230:	977e7169 	.word	0x977e7169
 8005234:	4b88      	ldr	r3, [pc, #544]	@ (8005458 <UART_SetConfig+0x2d8>)
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800523c:	2b28      	cmp	r3, #40	@ 0x28
 800523e:	d8e5      	bhi.n	800520c <UART_SetConfig+0x8c>
 8005240:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <UART_SetConfig+0xc8>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	080053c3 	.word	0x080053c3
 800524c:	0800520d 	.word	0x0800520d
 8005250:	0800520d 	.word	0x0800520d
 8005254:	0800520d 	.word	0x0800520d
 8005258:	0800520d 	.word	0x0800520d
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	0800520d 	.word	0x0800520d
 8005268:	080052ed 	.word	0x080052ed
 800526c:	0800520d 	.word	0x0800520d
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	0800520d 	.word	0x0800520d
 800527c:	0800520d 	.word	0x0800520d
 8005280:	0800520d 	.word	0x0800520d
 8005284:	0800520d 	.word	0x0800520d
 8005288:	08005301 	.word	0x08005301
 800528c:	0800520d 	.word	0x0800520d
 8005290:	0800520d 	.word	0x0800520d
 8005294:	0800520d 	.word	0x0800520d
 8005298:	0800520d 	.word	0x0800520d
 800529c:	0800520d 	.word	0x0800520d
 80052a0:	0800520d 	.word	0x0800520d
 80052a4:	0800520d 	.word	0x0800520d
 80052a8:	08005311 	.word	0x08005311
 80052ac:	0800520d 	.word	0x0800520d
 80052b0:	0800520d 	.word	0x0800520d
 80052b4:	0800520d 	.word	0x0800520d
 80052b8:	0800520d 	.word	0x0800520d
 80052bc:	0800520d 	.word	0x0800520d
 80052c0:	0800520d 	.word	0x0800520d
 80052c4:	0800520d 	.word	0x0800520d
 80052c8:	0800532b 	.word	0x0800532b
 80052cc:	0800520d 	.word	0x0800520d
 80052d0:	0800520d 	.word	0x0800520d
 80052d4:	0800520d 	.word	0x0800520d
 80052d8:	0800520d 	.word	0x0800520d
 80052dc:	0800520d 	.word	0x0800520d
 80052e0:	0800520d 	.word	0x0800520d
 80052e4:	0800520d 	.word	0x0800520d
 80052e8:	0800535d 	.word	0x0800535d
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80052f0:	d040      	beq.n	8005374 <UART_SetConfig+0x1f4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052f2:	4668      	mov	r0, sp
 80052f4:	f7ff fa38 	bl	8004768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052f8:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80052fa:	b368      	cbz	r0, 8005358 <UART_SetConfig+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052fc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80052fe:	e018      	b.n	8005332 <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005300:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005304:	d06d      	beq.n	80053e2 <UART_SetConfig+0x262>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005306:	a803      	add	r0, sp, #12
 8005308:	f7ff fac8 	bl	800489c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800530c:	9804      	ldr	r0, [sp, #16]
        break;
 800530e:	e7f4      	b.n	80052fa <UART_SetConfig+0x17a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005310:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005314:	d05b      	beq.n	80053ce <UART_SetConfig+0x24e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005316:	4b50      	ldr	r3, [pc, #320]	@ (8005458 <UART_SetConfig+0x2d8>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	0692      	lsls	r2, r2, #26
 800531c:	d54c      	bpl.n	80053b8 <UART_SetConfig+0x238>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	484e      	ldr	r0, [pc, #312]	@ (800545c <UART_SetConfig+0x2dc>)
 8005322:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005326:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005328:	e003      	b.n	8005332 <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800532e:	484c      	ldr	r0, [pc, #304]	@ (8005460 <UART_SetConfig+0x2e0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005330:	d027      	beq.n	8005382 <UART_SetConfig+0x202>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005332:	4a4c      	ldr	r2, [pc, #304]	@ (8005464 <UART_SetConfig+0x2e4>)
 8005334:	6863      	ldr	r3, [r4, #4]
 8005336:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800533e:	fbb0 f0f1 	udiv	r0, r0, r1
 8005342:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005346:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800534a:	f1a0 0310 	sub.w	r3, r0, #16
 800534e:	4293      	cmp	r3, r2
 8005350:	f63f af5c 	bhi.w	800520c <UART_SetConfig+0x8c>
          huart->Instance->BRR = usartdiv;
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 8005358:	2000      	movs	r0, #0
 800535a:	e758      	b.n	800520e <UART_SetConfig+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005360:	d00f      	beq.n	8005382 <UART_SetConfig+0x202>
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005366:	e7e4      	b.n	8005332 <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005368:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800536c:	d026      	beq.n	80053bc <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800536e:	f7fe fa9d 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
        break;
 8005372:	e7c2      	b.n	80052fa <UART_SetConfig+0x17a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005374:	4668      	mov	r0, sp
 8005376:	f7ff f9f7 	bl	8004768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800537a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800537c:	2800      	cmp	r0, #0
 800537e:	d0eb      	beq.n	8005358 <UART_SetConfig+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005380:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005382:	4b38      	ldr	r3, [pc, #224]	@ (8005464 <UART_SetConfig+0x2e4>)
 8005384:	6862      	ldr	r2, [r4, #4]
 8005386:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800538a:	0853      	lsrs	r3, r2, #1
 800538c:	fbb0 f0f1 	udiv	r0, r0, r1
 8005390:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005394:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005398:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539c:	f1a3 0210 	sub.w	r2, r3, #16
 80053a0:	428a      	cmp	r2, r1
 80053a2:	f63f af33 	bhi.w	800520c <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a6:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053aa:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80053ae:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b0:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60cb      	str	r3, [r1, #12]
 80053b6:	e7cf      	b.n	8005358 <UART_SetConfig+0x1d8>
          pclk = (uint32_t) HSI_VALUE;
 80053b8:	4828      	ldr	r0, [pc, #160]	@ (800545c <UART_SetConfig+0x2dc>)
 80053ba:	e7ba      	b.n	8005332 <UART_SetConfig+0x1b2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fa76 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
        break;
 80053c0:	e7dc      	b.n	800537c <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053c6:	d011      	beq.n	80053ec <UART_SetConfig+0x26c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fe fa82 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
        break;
 80053cc:	e795      	b.n	80052fa <UART_SetConfig+0x17a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ce:	4b22      	ldr	r3, [pc, #136]	@ (8005458 <UART_SetConfig+0x2d8>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	0691      	lsls	r1, r2, #26
 80053d4:	d50d      	bpl.n	80053f2 <UART_SetConfig+0x272>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4820      	ldr	r0, [pc, #128]	@ (800545c <UART_SetConfig+0x2dc>)
 80053da:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80053de:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80053e0:	e7cf      	b.n	8005382 <UART_SetConfig+0x202>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e2:	a803      	add	r0, sp, #12
 80053e4:	f7ff fa5a 	bl	800489c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053e8:	9804      	ldr	r0, [sp, #16]
        break;
 80053ea:	e7c7      	b.n	800537c <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ec:	f7fe fa70 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
        break;
 80053f0:	e7c4      	b.n	800537c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80053f2:	481a      	ldr	r0, [pc, #104]	@ (800545c <UART_SetConfig+0x2dc>)
 80053f4:	e7c5      	b.n	8005382 <UART_SetConfig+0x202>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f6:	6898      	ldr	r0, [r3, #8]
 80053f8:	4a0c      	ldr	r2, [pc, #48]	@ (800542c <UART_SetConfig+0x2ac>)
 80053fa:	4002      	ands	r2, r0
 80053fc:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fe:	4916      	ldr	r1, [pc, #88]	@ (8005458 <UART_SetConfig+0x2d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005400:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005404:	f022 020f 	bic.w	r2, r2, #15
 8005408:	432a      	orrs	r2, r5
 800540a:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800540c:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	2b05      	cmp	r3, #5
 8005414:	f63f aefa 	bhi.w	800520c <UART_SetConfig+0x8c>
 8005418:	e8df f003 	tbb	[pc, r3]
 800541c:	26525b60 	.word	0x26525b60
 8005420:	6366      	.short	0x6366
 8005422:	bf00      	nop
 8005424:	cfff69f3 	.word	0xcfff69f3
 8005428:	58000c00 	.word	0x58000c00
 800542c:	11fff4ff 	.word	0x11fff4ff
 8005430:	40011000 	.word	0x40011000
 8005434:	40004400 	.word	0x40004400
 8005438:	40004800 	.word	0x40004800
 800543c:	40004c00 	.word	0x40004c00
 8005440:	40005000 	.word	0x40005000
 8005444:	40011400 	.word	0x40011400
 8005448:	40007800 	.word	0x40007800
 800544c:	40007c00 	.word	0x40007c00
 8005450:	40011800 	.word	0x40011800
 8005454:	40011c00 	.word	0x40011c00
 8005458:	58024400 	.word	0x58024400
 800545c:	03d09000 	.word	0x03d09000
 8005460:	003d0900 	.word	0x003d0900
 8005464:	08015a6c 	.word	0x08015a6c
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005468:	4b23      	ldr	r3, [pc, #140]	@ (80054f8 <UART_SetConfig+0x378>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	0690      	lsls	r0, r2, #26
 800546e:	d43d      	bmi.n	80054ec <UART_SetConfig+0x36c>
          pclk = (uint32_t) HSI_VALUE;
 8005470:	4822      	ldr	r0, [pc, #136]	@ (80054fc <UART_SetConfig+0x37c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005472:	4b23      	ldr	r3, [pc, #140]	@ (8005500 <UART_SetConfig+0x380>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005474:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005476:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800547a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800547e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005482:	4299      	cmp	r1, r3
 8005484:	f63f aec2 	bhi.w	800520c <UART_SetConfig+0x8c>
 8005488:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800548c:	f63f aebe 	bhi.w	800520c <UART_SetConfig+0x8c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005490:	2300      	movs	r3, #0
 8005492:	4619      	mov	r1, r3
 8005494:	f7fa ff94 	bl	80003c0 <__aeabi_uldivmod>
 8005498:	4632      	mov	r2, r6
 800549a:	0209      	lsls	r1, r1, #8
 800549c:	0203      	lsls	r3, r0, #8
 800549e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80054a2:	0870      	lsrs	r0, r6, #1
 80054a4:	1818      	adds	r0, r3, r0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	f141 0100 	adc.w	r1, r1, #0
 80054ae:	f7fa ff87 	bl	80003c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054b2:	4b14      	ldr	r3, [pc, #80]	@ (8005504 <UART_SetConfig+0x384>)
 80054b4:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80054b8:	429a      	cmp	r2, r3
 80054ba:	f63f aea7 	bhi.w	800520c <UART_SetConfig+0x8c>
 80054be:	e749      	b.n	8005354 <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054c0:	a803      	add	r0, sp, #12
 80054c2:	f7ff f9eb 	bl	800489c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054c6:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f43f af45 	beq.w	8005358 <UART_SetConfig+0x1d8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ce:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80054d0:	e7cf      	b.n	8005472 <UART_SetConfig+0x2f2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d2:	4668      	mov	r0, sp
 80054d4:	f7ff f948 	bl	8004768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054d8:	9801      	ldr	r0, [sp, #4]
        break;
 80054da:	e7f5      	b.n	80054c8 <UART_SetConfig+0x348>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054dc:	f7ff f932 	bl	8004744 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80054e0:	e7f2      	b.n	80054c8 <UART_SetConfig+0x348>
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80054e6:	e7c4      	b.n	8005472 <UART_SetConfig+0x2f2>
        pclk = (uint32_t) CSI_VALUE;
 80054e8:	4807      	ldr	r0, [pc, #28]	@ (8005508 <UART_SetConfig+0x388>)
 80054ea:	e7c2      	b.n	8005472 <UART_SetConfig+0x2f2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4803      	ldr	r0, [pc, #12]	@ (80054fc <UART_SetConfig+0x37c>)
 80054f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054f4:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80054f6:	e7bc      	b.n	8005472 <UART_SetConfig+0x2f2>
 80054f8:	58024400 	.word	0x58024400
 80054fc:	03d09000 	.word	0x03d09000
 8005500:	08015a6c 	.word	0x08015a6c
 8005504:	000ffcff 	.word	0x000ffcff
 8005508:	003d0900 	.word	0x003d0900

0800550c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800550c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800550e:	07da      	lsls	r2, r3, #31
{
 8005510:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005512:	d506      	bpl.n	8005522 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005514:	6801      	ldr	r1, [r0, #0]
 8005516:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005518:	684a      	ldr	r2, [r1, #4]
 800551a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800551e:	4322      	orrs	r2, r4
 8005520:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005522:	079c      	lsls	r4, r3, #30
 8005524:	d506      	bpl.n	8005534 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005526:	6801      	ldr	r1, [r0, #0]
 8005528:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800552a:	684a      	ldr	r2, [r1, #4]
 800552c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005530:	4322      	orrs	r2, r4
 8005532:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005534:	0759      	lsls	r1, r3, #29
 8005536:	d506      	bpl.n	8005546 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005538:	6801      	ldr	r1, [r0, #0]
 800553a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800553c:	684a      	ldr	r2, [r1, #4]
 800553e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005542:	4322      	orrs	r2, r4
 8005544:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005546:	071a      	lsls	r2, r3, #28
 8005548:	d506      	bpl.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800554a:	6801      	ldr	r1, [r0, #0]
 800554c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800554e:	684a      	ldr	r2, [r1, #4]
 8005550:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005554:	4322      	orrs	r2, r4
 8005556:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005558:	06dc      	lsls	r4, r3, #27
 800555a:	d506      	bpl.n	800556a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800555c:	6801      	ldr	r1, [r0, #0]
 800555e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005560:	688a      	ldr	r2, [r1, #8]
 8005562:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005566:	4322      	orrs	r2, r4
 8005568:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800556a:	0699      	lsls	r1, r3, #26
 800556c:	d506      	bpl.n	800557c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556e:	6801      	ldr	r1, [r0, #0]
 8005570:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005572:	688a      	ldr	r2, [r1, #8]
 8005574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005578:	4322      	orrs	r2, r4
 800557a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800557c:	065a      	lsls	r2, r3, #25
 800557e:	d50a      	bpl.n	8005596 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005580:	6801      	ldr	r1, [r0, #0]
 8005582:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005584:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005586:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800558a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800558e:	ea42 0204 	orr.w	r2, r2, r4
 8005592:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005594:	d00b      	beq.n	80055ae <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005596:	061b      	lsls	r3, r3, #24
 8005598:	d506      	bpl.n	80055a8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800559a:	6802      	ldr	r2, [r0, #0]
 800559c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800559e:	6853      	ldr	r3, [r2, #4]
 80055a0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6053      	str	r3, [r2, #4]
  }
}
 80055a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ac:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ae:	684a      	ldr	r2, [r1, #4]
 80055b0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80055b2:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80055b6:	4322      	orrs	r2, r4
 80055b8:	604a      	str	r2, [r1, #4]
 80055ba:	e7ec      	b.n	8005596 <UART_AdvFeatureConfig+0x8a>

080055bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c4:	4681      	mov	r9, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	4616      	mov	r6, r2
 80055ca:	469a      	mov	sl, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055cc:	6805      	ldr	r5, [r0, #0]
 80055ce:	e002      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80055d4:	d10a      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	69ec      	ldr	r4, [r5, #28]
 80055d8:	ea37 0404 	bics.w	r4, r7, r4
 80055dc:	bf0c      	ite	eq
 80055de:	2401      	moveq	r4, #1
 80055e0:	2400      	movne	r4, #0
 80055e2:	42b4      	cmp	r4, r6
 80055e4:	d0f4      	beq.n	80055d0 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80055e6:	2000      	movs	r0, #0
}
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ec:	f7fb fdb0 	bl	8001150 <HAL_GetTick>
 80055f0:	eba0 000a 	sub.w	r0, r0, sl
 80055f4:	4540      	cmp	r0, r8
 80055f6:	d835      	bhi.n	8005664 <UART_WaitOnFlagUntilTimeout+0xa8>
 80055f8:	f1b8 0f00 	cmp.w	r8, #0
 80055fc:	d032      	beq.n	8005664 <UART_WaitOnFlagUntilTimeout+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055fe:	f8d9 5000 	ldr.w	r5, [r9]
 8005602:	682a      	ldr	r2, [r5, #0]
 8005604:	462b      	mov	r3, r5
 8005606:	0751      	lsls	r1, r2, #29
 8005608:	d5e5      	bpl.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800560a:	69ea      	ldr	r2, [r5, #28]
 800560c:	0512      	lsls	r2, r2, #20
 800560e:	d5e2      	bpl.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005610:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005614:	622a      	str	r2, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	e855 2f00 	ldrex	r2, [r5]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800561a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	e845 2100 	strex	r1, r2, [r5]
 8005622:	b139      	cbz	r1, 8005634 <UART_WaitOnFlagUntilTimeout+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	e853 2f00 	ldrex	r2, [r3]
 8005628:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	e843 2100 	strex	r1, r2, [r3]
 8005630:	2900      	cmp	r1, #0
 8005632:	d1f7      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	f103 0008 	add.w	r0, r3, #8
 8005644:	e840 2100 	strex	r1, r2, [r0]
 8005648:	2900      	cmp	r1, #0
 800564a:	d1f3      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x78>
          huart->gState = HAL_UART_STATE_READY;
 800564c:	2320      	movs	r3, #32
 800564e:	f8c9 3084 	str.w	r3, [r9, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005652:	f8c9 3088 	str.w	r3, [r9, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005656:	f8c9 308c 	str.w	r3, [r9, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800565a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800565c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800565e:	f889 3080 	strb.w	r3, [r9, #128]	@ 0x80
 8005662:	e7c1      	b.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x2c>
 8005664:	f8d9 3000 	ldr.w	r3, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800566c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	e843 2100 	strex	r1, r2, [r3]
 8005674:	2900      	cmp	r1, #0
 8005676:	d1f7      	bne.n	8005668 <UART_WaitOnFlagUntilTimeout+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	f103 0208 	add.w	r2, r3, #8
 800567c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	f103 0008 	add.w	r0, r3, #8
 8005688:	e840 2100 	strex	r1, r2, [r0]
 800568c:	2900      	cmp	r1, #0
 800568e:	d1f3      	bne.n	8005678 <UART_WaitOnFlagUntilTimeout+0xbc>
        huart->gState = HAL_UART_STATE_READY;
 8005690:	2320      	movs	r3, #32
 8005692:	f8c9 3084 	str.w	r3, [r9, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005696:	f8c9 3088 	str.w	r3, [r9, #136]	@ 0x88
        return HAL_TIMEOUT;
 800569a:	e7de      	b.n	800565a <UART_WaitOnFlagUntilTimeout+0x9e>

0800569c <HAL_UART_Transmit>:
{
 800569c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056a0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80056a2:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 80056a6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d14b      	bne.n	8005744 <HAL_UART_Transmit+0xa8>
    if ((pData == NULL) || (Size == 0U))
 80056ac:	460d      	mov	r5, r1
 80056ae:	2900      	cmp	r1, #0
 80056b0:	d044      	beq.n	800573c <HAL_UART_Transmit+0xa0>
 80056b2:	fab2 f982 	clz	r9, r2
 80056b6:	4617      	mov	r7, r2
 80056b8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80056bc:	2a00      	cmp	r2, #0
 80056be:	d03d      	beq.n	800573c <HAL_UART_Transmit+0xa0>
    __HAL_LOCK(huart);
 80056c0:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 80056c4:	4604      	mov	r4, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d03c      	beq.n	8005744 <HAL_UART_Transmit+0xa8>
 80056ca:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	f8c0 908c 	str.w	r9, [r0, #140]	@ 0x8c
    __HAL_LOCK(huart);
 80056d0:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d4:	2321      	movs	r3, #33	@ 0x21
 80056d6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    tickstart = HAL_GetTick();
 80056da:	f7fb fd39 	bl	8001150 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056de:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80056e0:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 80056e2:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80056ea:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ee:	d040      	beq.n	8005772 <HAL_UART_Transmit+0xd6>
    while (huart->TxXferCount > 0U)
 80056f0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
    __HAL_UNLOCK(huart);
 80056f4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80056f6:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80056f8:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    while (huart->TxXferCount > 0U)
 80056fc:	b96b      	cbnz	r3, 800571a <HAL_UART_Transmit+0x7e>
 80056fe:	e029      	b.n	8005754 <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005700:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005704:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8005706:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800570a:	3a01      	subs	r2, #1
 800570c:	b292      	uxth	r2, r2
 800570e:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005712:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8005716:	b29b      	uxth	r3, r3
 8005718:	b1e3      	cbz	r3, 8005754 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	4643      	mov	r3, r8
 800571c:	2200      	movs	r2, #0
 800571e:	2180      	movs	r1, #128	@ 0x80
 8005720:	4620      	mov	r0, r4
 8005722:	9600      	str	r6, [sp, #0]
 8005724:	f7ff ff4a 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 8005728:	b980      	cbnz	r0, 800574c <HAL_UART_Transmit+0xb0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572a:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800572c:	2d00      	cmp	r5, #0
 800572e:	d1e7      	bne.n	8005700 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005730:	f839 2b02 	ldrh.w	r2, [r9], #2
 8005734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005738:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800573a:	e7e4      	b.n	8005706 <HAL_UART_Transmit+0x6a>
      return  HAL_ERROR;
 800573c:	2001      	movs	r0, #1
}
 800573e:	b003      	add	sp, #12
 8005740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(huart);
 8005744:	2002      	movs	r0, #2
}
 8005746:	b003      	add	sp, #12
 8005748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800574c:	2003      	movs	r0, #3
}
 800574e:	b003      	add	sp, #12
 8005750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005754:	4643      	mov	r3, r8
 8005756:	2200      	movs	r2, #0
 8005758:	2140      	movs	r1, #64	@ 0x40
 800575a:	4620      	mov	r0, r4
 800575c:	9600      	str	r6, [sp, #0]
 800575e:	f7ff ff2d 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 8005762:	2800      	cmp	r0, #0
 8005764:	d1f2      	bne.n	800574c <HAL_UART_Transmit+0xb0>
    huart->gState = HAL_UART_STATE_READY;
 8005766:	2320      	movs	r3, #32
 8005768:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
}
 800576c:	b003      	add	sp, #12
 800576e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1bb      	bne.n	80056f0 <HAL_UART_Transmit+0x54>
 8005778:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800577a:	461d      	mov	r5, r3
 800577c:	e7b8      	b.n	80056f0 <HAL_UART_Transmit+0x54>
 800577e:	bf00      	nop

08005780 <UART_CheckIdleState>:
{
 8005780:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	2600      	movs	r6, #0
{
 8005784:	4604      	mov	r4, r0
 8005786:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	f8c0 608c 	str.w	r6, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 800578c:	f7fb fce0 	bl	8001150 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005790:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005792:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	0712      	lsls	r2, r2, #28
 8005798:	d40e      	bmi.n	80057b8 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	075b      	lsls	r3, r3, #29
 800579e:	d41a      	bmi.n	80057d6 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80057a2:	2220      	movs	r2, #32
  return HAL_OK;
 80057a4:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80057a6:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 80057aa:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80057ae:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80057b4:	b002      	add	sp, #8
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b8:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 80057bc:	4603      	mov	r3, r0
 80057be:	4632      	mov	r2, r6
 80057c0:	4620      	mov	r0, r4
 80057c2:	9100      	str	r1, [sp, #0]
 80057c4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057c8:	f7ff fef8 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80057cc:	b978      	cbnz	r0, 80057ee <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	075b      	lsls	r3, r3, #29
 80057d4:	d5e4      	bpl.n	80057a0 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d6:	f06f 407e 	mvn.w	r0, #4261412864	@ 0xfe000000
 80057da:	462b      	mov	r3, r5
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057e2:	9000      	str	r0, [sp, #0]
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7ff fee9 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d0d8      	beq.n	80057a0 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80057ee:	2003      	movs	r0, #3
}
 80057f0:	b002      	add	sp, #8
 80057f2:	bd70      	pop	{r4, r5, r6, pc}

080057f4 <HAL_UART_Init>:
  if (huart == NULL)
 80057f4:	b380      	cbz	r0, 8005858 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80057f6:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 80057fa:	b510      	push	{r4, lr}
 80057fc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80057fe:	b333      	cbz	r3, 800584e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8005800:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005802:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005804:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005806:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005812:	f7ff fcb5 	bl	8005180 <UART_SetConfig>
 8005816:	2801      	cmp	r0, #1
 8005818:	d017      	beq.n	800584a <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800581a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800581c:	b98b      	cbnz	r3, 8005842 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800581e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005820:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005828:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005830:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	f042 0201 	orr.w	r2, r2, #1
}
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800583c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800583e:	f7ff bf9f 	b.w	8005780 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fe62 	bl	800550c <UART_AdvFeatureConfig>
 8005848:	e7e9      	b.n	800581e <HAL_UART_Init+0x2a>
}
 800584a:	2001      	movs	r0, #1
 800584c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800584e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 8005852:	f7fb f9d1 	bl	8000bf8 <HAL_UART_MspInit>
 8005856:	e7d3      	b.n	8005800 <HAL_UART_Init+0xc>
}
 8005858:	2001      	movs	r0, #1
 800585a:	4770      	bx	lr

0800585c <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800585c:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800585e:	4a0e      	ldr	r2, [pc, #56]	@ (8005898 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005860:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005862:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005864:	f3c1 6142 	ubfx	r1, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005868:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800586c:	5c53      	ldrb	r3, [r2, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800586e:	f812 200c 	ldrb.w	r2, [r2, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005872:	011b      	lsls	r3, r3, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005874:	0112      	lsls	r2, r2, #4
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8005876:	b410      	push	{r4}
                               (uint16_t)denominator[tx_fifo_threshold];
 8005878:	4c08      	ldr	r4, [pc, #32]	@ (800589c <UARTEx_SetNbDataToProcess.part.0+0x40>)
 800587a:	f814 c00c 	ldrb.w	ip, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800587e:	5c61      	ldrb	r1, [r4, r1]
  }
}
 8005880:	f85d 4b04 	ldr.w	r4, [sp], #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005884:	fbb2 f2fc 	udiv	r2, r2, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005888:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800588c:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005890:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
}
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	08015a8c 	.word	0x08015a8c
 800589c:	08015a84 	.word	0x08015a84

080058a0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80058a0:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 80058a4:	2a01      	cmp	r2, #1
 80058a6:	d017      	beq.n	80058d8 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a8:	6802      	ldr	r2, [r0, #0]
 80058aa:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	2024      	movs	r0, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058ae:	2100      	movs	r1, #0
{
 80058b0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80058b2:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80058b6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80058ba:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058bc:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80058c0:	f024 0401 	bic.w	r4, r4, #1
 80058c4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058c6:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c8:	6010      	str	r0, [r2, #0]
  return HAL_OK;
 80058ca:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80058cc:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 80058d0:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
}
 80058d4:	bc30      	pop	{r4, r5}
 80058d6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80058d8:	2002      	movs	r0, #2
}
 80058da:	4770      	bx	lr

080058dc <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 80058dc:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d020      	beq.n	8005926 <HAL_UARTEx_SetTxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 80058e4:	2324      	movs	r3, #36	@ 0x24
{
 80058e6:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e8:	6805      	ldr	r5, [r0, #0]
 80058ea:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80058ec:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058f0:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80058f2:	682b      	ldr	r3, [r5, #0]
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058fa:	68ab      	ldr	r3, [r5, #8]
 80058fc:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8005900:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005902:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005904:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005906:	b153      	cbz	r3, 800591e <HAL_UARTEx_SetTxFifoThreshold+0x42>
 8005908:	f7ff ffa8 	bl	800585c <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800590c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800590e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005910:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 8005912:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005914:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8005918:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800591c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800591e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005922:	6683      	str	r3, [r0, #104]	@ 0x68
 8005924:	e7f2      	b.n	800590c <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8005926:	2002      	movs	r0, #2
}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop

0800592c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800592c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8005930:	2b01      	cmp	r3, #1
 8005932:	d020      	beq.n	8005976 <HAL_UARTEx_SetRxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 8005934:	2324      	movs	r3, #36	@ 0x24
{
 8005936:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005938:	6805      	ldr	r5, [r0, #0]
 800593a:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800593c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005940:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005942:	682b      	ldr	r3, [r5, #0]
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800594a:	68ab      	ldr	r3, [r5, #8]
 800594c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8005950:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005952:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005954:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005956:	b153      	cbz	r3, 800596e <HAL_UARTEx_SetRxFifoThreshold+0x42>
 8005958:	f7ff ff80 	bl	800585c <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800595c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800595e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005960:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 8005962:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005964:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8005968:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800596c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800596e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005972:	6683      	str	r3, [r0, #104]	@ 0x68
 8005974:	e7f2      	b.n	800595c <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8005976:	2002      	movs	r0, #2
}
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop

0800597c <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop

08005980 <MX_LWIP_Init>:
	tcpip_init(tcpip_init_done, arg);
 8005980:	2100      	movs	r1, #0
{
 8005982:	b510      	push	{r4, lr}
	tcpip_init(tcpip_init_done, arg);
 8005984:	4608      	mov	r0, r1
{
 8005986:	b084      	sub	sp, #16
	tcpip_init(tcpip_init_done, arg);
 8005988:	f005 fc74 	bl	800b274 <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800598c:	4c1e      	ldr	r4, [pc, #120]	@ (8005a08 <MX_LWIP_Init+0x88>)
	LOCK_TCPIP_CORE();
 800598e:	f000 fc2b 	bl	80061e8 <sys_lock_tcpip_core>
  ipaddr.addr = 0;
 8005992:	2000      	movs	r0, #0
  gw.addr = 0;
 8005994:	4b1d      	ldr	r3, [pc, #116]	@ (8005a0c <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8005996:	491e      	ldr	r1, [pc, #120]	@ (8005a10 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 8005998:	4a1e      	ldr	r2, [pc, #120]	@ (8005a14 <MX_LWIP_Init+0x94>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800599a:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 800599c:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 800599e:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 80059a0:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80059a2:	481d      	ldr	r0, [pc, #116]	@ (8005a18 <MX_LWIP_Init+0x98>)
 80059a4:	9002      	str	r0, [sp, #8]
 80059a6:	481d      	ldr	r0, [pc, #116]	@ (8005a1c <MX_LWIP_Init+0x9c>)
 80059a8:	9001      	str	r0, [sp, #4]
 80059aa:	4620      	mov	r0, r4
 80059ac:	f006 f938 	bl	800bc20 <netif_add>
  netif_set_default(&gnetif);
 80059b0:	4620      	mov	r0, r4
 80059b2:	f006 f9e9 	bl	800bd88 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 80059b6:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
    netif_set_up(&gnetif);
 80059ba:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 80059bc:	075b      	lsls	r3, r3, #29
 80059be:	d520      	bpl.n	8005a02 <MX_LWIP_Init+0x82>
    netif_set_up(&gnetif);
 80059c0:	f006 f9ec 	bl	800bd9c <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80059c4:	4c16      	ldr	r4, [pc, #88]	@ (8005a20 <MX_LWIP_Init+0xa0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80059c6:	4917      	ldr	r1, [pc, #92]	@ (8005a24 <MX_LWIP_Init+0xa4>)
 80059c8:	480f      	ldr	r0, [pc, #60]	@ (8005a08 <MX_LWIP_Init+0x88>)
 80059ca:	f006 fa7f 	bl	800becc <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80059ce:	2220      	movs	r2, #32
 80059d0:	2100      	movs	r1, #0
 80059d2:	4620      	mov	r0, r4
 80059d4:	f00f f851 	bl	8014a7a <memset>
  attributes.name = "EthLink";
 80059d8:	1f22      	subs	r2, r4, #4
 80059da:	4813      	ldr	r0, [pc, #76]	@ (8005a28 <MX_LWIP_Init+0xa8>)
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80059dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  attributes.priority = osPriorityBelowNormal;
 80059e0:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80059e2:	6151      	str	r1, [r2, #20]
  attributes.name = "EthLink";
 80059e4:	f844 0c04 	str.w	r0, [r4, #-4]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80059e8:	4907      	ldr	r1, [pc, #28]	@ (8005a08 <MX_LWIP_Init+0x88>)
 80059ea:	4810      	ldr	r0, [pc, #64]	@ (8005a2c <MX_LWIP_Init+0xac>)
  attributes.priority = osPriorityBelowNormal;
 80059ec:	6193      	str	r3, [r2, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80059ee:	f000 fcff 	bl	80063f0 <osThreadNew>
  dhcp_start(&gnetif);
 80059f2:	4805      	ldr	r0, [pc, #20]	@ (8005a08 <MX_LWIP_Init+0x88>)
 80059f4:	f00c fde0 	bl	80125b8 <dhcp_start>
}
 80059f8:	b004      	add	sp, #16
 80059fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UNLOCK_TCPIP_CORE();
 80059fe:	f000 bc71 	b.w	80062e4 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 8005a02:	f006 f9ef 	bl	800bde4 <netif_set_down>
 8005a06:	e7dd      	b.n	80059c4 <MX_LWIP_Init+0x44>
 8005a08:	24000294 	.word	0x24000294
 8005a0c:	24000288 	.word	0x24000288
 8005a10:	24000290 	.word	0x24000290
 8005a14:	2400028c 	.word	0x2400028c
 8005a18:	0800b1e1 	.word	0x0800b1e1
 8005a1c:	08005e0d 	.word	0x08005e0d
 8005a20:	24000268 	.word	0x24000268
 8005a24:	0800597d 	.word	0x0800597d
 8005a28:	08015a94 	.word	0x08015a94
 8005a2c:	08006205 	.word	0x08006205

08005a30 <send_post_request>:
    // ตั้งค่า timeout สำหรับการเชื่อมต่อ
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (const char*)&timeout, sizeof(timeout));
}

void send_post_request(int sock, const char *json_data) {
 8005a30:	b530      	push	{r4, r5, lr}
 8005a32:	460c      	mov	r4, r1
 8005a34:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8005a38:	4605      	mov	r5, r0
        "Content-Length: %d\r\n"
        "Connection: close\r\n\r\n"
        "%s"; // JSON data จะถูกแทรกที่นี่

    // รับข้อมูลจาก server
    int json_length = strlen(json_data);
 8005a3a:	4608      	mov	r0, r1
 8005a3c:	f7fa fc68 	bl	8000310 <strlen>
    char http_request[512]; // สร้าง buffer สำหรับ HTTP request
    snprintf(http_request, sizeof(http_request), http_request_template, json_length, json_data);
 8005a40:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <send_post_request+0x6c>)
    int json_length = strlen(json_data);
 8005a42:	4603      	mov	r3, r0
    snprintf(http_request, sizeof(http_request), http_request_template, json_length, json_data);
 8005a44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a48:	a810      	add	r0, sp, #64	@ 0x40
 8005a4a:	9400      	str	r4, [sp, #0]
 8005a4c:	f00e ff74 	bl	8014938 <sniprintf>

    // ส่งข้อมูลไปยังเซิร์ฟเวอร์
    if (send(sock, http_request, strlen(http_request), 0) < 0) {
 8005a50:	a810      	add	r0, sp, #64	@ 0x40
 8005a52:	f7fa fc5d 	bl	8000310 <strlen>
 8005a56:	2300      	movs	r3, #0
 8005a58:	4602      	mov	r2, r0
 8005a5a:	a910      	add	r1, sp, #64	@ 0x40
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f005 f9b1 	bl	800adc4 <lwip_send>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	db02      	blt.n	8005a6c <send_post_request+0x3c>
        char error_message[50];
        snprintf(error_message, sizeof(error_message), "Error %d sending data\r\n", err_code);
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
        closesocket(sock);
    }
}
 8005a66:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8005a6a:	bd30      	pop	{r4, r5, pc}
        int err_code = errno; // รับรหัสข้อผิดพลาด
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <send_post_request+0x70>)
        snprintf(error_message, sizeof(error_message), "Error %d sending data\r\n", err_code);
 8005a6e:	2132      	movs	r1, #50	@ 0x32
 8005a70:	4a0c      	ldr	r2, [pc, #48]	@ (8005aa4 <send_post_request+0x74>)
 8005a72:	a803      	add	r0, sp, #12
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f00e ff5f 	bl	8014938 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
 8005a7a:	a803      	add	r0, sp, #12
 8005a7c:	f7fa fc48 	bl	8000310 <strlen>
 8005a80:	f04f 33ff 	mov.w	r3, #4294967295
 8005a84:	b282      	uxth	r2, r0
 8005a86:	a903      	add	r1, sp, #12
 8005a88:	4807      	ldr	r0, [pc, #28]	@ (8005aa8 <send_post_request+0x78>)
 8005a8a:	f7ff fe07 	bl	800569c <HAL_UART_Transmit>
        closesocket(sock);
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f004 fffe 	bl	800aa90 <lwip_close>
}
 8005a94:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8005a98:	bd30      	pop	{r4, r5, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08015a9c 	.word	0x08015a9c
 8005aa0:	240109dc 	.word	0x240109dc
 8005aa4:	08015b28 	.word	0x08015b28
 8005aa8:	24000110 	.word	0x24000110
 8005aac:	00000000 	.word	0x00000000

08005ab0 <connect_to_server>:
        snprintf(error_message, sizeof(error_message), "Error %d sending data\r\n", err_code);
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
        closesocket(sock);
    }
}
void connect_to_server(void) {
 8005ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // char *server_ip = "104.26.10.187";  // IP ของ JSONPlaceholder
    // char *server_ip = "jsonplaceholder.typicode.com";  // ใช้ชื่อเซิร์ฟเวอร์แทน IP
    int server_port = 80;               // HTTP port

    // สร้าง socket ใหม่
    sock = socket(AF_INET, SOCK_STREAM, 0);
 8005ab4:	2200      	movs	r2, #0
void connect_to_server(void) {
 8005ab6:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
    sock = socket(AF_INET, SOCK_STREAM, 0);
 8005aba:	2101      	movs	r1, #1
 8005abc:	2002      	movs	r0, #2
 8005abe:	f005 f9c5 	bl	800ae4c <lwip_socket>
    if (sock < 0) {
 8005ac2:	1e04      	subs	r4, r0, #0
 8005ac4:	f2c0 8097 	blt.w	8005bf6 <connect_to_server+0x146>
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
        return;
    }

    // ตั้งค่า server address
    server_addr.sin_family = AF_INET;
 8005ac8:	2302      	movs	r3, #2
    server_addr.sin_port = htons(server_port);
 8005aca:	2050      	movs	r0, #80	@ 0x50
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005acc:	2510      	movs	r5, #16
    server_addr.sin_addr.s_addr = inet_addr(server_ip);
    set_socket_timeout(sock);    // ตั้งค่า timeout

    // เชื่อมต่อไปยัง server
       while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
           int err_code = errno; // รับรหัสข้อผิดพลาด
 8005ace:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005c4c <connect_to_server+0x19c>
    server_addr.sin_family = AF_INET;
 8005ad2:	f88d 3009 	strb.w	r3, [sp, #9]
    server_addr.sin_port = htons(server_port);
 8005ad6:	f005 fc13 	bl	800b300 <lwip_htons>
 8005ada:	4603      	mov	r3, r0
    server_addr.sin_addr.s_addr = inet_addr(server_ip);
 8005adc:	4856      	ldr	r0, [pc, #344]	@ (8005c38 <connect_to_server+0x188>)
           char error_message[50];
           snprintf(error_message, sizeof(error_message), "Error %d connecting to server\r\n", err_code);
 8005ade:	4e57      	ldr	r6, [pc, #348]	@ (8005c3c <connect_to_server+0x18c>)
    server_addr.sin_port = htons(server_port);
 8005ae0:	f8ad 300a 	strh.w	r3, [sp, #10]
    server_addr.sin_addr.s_addr = inet_addr(server_ip);
 8005ae4:	f00d fed4 	bl	8013890 <ipaddr_addr>
    timeout.tv_sec = 5;  // 5 วินาที
 8005ae8:	2205      	movs	r2, #5
 8005aea:	2300      	movs	r3, #0
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005aec:	f640 71ff 	movw	r1, #4095	@ 0xfff
    server_addr.sin_addr.s_addr = inet_addr(server_ip);
 8005af0:	9003      	str	r0, [sp, #12]
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005af2:	9500      	str	r5, [sp, #0]
 8005af4:	4620      	mov	r0, r4
           HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
 8005af6:	4f52      	ldr	r7, [pc, #328]	@ (8005c40 <connect_to_server+0x190>)
    timeout.tv_sec = 5;  // 5 วินาที
 8005af8:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
    timeout.tv_usec = 0;
 8005afc:	2300      	movs	r3, #0
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005afe:	f241 0205 	movw	r2, #4101	@ 0x1005
    timeout.tv_usec = 0;
 8005b02:	9316      	str	r3, [sp, #88]	@ 0x58
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005b04:	ab14      	add	r3, sp, #80	@ 0x50
 8005b06:	f005 f9db 	bl	800aec0 <lwip_setsockopt>
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (const char*)&timeout, sizeof(timeout));
 8005b0a:	ab14      	add	r3, sp, #80	@ 0x50
 8005b0c:	f241 0206 	movw	r2, #4102	@ 0x1006
 8005b10:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8005b14:	4620      	mov	r0, r4
 8005b16:	9500      	str	r5, [sp, #0]
 8005b18:	f005 f9d2 	bl	800aec0 <lwip_setsockopt>
}
 8005b1c:	e030      	b.n	8005b80 <connect_to_server+0xd0>
           snprintf(error_message, sizeof(error_message), "Error %d connecting to server\r\n", err_code);
 8005b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b22:	f00e ff09 	bl	8014938 <sniprintf>
           HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
 8005b26:	a814      	add	r0, sp, #80	@ 0x50
 8005b28:	f7fa fbf2 	bl	8000310 <strlen>
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b30:	b282      	uxth	r2, r0
 8005b32:	a914      	add	r1, sp, #80	@ 0x50
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff fdb1 	bl	800569c <HAL_UART_Transmit>
           closesocket(sock);
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f004 ffa8 	bl	800aa90 <lwip_close>
           // รอ 2 วินาทีก่อนลองเชื่อมต่อใหม่
           //HAL_Delay(2000);
           // สร้าง socket ใหม่
           sock = socket(AF_INET, SOCK_STREAM, 0);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2101      	movs	r1, #1
 8005b44:	2002      	movs	r0, #2
 8005b46:	f005 f981 	bl	800ae4c <lwip_socket>
           if (sock < 0) {
 8005b4a:	1e04      	subs	r4, r0, #0
    timeout.tv_usec = 0;
 8005b4c:	f04f 0c00 	mov.w	ip, #0
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005b50:	ab06      	add	r3, sp, #24
    timeout.tv_sec = 5;  // 5 วินาที
 8005b52:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 8005c30 <connect_to_server+0x180>
           if (sock < 0) {
 8005b56:	db43      	blt.n	8005be0 <connect_to_server+0x130>
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005b58:	f241 0205 	movw	r2, #4101	@ 0x1005
 8005b5c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8005b60:	9500      	str	r5, [sp, #0]
    timeout.tv_usec = 0;
 8005b62:	f8cd c020 	str.w	ip, [sp, #32]
    timeout.tv_sec = 5;  // 5 วินาที
 8005b66:	ed8d 7b06 	vstr	d7, [sp, #24]
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005b6a:	f005 f9a9 	bl	800aec0 <lwip_setsockopt>
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (const char*)&timeout, sizeof(timeout));
 8005b6e:	ab06      	add	r3, sp, #24
 8005b70:	f241 0206 	movw	r2, #4102	@ 0x1006
 8005b74:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8005b78:	4620      	mov	r0, r4
 8005b7a:	9500      	str	r5, [sp, #0]
 8005b7c:	f005 f9a0 	bl	800aec0 <lwip_setsockopt>
       while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
 8005b80:	2210      	movs	r2, #16
 8005b82:	a902      	add	r1, sp, #8
 8005b84:	4620      	mov	r0, r4
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
 8005b86:	2510      	movs	r5, #16
       while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
 8005b88:	f004 ffcc 	bl	800ab24 <lwip_connect>
 8005b8c:	4603      	mov	r3, r0
           snprintf(error_message, sizeof(error_message), "Error %d connecting to server\r\n", err_code);
 8005b8e:	4632      	mov	r2, r6
 8005b90:	2132      	movs	r1, #50	@ 0x32
       while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
 8005b92:	2b00      	cmp	r3, #0
           snprintf(error_message, sizeof(error_message), "Error %d connecting to server\r\n", err_code);
 8005b94:	a814      	add	r0, sp, #80	@ 0x50
       while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
 8005b96:	dbc2      	blt.n	8005b1e <connect_to_server+0x6e>
           }
           // ตั้งค่า timeout
           set_socket_timeout(sock);
       }
    // ส่ง POST request
    send_post_request(sock, json_data);
 8005b98:	492a      	ldr	r1, [pc, #168]	@ (8005c44 <connect_to_server+0x194>)
 8005b9a:	4620      	mov	r0, r4
    char buffer[512];
    int len;
    while ((len = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0) {
 8005b9c:	2600      	movs	r6, #0
        buffer[len] = '\0';  // Null terminate string
        // ส่งข้อมูลที่ได้รับผ่าน UART3
        HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8005b9e:	4d28      	ldr	r5, [pc, #160]	@ (8005c40 <connect_to_server+0x190>)
    send_post_request(sock, json_data);
 8005ba0:	f7ff ff46 	bl	8005a30 <send_post_request>
    while ((len = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0) {
 8005ba4:	e004      	b.n	8005bb0 <connect_to_server+0x100>
        buffer[len] = '\0';  // Null terminate string
 8005ba6:	af14      	add	r7, sp, #80	@ 0x50
 8005ba8:	f807 600c 	strb.w	r6, [r7, ip]
        HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8005bac:	f7ff fd76 	bl	800569c <HAL_UART_Transmit>
    while ((len = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0) {
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005bb6:	a914      	add	r1, sp, #80	@ 0x50
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f005 f86f 	bl	800ac9c <lwip_recv>
 8005bbe:	f1b0 0c00 	subs.w	ip, r0, #0
        HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc6:	a914      	add	r1, sp, #80	@ 0x50
 8005bc8:	4628      	mov	r0, r5
 8005bca:	fa1f f28c 	uxth.w	r2, ip
    while ((len = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0) {
 8005bce:	dcea      	bgt.n	8005ba6 <connect_to_server+0xf6>
       // parse_led_status(buffer);
    }
    if (len < 0) {
 8005bd0:	d11c      	bne.n	8005c0c <connect_to_server+0x15c>
        char error_message[50];
        snprintf(error_message, sizeof(error_message), "Error %d receiving data\r\n", err_code);
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
    }
    // ปิด socket
    closesocket(sock);
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f004 ff5c 	bl	800aa90 <lwip_close>
}
 8005bd8:	f50d 7d14 	add.w	sp, sp, #592	@ 0x250
 8005bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               HAL_UART_Transmit(&huart3, (uint8_t *)"Error creating socket\r\n", 25, HAL_MAX_DELAY);
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295
 8005be4:	2219      	movs	r2, #25
 8005be6:	4918      	ldr	r1, [pc, #96]	@ (8005c48 <connect_to_server+0x198>)
 8005be8:	4815      	ldr	r0, [pc, #84]	@ (8005c40 <connect_to_server+0x190>)
 8005bea:	f7ff fd57 	bl	800569c <HAL_UART_Transmit>
}
 8005bee:	f50d 7d14 	add.w	sp, sp, #592	@ 0x250
 8005bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfa:	2217      	movs	r2, #23
 8005bfc:	4912      	ldr	r1, [pc, #72]	@ (8005c48 <connect_to_server+0x198>)
 8005bfe:	4810      	ldr	r0, [pc, #64]	@ (8005c40 <connect_to_server+0x190>)
}
 8005c00:	f50d 7d14 	add.w	sp, sp, #592	@ 0x250
 8005c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
 8005c08:	f7ff bd48 	b.w	800569c <HAL_UART_Transmit>
        int err_code = errno; // รับรหัสข้อผิดพลาด
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <connect_to_server+0x19c>)
        snprintf(error_message, sizeof(error_message), "Error %d receiving data\r\n", err_code);
 8005c0e:	2132      	movs	r1, #50	@ 0x32
 8005c10:	4a0f      	ldr	r2, [pc, #60]	@ (8005c50 <connect_to_server+0x1a0>)
 8005c12:	a806      	add	r0, sp, #24
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f00e fe8f 	bl	8014938 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
 8005c1a:	a806      	add	r0, sp, #24
 8005c1c:	f7fa fb78 	bl	8000310 <strlen>
 8005c20:	f04f 33ff 	mov.w	r3, #4294967295
 8005c24:	b282      	uxth	r2, r0
 8005c26:	a906      	add	r1, sp, #24
 8005c28:	4805      	ldr	r0, [pc, #20]	@ (8005c40 <connect_to_server+0x190>)
 8005c2a:	f7ff fd37 	bl	800569c <HAL_UART_Transmit>
 8005c2e:	e7d0      	b.n	8005bd2 <connect_to_server+0x122>
 8005c30:	00000005 	.word	0x00000005
 8005c34:	00000000 	.word	0x00000000
 8005c38:	08015b58 	.word	0x08015b58
 8005c3c:	08015b68 	.word	0x08015b68
 8005c40:	24000110 	.word	0x24000110
 8005c44:	24000010 	.word	0x24000010
 8005c48:	08015b40 	.word	0x08015b40
 8005c4c:	240109dc 	.word	0x240109dc
 8005c50:	08015b88 	.word	0x08015b88

08005c54 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8005c54:	2000      	movs	r0, #0
 8005c56:	4770      	bx	lr

08005c58 <low_level_output>:
{
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	b08c      	sub	sp, #48	@ 0x30
 8005c5c:	460d      	mov	r5, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005c5e:	2230      	movs	r2, #48	@ 0x30
 8005c60:	2100      	movs	r1, #0
 8005c62:	4668      	mov	r0, sp
 8005c64:	f00e ff09 	bl	8014a7a <memset>
  for(q = p; q != NULL; q = q->next)
 8005c68:	b1fd      	cbz	r5, 8005caa <low_level_output+0x52>
 8005c6a:	466b      	mov	r3, sp
 8005c6c:	462a      	mov	r2, r5
  uint32_t i = 0U;
 8005c6e:	2000      	movs	r0, #0
    Txbuffer[i].len = q->len;
 8005c70:	8954      	ldrh	r4, [r2, #10]
    Txbuffer[i].buffer = q->payload;
 8005c72:	6851      	ldr	r1, [r2, #4]
    if(q->next == NULL)
 8005c74:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8005c76:	e9c3 1400 	strd	r1, r4, [r3]
    if(i>0)
 8005c7a:	b918      	cbnz	r0, 8005c84 <low_level_output+0x2c>
    if(i >= ETH_TX_DESC_CNT)
 8005c7c:	330c      	adds	r3, #12
    if(q->next == NULL)
 8005c7e:	b162      	cbz	r2, 8005c9a <low_level_output+0x42>
    i++;
 8005c80:	2001      	movs	r0, #1
 8005c82:	e7f5      	b.n	8005c70 <low_level_output+0x18>
      Txbuffer[i-1].next = &Txbuffer[i];
 8005c84:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 8005c88:	b13a      	cbz	r2, 8005c9a <low_level_output+0x42>
    i++;
 8005c8a:	3001      	adds	r0, #1
    if(i >= ETH_TX_DESC_CNT)
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	2804      	cmp	r0, #4
 8005c90:	d1ee      	bne.n	8005c70 <low_level_output+0x18>
      return ERR_IF;
 8005c92:	f06f 000b 	mvn.w	r0, #11
}
 8005c96:	b00c      	add	sp, #48	@ 0x30
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
      Txbuffer[i].next = NULL;
 8005c9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005c9e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8005ca6:	f840 3c28 	str.w	r3, [r0, #-40]
  TxConfig.Length = p->tot_len;
 8005caa:	4c0e      	ldr	r4, [pc, #56]	@ (8005ce4 <low_level_output+0x8c>)
  pbuf_ref(p);
 8005cac:	4628      	mov	r0, r5
  TxConfig.Length = p->tot_len;
 8005cae:	892b      	ldrh	r3, [r5, #8]
  TxConfig.TxBuffer = Txbuffer;
 8005cb0:	f8c4 d008 	str.w	sp, [r4, #8]
  TxConfig.Length = p->tot_len;
 8005cb4:	6063      	str	r3, [r4, #4]
  TxConfig.pData = p;
 8005cb6:	6365      	str	r5, [r4, #52]	@ 0x34
  pbuf_ref(p);
 8005cb8:	f006 fbd8 	bl	800c46c <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	480a      	ldr	r0, [pc, #40]	@ (8005ce8 <low_level_output+0x90>)
 8005cc0:	4e0a      	ldr	r6, [pc, #40]	@ (8005cec <low_level_output+0x94>)
 8005cc2:	f7fc fbd9 	bl	8002478 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8005cca:	6830      	ldr	r0, [r6, #0]
 8005ccc:	f000 fcb8 	bl	8006640 <osSemaphoreAcquire>
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d1f7      	bne.n	8005cc6 <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8005cd6:	4804      	ldr	r0, [pc, #16]	@ (8005ce8 <low_level_output+0x90>)
 8005cd8:	f7fc fc88 	bl	80025ec <HAL_ETH_ReleaseTxPacket>
  return errval;
 8005cdc:	4620      	mov	r0, r4
}
 8005cde:	b00c      	add	sp, #48	@ 0x30
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	bf00      	nop
 8005ce4:	240002f4 	.word	0x240002f4
 8005ce8:	2400032c 	.word	0x2400032c
 8005cec:	240003dc 	.word	0x240003dc

08005cf0 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8005cf0:	f7fb ba2e 	b.w	8001150 <HAL_GetTick>

08005cf4 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8005cf4:	4802      	ldr	r0, [pc, #8]	@ (8005d00 <ETH_PHY_IO_Init+0xc>)
{
 8005cf6:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8005cf8:	f7fc fe94 	bl	8002a24 <HAL_ETH_SetMDIOClockRange>
}
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	bd08      	pop	{r3, pc}
 8005d00:	2400032c 	.word	0x2400032c

08005d04 <ETH_PHY_IO_ReadReg>:
{
 8005d04:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005d06:	4806      	ldr	r0, [pc, #24]	@ (8005d20 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8005d08:	b508      	push	{r3, lr}
 8005d0a:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005d0c:	460a      	mov	r2, r1
 8005d0e:	4661      	mov	r1, ip
 8005d10:	f7fc fd50 	bl	80027b4 <HAL_ETH_ReadPHYRegister>
 8005d14:	3800      	subs	r0, #0
 8005d16:	bf18      	it	ne
 8005d18:	2001      	movne	r0, #1
}
 8005d1a:	4240      	negs	r0, r0
 8005d1c:	bd08      	pop	{r3, pc}
 8005d1e:	bf00      	nop
 8005d20:	2400032c 	.word	0x2400032c

08005d24 <ETH_PHY_IO_WriteReg>:
{
 8005d24:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005d26:	4806      	ldr	r0, [pc, #24]	@ (8005d40 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8005d28:	b508      	push	{r3, lr}
 8005d2a:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	4661      	mov	r1, ip
 8005d30:	f7fc fd6e 	bl	8002810 <HAL_ETH_WritePHYRegister>
 8005d34:	3800      	subs	r0, #0
 8005d36:	bf18      	it	ne
 8005d38:	2001      	movne	r0, #1
}
 8005d3a:	4240      	negs	r0, r0
 8005d3c:	bd08      	pop	{r3, pc}
 8005d3e:	bf00      	nop
 8005d40:	2400032c 	.word	0x2400032c

08005d44 <pbuf_free_custom>:
{
 8005d44:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005d46:	4808      	ldr	r0, [pc, #32]	@ (8005d68 <pbuf_free_custom+0x24>)
{
 8005d48:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005d4a:	f005 fe95 	bl	800ba78 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <pbuf_free_custom+0x28>)
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	2a01      	cmp	r2, #1
 8005d54:	d000      	beq.n	8005d58 <pbuf_free_custom+0x14>
}
 8005d56:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8005d58:	4905      	ldr	r1, [pc, #20]	@ (8005d70 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8005d5a:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8005d5c:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8005d5e:	701a      	strb	r2, [r3, #0]
}
 8005d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8005d64:	f000 bc9e 	b.w	80066a4 <osSemaphoreRelease>
 8005d68:	08015c84 	.word	0x08015c84
 8005d6c:	240003e4 	.word	0x240003e4
 8005d70:	240003e0 	.word	0x240003e0

08005d74 <ethernetif_input>:
{
 8005d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d78:	4c14      	ldr	r4, [pc, #80]	@ (8005dcc <ethernetif_input+0x58>)
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8005dd0 <ethernetif_input+0x5c>
 8005d80:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8005d82:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005d84:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8005dd4 <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d88:	f04f 31ff 	mov.w	r1, #4294967295
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	f000 fc57 	bl	8006640 <osSemaphoreAcquire>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d1f8      	bne.n	8005d88 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8005d96:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8005d9a:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f3      	bne.n	8005d88 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005da0:	a901      	add	r1, sp, #4
 8005da2:	4648      	mov	r0, r9
 8005da4:	f7fc fb98 	bl	80024d8 <HAL_ETH_ReadData>
  return p;
 8005da8:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
        if (p != NULL)
 8005dae:	2d00      	cmp	r5, #0
 8005db0:	d0ea      	beq.n	8005d88 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8005db2:	6933      	ldr	r3, [r6, #16]
 8005db4:	4798      	blx	r3
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d0ed      	beq.n	8005d96 <ethernetif_input+0x22>
            pbuf_free(p);
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f006 f9ba 	bl	800c134 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8005dc0:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8005dc4:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1de      	bne.n	8005d88 <ethernetif_input+0x14>
 8005dca:	e7e9      	b.n	8005da0 <ethernetif_input+0x2c>
 8005dcc:	240003e0 	.word	0x240003e0
 8005dd0:	240003e4 	.word	0x240003e4
 8005dd4:	2400032c 	.word	0x2400032c

08005dd8 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8005dd8:	4b01      	ldr	r3, [pc, #4]	@ (8005de0 <HAL_ETH_RxCpltCallback+0x8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	f000 bc62 	b.w	80066a4 <osSemaphoreRelease>
 8005de0:	240003e0 	.word	0x240003e0

08005de4 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8005de4:	4b01      	ldr	r3, [pc, #4]	@ (8005dec <HAL_ETH_TxCpltCallback+0x8>)
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	f000 bc5c 	b.w	80066a4 <osSemaphoreRelease>
 8005dec:	240003dc 	.word	0x240003dc

08005df0 <HAL_ETH_ErrorCallback>:
{
 8005df0:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8005df2:	f7fc ff73 	bl	8002cdc <HAL_ETH_GetDMAError>
 8005df6:	0603      	lsls	r3, r0, #24
 8005df8:	d400      	bmi.n	8005dfc <HAL_ETH_ErrorCallback+0xc>
}
 8005dfa:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8005dfc:	4b02      	ldr	r3, [pc, #8]	@ (8005e08 <HAL_ETH_ErrorCallback+0x18>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
}
 8005e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8005e04:	f000 bc4e 	b.w	80066a4 <osSemaphoreRelease>
 8005e08:	240003e0 	.word	0x240003e0

08005e0c <ethernetif_init>:
{
 8005e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e10:	4604      	mov	r4, r0
{
 8005e12:	b0a5      	sub	sp, #148	@ 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e14:	2800      	cmp	r0, #0
 8005e16:	f000 80b6 	beq.w	8005f86 <ethernetif_init+0x17a>
  netif->linkoutput = low_level_output;
 8005e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8005f98 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 8005e1c:	f247 4173 	movw	r1, #29811	@ 0x7473
  netif->output = etharp_output;
 8005e20:	4a5e      	ldr	r2, [pc, #376]	@ (8005f9c <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 8005e22:	a80b      	add	r0, sp, #44	@ 0x2c
  netif->name[0] = IFNAME0;
 8005e24:	8661      	strh	r1, [r4, #50]	@ 0x32
  ETH_MACConfigTypeDef MACConf = {0};
 8005e26:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8005e28:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8005e2a:	2264      	movs	r2, #100	@ 0x64
  netif->linkoutput = low_level_output;
 8005e2c:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8005e2e:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8005e30:	f00e fe23 	bl	8014a7a <memset>
  heth.Instance = ETH;
 8005e34:	4d5a      	ldr	r5, [pc, #360]	@ (8005fa0 <ethernetif_init+0x194>)
 8005e36:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa4 <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005e38:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e3a:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8005fe4 <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e3e:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8005e40:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8005e42:	4b59      	ldr	r3, [pc, #356]	@ (8005fa8 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 8005e44:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 8005e48:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8005e4a:	4b58      	ldr	r3, [pc, #352]	@ (8005fac <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 8005e4c:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8005e50:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005e52:	4b57      	ldr	r3, [pc, #348]	@ (8005fb0 <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005e54:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 8005e56:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8005e58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005e5c:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e5e:	f7fc fe23 	bl	8002aa8 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e62:	2234      	movs	r2, #52	@ 0x34
 8005e64:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e66:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e68:	4648      	mov	r0, r9
 8005e6a:	f00e fe06 	bl	8014a7a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005e6e:	2321      	movs	r3, #33	@ 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005e70:	4850      	ldr	r0, [pc, #320]	@ (8005fb4 <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005e72:	f849 3c04 	str.w	r3, [r9, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005e76:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005e7a:	f8c9 3010 	str.w	r3, [r9, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005e7e:	f005 fd83 	bl	800b988 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005e82:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005e84:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005e86:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005e88:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	f884 202a 	strb.w	r2, [r4, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005e92:	785a      	ldrb	r2, [r3, #1]
 8005e94:	f884 202b 	strb.w	r2, [r4, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005e98:	789a      	ldrb	r2, [r3, #2]
 8005e9a:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e9e:	78da      	ldrb	r2, [r3, #3]
 8005ea0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ea4:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005ea6:	f894 2031 	ldrb.w	r2, [r4, #49]	@ 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005eaa:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005eae:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005eb0:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005eb2:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005eb6:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
  netif->mtu = ETH_MAX_PAYLOAD;
 8005eba:	f240 53dc 	movw	r3, #1500	@ 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005ebe:	f884 2031 	strb.w	r2, [r4, #49]	@ 0x31
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ec2:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8005ec4:	8523      	strh	r3, [r4, #40]	@ 0x28
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ec6:	f000 fb6f 	bl	80065a8 <osSemaphoreNew>
 8005eca:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb8 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ecc:	4632      	mov	r2, r6
 8005ece:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ed0:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	f000 fb68 	bl	80065a8 <osSemaphoreNew>
 8005ed8:	4b38      	ldr	r3, [pc, #224]	@ (8005fbc <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005eda:	4631      	mov	r1, r6
 8005edc:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ede:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005ee0:	a803      	add	r0, sp, #12
 8005ee2:	f00e fdca 	bl	8014a7a <memset>
  attributes.name = "EthIf";
 8005ee6:	4b36      	ldr	r3, [pc, #216]	@ (8005fc0 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8005ee8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8005eec:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8005eee:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8005ef0:	2330      	movs	r3, #48	@ 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8005ef2:	4834      	ldr	r0, [pc, #208]	@ (8005fc4 <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8005ef4:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8005ef8:	4621      	mov	r1, r4
 8005efa:	f000 fa79 	bl	80063f0 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005efe:	4932      	ldr	r1, [pc, #200]	@ (8005fc8 <ethernetif_init+0x1bc>)
 8005f00:	4832      	ldr	r0, [pc, #200]	@ (8005fcc <ethernetif_init+0x1c0>)
 8005f02:	f7fb f817 	bl	8000f34 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8005f06:	4831      	ldr	r0, [pc, #196]	@ (8005fcc <ethernetif_init+0x1c0>)
 8005f08:	f7fb f82e 	bl	8000f68 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8005f0c:	f1b8 0f00 	cmp.w	r8, #0
 8005f10:	d124      	bne.n	8005f5c <ethernetif_init+0x150>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005f12:	482e      	ldr	r0, [pc, #184]	@ (8005fcc <ethernetif_init+0x1c0>)
 8005f14:	f7fb f892 	bl	800103c <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005f18:	42b8      	cmp	r0, r7
 8005f1a:	dd2a      	ble.n	8005f72 <ethernetif_init+0x166>
      switch (PHYLinkState)
 8005f1c:	3803      	subs	r0, #3
 8005f1e:	2802      	cmp	r0, #2
 8005f20:	d822      	bhi.n	8005f68 <ethernetif_init+0x15c>
 8005f22:	4a2b      	ldr	r2, [pc, #172]	@ (8005fd0 <ethernetif_init+0x1c4>)
 8005f24:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd4 <ethernetif_init+0x1c8>)
 8005f26:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8005f2a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005f2e:	a90b      	add	r1, sp, #44	@ 0x2c
 8005f30:	481b      	ldr	r0, [pc, #108]	@ (8005fa0 <ethernetif_init+0x194>)
 8005f32:	f7fc fc9f 	bl	8002874 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005f36:	a90b      	add	r1, sp, #44	@ 0x2c
 8005f38:	4819      	ldr	r0, [pc, #100]	@ (8005fa0 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 8005f3a:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005f3e:	f7fc fd63 	bl	8002a08 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005f42:	4817      	ldr	r0, [pc, #92]	@ (8005fa0 <ethernetif_init+0x194>)
 8005f44:	f7fc fa04 	bl	8002350 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f005 ff27 	bl	800bd9c <netif_set_up>
    netif_set_link_up(netif);
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f005 ff6c 	bl	800be2c <netif_set_link_up>
}
 8005f54:	2000      	movs	r0, #0
 8005f56:	b025      	add	sp, #148	@ 0x94
 8005f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8005f5c:	f7fa fdce 	bl	8000afc <Error_Handler>
}
 8005f60:	2000      	movs	r0, #0
 8005f62:	b025      	add	sp, #148	@ 0x94
 8005f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8005f68:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 8005f6c:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8005f70:	e7dd      	b.n	8005f2e <ethernetif_init+0x122>
      netif_set_link_down(netif);
 8005f72:	4620      	mov	r0, r4
 8005f74:	f005 ff86 	bl	800be84 <netif_set_link_down>
      netif_set_down(netif);
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f005 ff33 	bl	800bde4 <netif_set_down>
}
 8005f7e:	2000      	movs	r0, #0
 8005f80:	b025      	add	sp, #148	@ 0x94
 8005f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f86:	4b14      	ldr	r3, [pc, #80]	@ (8005fd8 <ethernetif_init+0x1cc>)
 8005f88:	f240 2217 	movw	r2, #535	@ 0x217
 8005f8c:	4913      	ldr	r1, [pc, #76]	@ (8005fdc <ethernetif_init+0x1d0>)
 8005f8e:	4814      	ldr	r0, [pc, #80]	@ (8005fe0 <ethernetif_init+0x1d4>)
 8005f90:	f00e fcc0 	bl	8014914 <iprintf>
 8005f94:	e741      	b.n	8005e1a <ethernetif_init+0xe>
 8005f96:	bf00      	nop
 8005f98:	08005c59 	.word	0x08005c59
 8005f9c:	08012fe9 	.word	0x08012fe9
 8005fa0:	2400032c 	.word	0x2400032c
 8005fa4:	40028000 	.word	0x40028000
 8005fa8:	00e18000 	.word	0x00e18000
 8005fac:	30000100 	.word	0x30000100
 8005fb0:	30000000 	.word	0x30000000
 8005fb4:	08015c84 	.word	0x08015c84
 8005fb8:	240003e0 	.word	0x240003e0
 8005fbc:	240003dc 	.word	0x240003dc
 8005fc0:	08015bf8 	.word	0x08015bf8
 8005fc4:	08005d75 	.word	0x08005d75
 8005fc8:	24000070 	.word	0x24000070
 8005fcc:	240002d4 	.word	0x240002d4
 8005fd0:	08015c78 	.word	0x08015c78
 8005fd4:	08015c6c 	.word	0x08015c6c
 8005fd8:	08015ba4 	.word	0x08015ba4
 8005fdc:	08015bc0 	.word	0x08015bc0
 8005fe0:	08015bd0 	.word	0x08015bd0
 8005fe4:	240002f8 	.word	0x240002f8

08005fe8 <sys_now>:
  return HAL_GetTick();
 8005fe8:	f7fb b8b2 	b.w	8001150 <HAL_GetTick>

08005fec <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8005fec:	4b4d      	ldr	r3, [pc, #308]	@ (8006124 <HAL_ETH_MspInit+0x138>)
 8005fee:	6802      	ldr	r2, [r0, #0]
{
 8005ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8005ff2:	429a      	cmp	r2, r3
{
 8005ff4:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff6:	f04f 0400 	mov.w	r4, #0
 8005ffa:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8005ffe:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8006002:	940c      	str	r4, [sp, #48]	@ 0x30
  if(ethHandle->Instance==ETH)
 8006004:	d001      	beq.n	800600a <HAL_ETH_MspInit+0x1e>
}
 8006006:	b00f      	add	sp, #60	@ 0x3c
 8006008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800600a:	4b47      	ldr	r3, [pc, #284]	@ (8006128 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800600c:	2603      	movs	r6, #3
 800600e:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006010:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006012:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006016:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006018:	4844      	ldr	r0, [pc, #272]	@ (800612c <HAL_ETH_MspInit+0x140>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800601a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800601e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8006022:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8006026:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800602a:	9201      	str	r2, [sp, #4]
 800602c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800602e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8006032:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006036:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800603a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800603e:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8006042:	9202      	str	r2, [sp, #8]
 8006044:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006046:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800604a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800604e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8006052:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8006056:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800605a:	9203      	str	r2, [sp, #12]
 800605c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800605e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006062:	f042 0204 	orr.w	r2, r2, #4
 8006066:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800606a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800606e:	f002 0204 	and.w	r2, r2, #4
 8006072:	9204      	str	r2, [sp, #16]
 8006074:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006076:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006082:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006086:	f002 0201 	and.w	r2, r2, #1
 800608a:	9205      	str	r2, [sp, #20]
 800608c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800608e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006092:	f042 0202 	orr.w	r2, r2, #2
 8006096:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800609a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800609e:	f002 0202 	and.w	r2, r2, #2
 80060a2:	9206      	str	r2, [sp, #24]
 80060a4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060b2:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060be:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060c0:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060c8:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ca:	f7fc fe0b 	bl	8002ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80060ce:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d0:	a908      	add	r1, sp, #32
 80060d2:	4817      	ldr	r0, [pc, #92]	@ (8006130 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80060d4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060d6:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d8:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060da:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060de:	f7fc fe01 	bl	8002ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80060e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80060e6:	a908      	add	r1, sp, #32
 80060e8:	4812      	ldr	r0, [pc, #72]	@ (8006134 <HAL_ETH_MspInit+0x148>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80060ea:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060f0:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80060f4:	f7fc fdf6 	bl	8002ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80060f8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060fc:	a908      	add	r1, sp, #32
 80060fe:	480e      	ldr	r0, [pc, #56]	@ (8006138 <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006100:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006102:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006104:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006106:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800610a:	f7fc fdeb 	bl	8002ce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800610e:	4622      	mov	r2, r4
 8006110:	2105      	movs	r1, #5
 8006112:	203d      	movs	r0, #61	@ 0x3d
 8006114:	f7fb fd98 	bl	8001c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006118:	203d      	movs	r0, #61	@ 0x3d
 800611a:	f7fb fdd1 	bl	8001cc0 <HAL_NVIC_EnableIRQ>
}
 800611e:	b00f      	add	sp, #60	@ 0x3c
 8006120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006122:	bf00      	nop
 8006124:	40028000 	.word	0x40028000
 8006128:	58024400 	.word	0x58024400
 800612c:	58020800 	.word	0x58020800
 8006130:	58020000 	.word	0x58020000
 8006134:	58020400 	.word	0x58020400
 8006138:	58021800 	.word	0x58021800

0800613c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800613c:	b530      	push	{r4, r5, lr}
 800613e:	4604      	mov	r4, r0
 8006140:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006142:	480d      	ldr	r0, [pc, #52]	@ (8006178 <HAL_ETH_RxAllocateCallback+0x3c>)
 8006144:	f005 fc68 	bl	800ba18 <memp_malloc_pool>
  if (p)
 8006148:	4603      	mov	r3, r0
 800614a:	b178      	cbz	r0, 800616c <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800614c:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8006150:	4a0a      	ldr	r2, [pc, #40]	@ (800617c <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006152:	2100      	movs	r1, #0
 8006154:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006158:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 800615a:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800615c:	2241      	movs	r2, #65	@ 0x41
 800615e:	9001      	str	r0, [sp, #4]
 8006160:	4608      	mov	r0, r1
 8006162:	9500      	str	r5, [sp, #0]
 8006164:	f005 ff34 	bl	800bfd0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006168:	b003      	add	sp, #12
 800616a:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 800616c:	4a04      	ldr	r2, [pc, #16]	@ (8006180 <HAL_ETH_RxAllocateCallback+0x44>)
 800616e:	2101      	movs	r1, #1
    *buff = NULL;
 8006170:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8006172:	7011      	strb	r1, [r2, #0]
}
 8006174:	b003      	add	sp, #12
 8006176:	bd30      	pop	{r4, r5, pc}
 8006178:	08015c84 	.word	0x08015c84
 800617c:	08005d45 	.word	0x08005d45
 8006180:	240003e4 	.word	0x240003e4

08006184 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006184:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8006186:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006188:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 800618c:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8006190:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8006194:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8006198:	6805      	ldr	r5, [r0, #0]
 800619a:	b1f5      	cbz	r5, 80061da <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800619c:	680d      	ldr	r5, [r1, #0]
 800619e:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 80061a0:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80061a2:	6801      	ldr	r1, [r0, #0]
 80061a4:	b129      	cbz	r1, 80061b2 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 80061a6:	8908      	ldrh	r0, [r1, #8]
 80061a8:	4418      	add	r0, r3
 80061aa:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80061ac:	6809      	ldr	r1, [r1, #0]
 80061ae:	2900      	cmp	r1, #0
 80061b0:	d1f9      	bne.n	80061a6 <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80061b2:	b183      	cbz	r3, 80061d6 <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80061b4:	f002 011f 	and.w	r1, r2, #31
 80061b8:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80061ba:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80061be:	4808      	ldr	r0, [pc, #32]	@ (80061e0 <HAL_ETH_RxLinkCallback+0x5c>)
 80061c0:	4411      	add	r1, r2
 80061c2:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80061c6:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80061c8:	1a8b      	subs	r3, r1, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dcf9      	bgt.n	80061c2 <HAL_ETH_RxLinkCallback+0x3e>
 80061ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80061d2:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 80061d6:	bc30      	pop	{r4, r5}
 80061d8:	4770      	bx	lr
    *ppStart = p;
 80061da:	6004      	str	r4, [r0, #0]
 80061dc:	e7e0      	b.n	80061a0 <HAL_ETH_RxLinkCallback+0x1c>
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80061e4:	f005 bfa6 	b.w	800c134 <pbuf_free>

080061e8 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 80061e8:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 80061ea:	4804      	ldr	r0, [pc, #16]	@ (80061fc <sys_lock_tcpip_core+0x14>)
 80061ec:	f00e f8f4 	bl	80143d8 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80061f0:	f000 f942 	bl	8006478 <osThreadGetId>
 80061f4:	4b02      	ldr	r3, [pc, #8]	@ (8006200 <sys_lock_tcpip_core+0x18>)
 80061f6:	6018      	str	r0, [r3, #0]
}
 80061f8:	bd08      	pop	{r3, pc}
 80061fa:	bf00      	nop
 80061fc:	24009c18 	.word	0x24009c18
 8006200:	240002d0 	.word	0x240002d0

08006204 <ethernet_link_thread>:
{
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	b09b      	sub	sp, #108	@ 0x6c
  LOCK_TCPIP_CORE();
 800620a:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 800620e:	2264      	movs	r2, #100	@ 0x64
 8006210:	2100      	movs	r1, #0
{
 8006212:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8006214:	4668      	mov	r0, sp
 8006216:	f00e fc30 	bl	8014a7a <memset>
  LOCK_TCPIP_CORE();
 800621a:	46cb      	mov	fp, r9
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800621c:	46ca      	mov	sl, r9
 800621e:	4d2b      	ldr	r5, [pc, #172]	@ (80062cc <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006220:	4f2b      	ldr	r7, [pc, #172]	@ (80062d0 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8006222:	f7ff ffe1 	bl	80061e8 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006226:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 80062e0 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 800622a:	4c2a      	ldr	r4, [pc, #168]	@ (80062d4 <ethernet_link_thread+0xd0>)
 800622c:	e02f      	b.n	800628e <ethernet_link_thread+0x8a>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800622e:	2801      	cmp	r0, #1
 8006230:	dd41      	ble.n	80062b6 <ethernet_link_thread+0xb2>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006232:	075a      	lsls	r2, r3, #29
 8006234:	d41d      	bmi.n	8006272 <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 8006236:	3802      	subs	r0, #2
 8006238:	2803      	cmp	r0, #3
 800623a:	d838      	bhi.n	80062ae <ethernet_link_thread+0xaa>
 800623c:	4b26      	ldr	r3, [pc, #152]	@ (80062d8 <ethernet_link_thread+0xd4>)
 800623e:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8006242:	4b26      	ldr	r3, [pc, #152]	@ (80062dc <ethernet_link_thread+0xd8>)
 8006244:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006248:	4669      	mov	r1, sp
 800624a:	4640      	mov	r0, r8
 800624c:	f7fc fb12 	bl	8002874 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006250:	4669      	mov	r1, sp
 8006252:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8006254:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8006258:	e9cd 9b05 	strd	r9, fp, [sp, #20]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800625c:	f7fc fbd4 	bl	8002a08 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006260:	4640      	mov	r0, r8
 8006262:	f7fc f875 	bl	8002350 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006266:	4630      	mov	r0, r6
 8006268:	f005 fd98 	bl	800bd9c <netif_set_up>
      netif_set_link_up(netif);
 800626c:	4630      	mov	r0, r6
 800626e:	f005 fddd 	bl	800be2c <netif_set_link_up>
	lwip_core_lock_holder_thread_id = 0;
 8006272:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8006274:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8006276:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8006278:	f00e f8b4 	bl	80143e4 <sys_mutex_unlock>
  osDelay(100);
 800627c:	2064      	movs	r0, #100	@ 0x64
 800627e:	f000 f8fd 	bl	800647c <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8006282:	4620      	mov	r0, r4
 8006284:	f00e f8a8 	bl	80143d8 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8006288:	f000 f8f6 	bl	8006478 <osThreadGetId>
 800628c:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800628e:	4638      	mov	r0, r7
 8006290:	f7fa fed4 	bl	800103c <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006294:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 8006298:	0759      	lsls	r1, r3, #29
 800629a:	ea4f 0293 	mov.w	r2, r3, lsr #2
 800629e:	d4c6      	bmi.n	800622e <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80062a0:	07d3      	lsls	r3, r2, #31
 80062a2:	d4e6      	bmi.n	8006272 <ethernet_link_thread+0x6e>
 80062a4:	2801      	cmp	r0, #1
 80062a6:	dde4      	ble.n	8006272 <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 80062a8:	3802      	subs	r0, #2
 80062aa:	2803      	cmp	r0, #3
 80062ac:	d9c6      	bls.n	800623c <ethernet_link_thread+0x38>
    if(linkchanged)
 80062ae:	f1ba 0f00 	cmp.w	sl, #0
 80062b2:	d0de      	beq.n	8006272 <ethernet_link_thread+0x6e>
 80062b4:	e7c8      	b.n	8006248 <ethernet_link_thread+0x44>
    HAL_ETH_Stop_IT(&heth);
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7fc f89a 	bl	80023f0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80062bc:	4630      	mov	r0, r6
 80062be:	f005 fd91 	bl	800bde4 <netif_set_down>
    netif_set_link_down(netif);
 80062c2:	4630      	mov	r0, r6
 80062c4:	f005 fdde 	bl	800be84 <netif_set_link_down>
 80062c8:	e7d3      	b.n	8006272 <ethernet_link_thread+0x6e>
 80062ca:	bf00      	nop
 80062cc:	240002d0 	.word	0x240002d0
 80062d0:	240002d4 	.word	0x240002d4
 80062d4:	24009c18 	.word	0x24009c18
 80062d8:	08015c5c 	.word	0x08015c5c
 80062dc:	08015c4c 	.word	0x08015c4c
 80062e0:	2400032c 	.word	0x2400032c

080062e4 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 80062e4:	4b02      	ldr	r3, [pc, #8]	@ (80062f0 <sys_unlock_tcpip_core+0xc>)
 80062e6:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 80062e8:	4802      	ldr	r0, [pc, #8]	@ (80062f4 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 80062ea:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80062ec:	f00e b87a 	b.w	80143e4 <sys_mutex_unlock>
 80062f0:	240002d0 	.word	0x240002d0
 80062f4:	24009c18 	.word	0x24009c18

080062f8 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
 80062f8:	b538      	push	{r3, r4, r5, lr}
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80062fa:	4b11      	ldr	r3, [pc, #68]	@ (8006340 <sys_check_core_locking+0x48>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	b9ab      	cbnz	r3, 8006330 <sys_check_core_locking+0x38>

  if (lwip_tcpip_thread_id != 0) {
 8006304:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <sys_check_core_locking+0x4c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	b18b      	cbz	r3, 800632e <sys_check_core_locking+0x36>
	  osThreadId_t current_thread_id = osThreadGetId();

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800630a:	4d0f      	ldr	r5, [pc, #60]	@ (8006348 <sys_check_core_locking+0x50>)
	  osThreadId_t current_thread_id = osThreadGetId();
 800630c:	f000 f8b4 	bl	8006478 <osThreadGetId>
 8006310:	4604      	mov	r4, r0
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	4283      	cmp	r3, r0
 8006316:	d00a      	beq.n	800632e <sys_check_core_locking+0x36>
 8006318:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <sys_check_core_locking+0x54>)
 800631a:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 800631e:	490c      	ldr	r1, [pc, #48]	@ (8006350 <sys_check_core_locking+0x58>)
 8006320:	480c      	ldr	r0, [pc, #48]	@ (8006354 <sys_check_core_locking+0x5c>)
 8006322:	f00e faf7 	bl	8014914 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	42a3      	cmp	r3, r4
 800632a:	d000      	beq.n	800632e <sys_check_core_locking+0x36>
 800632c:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 800632e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8006330:	4b06      	ldr	r3, [pc, #24]	@ (800634c <sys_check_core_locking+0x54>)
 8006332:	f240 32ca 	movw	r2, #970	@ 0x3ca
 8006336:	4908      	ldr	r1, [pc, #32]	@ (8006358 <sys_check_core_locking+0x60>)
 8006338:	4806      	ldr	r0, [pc, #24]	@ (8006354 <sys_check_core_locking+0x5c>)
 800633a:	f00e faeb 	bl	8014914 <iprintf>
 800633e:	e7e1      	b.n	8006304 <sys_check_core_locking+0xc>
 8006340:	e000ed00 	.word	0xe000ed00
 8006344:	240002cc 	.word	0x240002cc
 8006348:	240002d0 	.word	0x240002d0
 800634c:	08015ba4 	.word	0x08015ba4
 8006350:	08015c28 	.word	0x08015c28
 8006354:	08015bd0 	.word	0x08015bd0
 8006358:	08015c00 	.word	0x08015c00

0800635c <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 800635c:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 800635e:	f000 f88b 	bl	8006478 <osThreadGetId>
 8006362:	4b01      	ldr	r3, [pc, #4]	@ (8006368 <sys_mark_tcpip_thread+0xc>)
 8006364:	6018      	str	r0, [r3, #0]
}
 8006366:	bd08      	pop	{r3, pc}
 8006368:	240002cc 	.word	0x240002cc

0800636c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800636c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800636e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006372:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006374:	f001 fe2c 	bl	8007fd0 <xTaskGetSchedulerState>
 8006378:	2801      	cmp	r0, #1
 800637a:	d100      	bne.n	800637e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800637c:	bd08      	pop	{r3, pc}
 800637e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006382:	f002 b9ff 	b.w	8008784 <xPortSysTickHandler>
 8006386:	bf00      	nop

08006388 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006388:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800638c:	b92b      	cbnz	r3, 800639a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800638e:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <osKernelInitialize+0x20>)
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	b928      	cbnz	r0, 80063a0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006398:	4770      	bx	lr
    stat = osErrorISR;
 800639a:	f06f 0005 	mvn.w	r0, #5
 800639e:	4770      	bx	lr
    } else {
      stat = osError;
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	24001d3c 	.word	0x24001d3c

080063ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063ac:	b510      	push	{r4, lr}
 80063ae:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80063b2:	b974      	cbnz	r4, 80063d2 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80063b4:	4b08      	ldr	r3, [pc, #32]	@ (80063d8 <osKernelStart+0x2c>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	2a01      	cmp	r2, #1
 80063ba:	d107      	bne.n	80063cc <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063bc:	4907      	ldr	r1, [pc, #28]	@ (80063dc <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063be:	2202      	movs	r2, #2
 80063c0:	77cc      	strb	r4, [r1, #31]
 80063c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063c4:	f001 faf2 	bl	80079ac <vTaskStartScheduler>
      stat = osOK;
 80063c8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80063ca:	bd10      	pop	{r4, pc}
      stat = osError;
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80063d0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80063d2:	f06f 0005 	mvn.w	r0, #5
}
 80063d6:	bd10      	pop	{r4, pc}
 80063d8:	24001d3c 	.word	0x24001d3c
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <osKernelGetTickCount>:
 80063e0:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 80063e4:	b10b      	cbz	r3, 80063ea <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 80063e6:	f001 bb3f 	b.w	8007a68 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 80063ea:	f001 bb37 	b.w	8007a5c <xTaskGetTickCount>
 80063ee:	bf00      	nop

080063f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063f2:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063f4:	b087      	sub	sp, #28
  hTask = NULL;
 80063f6:	9505      	str	r5, [sp, #20]
 80063f8:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80063fc:	b300      	cbz	r0, 8006440 <osThreadNew+0x50>
 80063fe:	b9fb      	cbnz	r3, 8006440 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006400:	4614      	mov	r4, r2
 8006402:	b302      	cbz	r2, 8006446 <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006404:	6996      	ldr	r6, [r2, #24]
 8006406:	b9c6      	cbnz	r6, 800643a <osThreadNew+0x4a>
 8006408:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	07db      	lsls	r3, r3, #31
 800640e:	d417      	bmi.n	8006440 <osThreadNew+0x50>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006410:	6963      	ldr	r3, [r4, #20]
 8006412:	b333      	cbz	r3, 8006462 <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006414:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006416:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8006418:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800641c:	68e7      	ldr	r7, [r4, #12]
 800641e:	b31d      	cbz	r5, 8006468 <osThreadNew+0x78>
 8006420:	2fa7      	cmp	r7, #167	@ 0xa7
 8006422:	d90d      	bls.n	8006440 <osThreadNew+0x50>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006424:	6924      	ldr	r4, [r4, #16]
 8006426:	b15b      	cbz	r3, 8006440 <osThreadNew+0x50>
 8006428:	b154      	cbz	r4, 8006440 <osThreadNew+0x50>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800642a:	460b      	mov	r3, r1
 800642c:	9600      	str	r6, [sp, #0]
 800642e:	4661      	mov	r1, ip
 8006430:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006434:	f001 fa50 	bl	80078d8 <xTaskCreateStatic>
 8006438:	e003      	b.n	8006442 <osThreadNew+0x52>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800643a:	1e72      	subs	r2, r6, #1
 800643c:	2a37      	cmp	r2, #55	@ 0x37
 800643e:	d9e4      	bls.n	800640a <osThreadNew+0x1a>
        return (NULL);
 8006440:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8006442:	b007      	add	sp, #28
 8006444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006446:	f44f 7200 	mov.w	r2, #512	@ 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 800644a:	2618      	movs	r6, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800644c:	460b      	mov	r3, r1
 800644e:	4621      	mov	r1, r4
 8006450:	ac05      	add	r4, sp, #20
 8006452:	9600      	str	r6, [sp, #0]
 8006454:	9401      	str	r4, [sp, #4]
 8006456:	f001 fa79 	bl	800794c <xTaskCreate>
 800645a:	2801      	cmp	r0, #1
 800645c:	d1f0      	bne.n	8006440 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
 800645e:	9805      	ldr	r0, [sp, #20]
 8006460:	e7ef      	b.n	8006442 <osThreadNew+0x52>
    stack = configMINIMAL_STACK_SIZE;
 8006462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006466:	e7d6      	b.n	8006416 <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006468:	2f00      	cmp	r7, #0
 800646a:	d1e9      	bne.n	8006440 <osThreadNew+0x50>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006472:	b292      	uxth	r2, r2
 8006474:	4664      	mov	r4, ip
 8006476:	e7e9      	b.n	800644c <osThreadNew+0x5c>

08006478 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8006478:	f001 bda4 	b.w	8007fc4 <xTaskGetCurrentTaskHandle>

0800647c <osDelay>:
 800647c:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006480:	b93a      	cbnz	r2, 8006492 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 8006482:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006484:	b908      	cbnz	r0, 800648a <osDelay+0xe>
    stat = osOK;
 8006486:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006488:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800648a:	f001 fc43 	bl	8007d14 <vTaskDelay>
    stat = osOK;
 800648e:	2000      	movs	r0, #0
}
 8006490:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006492:	f06f 0005 	mvn.w	r0, #5
}
 8006496:	4770      	bx	lr

08006498 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006498:	b530      	push	{r4, r5, lr}
 800649a:	b083      	sub	sp, #12
 800649c:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80064a0:	b9bd      	cbnz	r5, 80064d2 <osMutexNew+0x3a>
    if (attr != NULL) {
 80064a2:	4604      	mov	r4, r0
 80064a4:	b1c0      	cbz	r0, 80064d8 <osMutexNew+0x40>
      type = attr->attr_bits;
 80064a6:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80064a8:	072b      	lsls	r3, r5, #28
 80064aa:	d412      	bmi.n	80064d2 <osMutexNew+0x3a>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064ac:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80064ae:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064b2:	68c3      	ldr	r3, [r0, #12]
 80064b4:	b309      	cbz	r1, 80064fa <osMutexNew+0x62>
 80064b6:	2b4f      	cmp	r3, #79	@ 0x4f
 80064b8:	d90b      	bls.n	80064d2 <osMutexNew+0x3a>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80064ba:	b345      	cbz	r5, 800650e <osMutexNew+0x76>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80064bc:	2004      	movs	r0, #4
 80064be:	f000 fcad 	bl	8006e1c <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80064c2:	b130      	cbz	r0, 80064d2 <osMutexNew+0x3a>
        if (attr != NULL) {
          name = attr->name;
 80064c4:	6824      	ldr	r4, [r4, #0]
 80064c6:	e00c      	b.n	80064e2 <osMutexNew+0x4a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80064c8:	2004      	movs	r0, #4
 80064ca:	f000 fcfd 	bl	8006ec8 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d1f8      	bne.n	80064c4 <osMutexNew+0x2c>
  hMutex = NULL;
 80064d2:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80064d4:	b003      	add	sp, #12
 80064d6:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
 80064d8:	2001      	movs	r0, #1
 80064da:	f000 fcf5 	bl	8006ec8 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80064de:	2800      	cmp	r0, #0
 80064e0:	d0f7      	beq.n	80064d2 <osMutexNew+0x3a>
        vQueueAddToRegistry (hMutex, name);
 80064e2:	4621      	mov	r1, r4
 80064e4:	9001      	str	r0, [sp, #4]
 80064e6:	f001 f827 	bl	8007538 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80064ea:	9801      	ldr	r0, [sp, #4]
 80064ec:	f015 0f01 	tst.w	r5, #1
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80064f0:	bf18      	it	ne
 80064f2:	f040 0001 	orrne.w	r0, r0, #1
}
 80064f6:	b003      	add	sp, #12
 80064f8:	bd30      	pop	{r4, r5, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e9      	bne.n	80064d2 <osMutexNew+0x3a>
            if (rmtx != 0U) {
 80064fe:	2d00      	cmp	r5, #0
 8006500:	d1e2      	bne.n	80064c8 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8006502:	2001      	movs	r0, #1
 8006504:	f000 fce0 	bl	8006ec8 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006508:	2800      	cmp	r0, #0
 800650a:	d1db      	bne.n	80064c4 <osMutexNew+0x2c>
 800650c:	e7e1      	b.n	80064d2 <osMutexNew+0x3a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800650e:	2001      	movs	r0, #1
 8006510:	f000 fc84 	bl	8006e1c <xQueueCreateMutexStatic>
      if (hMutex != NULL) {
 8006514:	2800      	cmp	r0, #0
 8006516:	d1d5      	bne.n	80064c4 <osMutexNew+0x2c>
 8006518:	e7db      	b.n	80064d2 <osMutexNew+0x3a>
 800651a:	bf00      	nop

0800651c <osMutexAcquire>:
 800651c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006520:	b9d2      	cbnz	r2, 8006558 <osMutexAcquire+0x3c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006522:	2801      	cmp	r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4603      	mov	r3, r0
  else if (hMutex == NULL) {
 8006528:	d919      	bls.n	800655e <osMutexAcquire+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800652a:	f003 0501 	and.w	r5, r3, #1
 800652e:	460c      	mov	r4, r1
 8006530:	f020 0001 	bic.w	r0, r0, #1
 8006534:	b955      	cbnz	r5, 800654c <osMutexAcquire+0x30>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006536:	f000 fe5f 	bl	80071f8 <xQueueSemaphoreTake>
 800653a:	2801      	cmp	r0, #1
 800653c:	d00a      	beq.n	8006554 <osMutexAcquire+0x38>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800653e:	2c00      	cmp	r4, #0
 8006540:	bf14      	ite	ne
 8006542:	f06f 0001 	mvnne.w	r0, #1
 8006546:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 800654a:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800654c:	f000 ff2e 	bl	80073ac <xQueueTakeMutexRecursive>
 8006550:	2801      	cmp	r0, #1
 8006552:	d1f4      	bne.n	800653e <osMutexAcquire+0x22>
  stat = osOK;
 8006554:	2000      	movs	r0, #0
}
 8006556:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8006558:	f06f 0005 	mvn.w	r0, #5
}
 800655c:	4770      	bx	lr
    stat = osErrorParameter;
 800655e:	f06f 0003 	mvn.w	r0, #3
}
 8006562:	bd38      	pop	{r3, r4, r5, pc}

08006564 <osMutexRelease>:
 8006564:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006568:	b9b9      	cbnz	r1, 800659a <osMutexRelease+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800656a:	2801      	cmp	r0, #1
 800656c:	4602      	mov	r2, r0
 800656e:	d917      	bls.n	80065a0 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8006570:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006574:	b508      	push	{r3, lr}
 8006576:	f002 0301 	and.w	r3, r2, #1
    if (rmtx != 0U) {
 800657a:	b93b      	cbnz	r3, 800658c <osMutexRelease+0x28>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800657c:	461a      	mov	r2, r3
 800657e:	4619      	mov	r1, r3
 8006580:	f000 fb88 	bl	8006c94 <xQueueGenericSend>
 8006584:	2801      	cmp	r0, #1
 8006586:	d105      	bne.n	8006594 <osMutexRelease+0x30>
  stat = osOK;
 8006588:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800658a:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800658c:	f000 fc7c 	bl	8006e88 <xQueueGiveMutexRecursive>
 8006590:	2801      	cmp	r0, #1
 8006592:	d0f9      	beq.n	8006588 <osMutexRelease+0x24>
        stat = osErrorResource;
 8006594:	f06f 0002 	mvn.w	r0, #2
}
 8006598:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800659a:	f06f 0005 	mvn.w	r0, #5
 800659e:	4770      	bx	lr
    stat = osErrorParameter;
 80065a0:	f06f 0003 	mvn.w	r0, #3
}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop

080065a8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80065a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065aa:	b083      	sub	sp, #12
 80065ac:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80065b0:	b98e      	cbnz	r6, 80065d6 <osSemaphoreNew+0x2e>
 80065b2:	4605      	mov	r5, r0
 80065b4:	b178      	cbz	r0, 80065d6 <osSemaphoreNew+0x2e>
 80065b6:	4288      	cmp	r0, r1
 80065b8:	460f      	mov	r7, r1
 80065ba:	d30c      	bcc.n	80065d6 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 80065bc:	4614      	mov	r4, r2
 80065be:	b172      	cbz	r2, 80065de <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065c0:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 80065c4:	b14a      	cbz	r2, 80065da <osSemaphoreNew+0x32>
 80065c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80065c8:	d905      	bls.n	80065d6 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80065ca:	2801      	cmp	r0, #1
 80065cc:	d02f      	beq.n	800662e <osSemaphoreNew+0x86>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80065ce:	f000 fb1f 	bl	8006c10 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80065d2:	4605      	mov	r5, r0
 80065d4:	b968      	cbnz	r0, 80065f2 <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
 80065d6:	2500      	movs	r5, #0
 80065d8:	e010      	b.n	80065fc <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1fb      	bne.n	80065d6 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 80065de:	2d01      	cmp	r5, #1
 80065e0:	d00f      	beq.n	8006602 <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80065e2:	4628      	mov	r0, r5
 80065e4:	4639      	mov	r1, r7
 80065e6:	f000 fb37 	bl	8006c58 <xQueueCreateCountingSemaphore>
 80065ea:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 80065ec:	2d00      	cmp	r5, #0
 80065ee:	d0f2      	beq.n	80065d6 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 80065f0:	b104      	cbz	r4, 80065f4 <osSemaphoreNew+0x4c>
          name = attr->name;
 80065f2:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80065f4:	4621      	mov	r1, r4
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 ff9e 	bl	8007538 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80065fc:	4628      	mov	r0, r5
 80065fe:	b003      	add	sp, #12
 8006600:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 8006602:	4628      	mov	r0, r5
 8006604:	2203      	movs	r2, #3
 8006606:	2100      	movs	r1, #0
 8006608:	f000 fada 	bl	8006bc0 <xQueueGenericCreate>
 800660c:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800660e:	2d00      	cmp	r5, #0
 8006610:	d0e1      	beq.n	80065d6 <osSemaphoreNew+0x2e>
 8006612:	2f00      	cmp	r7, #0
 8006614:	d0ea      	beq.n	80065ec <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006616:	2300      	movs	r3, #0
 8006618:	4628      	mov	r0, r5
 800661a:	461a      	mov	r2, r3
 800661c:	4619      	mov	r1, r3
 800661e:	f000 fb39 	bl	8006c94 <xQueueGenericSend>
 8006622:	2801      	cmp	r0, #1
 8006624:	d0e4      	beq.n	80065f0 <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
 8006626:	4628      	mov	r0, r5
 8006628:	f000 ff5c 	bl	80074e4 <vQueueDelete>
      if (hSemaphore != NULL) {
 800662c:	e7d3      	b.n	80065d6 <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800662e:	4613      	mov	r3, r2
 8006630:	2203      	movs	r2, #3
 8006632:	4631      	mov	r1, r6
 8006634:	9200      	str	r2, [sp, #0]
 8006636:	4632      	mov	r2, r6
 8006638:	f000 fa70 	bl	8006b1c <xQueueGenericCreateStatic>
 800663c:	4605      	mov	r5, r0
 800663e:	e7e6      	b.n	800660e <osSemaphoreNew+0x66>

08006640 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006640:	b360      	cbz	r0, 800669c <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006642:	b510      	push	{r4, lr}
 8006644:	460c      	mov	r4, r1
 8006646:	b082      	sub	sp, #8
 8006648:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800664c:	b1b3      	cbz	r3, 800667c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800664e:	bb11      	cbnz	r1, 8006696 <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006650:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006652:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006654:	f000 feca 	bl	80073ec <xQueueReceiveFromISR>
 8006658:	2801      	cmp	r0, #1
 800665a:	d118      	bne.n	800668e <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800665c:	9b01      	ldr	r3, [sp, #4]
 800665e:	b913      	cbnz	r3, 8006666 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8006660:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006662:	b002      	add	sp, #8
 8006664:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006666:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800666a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800666e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	e7f1      	b.n	8006660 <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800667c:	f000 fdbc 	bl	80071f8 <xQueueSemaphoreTake>
 8006680:	2801      	cmp	r0, #1
 8006682:	d0ed      	beq.n	8006660 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8006684:	b11c      	cbz	r4, 800668e <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
 8006686:	f06f 0001 	mvn.w	r0, #1
}
 800668a:	b002      	add	sp, #8
 800668c:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 800668e:	f06f 0002 	mvn.w	r0, #2
}
 8006692:	b002      	add	sp, #8
 8006694:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8006696:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800669a:	e7e2      	b.n	8006662 <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
 800669c:	f06f 0003 	mvn.w	r0, #3
}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop

080066a4 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80066a4:	b328      	cbz	r0, 80066f2 <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80066a6:	b500      	push	{lr}
 80066a8:	b083      	sub	sp, #12
 80066aa:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80066ae:	b19b      	cbz	r3, 80066d8 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 80066b0:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066b2:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80066b4:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066b6:	f000 fc8b 	bl	8006fd0 <xQueueGiveFromISR>
 80066ba:	2801      	cmp	r0, #1
 80066bc:	d116      	bne.n	80066ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	b183      	cbz	r3, 80066e4 <osSemaphoreRelease+0x40>
 80066c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	e005      	b.n	80066e4 <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80066d8:	461a      	mov	r2, r3
 80066da:	4619      	mov	r1, r3
 80066dc:	f000 fada 	bl	8006c94 <xQueueGenericSend>
 80066e0:	2801      	cmp	r0, #1
 80066e2:	d103      	bne.n	80066ec <osSemaphoreRelease+0x48>
  stat = osOK;
 80066e4:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80066e6:	b003      	add	sp, #12
 80066e8:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
 80066ec:	f06f 0002 	mvn.w	r0, #2
 80066f0:	e7f9      	b.n	80066e6 <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
 80066f2:	f06f 0003 	mvn.w	r0, #3
}
 80066f6:	4770      	bx	lr

080066f8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	f3ef 8405 	mrs	r4, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80066fe:	b944      	cbnz	r4, 8006712 <osSemaphoreDelete+0x1a>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 8006700:	4605      	mov	r5, r0
 8006702:	b148      	cbz	r0, 8006718 <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006704:	f000 ff30 	bl	8007568 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 8006708:	4628      	mov	r0, r5
 800670a:	f000 feeb 	bl	80074e4 <vQueueDelete>
    stat = osOK;
 800670e:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 8006710:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8006712:	f06f 0005 	mvn.w	r0, #5
}
 8006716:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 8006718:	f06f 0003 	mvn.w	r0, #3
}
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	bf00      	nop

08006720 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006722:	b083      	sub	sp, #12
 8006724:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006728:	b987      	cbnz	r7, 800674c <osMessageQueueNew+0x2c>
 800672a:	4605      	mov	r5, r0
 800672c:	b170      	cbz	r0, 800674c <osMessageQueueNew+0x2c>
 800672e:	b169      	cbz	r1, 800674c <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8006730:	4614      	mov	r4, r2
 8006732:	b17a      	cbz	r2, 8006754 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006734:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006738:	b1c3      	cbz	r3, 800676c <osMessageQueueNew+0x4c>
 800673a:	2a4f      	cmp	r2, #79	@ 0x4f
 800673c:	d906      	bls.n	800674c <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800673e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006740:	b122      	cbz	r2, 800674c <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006742:	fb01 f505 	mul.w	r5, r1, r5
 8006746:	6966      	ldr	r6, [r4, #20]
 8006748:	42ae      	cmp	r6, r5
 800674a:	d21e      	bcs.n	800678a <osMessageQueueNew+0x6a>
  hQueue = NULL;
 800674c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800674e:	4628      	mov	r0, r5
 8006750:	b003      	add	sp, #12
 8006752:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8006754:	f000 fa34 	bl	8006bc0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006758:	4605      	mov	r5, r0
 800675a:	2800      	cmp	r0, #0
 800675c:	d0f6      	beq.n	800674c <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 800675e:	4628      	mov	r0, r5
 8006760:	4621      	mov	r1, r4
 8006762:	f000 fee9 	bl	8007538 <vQueueAddToRegistry>
}
 8006766:	4628      	mov	r0, r5
 8006768:	b003      	add	sp, #12
 800676a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800676c:	2a00      	cmp	r2, #0
 800676e:	d1ed      	bne.n	800674c <osMessageQueueNew+0x2c>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1ea      	bne.n	800674c <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006776:	6962      	ldr	r2, [r4, #20]
 8006778:	2a00      	cmp	r2, #0
 800677a:	d1e7      	bne.n	800674c <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 800677c:	f000 fa20 	bl	8006bc0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006780:	4605      	mov	r5, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d0e2      	beq.n	800674c <osMessageQueueNew+0x2c>
        name = attr->name;
 8006786:	6824      	ldr	r4, [r4, #0]
 8006788:	e7e9      	b.n	800675e <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800678a:	9700      	str	r7, [sp, #0]
 800678c:	f000 f9c6 	bl	8006b1c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006790:	4605      	mov	r5, r0
 8006792:	2800      	cmp	r0, #0
 8006794:	d1f7      	bne.n	8006786 <osMessageQueueNew+0x66>
 8006796:	e7d9      	b.n	800674c <osMessageQueueNew+0x2c>

08006798 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006798:	b560      	push	{r5, r6, lr}
 800679a:	461e      	mov	r6, r3
 800679c:	b083      	sub	sp, #12
 800679e:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067a2:	fab0 f580 	clz	r5, r0
 80067a6:	fab1 f381 	clz	r3, r1
 80067aa:	096d      	lsrs	r5, r5, #5
 80067ac:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
 80067ae:	b1da      	cbz	r2, 80067e8 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067b0:	2e00      	cmp	r6, #0
 80067b2:	bf18      	it	ne
 80067b4:	f043 0301 	orrne.w	r3, r3, #1
 80067b8:	bb33      	cbnz	r3, 8006808 <osMessageQueuePut+0x70>
 80067ba:	bb2d      	cbnz	r5, 8006808 <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80067bc:	462b      	mov	r3, r5
 80067be:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80067c0:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80067c2:	f000 fb9f 	bl	8006f04 <xQueueGenericSendFromISR>
 80067c6:	2801      	cmp	r0, #1
 80067c8:	d11a      	bne.n	8006800 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80067ca:	9b01      	ldr	r3, [sp, #4]
 80067cc:	b14b      	cbz	r3, 80067e2 <osMessageQueuePut+0x4a>
 80067ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80067e2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80067e4:	b003      	add	sp, #12
 80067e6:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067e8:	b975      	cbnz	r5, 8006808 <osMessageQueuePut+0x70>
 80067ea:	b96b      	cbnz	r3, 8006808 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80067ec:	4632      	mov	r2, r6
 80067ee:	f000 fa51 	bl	8006c94 <xQueueGenericSend>
 80067f2:	2801      	cmp	r0, #1
 80067f4:	d0f5      	beq.n	80067e2 <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
 80067f6:	b11e      	cbz	r6, 8006800 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
 80067f8:	f06f 0001 	mvn.w	r0, #1
}
 80067fc:	b003      	add	sp, #12
 80067fe:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
 8006800:	f06f 0002 	mvn.w	r0, #2
}
 8006804:	b003      	add	sp, #12
 8006806:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
 8006808:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800680c:	e7ea      	b.n	80067e4 <osMessageQueuePut+0x4c>
 800680e:	bf00      	nop

08006810 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	461e      	mov	r6, r3
 8006814:	b082      	sub	sp, #8
 8006816:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800681a:	fab0 f580 	clz	r5, r0
 800681e:	fab1 f481 	clz	r4, r1
 8006822:	096d      	lsrs	r5, r5, #5
 8006824:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
 8006826:	b1d3      	cbz	r3, 800685e <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006828:	2e00      	cmp	r6, #0
 800682a:	bf18      	it	ne
 800682c:	f044 0401 	orrne.w	r4, r4, #1
 8006830:	bb2c      	cbnz	r4, 800687e <osMessageQueueGet+0x6e>
 8006832:	bb25      	cbnz	r5, 800687e <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006834:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006836:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006838:	f000 fdd8 	bl	80073ec <xQueueReceiveFromISR>
 800683c:	2801      	cmp	r0, #1
 800683e:	d11a      	bne.n	8006876 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	b14b      	cbz	r3, 8006858 <osMessageQueueGet+0x48>
 8006844:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800684c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006858:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800685a:	b002      	add	sp, #8
 800685c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800685e:	b975      	cbnz	r5, 800687e <osMessageQueueGet+0x6e>
 8006860:	b96c      	cbnz	r4, 800687e <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006862:	4632      	mov	r2, r6
 8006864:	f000 fc0a 	bl	800707c <xQueueReceive>
 8006868:	2801      	cmp	r0, #1
 800686a:	d0f5      	beq.n	8006858 <osMessageQueueGet+0x48>
        if (timeout != 0U) {
 800686c:	b11e      	cbz	r6, 8006876 <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
 800686e:	f06f 0001 	mvn.w	r0, #1
}
 8006872:	b002      	add	sp, #8
 8006874:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
 8006876:	f06f 0002 	mvn.w	r0, #2
}
 800687a:	b002      	add	sp, #8
 800687c:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 800687e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006882:	e7ea      	b.n	800685a <osMessageQueueGet+0x4a>

08006884 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006884:	b130      	cbz	r0, 8006894 <osMessageQueueGetCount+0x10>
 8006886:	f3ef 8305 	mrs	r3, IPSR
 800688a:	b10b      	cbz	r3, 8006890 <osMessageQueueGetCount+0xc>
 800688c:	f000 be1e 	b.w	80074cc <uxQueueMessagesWaitingFromISR>
 8006890:	f000 be08 	b.w	80074a4 <uxQueueMessagesWaiting>
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop

08006898 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	f3ef 8405 	mrs	r4, IPSR
 800689e:	b944      	cbnz	r4, 80068b2 <osMessageQueueDelete+0x1a>
 80068a0:	4605      	mov	r5, r0
 80068a2:	b148      	cbz	r0, 80068b8 <osMessageQueueDelete+0x20>
 80068a4:	f000 fe60 	bl	8007568 <vQueueUnregisterQueue>
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 fe1b 	bl	80074e4 <vQueueDelete>
 80068ae:	4620      	mov	r0, r4
 80068b0:	bd38      	pop	{r3, r4, r5, pc}
 80068b2:	f06f 0005 	mvn.w	r0, #5
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	f06f 0003 	mvn.w	r0, #3
 80068bc:	bd38      	pop	{r3, r4, r5, pc}
 80068be:	bf00      	nop

080068c0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068c0:	4b05      	ldr	r3, [pc, #20]	@ (80068d8 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068c2:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068c4:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068ca:	4c04      	ldr	r4, [pc, #16]	@ (80068dc <vApplicationGetIdleTaskMemory+0x1c>)
 80068cc:	600c      	str	r4, [r1, #0]
}
 80068ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068d2:	6013      	str	r3, [r2, #0]
}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	24001c94 	.word	0x24001c94
 80068dc:	24001494 	.word	0x24001494

080068e0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068e2:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068e4:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068ea:	4c04      	ldr	r4, [pc, #16]	@ (80068fc <vApplicationGetTimerTaskMemory+0x1c>)
 80068ec:	600c      	str	r4, [r1, #0]
}
 80068ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068f2:	6013      	str	r3, [r2, #0]
}
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	240013ec 	.word	0x240013ec
 80068fc:	240003ec 	.word	0x240003ec

08006900 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006900:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006904:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006908:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800690a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800690c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800690e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006910:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop

08006918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006918:	2300      	movs	r3, #0
 800691a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop

08006920 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006920:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006922:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 8006924:	3301      	adds	r3, #1
{
 8006926:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006928:	6894      	ldr	r4, [r2, #8]
 800692a:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800692e:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006930:	6091      	str	r1, [r2, #8]
}
 8006932:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8006936:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006938:	6003      	str	r3, [r0, #0]
}
 800693a:	4770      	bx	lr

0800693c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800693c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800693e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006940:	1c6b      	adds	r3, r5, #1
 8006942:	d010      	beq.n	8006966 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006944:	f100 0308 	add.w	r3, r0, #8
 8006948:	461c      	mov	r4, r3
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	42aa      	cmp	r2, r5
 8006950:	d9fa      	bls.n	8006948 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006952:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006954:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006956:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006958:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800695a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800695c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800695e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006960:	6002      	str	r2, [r0, #0]
}
 8006962:	bc30      	pop	{r4, r5}
 8006964:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006966:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	e7f2      	b.n	8006952 <vListInsert+0x16>

0800696c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800696c:	6903      	ldr	r3, [r0, #16]
{
 800696e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006970:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006972:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8006976:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8006978:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800697c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800697e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8006980:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006984:	bf08      	it	eq
 8006986:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8006988:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800698a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800698c:	3a01      	subs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8006990:	6818      	ldr	r0, [r3, #0]
}
 8006992:	4770      	bx	lr

08006994 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006998:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800699a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800699c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800699e:	b92a      	cbnz	r2, 80069ac <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069a0:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069a2:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069a4:	b34e      	cbz	r6, 80069fa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80069a6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069a8:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80069ac:	b97e      	cbnz	r6, 80069ce <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069ae:	6840      	ldr	r0, [r0, #4]
 80069b0:	f00e f945 	bl	8014c3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069b4:	6863      	ldr	r3, [r4, #4]
 80069b6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069b8:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069ba:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069bc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069be:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069c0:	bf24      	itt	cs
 80069c2:	6823      	ldrcs	r3, [r4, #0]
 80069c4:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069c6:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80069c8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ca:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069ce:	68c0      	ldr	r0, [r0, #12]
 80069d0:	f00e f935 	bl	8014c3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80069d6:	68e3      	ldr	r3, [r4, #12]
 80069d8:	4251      	negs	r1, r2
 80069da:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069e0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069e2:	d202      	bcs.n	80069ea <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069e4:	68a3      	ldr	r3, [r4, #8]
 80069e6:	440b      	add	r3, r1
 80069e8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80069ea:	2e02      	cmp	r6, #2
 80069ec:	d1eb      	bne.n	80069c6 <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069ee:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 80069f0:	f04f 0000 	mov.w	r0, #0
 80069f4:	bf38      	it	cc
 80069f6:	2501      	movcc	r5, #1
 80069f8:	e7d6      	b.n	80069a8 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069fa:	6880      	ldr	r0, [r0, #8]
 80069fc:	f001 fb38 	bl	8008070 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a00:	60a6      	str	r6, [r4, #8]
 8006a02:	e7d1      	b.n	80069a8 <prvCopyDataToQueue+0x14>

08006a04 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a08:	f001 fe54 	bl	80086b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a0c:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8006a10:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a12:	2c00      	cmp	r4, #0
 8006a14:	dd14      	ble.n	8006a40 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a16:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8006a1a:	e003      	b.n	8006a24 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a1c:	1e63      	subs	r3, r4, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a22:	b16a      	cbz	r2, 8006a40 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a24:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a26:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a28:	b153      	cbz	r3, 8006a40 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2a:	f001 fa31 	bl	8007e90 <xTaskRemoveFromEventList>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d0f4      	beq.n	8006a1c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8006a32:	f001 fac1 	bl	8007fb8 <vTaskMissedYield>
			--cTxLock;
 8006a36:	1e63      	subs	r3, r4, #1
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	d1f1      	bne.n	8006a24 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a40:	23ff      	movs	r3, #255	@ 0xff
 8006a42:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a46:	f001 fe57 	bl	80086f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a4a:	f001 fe33 	bl	80086b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a4e:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8006a52:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	dd14      	ble.n	8006a82 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a58:	f105 0610 	add.w	r6, r5, #16
 8006a5c:	e003      	b.n	8006a66 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a5e:	1e63      	subs	r3, r4, #1
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a64:	b16a      	cbz	r2, 8006a82 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a66:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a68:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a6a:	b153      	cbz	r3, 8006a82 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a6c:	f001 fa10 	bl	8007e90 <xTaskRemoveFromEventList>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0f4      	beq.n	8006a5e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8006a74:	f001 faa0 	bl	8007fb8 <vTaskMissedYield>
				--cRxLock;
 8006a78:	1e63      	subs	r3, r4, #1
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	d1f1      	bne.n	8006a66 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a82:	23ff      	movs	r3, #255	@ 0xff
 8006a84:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8006a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006a8c:	f001 be34 	b.w	80086f8 <vPortExitCritical>

08006a90 <xQueueGenericReset>:
{
 8006a90:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006a92:	b1e0      	cbz	r0, 8006ace <xQueueGenericReset+0x3e>
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8006a98:	f001 fe0c 	bl	80086b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aa2:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aa8:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aaa:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aac:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aae:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ab0:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8006ab2:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ab4:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ab6:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8006ab8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006abc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006ac0:	b975      	cbnz	r5, 8006ae0 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	b9c3      	cbnz	r3, 8006af8 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8006ac6:	f001 fe17 	bl	80086f8 <vPortExitCritical>
}
 8006aca:	2001      	movs	r0, #1
 8006acc:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006ade:	e7fe      	b.n	8006ade <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ae0:	f104 0010 	add.w	r0, r4, #16
 8006ae4:	f7ff ff0c 	bl	8006900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ae8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006aec:	f7ff ff08 	bl	8006900 <vListInitialise>
	taskEXIT_CRITICAL();
 8006af0:	f001 fe02 	bl	80086f8 <vPortExitCritical>
}
 8006af4:	2001      	movs	r0, #1
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af8:	f104 0010 	add.w	r0, r4, #16
 8006afc:	f001 f9c8 	bl	8007e90 <xTaskRemoveFromEventList>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0e0      	beq.n	8006ac6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8006b04:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	e7d5      	b.n	8006ac6 <xQueueGenericReset+0x36>
 8006b1a:	bf00      	nop

08006b1c <xQueueGenericCreateStatic>:
	{
 8006b1c:	b530      	push	{r4, r5, lr}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b24:	b940      	cbnz	r0, 8006b38 <xQueueGenericCreateStatic+0x1c>
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	e7fe      	b.n	8006b36 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8006b38:	b153      	cbz	r3, 8006b50 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b3a:	b30a      	cbz	r2, 8006b80 <xQueueGenericCreateStatic+0x64>
 8006b3c:	b989      	cbnz	r1, 8006b62 <xQueueGenericCreateStatic+0x46>
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	e7fe      	b.n	8006b4e <xQueueGenericCreateStatic+0x32>
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b62:	b16a      	cbz	r2, 8006b80 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b64:	2550      	movs	r5, #80	@ 0x50
 8006b66:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b68:	9d03      	ldr	r5, [sp, #12]
 8006b6a:	2d50      	cmp	r5, #80	@ 0x50
 8006b6c:	d013      	beq.n	8006b96 <xQueueGenericCreateStatic+0x7a>
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	e7fe      	b.n	8006b7e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b80:	2900      	cmp	r1, #0
 8006b82:	d0ef      	beq.n	8006b64 <xQueueGenericCreateStatic+0x48>
 8006b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericCreateStatic+0x78>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b96:	2900      	cmp	r1, #0
 8006b98:	bf08      	it	eq
 8006b9a:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8006b9c:	6419      	str	r1, [r3, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b9e:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8006ba0:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8006ba2:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ba4:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ba6:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
 8006baa:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bac:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bae:	f7ff ff6f 	bl	8006a90 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006bb2:	9b01      	ldr	r3, [sp, #4]
	}
 8006bb4:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8006bb6:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
	}
 8006bba:	b005      	add	sp, #20
 8006bbc:	bd30      	pop	{r4, r5, pc}
 8006bbe:	bf00      	nop

08006bc0 <xQueueGenericCreate>:
	{
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bc2:	b940      	cbnz	r0, 8006bd6 <xQueueGenericCreate+0x16>
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueGenericCreate+0x14>
 8006bd6:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd8:	fb01 f000 	mul.w	r0, r1, r0
 8006bdc:	460d      	mov	r5, r1
 8006bde:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006be0:	3050      	adds	r0, #80	@ 0x50
 8006be2:	f001 fedb 	bl	800899c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006be6:	4607      	mov	r7, r0
 8006be8:	b170      	cbz	r0, 8006c08 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bf0:	b165      	cbz	r5, 8006c0c <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bf2:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8006bfc:	e9c7 450f 	strd	r4, r5, [r7, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c00:	f7ff ff46 	bl	8006a90 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006c04:	f887 604c 	strb.w	r6, [r7, #76]	@ 0x4c
	}
 8006c08:	4638      	mov	r0, r7
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	e7f2      	b.n	8006bf6 <xQueueGenericCreate+0x36>

08006c10 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8006c10:	b940      	cbnz	r0, 8006c24 <xQueueCreateCountingSemaphoreStatic+0x14>
 8006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	e7fe      	b.n	8006c22 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c24:	4288      	cmp	r0, r1
	{
 8006c26:	b510      	push	{r4, lr}
 8006c28:	460c      	mov	r4, r1
 8006c2a:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c2c:	d208      	bcs.n	8006c40 <xQueueCreateCountingSemaphoreStatic+0x30>
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	e7fe      	b.n	8006c3e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c40:	2102      	movs	r1, #2
 8006c42:	4613      	mov	r3, r2
 8006c44:	2200      	movs	r2, #0
 8006c46:	9100      	str	r1, [sp, #0]
 8006c48:	4611      	mov	r1, r2
 8006c4a:	f7ff ff67 	bl	8006b1c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006c4e:	b100      	cbz	r0, 8006c52 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c50:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006c52:	b002      	add	sp, #8
 8006c54:	bd10      	pop	{r4, pc}
 8006c56:	bf00      	nop

08006c58 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8006c58:	b940      	cbnz	r0, 8006c6c <xQueueCreateCountingSemaphore+0x14>
 8006c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	e7fe      	b.n	8006c6a <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c6c:	4288      	cmp	r0, r1
	{
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c72:	d208      	bcs.n	8006c86 <xQueueCreateCountingSemaphore+0x2e>
 8006c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	e7fe      	b.n	8006c84 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c86:	2202      	movs	r2, #2
 8006c88:	2100      	movs	r1, #0
 8006c8a:	f7ff ff99 	bl	8006bc0 <xQueueGenericCreate>
		if( xHandle != NULL )
 8006c8e:	b100      	cbz	r0, 8006c92 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c90:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006c92:	bd10      	pop	{r4, pc}

08006c94 <xQueueGenericSend>:
{
 8006c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d07e      	beq.n	8006d9e <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ca0:	460f      	mov	r7, r1
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	461e      	mov	r6, r3
 8006ca6:	2900      	cmp	r1, #0
 8006ca8:	d069      	beq.n	8006d7e <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006caa:	2e02      	cmp	r6, #2
 8006cac:	d10b      	bne.n	8006cc6 <xQueueGenericSend+0x32>
 8006cae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d008      	beq.n	8006cc6 <xQueueGenericSend+0x32>
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	e7fe      	b.n	8006cc4 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cc6:	f001 f983 	bl	8007fd0 <xTaskGetSchedulerState>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d070      	beq.n	8006db0 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cce:	f1a6 0802 	sub.w	r8, r6, #2
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8006cd8:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cda:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8006cde:	e007      	b.n	8006cf0 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006ce0:	f001 fd0a 	bl	80086f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7ff fe8d 	bl	8006a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cea:	f001 f803 	bl	8007cf4 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cee:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8006cf0:	f001 fce0 	bl	80086b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cf4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006cf6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006cf8:	4290      	cmp	r0, r2
 8006cfa:	d365      	bcc.n	8006dc8 <xQueueGenericSend+0x134>
 8006cfc:	f1b8 0f00 	cmp.w	r8, #0
 8006d00:	d162      	bne.n	8006dc8 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d02:	9b01      	ldr	r3, [sp, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d077      	beq.n	8006df8 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	d044      	beq.n	8006d96 <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8006d0c:	f001 fcf4 	bl	80086f8 <vPortExitCritical>
		vTaskSuspendAll();
 8006d10:	f000 fe9c 	bl	8007a4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d14:	f001 fcce 	bl	80086b4 <vPortEnterCritical>
 8006d18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006d1c:	2bff      	cmp	r3, #255	@ 0xff
 8006d1e:	d101      	bne.n	8006d24 <xQueueGenericSend+0x90>
 8006d20:	f884 9044 	strb.w	r9, [r4, #68]	@ 0x44
 8006d24:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006d28:	2bff      	cmp	r3, #255	@ 0xff
 8006d2a:	d101      	bne.n	8006d30 <xQueueGenericSend+0x9c>
 8006d2c:	f884 9045 	strb.w	r9, [r4, #69]	@ 0x45
 8006d30:	f001 fce2 	bl	80086f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d34:	a901      	add	r1, sp, #4
 8006d36:	a802      	add	r0, sp, #8
 8006d38:	f001 f8fc 	bl	8007f34 <xTaskCheckForTimeOut>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d15f      	bne.n	8006e00 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8006d40:	f001 fcb8 	bl	80086b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006d46:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d1c9      	bne.n	8006ce0 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8006d4c:	f001 fcd4 	bl	80086f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d50:	9901      	ldr	r1, [sp, #4]
 8006d52:	f104 0010 	add.w	r0, r4, #16
 8006d56:	f001 f863 	bl	8007e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff fe52 	bl	8006a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d60:	f000 ffc8 	bl	8007cf4 <xTaskResumeAll>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d1c2      	bne.n	8006cee <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8006d68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d70:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	e7b7      	b.n	8006cee <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d7e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d092      	beq.n	8006caa <xQueueGenericSend+0x16>
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	e7fe      	b.n	8006d94 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d96:	a802      	add	r0, sp, #8
 8006d98:	f001 f8c0 	bl	8007f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d9c:	e7b6      	b.n	8006d0c <xQueueGenericSend+0x78>
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006dae:	e7fe      	b.n	8006dae <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006db0:	9b01      	ldr	r3, [sp, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d08b      	beq.n	8006cce <xQueueGenericSend+0x3a>
 8006db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	e7fe      	b.n	8006dc6 <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dc8:	4632      	mov	r2, r6
 8006dca:	4639      	mov	r1, r7
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7ff fde1 	bl	8006994 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dd2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006dd4:	b9d3      	cbnz	r3, 8006e0c <xQueueGenericSend+0x178>
					else if( xYieldRequired != pdFALSE )
 8006dd6:	b148      	cbz	r0, 8006dec <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8006dd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006dec:	f001 fc84 	bl	80086f8 <vPortExitCritical>
				return pdPASS;
 8006df0:	2001      	movs	r0, #1
}
 8006df2:	b005      	add	sp, #20
 8006df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8006df8:	f001 fc7e 	bl	80086f8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e7f8      	b.n	8006df2 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7ff fdff 	bl	8006a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e06:	f000 ff75 	bl	8007cf4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006e0a:	e7f7      	b.n	8006dfc <xQueueGenericSend+0x168>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006e10:	f001 f83e 	bl	8007e90 <xTaskRemoveFromEventList>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d0e9      	beq.n	8006dec <xQueueGenericSend+0x158>
 8006e18:	e7de      	b.n	8006dd8 <xQueueGenericSend+0x144>
 8006e1a:	bf00      	nop

08006e1c <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8006e1c:	b179      	cbz	r1, 8006e3e <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e1e:	2350      	movs	r3, #80	@ 0x50
	{
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e24:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	2b50      	cmp	r3, #80	@ 0x50
 8006e2a:	d011      	beq.n	8006e50 <xQueueCreateMutexStatic+0x34>
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	e7fe      	b.n	8006e3c <xQueueCreateMutexStatic+0x20>
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006e4e:	e7fe      	b.n	8006e4e <xQueueCreateMutexStatic+0x32>
 8006e50:	460c      	mov	r4, r1
	pxNewQueue->uxLength = uxQueueLength;
 8006e52:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e54:	2101      	movs	r1, #1
 8006e56:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e58:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e5a:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e5c:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e60:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
 8006e62:	e9c4 160f 	strd	r1, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e66:	f7ff fe13 	bl	8006a90 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e6a:	4633      	mov	r3, r6
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006e72:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e76:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e78:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e7a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e7c:	f7ff ff0a 	bl	8006c94 <xQueueGenericSend>
	}
 8006e80:	4620      	mov	r0, r4
 8006e82:	b002      	add	sp, #8
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
 8006e86:	bf00      	nop

08006e88 <xQueueGiveMutexRecursive>:
	{
 8006e88:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006e8a:	b138      	cbz	r0, 8006e9c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006e8c:	6885      	ldr	r5, [r0, #8]
 8006e8e:	4604      	mov	r4, r0
 8006e90:	f001 f898 	bl	8007fc4 <xTaskGetCurrentTaskHandle>
 8006e94:	4285      	cmp	r5, r0
 8006e96:	d00a      	beq.n	8006eae <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8006e98:	2000      	movs	r0, #0
	}
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006eac:	e7fe      	b.n	8006eac <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006eae:	68e3      	ldr	r3, [r4, #12]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006eb4:	b10b      	cbz	r3, 8006eba <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8006eb6:	2001      	movs	r0, #1
	}
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff fee8 	bl	8006c94 <xQueueGenericSend>
 8006ec4:	e7f7      	b.n	8006eb6 <xQueueGiveMutexRecursive+0x2e>
 8006ec6:	bf00      	nop

08006ec8 <xQueueCreateMutex>:
	{
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ecc:	2050      	movs	r0, #80	@ 0x50
 8006ece:	f001 fd65 	bl	800899c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	b198      	cbz	r0, 8006efe <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ed6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8006ed8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006eda:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006edc:	f880 6046 	strb.w	r6, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8006ee0:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ee4:	f7ff fdd4 	bl	8006a90 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ee8:	4633      	mov	r3, r6
 8006eea:	4632      	mov	r2, r6
 8006eec:	4631      	mov	r1, r6
 8006eee:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006ef0:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ef4:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ef6:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ef8:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006efa:	f7ff fecb 	bl	8006c94 <xQueueGenericSend>
	}
 8006efe:	4620      	mov	r0, r4
 8006f00:	bd70      	pop	{r4, r5, r6, pc}
 8006f02:	bf00      	nop

08006f04 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d04b      	beq.n	8006fa0 <xQueueGenericSendFromISR+0x9c>
{
 8006f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	460e      	mov	r6, r1
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4617      	mov	r7, r2
 8006f12:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f14:	b339      	cbz	r1, 8006f66 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f16:	2d02      	cmp	r5, #2
 8006f18:	d10b      	bne.n	8006f32 <xQueueGenericSendFromISR+0x2e>
 8006f1a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d008      	beq.n	8006f32 <xQueueGenericSendFromISR+0x2e>
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f32:	f001 fcdb 	bl	80088ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f36:	f3ef 8811 	mrs	r8, BASEPRI
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f4a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006f4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d315      	bcc.n	8006f7e <xQueueGenericSendFromISR+0x7a>
 8006f52:	f1a5 0002 	sub.w	r0, r5, #2
 8006f56:	fab0 f080 	clz	r0, r0
 8006f5a:	0940      	lsrs	r0, r0, #5
 8006f5c:	b978      	cbnz	r0, 8006f7e <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f5e:	f388 8811 	msr	BASEPRI, r8
}
 8006f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f66:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0d4      	beq.n	8006f16 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	e7fe      	b.n	8006f7c <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f7e:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f80:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f84:	4631      	mov	r1, r6
 8006f86:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f88:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f8a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f8c:	f7ff fd02 	bl	8006994 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006f90:	1c6b      	adds	r3, r5, #1
 8006f92:	d00e      	beq.n	8006fb2 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f94:	1c6b      	adds	r3, r5, #1
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	e7de      	b.n	8006f5e <xQueueGenericSendFromISR+0x5a>
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0f1      	beq.n	8006f9c <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fb8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006fbc:	f000 ff68 	bl	8007e90 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d0eb      	beq.n	8006f9c <xQueueGenericSendFromISR+0x98>
 8006fc4:	2f00      	cmp	r7, #0
 8006fc6:	d0e9      	beq.n	8006f9c <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	e7e6      	b.n	8006f9c <xQueueGenericSendFromISR+0x98>
 8006fce:	bf00      	nop

08006fd0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8006fd0:	b360      	cbz	r0, 800702c <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fd2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fd8:	b143      	cbz	r3, 8006fec <xQueueGiveFromISR+0x1c>
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	e7fe      	b.n	8006fea <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006fec:	6803      	ldr	r3, [r0, #0]
 8006fee:	460d      	mov	r5, r1
 8006ff0:	b32b      	cbz	r3, 800703e <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ff2:	f001 fc7b 	bl	80088ec <vPortValidateInterruptPriority>
	__asm volatile
 8006ff6:	f3ef 8611 	mrs	r6, BASEPRI
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800700a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800700c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800700e:	429a      	cmp	r2, r3
 8007010:	d921      	bls.n	8007056 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007012:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007016:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8007018:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800701a:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800701c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 800701e:	d01e      	beq.n	800705e <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007020:	3301      	adds	r3, #1
 8007022:	b25b      	sxtb	r3, r3
 8007024:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8007028:	2001      	movs	r0, #1
 800702a:	e015      	b.n	8007058 <xQueueGiveFromISR+0x88>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800703c:	e7fe      	b.n	800703c <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800703e:	6883      	ldr	r3, [r0, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0d6      	beq.n	8006ff2 <xQueueGiveFromISR+0x22>
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	e7fe      	b.n	8007054 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8007056:	2000      	movs	r0, #0
	__asm volatile
 8007058:	f386 8811 	msr	BASEPRI, r6
}
 800705c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800705e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0e1      	beq.n	8007028 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007064:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007068:	f000 ff12 	bl	8007e90 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800706c:	2d00      	cmp	r5, #0
 800706e:	d0db      	beq.n	8007028 <xQueueGiveFromISR+0x58>
 8007070:	2800      	cmp	r0, #0
 8007072:	d0d9      	beq.n	8007028 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007074:	2301      	movs	r3, #1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	e7d6      	b.n	8007028 <xQueueGiveFromISR+0x58>
 800707a:	bf00      	nop

0800707c <xQueueReceive>:
{
 800707c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707e:	b085      	sub	sp, #20
 8007080:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007082:	2800      	cmp	r0, #0
 8007084:	f000 809d 	beq.w	80071c2 <xQueueReceive+0x146>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007088:	460e      	mov	r6, r1
 800708a:	4604      	mov	r4, r0
 800708c:	2900      	cmp	r1, #0
 800708e:	d041      	beq.n	8007114 <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007090:	f000 ff9e 	bl	8007fd0 <xTaskGetSchedulerState>
 8007094:	2800      	cmp	r0, #0
 8007096:	d049      	beq.n	800712c <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 8007098:	f001 fb0c 	bl	80086b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800709c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800709e:	2d00      	cmp	r5, #0
 80070a0:	d161      	bne.n	8007166 <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 80070a2:	9b01      	ldr	r3, [sp, #4]
 80070a4:	b38b      	cbz	r3, 800710a <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070a6:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80070a8:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070aa:	f000 ff37 	bl	8007f1c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80070ae:	f001 fb23 	bl	80086f8 <vPortExitCritical>
		vTaskSuspendAll();
 80070b2:	f000 fccb 	bl	8007a4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070b6:	f001 fafd 	bl	80086b4 <vPortEnterCritical>
 80070ba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80070be:	2bff      	cmp	r3, #255	@ 0xff
 80070c0:	d101      	bne.n	80070c6 <xQueueReceive+0x4a>
 80070c2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80070c6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80070ca:	2bff      	cmp	r3, #255	@ 0xff
 80070cc:	d101      	bne.n	80070d2 <xQueueReceive+0x56>
 80070ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070d2:	f001 fb11 	bl	80086f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070d6:	a901      	add	r1, sp, #4
 80070d8:	a802      	add	r0, sp, #8
 80070da:	f000 ff2b 	bl	8007f34 <xTaskCheckForTimeOut>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d130      	bne.n	8007144 <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 80070e2:	f001 fae7 	bl	80086b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d051      	beq.n	8007190 <xQueueReceive+0x114>
	taskEXIT_CRITICAL();
 80070ec:	f001 fb04 	bl	80086f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80070f0:	4620      	mov	r0, r4
 80070f2:	f7ff fc87 	bl	8006a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070f6:	f000 fdfd 	bl	8007cf4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80070fa:	f001 fadb 	bl	80086b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070fe:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007100:	2d00      	cmp	r5, #0
 8007102:	d130      	bne.n	8007166 <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1d1      	bne.n	80070ae <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 800710a:	f001 faf5 	bl	80086f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800710e:	2000      	movs	r0, #0
}
 8007110:	b005      	add	sp, #20
 8007112:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007114:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0ba      	beq.n	8007090 <xQueueReceive+0x14>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	e7fe      	b.n	800712a <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0b2      	beq.n	8007098 <xQueueReceive+0x1c>
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	e7fe      	b.n	8007142 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8007144:	4620      	mov	r0, r4
 8007146:	f7ff fc5d 	bl	8006a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800714a:	f000 fdd3 	bl	8007cf4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800714e:	f001 fab1 	bl	80086b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007152:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0d8      	beq.n	800710a <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 8007158:	f001 face 	bl	80086f8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800715c:	f001 faaa 	bl	80086b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007160:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007162:	2d00      	cmp	r5, #0
 8007164:	d0ce      	beq.n	8007104 <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007166:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007168:	b152      	cbz	r2, 8007180 <xQueueReceive+0x104>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800716a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800716c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800716e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007170:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007172:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007174:	d301      	bcc.n	800717a <xQueueReceive+0xfe>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007176:	6821      	ldr	r1, [r4, #0]
 8007178:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800717a:	4630      	mov	r0, r6
 800717c:	f00d fd5f 	bl	8014c3e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007180:	3d01      	subs	r5, #1
 8007182:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	bb2b      	cbnz	r3, 80071d4 <xQueueReceive+0x158>
				taskEXIT_CRITICAL();
 8007188:	f001 fab6 	bl	80086f8 <vPortExitCritical>
				return pdPASS;
 800718c:	2001      	movs	r0, #1
 800718e:	e7bf      	b.n	8007110 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 8007190:	f001 fab2 	bl	80086f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007194:	9901      	ldr	r1, [sp, #4]
 8007196:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800719a:	f000 fe41 	bl	8007e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff fc30 	bl	8006a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071a4:	f000 fda6 	bl	8007cf4 <xTaskResumeAll>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d1d7      	bne.n	800715c <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 80071ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80071c0:	e7cc      	b.n	800715c <xQueueReceive+0xe0>
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80071d2:	e7fe      	b.n	80071d2 <xQueueReceive+0x156>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d4:	f104 0010 	add.w	r0, r4, #16
 80071d8:	f000 fe5a 	bl	8007e90 <xTaskRemoveFromEventList>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d0d3      	beq.n	8007188 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 80071e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	e7c8      	b.n	8007188 <xQueueReceive+0x10c>
 80071f6:	bf00      	nop

080071f8 <xQueueSemaphoreTake>:
{
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fa:	b085      	sub	sp, #20
 80071fc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80071fe:	2800      	cmp	r0, #0
 8007200:	d056      	beq.n	80072b0 <xQueueSemaphoreTake+0xb8>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007202:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8007204:	4604      	mov	r4, r0
 8007206:	b146      	cbz	r6, 800721a <xQueueSemaphoreTake+0x22>
 8007208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	e7fe      	b.n	8007218 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800721a:	f000 fed9 	bl	8007fd0 <xTaskGetSchedulerState>
 800721e:	4605      	mov	r5, r0
 8007220:	2800      	cmp	r0, #0
 8007222:	d04e      	beq.n	80072c2 <xQueueSemaphoreTake+0xca>
 8007224:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8007226:	f001 fa45 	bl	80086b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800722a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		prvLockQueue( pxQueue );
 800722c:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800722e:	bb8b      	cbnz	r3, 8007294 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 809a 	beq.w	800736c <xQueueSemaphoreTake+0x174>
				else if( xEntryTimeSet == pdFALSE )
 8007238:	2d00      	cmp	r5, #0
 800723a:	d05c      	beq.n	80072f6 <xQueueSemaphoreTake+0xfe>
		taskEXIT_CRITICAL();
 800723c:	f001 fa5c 	bl	80086f8 <vPortExitCritical>
		vTaskSuspendAll();
 8007240:	f000 fc04 	bl	8007a4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007244:	f001 fa36 	bl	80086b4 <vPortEnterCritical>
 8007248:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800724c:	2bff      	cmp	r3, #255	@ 0xff
 800724e:	d101      	bne.n	8007254 <xQueueSemaphoreTake+0x5c>
 8007250:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8007254:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007258:	2bff      	cmp	r3, #255	@ 0xff
 800725a:	d101      	bne.n	8007260 <xQueueSemaphoreTake+0x68>
 800725c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007260:	f001 fa4a 	bl	80086f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007264:	a901      	add	r1, sp, #4
 8007266:	a802      	add	r0, sp, #8
 8007268:	f000 fe64 	bl	8007f34 <xTaskCheckForTimeOut>
 800726c:	2800      	cmp	r0, #0
 800726e:	d134      	bne.n	80072da <xQueueSemaphoreTake+0xe2>
	taskENTER_CRITICAL();
 8007270:	f001 fa20 	bl	80086b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007274:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007276:	2b00      	cmp	r3, #0
 8007278:	d044      	beq.n	8007304 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 800727a:	f001 fa3d 	bl	80086f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800727e:	4620      	mov	r0, r4
 8007280:	f7ff fbc0 	bl	8006a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007284:	f000 fd36 	bl	8007cf4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007288:	f001 fa14 	bl	80086b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800728c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800728e:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0cd      	beq.n	8007230 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007294:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007296:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007298:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800729a:	2a00      	cmp	r2, #0
 800729c:	f000 8082 	beq.w	80073a4 <xQueueSemaphoreTake+0x1ac>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d16d      	bne.n	8007382 <xQueueSemaphoreTake+0x18a>
				taskEXIT_CRITICAL();
 80072a6:	f001 fa27 	bl	80086f8 <vPortExitCritical>
				return pdPASS;
 80072aa:	2001      	movs	r0, #1
}
 80072ac:	b005      	add	sp, #20
 80072ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80072c0:	e7fe      	b.n	80072c0 <xQueueSemaphoreTake+0xc8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d038      	beq.n	800733a <xQueueSemaphoreTake+0x142>
 80072c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	e7fe      	b.n	80072d8 <xQueueSemaphoreTake+0xe0>
			prvUnlockQueue( pxQueue );
 80072da:	4620      	mov	r0, r4
 80072dc:	f7ff fb92 	bl	8006a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072e0:	f000 fd08 	bl	8007cf4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80072e4:	f001 f9e6 	bl	80086b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80072ea:	b943      	cbnz	r3, 80072fe <xQueueSemaphoreTake+0x106>
	taskEXIT_CRITICAL();
 80072ec:	f001 fa04 	bl	80086f8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80072f0:	bb2e      	cbnz	r6, 800733e <xQueueSemaphoreTake+0x146>
					return errQUEUE_EMPTY;
 80072f2:	2000      	movs	r0, #0
 80072f4:	e7da      	b.n	80072ac <xQueueSemaphoreTake+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072f6:	a802      	add	r0, sp, #8
 80072f8:	f000 fe10 	bl	8007f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072fc:	e79e      	b.n	800723c <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 80072fe:	f001 f9fb 	bl	80086f8 <vPortExitCritical>
	return xReturn;
 8007302:	e7c1      	b.n	8007288 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8007304:	f001 f9f8 	bl	80086f8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	b333      	cbz	r3, 800735a <xQueueSemaphoreTake+0x162>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800730c:	9901      	ldr	r1, [sp, #4]
 800730e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007312:	f000 fd85 	bl	8007e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007316:	4620      	mov	r0, r4
 8007318:	f7ff fb74 	bl	8006a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800731c:	f000 fcea 	bl	8007cf4 <xTaskResumeAll>
 8007320:	2800      	cmp	r0, #0
 8007322:	d1b1      	bne.n	8007288 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8007324:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	e7a6      	b.n	8007288 <xQueueSemaphoreTake+0x90>
 800733a:	462e      	mov	r6, r5
 800733c:	e773      	b.n	8007226 <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 800733e:	f001 f9b9 	bl	80086b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007342:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007344:	b119      	cbz	r1, 800734e <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007346:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800734e:	68a0      	ldr	r0, [r4, #8]
 8007350:	f000 fed2 	bl	80080f8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007354:	f001 f9d0 	bl	80086f8 <vPortExitCritical>
 8007358:	e7cb      	b.n	80072f2 <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 800735a:	f001 f9ab 	bl	80086b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800735e:	68a0      	ldr	r0, [r4, #8]
 8007360:	f000 fe46 	bl	8007ff0 <xTaskPriorityInherit>
 8007364:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8007366:	f001 f9c7 	bl	80086f8 <vPortExitCritical>
 800736a:	e7cf      	b.n	800730c <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800736c:	2e00      	cmp	r6, #0
 800736e:	d0f1      	beq.n	8007354 <xQueueSemaphoreTake+0x15c>
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	e7fe      	b.n	8007380 <xQueueSemaphoreTake+0x188>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007382:	f104 0010 	add.w	r0, r4, #16
 8007386:	f000 fd83 	bl	8007e90 <xTaskRemoveFromEventList>
 800738a:	2800      	cmp	r0, #0
 800738c:	d08b      	beq.n	80072a6 <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 800738e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007396:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	e780      	b.n	80072a6 <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073a4:	f000 fef8 	bl	8008198 <pvTaskIncrementMutexHeldCount>
 80073a8:	60a0      	str	r0, [r4, #8]
 80073aa:	e779      	b.n	80072a0 <xQueueSemaphoreTake+0xa8>

080073ac <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80073ac:	b1a8      	cbz	r0, 80073da <xQueueTakeMutexRecursive+0x2e>
	{
 80073ae:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073b0:	6886      	ldr	r6, [r0, #8]
 80073b2:	4604      	mov	r4, r0
 80073b4:	460d      	mov	r5, r1
 80073b6:	f000 fe05 	bl	8007fc4 <xTaskGetCurrentTaskHandle>
 80073ba:	4286      	cmp	r6, r0
 80073bc:	d008      	beq.n	80073d0 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80073be:	4629      	mov	r1, r5
 80073c0:	4620      	mov	r0, r4
 80073c2:	f7ff ff19 	bl	80071f8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80073c6:	b110      	cbz	r0, 80073ce <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073c8:	68e3      	ldr	r3, [r4, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60e3      	str	r3, [r4, #12]
	}
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073d0:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80073d2:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073d4:	4403      	add	r3, r0
 80073d6:	60e3      	str	r3, [r4, #12]
	}
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
 80073da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80073ea:	e7fe      	b.n	80073ea <xQueueTakeMutexRecursive+0x3e>

080073ec <xQueueReceiveFromISR>:
{
 80073ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80073f0:	b310      	cbz	r0, 8007438 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f2:	460f      	mov	r7, r1
 80073f4:	4604      	mov	r4, r0
 80073f6:	4616      	mov	r6, r2
 80073f8:	b191      	cbz	r1, 8007420 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073fa:	f001 fa77 	bl	80088ec <vPortValidateInterruptPriority>
	__asm volatile
 80073fe:	f3ef 8911 	mrs	r9, BASEPRI
 8007402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007412:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007414:	b9cd      	cbnz	r5, 800744a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8007416:	4628      	mov	r0, r5
	__asm volatile
 8007418:	f389 8811 	msr	BASEPRI, r9
}
 800741c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007420:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0e9      	beq.n	80073fa <xQueueReceiveFromISR+0xe>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	e7fe      	b.n	8007436 <xQueueReceiveFromISR+0x4a>
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007448:	e7fe      	b.n	8007448 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800744a:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800744e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8007450:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007454:	b142      	cbz	r2, 8007468 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007456:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007458:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800745c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007460:	d21c      	bcs.n	800749c <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007462:	4638      	mov	r0, r7
 8007464:	f00d fbeb 	bl	8014c3e <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007468:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800746a:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800746e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8007470:	d006      	beq.n	8007480 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007472:	f108 0301 	add.w	r3, r8, #1
 8007476:	b25b      	sxtb	r3, r3
 8007478:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800747c:	2001      	movs	r0, #1
 800747e:	e7cb      	b.n	8007418 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007480:	6923      	ldr	r3, [r4, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0fa      	beq.n	800747c <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007486:	f104 0010 	add.w	r0, r4, #16
 800748a:	f000 fd01 	bl	8007e90 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800748e:	2e00      	cmp	r6, #0
 8007490:	d0f4      	beq.n	800747c <xQueueReceiveFromISR+0x90>
 8007492:	2800      	cmp	r0, #0
 8007494:	d0f2      	beq.n	800747c <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	e7ef      	b.n	800747c <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800749c:	6821      	ldr	r1, [r4, #0]
 800749e:	60e1      	str	r1, [r4, #12]
 80074a0:	e7df      	b.n	8007462 <xQueueReceiveFromISR+0x76>
 80074a2:	bf00      	nop

080074a4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80074a4:	b140      	cbz	r0, 80074b8 <uxQueueMessagesWaiting+0x14>
{
 80074a6:	b510      	push	{r4, lr}
 80074a8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80074aa:	f001 f903 	bl	80086b4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80074ae:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80074b0:	f001 f922 	bl	80086f8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80074b4:	4620      	mov	r0, r4
 80074b6:	bd10      	pop	{r4, pc}
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80074c8:	e7fe      	b.n	80074c8 <uxQueueMessagesWaiting+0x24>
 80074ca:	bf00      	nop

080074cc <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80074cc:	b108      	cbz	r0, 80074d2 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80074ce:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80074d0:	4770      	bx	lr
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80074e2:	e7fe      	b.n	80074e2 <uxQueueMessagesWaitingFromISR+0x16>

080074e4 <vQueueDelete>:
	configASSERT( pxQueue );
 80074e4:	b170      	cbz	r0, 8007504 <vQueueDelete+0x20>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074e6:	2300      	movs	r3, #0
 80074e8:	4911      	ldr	r1, [pc, #68]	@ (8007530 <vQueueDelete+0x4c>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80074ea:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80074ee:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074f2:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80074f4:	4290      	cmp	r0, r2
 80074f6:	d010      	beq.n	800751a <vQueueDelete+0x36>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d1f6      	bne.n	80074ea <vQueueDelete+0x6>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80074fc:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007500:	b14b      	cbz	r3, 8007516 <vQueueDelete+0x32>
}
 8007502:	4770      	bx	lr
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007514:	e7fe      	b.n	8007514 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8007516:	f001 bad7 	b.w	8008ac8 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800751a:	4906      	ldr	r1, [pc, #24]	@ (8007534 <vQueueDelete+0x50>)
 800751c:	2300      	movs	r3, #0
 800751e:	2200      	movs	r2, #0
 8007520:	448c      	add	ip, r1
 8007522:	e9cc 2300 	strd	r2, r3, [ip]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007526:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e9      	bne.n	8007502 <vQueueDelete+0x1e>
 800752e:	e7f2      	b.n	8007516 <vQueueDelete+0x32>
 8007530:	24001d44 	.word	0x24001d44
 8007534:	24001d40 	.word	0x24001d40

08007538 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007538:	2300      	movs	r3, #0
 800753a:	4a0a      	ldr	r2, [pc, #40]	@ (8007564 <vQueueAddToRegistry+0x2c>)
	{
 800753c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800753e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8007542:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 8007546:	b12c      	cbz	r4, 8007554 <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007548:	3301      	adds	r3, #1
 800754a:	2b08      	cmp	r3, #8
 800754c:	d1f7      	bne.n	800753e <vQueueAddToRegistry+0x6>
	}
 800754e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007558:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800755c:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	24001d40 	.word	0x24001d40

08007568 <vQueueUnregisterQueue>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007568:	2300      	movs	r3, #0
 800756a:	4909      	ldr	r1, [pc, #36]	@ (8007590 <vQueueUnregisterQueue+0x28>)
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800756c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007570:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007574:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007576:	4282      	cmp	r2, r0
 8007578:	d002      	beq.n	8007580 <vQueueUnregisterQueue+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800757a:	2b08      	cmp	r3, #8
 800757c:	d1f6      	bne.n	800756c <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800757e:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007580:	4904      	ldr	r1, [pc, #16]	@ (8007594 <vQueueUnregisterQueue+0x2c>)
 8007582:	2200      	movs	r2, #0
 8007584:	2300      	movs	r3, #0
 8007586:	448c      	add	ip, r1
 8007588:	e9cc 2300 	strd	r2, r3, [ip]
				break;
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	24001d44 	.word	0x24001d44
 8007594:	24001d40 	.word	0x24001d40

08007598 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	4604      	mov	r4, r0
 800759c:	460e      	mov	r6, r1
 800759e:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075a0:	f001 f888 	bl	80086b4 <vPortEnterCritical>
 80075a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80075a8:	2bff      	cmp	r3, #255	@ 0xff
 80075aa:	d102      	bne.n	80075b2 <vQueueWaitForMessageRestricted+0x1a>
 80075ac:	2300      	movs	r3, #0
 80075ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80075b2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80075b6:	2bff      	cmp	r3, #255	@ 0xff
 80075b8:	d102      	bne.n	80075c0 <vQueueWaitForMessageRestricted+0x28>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80075c0:	f001 f89a 	bl	80086f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80075c6:	b123      	cbz	r3, 80075d2 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075c8:	4620      	mov	r0, r4
	}
 80075ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80075ce:	f7ff ba19 	b.w	8006a04 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075d2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80075d6:	462a      	mov	r2, r5
 80075d8:	4631      	mov	r1, r6
 80075da:	f000 fc3b 	bl	8007e54 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80075de:	4620      	mov	r0, r4
	}
 80075e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80075e4:	f7ff ba0e 	b.w	8006a04 <prvUnlockQueue>

080075e8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075ee:	f001 f861 	bl	80086b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075f2:	4a34      	ldr	r2, [pc, #208]	@ (80076c4 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80075f4:	4e34      	ldr	r6, [pc, #208]	@ (80076c8 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80075f6:	6813      	ldr	r3, [r2, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075fc:	6833      	ldr	r3, [r6, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d031      	beq.n	8007666 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007602:	4c32      	ldr	r4, [pc, #200]	@ (80076cc <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007604:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	b333      	cbz	r3, 8007658 <prvAddNewTaskToReadyList+0x70>
 800760a:	4f31      	ldr	r7, [pc, #196]	@ (80076d0 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800760c:	4a31      	ldr	r2, [pc, #196]	@ (80076d4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800760e:	4932      	ldr	r1, [pc, #200]	@ (80076d8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8007610:	6813      	ldr	r3, [r2, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007616:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	4283      	cmp	r3, r0
 800761c:	d200      	bcs.n	8007620 <prvAddNewTaskToReadyList+0x38>
 800761e:	6008      	str	r0, [r1, #0]
 8007620:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007624:	1d29      	adds	r1, r5, #4
 8007626:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800762a:	f7ff f979 	bl	8006920 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800762e:	f001 f863 	bl	80086f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	b173      	cbz	r3, 8007654 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007636:	6832      	ldr	r2, [r6, #0]
 8007638:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800763a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800763c:	429a      	cmp	r2, r3
 800763e:	d209      	bcs.n	8007654 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007640:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007648:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007658:	6833      	ldr	r3, [r6, #0]
 800765a:	4f1d      	ldr	r7, [pc, #116]	@ (80076d0 <prvAddNewTaskToReadyList+0xe8>)
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	4283      	cmp	r3, r0
 8007660:	d8d4      	bhi.n	800760c <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8007662:	6035      	str	r5, [r6, #0]
 8007664:	e7d2      	b.n	800760c <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8007666:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007668:	6813      	ldr	r3, [r2, #0]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d003      	beq.n	8007676 <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800766e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8007670:	4f17      	ldr	r7, [pc, #92]	@ (80076d0 <prvAddNewTaskToReadyList+0xe8>)
 8007672:	4c16      	ldr	r4, [pc, #88]	@ (80076cc <prvAddNewTaskToReadyList+0xe4>)
 8007674:	e7ca      	b.n	800760c <prvAddNewTaskToReadyList+0x24>
 8007676:	4f16      	ldr	r7, [pc, #88]	@ (80076d0 <prvAddNewTaskToReadyList+0xe8>)
 8007678:	463c      	mov	r4, r7
 800767a:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800767e:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007680:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007682:	f7ff f93d 	bl	8006900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007686:	45a0      	cmp	r8, r4
 8007688:	d1f9      	bne.n	800767e <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800768a:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80076f0 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 800768e:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80076f4 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8007692:	4648      	mov	r0, r9
 8007694:	4c0d      	ldr	r4, [pc, #52]	@ (80076cc <prvAddNewTaskToReadyList+0xe4>)
 8007696:	f7ff f933 	bl	8006900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800769a:	4640      	mov	r0, r8
 800769c:	f7ff f930 	bl	8006900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076a0:	480e      	ldr	r0, [pc, #56]	@ (80076dc <prvAddNewTaskToReadyList+0xf4>)
 80076a2:	f7ff f92d 	bl	8006900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076a6:	480e      	ldr	r0, [pc, #56]	@ (80076e0 <prvAddNewTaskToReadyList+0xf8>)
 80076a8:	f7ff f92a 	bl	8006900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076ac:	480d      	ldr	r0, [pc, #52]	@ (80076e4 <prvAddNewTaskToReadyList+0xfc>)
 80076ae:	f7ff f927 	bl	8006900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80076b4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80076b6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076ba:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <prvAddNewTaskToReadyList+0x104>)
 80076bc:	f8c3 8000 	str.w	r8, [r3]
}
 80076c0:	e7a4      	b.n	800760c <prvAddNewTaskToReadyList+0x24>
 80076c2:	bf00      	nop
 80076c4:	24001da4 	.word	0x24001da4
 80076c8:	24002278 	.word	0x24002278
 80076cc:	24001d98 	.word	0x24001d98
 80076d0:	24001e18 	.word	0x24001e18
 80076d4:	24001d88 	.word	0x24001d88
 80076d8:	24001d9c 	.word	0x24001d9c
 80076dc:	24001dd4 	.word	0x24001dd4
 80076e0:	24001dc0 	.word	0x24001dc0
 80076e4:	24001da8 	.word	0x24001da8
 80076e8:	24001dec 	.word	0x24001dec
 80076ec:	24001de8 	.word	0x24001de8
 80076f0:	24001e04 	.word	0x24001e04
 80076f4:	24001df0 	.word	0x24001df0

080076f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076fa:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <prvAddCurrentTaskToDelayedList+0x58>)
{
 80076fc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fe:	4e15      	ldr	r6, [pc, #84]	@ (8007754 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8007700:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007702:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	1d18      	adds	r0, r3, #4
 8007708:	f7ff f930 	bl	800696c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800770c:	1c63      	adds	r3, r4, #1
 800770e:	d100      	bne.n	8007712 <prvAddCurrentTaskToDelayedList+0x1a>
 8007710:	b9bf      	cbnz	r7, 8007742 <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007712:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007714:	6833      	ldr	r3, [r6, #0]
 8007716:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007718:	d307      	bcc.n	800772a <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800771a:	4b0f      	ldr	r3, [pc, #60]	@ (8007758 <prvAddCurrentTaskToDelayedList+0x60>)
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007720:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007724:	3104      	adds	r1, #4
 8007726:	f7ff b909 	b.w	800693c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800772a:	4b0c      	ldr	r3, [pc, #48]	@ (800775c <prvAddCurrentTaskToDelayedList+0x64>)
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	6831      	ldr	r1, [r6, #0]
 8007730:	3104      	adds	r1, #4
 8007732:	f7ff f903 	bl	800693c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007736:	4b0a      	ldr	r3, [pc, #40]	@ (8007760 <prvAddCurrentTaskToDelayedList+0x68>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	42aa      	cmp	r2, r5
 800773c:	d900      	bls.n	8007740 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 800773e:	601d      	str	r5, [r3, #0]
}
 8007740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007742:	6831      	ldr	r1, [r6, #0]
 8007744:	4807      	ldr	r0, [pc, #28]	@ (8007764 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007746:	3104      	adds	r1, #4
}
 8007748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774c:	f7ff b8e8 	b.w	8006920 <vListInsertEnd>
 8007750:	24001da0 	.word	0x24001da0
 8007754:	24002278 	.word	0x24002278
 8007758:	24001de8 	.word	0x24001de8
 800775c:	24001dec 	.word	0x24001dec
 8007760:	24001d84 	.word	0x24001d84
 8007764:	24001da8 	.word	0x24001da8

08007768 <prvDeleteTCB>:
	{
 8007768:	b510      	push	{r4, lr}
 800776a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800776c:	3054      	adds	r0, #84	@ 0x54
 800776e:	f00d f99d 	bl	8014aac <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007772:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8007776:	b163      	cbz	r3, 8007792 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007778:	2b01      	cmp	r3, #1
 800777a:	d013      	beq.n	80077a4 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800777c:	2b02      	cmp	r3, #2
 800777e:	d010      	beq.n	80077a2 <prvDeleteTCB+0x3a>
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	e7fe      	b.n	8007790 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8007792:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007794:	f001 f998 	bl	8008ac8 <vPortFree>
				vPortFree( pxTCB );
 8007798:	4620      	mov	r0, r4
	}
 800779a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800779e:	f001 b993 	b.w	8008ac8 <vPortFree>
	}
 80077a2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80077a4:	4620      	mov	r0, r4
	}
 80077a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80077aa:	f001 b98d 	b.w	8008ac8 <vPortFree>
 80077ae:	bf00      	nop

080077b0 <prvIdleTask>:
{
 80077b0:	4c15      	ldr	r4, [pc, #84]	@ (8007808 <prvIdleTask+0x58>)
				taskYIELD();
 80077b2:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 80077b6:	4e15      	ldr	r6, [pc, #84]	@ (800780c <prvIdleTask+0x5c>)
 80077b8:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 80077bc:	4d14      	ldr	r5, [pc, #80]	@ (8007810 <prvIdleTask+0x60>)
 80077be:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8007814 <prvIdleTask+0x64>
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	e011      	b.n	80077ea <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80077c6:	f000 ff75 	bl	80086b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ca:	68f3      	ldr	r3, [r6, #12]
 80077cc:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ce:	1d38      	adds	r0, r7, #4
 80077d0:	f7ff f8cc 	bl	800696c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	3b01      	subs	r3, #1
 80077de:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80077e0:	f000 ff8a 	bl	80086f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff ffbf 	bl	8007768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1ea      	bne.n	80077c6 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077f0:	f8da 3000 	ldr.w	r3, [sl]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d9f8      	bls.n	80077ea <prvIdleTask+0x3a>
				taskYIELD();
 80077f8:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	e7f1      	b.n	80077ea <prvIdleTask+0x3a>
 8007806:	bf00      	nop
 8007808:	24001dbc 	.word	0x24001dbc
 800780c:	24001dc0 	.word	0x24001dc0
 8007810:	24001da4 	.word	0x24001da4
 8007814:	24001e18 	.word	0x24001e18

08007818 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800781e:	0095      	lsls	r5, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007820:	4606      	mov	r6, r0
 8007822:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007824:	462a      	mov	r2, r5
 8007826:	21a5      	movs	r1, #165	@ 0xa5
 8007828:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800782a:	461f      	mov	r7, r3
 800782c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007830:	3d04      	subs	r5, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007832:	f00d f922 	bl	8014a7a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007836:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007838:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800783a:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 800783e:	f1b9 0f00 	cmp.w	r9, #0
 8007842:	d044      	beq.n	80078ce <prvInitialiseNewTask.constprop.0+0xb6>
 8007844:	f109 3cff 	add.w	ip, r9, #4294967295
 8007848:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 800784c:	f109 090f 	add.w	r9, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007850:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8007854:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8007858:	b10a      	cbz	r2, 800785e <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800785a:	45cc      	cmp	ip, r9
 800785c:	d1f8      	bne.n	8007850 <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800785e:	2300      	movs	r3, #0
 8007860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007864:	9b08      	ldr	r3, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007866:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800786a:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800786c:	2b37      	cmp	r3, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800786e:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007872:	bf28      	it	cs
 8007874:	2337      	movcs	r3, #55	@ 0x37
 8007876:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8007878:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800787a:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800787c:	f7ff f84c 	bl	8006918 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007880:	f104 0018 	add.w	r0, r4, #24
 8007884:	f7ff f848 	bl	8006918 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007888:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800788c:	4651      	mov	r1, sl
 800788e:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007890:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007892:	f104 0054 	add.w	r0, r4, #84	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8007896:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800789a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800789c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800789e:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078a2:	f00d f8ea 	bl	8014a7a <memset>
 80078a6:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078a8:	4628      	mov	r0, r5
 80078aa:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078ac:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 80078b0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80078b2:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078b4:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078b6:	65e5      	str	r5, [r4, #92]	@ 0x5c
 80078b8:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078ba:	f000 fecb 	bl	8008654 <pxPortInitialiseStack>
 80078be:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80078c0:	f1b8 0f00 	cmp.w	r8, #0
 80078c4:	d001      	beq.n	80078ca <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078c6:	f8c8 4000 	str.w	r4, [r8]
}
 80078ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078ce:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 80078d2:	e7c7      	b.n	8007864 <prvInitialiseNewTask.constprop.0+0x4c>
 80078d4:	240108a0 	.word	0x240108a0

080078d8 <xTaskCreateStatic>:
	{
 80078d8:	b530      	push	{r4, r5, lr}
 80078da:	b087      	sub	sp, #28
 80078dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80078de:	b1c4      	cbz	r4, 8007912 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80078e0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80078e2:	b16d      	cbz	r5, 8007900 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80078e4:	25a8      	movs	r5, #168	@ 0xa8
 80078e6:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078e8:	9d05      	ldr	r5, [sp, #20]
 80078ea:	2da8      	cmp	r5, #168	@ 0xa8
 80078ec:	d01a      	beq.n	8007924 <xTaskCreateStatic+0x4c>
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	e7fe      	b.n	80078fe <xTaskCreateStatic+0x26>
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007910:	e7fe      	b.n	8007910 <xTaskCreateStatic+0x38>
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007922:	e7fe      	b.n	8007922 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007924:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007926:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007928:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800792a:	9502      	str	r5, [sp, #8]
 800792c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800792e:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007930:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007932:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007936:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007938:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800793a:	9401      	str	r4, [sp, #4]
 800793c:	f7ff ff6c 	bl	8007818 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007940:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007942:	f7ff fe51 	bl	80075e8 <prvAddNewTaskToReadyList>
	}
 8007946:	9804      	ldr	r0, [sp, #16]
 8007948:	b007      	add	sp, #28
 800794a:	bd30      	pop	{r4, r5, pc}

0800794c <xTaskCreate>:
	{
 800794c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007950:	4607      	mov	r7, r0
 8007952:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007954:	0090      	lsls	r0, r2, #2
	{
 8007956:	4615      	mov	r5, r2
 8007958:	4688      	mov	r8, r1
 800795a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800795c:	f001 f81e 	bl	800899c <pvPortMalloc>
			if( pxStack != NULL )
 8007960:	b1f0      	cbz	r0, 80079a0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007962:	4604      	mov	r4, r0
 8007964:	20a8      	movs	r0, #168	@ 0xa8
 8007966:	f001 f819 	bl	800899c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800796a:	4606      	mov	r6, r0
 800796c:	b1a8      	cbz	r0, 800799a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800796e:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007970:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007972:	464b      	mov	r3, r9
 8007974:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007976:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800797a:	4641      	mov	r1, r8
 800797c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800797e:	4638      	mov	r0, r7
 8007980:	9602      	str	r6, [sp, #8]
 8007982:	9401      	str	r4, [sp, #4]
 8007984:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007986:	9400      	str	r4, [sp, #0]
 8007988:	f7ff ff46 	bl	8007818 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff fe2b 	bl	80075e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007992:	2001      	movs	r0, #1
	}
 8007994:	b005      	add	sp, #20
 8007996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800799a:	4620      	mov	r0, r4
 800799c:	f001 f894 	bl	8008ac8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80079a4:	b005      	add	sp, #20
 80079a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079aa:	bf00      	nop

080079ac <vTaskStartScheduler>:
{
 80079ac:	b510      	push	{r4, lr}
 80079ae:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079b0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079b2:	aa07      	add	r2, sp, #28
 80079b4:	a906      	add	r1, sp, #24
 80079b6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079b8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079bc:	f7fe ff80 	bl	80068c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079c0:	4623      	mov	r3, r4
 80079c2:	9a07      	ldr	r2, [sp, #28]
 80079c4:	9400      	str	r4, [sp, #0]
 80079c6:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80079ca:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80079ce:	4918      	ldr	r1, [pc, #96]	@ (8007a30 <vTaskStartScheduler+0x84>)
 80079d0:	4818      	ldr	r0, [pc, #96]	@ (8007a34 <vTaskStartScheduler+0x88>)
 80079d2:	f7ff ff81 	bl	80078d8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80079d6:	b170      	cbz	r0, 80079f6 <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 80079d8:	f000 fc20 	bl	800821c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80079dc:	2801      	cmp	r0, #1
 80079de:	d00c      	beq.n	80079fa <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079e0:	3001      	adds	r0, #1
 80079e2:	d108      	bne.n	80079f6 <vTaskStartScheduler+0x4a>
 80079e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	e7fe      	b.n	80079f4 <vTaskStartScheduler+0x48>
}
 80079f6:	b008      	add	sp, #32
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <vTaskStartScheduler+0x8c>)
 8007a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a3c <vTaskStartScheduler+0x90>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a10:	490b      	ldr	r1, [pc, #44]	@ (8007a40 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a12:	3354      	adds	r3, #84	@ 0x54
 8007a14:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a44 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a1c:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a48 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 8007a20:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a22:	601c      	str	r4, [r3, #0]
}
 8007a24:	b008      	add	sp, #32
 8007a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007a2a:	f000 bed5 	b.w	80087d8 <xPortStartScheduler>
 8007a2e:	bf00      	nop
 8007a30:	08015c90 	.word	0x08015c90
 8007a34:	080077b1 	.word	0x080077b1
 8007a38:	24002278 	.word	0x24002278
 8007a3c:	2400009c 	.word	0x2400009c
 8007a40:	24001d84 	.word	0x24001d84
 8007a44:	24001d98 	.word	0x24001d98
 8007a48:	24001da0 	.word	0x24001da0

08007a4c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007a4c:	4a02      	ldr	r2, [pc, #8]	@ (8007a58 <vTaskSuspendAll+0xc>)
 8007a4e:	6813      	ldr	r3, [r2, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	6013      	str	r3, [r2, #0]
}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	24001d80 	.word	0x24001d80

08007a5c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007a5c:	4b01      	ldr	r3, [pc, #4]	@ (8007a64 <xTaskGetTickCount+0x8>)
 8007a5e:	6818      	ldr	r0, [r3, #0]
}
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	24001da0 	.word	0x24001da0

08007a68 <xTaskGetTickCountFromISR>:
{
 8007a68:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a6a:	f000 ff3f 	bl	80088ec <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8007a6e:	4b01      	ldr	r3, [pc, #4]	@ (8007a74 <xTaskGetTickCountFromISR+0xc>)
 8007a70:	6818      	ldr	r0, [r3, #0]
}
 8007a72:	bd08      	pop	{r3, pc}
 8007a74:	24001da0 	.word	0x24001da0

08007a78 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a78:	4b4f      	ldr	r3, [pc, #316]	@ (8007bb8 <xTaskIncrementTick+0x140>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
{
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d145      	bne.n	8007b12 <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a86:	4b4d      	ldr	r3, [pc, #308]	@ (8007bbc <xTaskIncrementTick+0x144>)
 8007a88:	681e      	ldr	r6, [r3, #0]
 8007a8a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007a8c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d048      	beq.n	8007b24 <xTaskIncrementTick+0xac>
 8007a92:	4b4b      	ldr	r3, [pc, #300]	@ (8007bc0 <xTaskIncrementTick+0x148>)
 8007a94:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	429e      	cmp	r6, r3
 8007a9c:	d34f      	bcc.n	8007b3e <xTaskIncrementTick+0xc6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a9e:	4f49      	ldr	r7, [pc, #292]	@ (8007bc4 <xTaskIncrementTick+0x14c>)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681d      	ldr	r5, [r3, #0]
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	d076      	beq.n	8007b96 <xTaskIncrementTick+0x11e>
BaseType_t xSwitchRequired = pdFALSE;
 8007aa8:	2500      	movs	r5, #0
 8007aaa:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8007bd8 <xTaskIncrementTick+0x160>
 8007aae:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 8007bdc <xTaskIncrementTick+0x164>
					prvAddTaskToReadyList( pxTCB );
 8007ab2:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8007be0 <xTaskIncrementTick+0x168>
 8007ab6:	e020      	b.n	8007afa <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	f7fe ff58 	bl	800696c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007abc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007abe:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ac2:	b10b      	cbz	r3, 8007ac8 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ac4:	f7fe ff52 	bl	800696c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ac8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007aca:	4659      	mov	r1, fp
 8007acc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ad0:	4298      	cmp	r0, r3
 8007ad2:	d901      	bls.n	8007ad8 <xTaskIncrementTick+0x60>
 8007ad4:	f8c8 0000 	str.w	r0, [r8]
 8007ad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007adc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007ae0:	f7fe ff1e 	bl	8006920 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ae4:	f8da 3000 	ldr.w	r3, [sl]
 8007ae8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8007aec:	429a      	cmp	r2, r3
 8007aee:	bf28      	it	cs
 8007af0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d051      	beq.n	8007b9e <xTaskIncrementTick+0x126>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b00:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b02:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 8007b06:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b08:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 8007b0a:	d2d5      	bcs.n	8007ab8 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8007b0c:	9a01      	ldr	r2, [sp, #4]
 8007b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b10:	e01a      	b.n	8007b48 <xTaskIncrementTick+0xd0>
		++xPendedTicks;
 8007b12:	4a2d      	ldr	r2, [pc, #180]	@ (8007bc8 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8007b14:	2500      	movs	r5, #0
		++xPendedTicks;
 8007b16:	6813      	ldr	r3, [r2, #0]
}
 8007b18:	4628      	mov	r0, r5
		++xPendedTicks;
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	6013      	str	r3, [r2, #0]
}
 8007b1e:	b003      	add	sp, #12
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007b24:	4b27      	ldr	r3, [pc, #156]	@ (8007bc4 <xTaskIncrementTick+0x14c>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	b30a      	cbz	r2, 8007b70 <xTaskIncrementTick+0xf8>
 8007b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	e7fe      	b.n	8007b3c <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8007b3e:	2500      	movs	r5, #0
 8007b40:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8007bd8 <xTaskIncrementTick+0x160>
 8007b44:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007bdc <xTaskIncrementTick+0x164>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b48:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8007b4c:	491f      	ldr	r1, [pc, #124]	@ (8007bcc <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8007b5a:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8007b5c:	2a02      	cmp	r2, #2
 8007b5e:	bf28      	it	cs
 8007b60:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf18      	it	ne
 8007b66:	2501      	movne	r5, #1
}
 8007b68:	4628      	mov	r0, r5
 8007b6a:	b003      	add	sp, #12
 8007b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007b70:	4a17      	ldr	r2, [pc, #92]	@ (8007bd0 <xTaskIncrementTick+0x158>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	6811      	ldr	r1, [r2, #0]
 8007b76:	6019      	str	r1, [r3, #0]
 8007b78:	4916      	ldr	r1, [pc, #88]	@ (8007bd4 <xTaskIncrementTick+0x15c>)
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	680a      	ldr	r2, [r1, #0]
 8007b7e:	3201      	adds	r2, #1
 8007b80:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	b97a      	cbnz	r2, 8007ba8 <xTaskIncrementTick+0x130>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b88:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <xTaskIncrementTick+0x148>)
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	e77f      	b.n	8007a96 <xTaskIncrementTick+0x1e>
 8007b96:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8007bd8 <xTaskIncrementTick+0x160>
 8007b9a:	f8df a040 	ldr.w	sl, [pc, #64]	@ 8007bdc <xTaskIncrementTick+0x164>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba2:	9a01      	ldr	r2, [sp, #4]
 8007ba4:	6013      	str	r3, [r2, #0]
					break;
 8007ba6:	e7cf      	b.n	8007b48 <xTaskIncrementTick+0xd0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba8:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007baa:	4a05      	ldr	r2, [pc, #20]	@ (8007bc0 <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bac:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bae:	9201      	str	r2, [sp, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	6013      	str	r3, [r2, #0]
}
 8007bb6:	e76e      	b.n	8007a96 <xTaskIncrementTick+0x1e>
 8007bb8:	24001d80 	.word	0x24001d80
 8007bbc:	24001da0 	.word	0x24001da0
 8007bc0:	24001d84 	.word	0x24001d84
 8007bc4:	24001dec 	.word	0x24001dec
 8007bc8:	24001d94 	.word	0x24001d94
 8007bcc:	24001d90 	.word	0x24001d90
 8007bd0:	24001de8 	.word	0x24001de8
 8007bd4:	24001d8c 	.word	0x24001d8c
 8007bd8:	24001e18 	.word	0x24001e18
 8007bdc:	24002278 	.word	0x24002278
 8007be0:	24001d9c 	.word	0x24001d9c

08007be4 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8007be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8007be8:	f000 fd64 	bl	80086b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007bec:	4b37      	ldr	r3, [pc, #220]	@ (8007ccc <xTaskResumeAll.part.0+0xe8>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	3a01      	subs	r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d159      	bne.n	8007cae <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bfa:	4b35      	ldr	r3, [pc, #212]	@ (8007cd0 <xTaskResumeAll.part.0+0xec>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d055      	beq.n	8007cae <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c02:	4d34      	ldr	r5, [pc, #208]	@ (8007cd4 <xTaskResumeAll.part.0+0xf0>)
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d05c      	beq.n	8007cc4 <xTaskResumeAll.part.0+0xe0>
 8007c0a:	4e33      	ldr	r6, [pc, #204]	@ (8007cd8 <xTaskResumeAll.part.0+0xf4>)
						xYieldPending = pdTRUE;
 8007c0c:	f04f 0a01 	mov.w	sl, #1
 8007c10:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8007cec <xTaskResumeAll.part.0+0x108>
 8007c14:	4f31      	ldr	r7, [pc, #196]	@ (8007cdc <xTaskResumeAll.part.0+0xf8>)
 8007c16:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8007cf0 <xTaskResumeAll.part.0+0x10c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1a:	68eb      	ldr	r3, [r5, #12]
 8007c1c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c1e:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c22:	f104 0018 	add.w	r0, r4, #24
 8007c26:	f7fe fea1 	bl	800696c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c2a:	4658      	mov	r0, fp
 8007c2c:	f7fe fe9e 	bl	800696c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c32:	6832      	ldr	r2, [r6, #0]
 8007c34:	4659      	mov	r1, fp
 8007c36:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8007c40:	d900      	bls.n	8007c44 <xTaskResumeAll.part.0+0x60>
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	f7fe fe6c 	bl	8006920 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d301      	bcc.n	8007c56 <xTaskResumeAll.part.0+0x72>
						xYieldPending = pdTRUE;
 8007c52:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1de      	bne.n	8007c1a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c5c:	4b20      	ldr	r3, [pc, #128]	@ (8007ce0 <xTaskResumeAll.part.0+0xfc>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	b352      	cbz	r2, 8007cba <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c64:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c66:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce4 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c68:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c6a:	68d2      	ldr	r2, [r2, #12]
 8007c6c:	6852      	ldr	r2, [r2, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c70:	4e1d      	ldr	r6, [pc, #116]	@ (8007ce8 <xTaskResumeAll.part.0+0x104>)
 8007c72:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007c74:	b144      	cbz	r4, 8007c88 <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 8007c76:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007c78:	f7ff fefe 	bl	8007a78 <xTaskIncrementTick>
 8007c7c:	b108      	cbz	r0, 8007c82 <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 8007c7e:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c82:	3c01      	subs	r4, #1
 8007c84:	d1f8      	bne.n	8007c78 <xTaskResumeAll.part.0+0x94>
						xPendedTicks = 0;
 8007c86:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8007c88:	f8d9 3000 	ldr.w	r3, [r9]
 8007c8c:	b17b      	cbz	r3, 8007cae <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8007c8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007ca2:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8007ca4:	f000 fd28 	bl	80086f8 <vPortExitCritical>
}
 8007ca8:	4620      	mov	r0, r4
 8007caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8007cae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007cb0:	f000 fd22 	bl	80086f8 <vPortExitCritical>
}
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cba:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce4 <xTaskResumeAll.part.0+0x100>)
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	e7d5      	b.n	8007c70 <xTaskResumeAll.part.0+0x8c>
 8007cc4:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8007cf0 <xTaskResumeAll.part.0+0x10c>
 8007cc8:	e7d2      	b.n	8007c70 <xTaskResumeAll.part.0+0x8c>
 8007cca:	bf00      	nop
 8007ccc:	24001d80 	.word	0x24001d80
 8007cd0:	24001da4 	.word	0x24001da4
 8007cd4:	24001dd4 	.word	0x24001dd4
 8007cd8:	24001d9c 	.word	0x24001d9c
 8007cdc:	24002278 	.word	0x24002278
 8007ce0:	24001dec 	.word	0x24001dec
 8007ce4:	24001d84 	.word	0x24001d84
 8007ce8:	24001d94 	.word	0x24001d94
 8007cec:	24001e18 	.word	0x24001e18
 8007cf0:	24001d90 	.word	0x24001d90

08007cf4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <xTaskResumeAll+0x1c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	b943      	cbnz	r3, 8007d0c <xTaskResumeAll+0x18>
 8007cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	e7fe      	b.n	8007d0a <xTaskResumeAll+0x16>
 8007d0c:	f7ff bf6a 	b.w	8007be4 <xTaskResumeAll.part.0>
 8007d10:	24001d80 	.word	0x24001d80

08007d14 <vTaskDelay>:
	{
 8007d14:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d16:	b950      	cbnz	r0, 8007d2e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8007d18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	f3bf 8f6f 	isb	sy
	}
 8007d2c:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007d2e:	4c10      	ldr	r4, [pc, #64]	@ (8007d70 <vTaskDelay+0x5c>)
 8007d30:	6821      	ldr	r1, [r4, #0]
 8007d32:	b141      	cbz	r1, 8007d46 <vTaskDelay+0x32>
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	e7fe      	b.n	8007d44 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d4c:	f7ff fcd4 	bl	80076f8 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	b943      	cbnz	r3, 8007d66 <vTaskDelay+0x52>
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	e7fe      	b.n	8007d64 <vTaskDelay+0x50>
 8007d66:	f7ff ff3d 	bl	8007be4 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d0d4      	beq.n	8007d18 <vTaskDelay+0x4>
	}
 8007d6e:	bd10      	pop	{r4, pc}
 8007d70:	24001d80 	.word	0x24001d80

08007d74 <vTaskSwitchContext>:
{
 8007d74:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d76:	4b24      	ldr	r3, [pc, #144]	@ (8007e08 <vTaskSwitchContext+0x94>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	b11b      	cbz	r3, 8007d84 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007d7c:	4b23      	ldr	r3, [pc, #140]	@ (8007e0c <vTaskSwitchContext+0x98>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
}
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8007d84:	4c22      	ldr	r4, [pc, #136]	@ (8007e10 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8007d86:	4a21      	ldr	r2, [pc, #132]	@ (8007e0c <vTaskSwitchContext+0x98>)
 8007d88:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d92e      	bls.n	8007df4 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d96:	4d1f      	ldr	r5, [pc, #124]	@ (8007e14 <vTaskSwitchContext+0xa0>)
 8007d98:	491f      	ldr	r1, [pc, #124]	@ (8007e18 <vTaskSwitchContext+0xa4>)
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007da0:	0098      	lsls	r0, r3, #2
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	588a      	ldr	r2, [r1, r2]
 8007da6:	b942      	cbnz	r2, 8007dba <vTaskSwitchContext+0x46>
 8007da8:	b1db      	cbz	r3, 8007de2 <vTaskSwitchContext+0x6e>
 8007daa:	3b01      	subs	r3, #1
 8007dac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007db0:	0098      	lsls	r0, r3, #2
 8007db2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	d0f6      	beq.n	8007da8 <vTaskSwitchContext+0x34>
 8007dba:	4418      	add	r0, r3
 8007dbc:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8007dc0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007dc4:	4662      	mov	r2, ip
 8007dc6:	6849      	ldr	r1, [r1, #4]
 8007dc8:	3208      	adds	r2, #8
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	f8cc 1004 	str.w	r1, [ip, #4]
 8007dd0:	d016      	beq.n	8007e00 <vTaskSwitchContext+0x8c>
 8007dd2:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dd4:	4a11      	ldr	r2, [pc, #68]	@ (8007e1c <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd6:	6021      	str	r1, [r4, #0]
 8007dd8:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	3354      	adds	r3, #84	@ 0x54
 8007dde:	6013      	str	r3, [r2, #0]
}
 8007de0:	bd38      	pop	{r3, r4, r5, pc}
 8007de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df2:	e7fe      	b.n	8007df2 <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	6821      	ldr	r1, [r4, #0]
 8007df8:	3134      	adds	r1, #52	@ 0x34
 8007dfa:	f7f8 fc59 	bl	80006b0 <vApplicationStackOverflowHook>
 8007dfe:	e7ca      	b.n	8007d96 <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e00:	6849      	ldr	r1, [r1, #4]
 8007e02:	f8cc 1004 	str.w	r1, [ip, #4]
 8007e06:	e7e4      	b.n	8007dd2 <vTaskSwitchContext+0x5e>
 8007e08:	24001d80 	.word	0x24001d80
 8007e0c:	24001d90 	.word	0x24001d90
 8007e10:	24002278 	.word	0x24002278
 8007e14:	24001d9c 	.word	0x24001d9c
 8007e18:	24001e18 	.word	0x24001e18
 8007e1c:	2400009c 	.word	0x2400009c

08007e20 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007e20:	b160      	cbz	r0, 8007e3c <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e22:	4b0b      	ldr	r3, [pc, #44]	@ (8007e50 <vTaskPlaceOnEventList+0x30>)
{
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	3118      	adds	r1, #24
 8007e2c:	f7fe fd86 	bl	800693c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e30:	4620      	mov	r0, r4
 8007e32:	2101      	movs	r1, #1
}
 8007e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e38:	f7ff bc5e 	b.w	80076f8 <prvAddCurrentTaskToDelayedList>
 8007e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007e4c:	e7fe      	b.n	8007e4c <vTaskPlaceOnEventList+0x2c>
 8007e4e:	bf00      	nop
 8007e50:	24002278 	.word	0x24002278

08007e54 <vTaskPlaceOnEventListRestricted>:
	{
 8007e54:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8007e56:	b180      	cbz	r0, 8007e7a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e58:	4b0c      	ldr	r3, [pc, #48]	@ (8007e8c <vTaskPlaceOnEventListRestricted+0x38>)
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	4614      	mov	r4, r2
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	3118      	adds	r1, #24
 8007e62:	f7fe fd5d 	bl	8006920 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8007e66:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e68:	4621      	mov	r1, r4
 8007e6a:	bf0c      	ite	eq
 8007e6c:	4628      	moveq	r0, r5
 8007e6e:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e76:	f7ff bc3f 	b.w	80076f8 <prvAddCurrentTaskToDelayedList>
 8007e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8007e8a:	e7fe      	b.n	8007e8a <vTaskPlaceOnEventListRestricted+0x36>
 8007e8c:	24002278 	.word	0x24002278

08007e90 <xTaskRemoveFromEventList>:
{
 8007e90:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e92:	68c3      	ldr	r3, [r0, #12]
 8007e94:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007e96:	b34c      	cbz	r4, 8007eec <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e98:	f104 0518 	add.w	r5, r4, #24
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f7fe fd65 	bl	800696c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ea2:	4b18      	ldr	r3, [pc, #96]	@ (8007f04 <xTaskRemoveFromEventList+0x74>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	b173      	cbz	r3, 8007ec6 <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4817      	ldr	r0, [pc, #92]	@ (8007f08 <xTaskRemoveFromEventList+0x78>)
 8007eac:	f7fe fd38 	bl	8006920 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eb0:	4b16      	ldr	r3, [pc, #88]	@ (8007f0c <xTaskRemoveFromEventList+0x7c>)
 8007eb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d920      	bls.n	8007efe <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	4a14      	ldr	r2, [pc, #80]	@ (8007f10 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8007ec0:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8007ec2:	6013      	str	r3, [r2, #0]
}
 8007ec4:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ec6:	1d25      	adds	r5, r4, #4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f7fe fd4f 	bl	800696c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ece:	4b11      	ldr	r3, [pc, #68]	@ (8007f14 <xTaskRemoveFromEventList+0x84>)
 8007ed0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4290      	cmp	r0, r2
 8007ed6:	d900      	bls.n	8007eda <xTaskRemoveFromEventList+0x4a>
 8007ed8:	6018      	str	r0, [r3, #0]
 8007eda:	4b0f      	ldr	r3, [pc, #60]	@ (8007f18 <xTaskRemoveFromEventList+0x88>)
 8007edc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ee6:	f7fe fd1b 	bl	8006920 <vListInsertEnd>
 8007eea:	e7e1      	b.n	8007eb0 <xTaskRemoveFromEventList+0x20>
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007efc:	e7fe      	b.n	8007efc <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 8007efe:	2000      	movs	r0, #0
}
 8007f00:	bd38      	pop	{r3, r4, r5, pc}
 8007f02:	bf00      	nop
 8007f04:	24001d80 	.word	0x24001d80
 8007f08:	24001dd4 	.word	0x24001dd4
 8007f0c:	24002278 	.word	0x24002278
 8007f10:	24001d90 	.word	0x24001d90
 8007f14:	24001d9c 	.word	0x24001d9c
 8007f18:	24001e18 	.word	0x24001e18

08007f1c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f1c:	4a03      	ldr	r2, [pc, #12]	@ (8007f2c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f1e:	4b04      	ldr	r3, [pc, #16]	@ (8007f30 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f20:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	e9c0 2300 	strd	r2, r3, [r0]
}
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	24001d8c 	.word	0x24001d8c
 8007f30:	24001da0 	.word	0x24001da0

08007f34 <xTaskCheckForTimeOut>:
{
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8007f36:	b308      	cbz	r0, 8007f7c <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8007f38:	460d      	mov	r5, r1
 8007f3a:	b1b1      	cbz	r1, 8007f6a <xTaskCheckForTimeOut+0x36>
 8007f3c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007f3e:	f000 fbb9 	bl	80086b4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8007f42:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8007f44:	4a1a      	ldr	r2, [pc, #104]	@ (8007fb0 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8007f46:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8007f48:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007f4a:	d02c      	beq.n	8007fa6 <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f4c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8007fb4 <xTaskCheckForTimeOut+0x80>
 8007f50:	6826      	ldr	r6, [r4, #0]
 8007f52:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f56:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f58:	42be      	cmp	r6, r7
 8007f5a:	d018      	beq.n	8007f8e <xTaskCheckForTimeOut+0x5a>
 8007f5c:	4288      	cmp	r0, r1
 8007f5e:	d816      	bhi.n	8007f8e <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8007f60:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8007f62:	f000 fbc9 	bl	80086f8 <vPortExitCritical>
}
 8007f66:	4620      	mov	r0, r4
 8007f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007f7a:	e7fe      	b.n	8007f7a <xTaskCheckForTimeOut+0x46>
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007f8c:	e7fe      	b.n	8007f8c <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f8e:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f92:	4573      	cmp	r3, lr
 8007f94:	d909      	bls.n	8007faa <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8007f96:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f98:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f9c:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8007f9e:	4403      	add	r3, r0
 8007fa0:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fa2:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8007fa6:	2400      	movs	r4, #0
 8007fa8:	e7db      	b.n	8007f62 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8007fae:	e7d7      	b.n	8007f60 <xTaskCheckForTimeOut+0x2c>
 8007fb0:	24001da0 	.word	0x24001da0
 8007fb4:	24001d8c 	.word	0x24001d8c

08007fb8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007fb8:	4b01      	ldr	r3, [pc, #4]	@ (8007fc0 <vTaskMissedYield+0x8>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
}
 8007fbe:	4770      	bx	lr
 8007fc0:	24001d90 	.word	0x24001d90

08007fc4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007fc4:	4b01      	ldr	r3, [pc, #4]	@ (8007fcc <xTaskGetCurrentTaskHandle+0x8>)
 8007fc6:	6818      	ldr	r0, [r3, #0]
	}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	24002278 	.word	0x24002278

08007fd0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007fd0:	4b05      	ldr	r3, [pc, #20]	@ (8007fe8 <xTaskGetSchedulerState+0x18>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	b133      	cbz	r3, 8007fe4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fd6:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <xTaskGetSchedulerState+0x1c>)
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	fab0 f080 	clz	r0, r0
 8007fde:	0940      	lsrs	r0, r0, #5
 8007fe0:	0040      	lsls	r0, r0, #1
 8007fe2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fe4:	2001      	movs	r0, #1
	}
 8007fe6:	4770      	bx	lr
 8007fe8:	24001d98 	.word	0x24001d98
 8007fec:	24001d80 	.word	0x24001d80

08007ff0 <xTaskPriorityInherit>:
	{
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	b1c8      	cbz	r0, 800802a <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ff6:	4d1b      	ldr	r5, [pc, #108]	@ (8008064 <xTaskPriorityInherit+0x74>)
 8007ff8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007ffa:	682a      	ldr	r2, [r5, #0]
 8007ffc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d214      	bcs.n	800802c <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008002:	6982      	ldr	r2, [r0, #24]
 8008004:	2a00      	cmp	r2, #0
 8008006:	db04      	blt.n	8008012 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008008:	682a      	ldr	r2, [r5, #0]
 800800a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800800c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8008010:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008012:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008016:	4e14      	ldr	r6, [pc, #80]	@ (8008068 <xTaskPriorityInherit+0x78>)
 8008018:	6962      	ldr	r2, [r4, #20]
 800801a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800801e:	429a      	cmp	r2, r3
 8008020:	d00c      	beq.n	800803c <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008026:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8008028:	2001      	movs	r0, #1
	}
 800802a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	4298      	cmp	r0, r3
 8008034:	bf2c      	ite	cs
 8008036:	2000      	movcs	r0, #0
 8008038:	2001      	movcc	r0, #1
	}
 800803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800803c:	1d27      	adds	r7, r4, #4
 800803e:	4638      	mov	r0, r7
 8008040:	f7fe fc94 	bl	800696c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008044:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008046:	4b09      	ldr	r3, [pc, #36]	@ (800806c <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008048:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800804a:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800804c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800804e:	4290      	cmp	r0, r2
 8008050:	d900      	bls.n	8008054 <xTaskPriorityInherit+0x64>
 8008052:	6018      	str	r0, [r3, #0]
 8008054:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008058:	4639      	mov	r1, r7
 800805a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800805e:	f7fe fc5f 	bl	8006920 <vListInsertEnd>
 8008062:	e7e1      	b.n	8008028 <xTaskPriorityInherit+0x38>
 8008064:	24002278 	.word	0x24002278
 8008068:	24001e18 	.word	0x24001e18
 800806c:	24001d9c 	.word	0x24001d9c

08008070 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008070:	b308      	cbz	r0, 80080b6 <xTaskPriorityDisinherit+0x46>
	{
 8008072:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8008074:	4b1d      	ldr	r3, [pc, #116]	@ (80080ec <xTaskPriorityDisinherit+0x7c>)
 8008076:	681c      	ldr	r4, [r3, #0]
 8008078:	4284      	cmp	r4, r0
 800807a:	d008      	beq.n	800808e <xTaskPriorityDisinherit+0x1e>
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	e7fe      	b.n	800808c <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 800808e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008090:	b143      	cbz	r3, 80080a4 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008092:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8008094:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008096:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008098:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800809a:	4291      	cmp	r1, r2
 800809c:	d000      	beq.n	80080a0 <xTaskPriorityDisinherit+0x30>
 800809e:	b163      	cbz	r3, 80080ba <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80080a0:	2000      	movs	r0, #0
	}
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80080b4:	e7fe      	b.n	80080b4 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 80080b6:	2000      	movs	r0, #0
	}
 80080b8:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ba:	1d25      	adds	r5, r4, #4
 80080bc:	4628      	mov	r0, r5
 80080be:	f7fe fc55 	bl	800696c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080c2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 80080c4:	4b0a      	ldr	r3, [pc, #40]	@ (80080f0 <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c6:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080ca:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080cc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4290      	cmp	r0, r2
 80080d2:	d900      	bls.n	80080d6 <xTaskPriorityDisinherit+0x66>
 80080d4:	6018      	str	r0, [r3, #0]
 80080d6:	4b07      	ldr	r3, [pc, #28]	@ (80080f4 <xTaskPriorityDisinherit+0x84>)
 80080d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80080dc:	4629      	mov	r1, r5
 80080de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080e2:	f7fe fc1d 	bl	8006920 <vListInsertEnd>
					xReturn = pdTRUE;
 80080e6:	2001      	movs	r0, #1
	}
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	bf00      	nop
 80080ec:	24002278 	.word	0x24002278
 80080f0:	24001d9c 	.word	0x24001d9c
 80080f4:	24001e18 	.word	0x24001e18

080080f8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d03c      	beq.n	8008176 <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
 80080fc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
 80080fe:	b570      	push	{r4, r5, r6, lr}
 8008100:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008102:	b14b      	cbz	r3, 8008118 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008104:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008106:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008108:	4281      	cmp	r1, r0
 800810a:	bf38      	it	cc
 800810c:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008112:	428a      	cmp	r2, r1
 8008114:	d109      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8008128:	e7fe      	b.n	8008128 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 800812a:	4b18      	ldr	r3, [pc, #96]	@ (800818c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	42a3      	cmp	r3, r4
 8008130:	d022      	beq.n	8008178 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008132:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8008134:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008136:	2b00      	cmp	r3, #0
 8008138:	db02      	blt.n	8008140 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813a:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 800813e:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008140:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008144:	4d12      	ldr	r5, [pc, #72]	@ (8008190 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008146:	6961      	ldr	r1, [r4, #20]
 8008148:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800814c:	4299      	cmp	r1, r3
 800814e:	d1e2      	bne.n	8008116 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008150:	1d26      	adds	r6, r4, #4
 8008152:	4630      	mov	r0, r6
 8008154:	f7fe fc0a 	bl	800696c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008158:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800815a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4290      	cmp	r0, r2
 8008160:	d900      	bls.n	8008164 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8008162:	6018      	str	r0, [r3, #0]
 8008164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008168:	4631      	mov	r1, r6
 800816a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 800816e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8008172:	f7fe bbd5 	b.w	8006920 <vListInsertEnd>
 8008176:	4770      	bx	lr
 8008178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8008188:	e7fe      	b.n	8008188 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800818a:	bf00      	nop
 800818c:	24002278 	.word	0x24002278
 8008190:	24001e18 	.word	0x24001e18
 8008194:	24001d9c 	.word	0x24001d9c

08008198 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <pvTaskIncrementMutexHeldCount+0x14>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	b11a      	cbz	r2, 80081a6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80081a2:	3201      	adds	r2, #1
 80081a4:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80081a6:	6818      	ldr	r0, [r3, #0]
	}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	24002278 	.word	0x24002278

080081b0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80081b2:	4c12      	ldr	r4, [pc, #72]	@ (80081fc <prvCheckForValidListAndQueue+0x4c>)
{
 80081b4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80081b6:	f000 fa7d 	bl	80086b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80081ba:	6825      	ldr	r5, [r4, #0]
 80081bc:	b125      	cbz	r5, 80081c8 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80081be:	b003      	add	sp, #12
 80081c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80081c4:	f000 ba98 	b.w	80086f8 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80081c8:	4f0d      	ldr	r7, [pc, #52]	@ (8008200 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80081ca:	4e0e      	ldr	r6, [pc, #56]	@ (8008204 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7fe fb97 	bl	8006900 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7fe fb94 	bl	8006900 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008208 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081da:	9500      	str	r5, [sp, #0]
 80081dc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80081de:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081e0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80081e2:	4a0a      	ldr	r2, [pc, #40]	@ (800820c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008210 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 80081e6:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008214 <prvCheckForValidListAndQueue+0x64>)
 80081ea:	f7fe fc97 	bl	8006b1c <xQueueGenericCreateStatic>
 80081ee:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0e4      	beq.n	80081be <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081f4:	4908      	ldr	r1, [pc, #32]	@ (8008218 <prvCheckForValidListAndQueue+0x68>)
 80081f6:	f7ff f99f 	bl	8007538 <vQueueAddToRegistry>
 80081fa:	e7e0      	b.n	80081be <prvCheckForValidListAndQueue+0xe>
 80081fc:	24002374 	.word	0x24002374
 8008200:	24002394 	.word	0x24002394
 8008204:	24002380 	.word	0x24002380
 8008208:	2400237c 	.word	0x2400237c
 800820c:	24002378 	.word	0x24002378
 8008210:	2400227c 	.word	0x2400227c
 8008214:	240022cc 	.word	0x240022cc
 8008218:	08015c98 	.word	0x08015c98

0800821c <xTimerCreateTimerTask>:
{
 800821c:	b530      	push	{r4, r5, lr}
 800821e:	b089      	sub	sp, #36	@ 0x24
	prvCheckForValidListAndQueue();
 8008220:	f7ff ffc6 	bl	80081b0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008224:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <xTimerCreateTimerTask+0x54>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	b1cb      	cbz	r3, 800825e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800822a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800822c:	aa07      	add	r2, sp, #28
 800822e:	a906      	add	r1, sp, #24
 8008230:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008232:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008234:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008238:	f7fe fb52 	bl	80068e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800823c:	4623      	mov	r3, r4
 800823e:	9a07      	ldr	r2, [sp, #28]
 8008240:	9500      	str	r5, [sp, #0]
 8008242:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8008246:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800824a:	490a      	ldr	r1, [pc, #40]	@ (8008274 <xTimerCreateTimerTask+0x58>)
 800824c:	480a      	ldr	r0, [pc, #40]	@ (8008278 <xTimerCreateTimerTask+0x5c>)
 800824e:	f7ff fb43 	bl	80078d8 <xTaskCreateStatic>
 8008252:	4b0a      	ldr	r3, [pc, #40]	@ (800827c <xTimerCreateTimerTask+0x60>)
 8008254:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008256:	b110      	cbz	r0, 800825e <xTimerCreateTimerTask+0x42>
}
 8008258:	2001      	movs	r0, #1
 800825a:	b009      	add	sp, #36	@ 0x24
 800825c:	bd30      	pop	{r4, r5, pc}
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800826e:	e7fe      	b.n	800826e <xTimerCreateTimerTask+0x52>
 8008270:	24002374 	.word	0x24002374
 8008274:	08015ca0 	.word	0x08015ca0
 8008278:	08008369 	.word	0x08008369
 800827c:	24002370 	.word	0x24002370

08008280 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008280:	b1c8      	cbz	r0, 80082b6 <xTimerGenericCommand+0x36>
{
 8008282:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8008284:	4d18      	ldr	r5, [pc, #96]	@ (80082e8 <xTimerGenericCommand+0x68>)
{
 8008286:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8008288:	682c      	ldr	r4, [r5, #0]
 800828a:	b18c      	cbz	r4, 80082b0 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800828c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800828e:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8008290:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008294:	dc18      	bgt.n	80082c8 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008296:	f7ff fe9b 	bl	8007fd0 <xTaskGetSchedulerState>
 800829a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800829c:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082a0:	d01b      	beq.n	80082da <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082a2:	4669      	mov	r1, sp
 80082a4:	461a      	mov	r2, r3
 80082a6:	6828      	ldr	r0, [r5, #0]
 80082a8:	f7fe fcf4 	bl	8006c94 <xQueueGenericSend>
}
 80082ac:	b005      	add	sp, #20
 80082ae:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80082b0:	4620      	mov	r0, r4
}
 80082b2:	b005      	add	sp, #20
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80082c6:	e7fe      	b.n	80082c6 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082c8:	469c      	mov	ip, r3
 80082ca:	4669      	mov	r1, sp
 80082cc:	2300      	movs	r3, #0
 80082ce:	4620      	mov	r0, r4
 80082d0:	4662      	mov	r2, ip
 80082d2:	f7fe fe17 	bl	8006f04 <xQueueGenericSendFromISR>
}
 80082d6:	b005      	add	sp, #20
 80082d8:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082da:	9a08      	ldr	r2, [sp, #32]
 80082dc:	4669      	mov	r1, sp
 80082de:	6828      	ldr	r0, [r5, #0]
 80082e0:	f7fe fcd8 	bl	8006c94 <xQueueGenericSend>
 80082e4:	e7e5      	b.n	80082b2 <xTimerGenericCommand+0x32>
 80082e6:	bf00      	nop
 80082e8:	24002374 	.word	0x24002374

080082ec <prvSwitchTimerLists>:
{
 80082ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ee:	4e1c      	ldr	r6, [pc, #112]	@ (8008360 <prvSwitchTimerLists+0x74>)
 80082f0:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082f2:	e00d      	b.n	8008310 <prvSwitchTimerLists+0x24>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082f4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082f8:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082fa:	1d25      	adds	r5, r4, #4
 80082fc:	4628      	mov	r0, r5
 80082fe:	f7fe fb35 	bl	800696c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008302:	6a23      	ldr	r3, [r4, #32]
 8008304:	4620      	mov	r0, r4
 8008306:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008308:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800830c:	075b      	lsls	r3, r3, #29
 800830e:	d409      	bmi.n	8008324 <prvSwitchTimerLists+0x38>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008310:	6833      	ldr	r3, [r6, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	2a00      	cmp	r2, #0
 8008316:	d1ed      	bne.n	80082f4 <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 8008318:	4a12      	ldr	r2, [pc, #72]	@ (8008364 <prvSwitchTimerLists+0x78>)
 800831a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800831c:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800831e:	6031      	str	r1, [r6, #0]
}
 8008320:	b003      	add	sp, #12
 8008322:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008324:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008326:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008328:	2300      	movs	r3, #0
 800832a:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800832c:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800832e:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8008330:	42af      	cmp	r7, r5
 8008332:	d205      	bcs.n	8008340 <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008334:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008336:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008338:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800833a:	f7fe faff 	bl	800693c <vListInsert>
 800833e:	e7e7      	b.n	8008310 <prvSwitchTimerLists+0x24>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008340:	4619      	mov	r1, r3
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	f7ff ff9c 	bl	8008280 <xTimerGenericCommand>
				configASSERT( xResult );
 8008348:	2800      	cmp	r0, #0
 800834a:	d1e1      	bne.n	8008310 <prvSwitchTimerLists+0x24>
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	e7fe      	b.n	800835c <prvSwitchTimerLists+0x70>
 800835e:	bf00      	nop
 8008360:	2400237c 	.word	0x2400237c
 8008364:	24002378 	.word	0x24002378

08008368 <prvTimerTask>:
{
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	4e96      	ldr	r6, [pc, #600]	@ (80085c8 <prvTimerTask+0x260>)
 800836e:	b087      	sub	sp, #28
 8008370:	4d96      	ldr	r5, [pc, #600]	@ (80085cc <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 8008372:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8008376:	4c96      	ldr	r4, [pc, #600]	@ (80085d0 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008378:	6833      	ldr	r3, [r6, #0]
 800837a:	681f      	ldr	r7, [r3, #0]
 800837c:	2f00      	cmp	r7, #0
 800837e:	f000 80a9 	beq.w	80084d4 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8008386:	f7ff fb61 	bl	8007a4c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800838a:	f7ff fb67 	bl	8007a5c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800838e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008390:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008392:	4290      	cmp	r0, r2
 8008394:	f0c0 80a6 	bcc.w	80084e4 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008398:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 800839a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800839c:	f200 80c7 	bhi.w	800852e <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 80083a0:	f7ff fca8 	bl	8007cf4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a4:	6832      	ldr	r2, [r6, #0]
 80083a6:	68d2      	ldr	r2, [r2, #12]
 80083a8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083ac:	f10b 0804 	add.w	r8, fp, #4
 80083b0:	4640      	mov	r0, r8
 80083b2:	f7fe fadb 	bl	800696c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083b6:	f89b 0028 	ldrb.w	r0, [fp, #40]	@ 0x28
 80083ba:	0743      	lsls	r3, r0, #29
 80083bc:	f100 80c6 	bmi.w	800854c <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083c0:	f020 0001 	bic.w	r0, r0, #1
 80083c4:	f88b 0028 	strb.w	r0, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083c8:	f8db 3020 	ldr.w	r3, [fp, #32]
 80083cc:	4658      	mov	r0, fp
 80083ce:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083d0:	2200      	movs	r2, #0
 80083d2:	a902      	add	r1, sp, #8
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	f7fe fe51 	bl	800707c <xQueueReceive>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d0cc      	beq.n	8008378 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083de:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083e0:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	db6e      	blt.n	80084c4 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083e6:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	b113      	cbz	r3, 80083f2 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083ec:	1d38      	adds	r0, r7, #4
 80083ee:	f7fe fabd 	bl	800696c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80083f2:	f7ff fb33 	bl	8007a5c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80083f6:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80083f8:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 80083fa:	4298      	cmp	r0, r3
 80083fc:	d379      	bcc.n	80084f2 <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 80083fe:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8008400:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8008404:	2b09      	cmp	r3, #9
 8008406:	d8e3      	bhi.n	80083d0 <prvTimerTask+0x68>
 8008408:	e8df f003 	tbb	[pc, r3]
 800840c:	4c050505 	.word	0x4c050505
 8008410:	05055336 	.word	0x05055336
 8008414:	364c      	.short	0x364c
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008416:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800841a:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800841c:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008420:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008422:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008424:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008428:	185a      	adds	r2, r3, r1
 800842a:	bf2c      	ite	cs
 800842c:	2001      	movcs	r0, #1
 800842e:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8008430:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008432:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008434:	d87d      	bhi.n	8008532 <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008436:	eba8 0303 	sub.w	r3, r8, r3
 800843a:	4299      	cmp	r1, r3
 800843c:	f200 80af 	bhi.w	800859e <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	4638      	mov	r0, r7
 8008444:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008446:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800844a:	0759      	lsls	r1, r3, #29
 800844c:	d5c0      	bpl.n	80083d0 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800844e:	2200      	movs	r2, #0
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	4638      	mov	r0, r7
 8008454:	9200      	str	r2, [sp, #0]
 8008456:	9a03      	ldr	r2, [sp, #12]
 8008458:	441a      	add	r2, r3
 800845a:	2300      	movs	r3, #0
 800845c:	4619      	mov	r1, r3
 800845e:	f7ff ff0f 	bl	8008280 <xTimerGenericCommand>
							configASSERT( xResult );
 8008462:	2800      	cmp	r0, #0
 8008464:	d1b4      	bne.n	80083d0 <prvTimerTask+0x68>
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	e7fe      	b.n	8008476 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008478:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800847c:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800847e:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008482:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008484:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8094 	beq.w	80085b6 <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800848e:	4443      	add	r3, r8
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008490:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008492:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008494:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008496:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008498:	d854      	bhi.n	8008544 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800849a:	4b4e      	ldr	r3, [pc, #312]	@ (80085d4 <prvTimerTask+0x26c>)
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f7fe fa4d 	bl	800693c <vListInsert>
 80084a2:	e795      	b.n	80083d0 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 80084b0:	e78e      	b.n	80083d0 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80084b6:	079a      	lsls	r2, r3, #30
 80084b8:	d568      	bpl.n	800858c <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084ba:	f023 0301 	bic.w	r3, r3, #1
 80084be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80084c2:	e785      	b.n	80083d0 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	9905      	ldr	r1, [sp, #20]
 80084c8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084ca:	9b02      	ldr	r3, [sp, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f6ff af7f 	blt.w	80083d0 <prvTimerTask+0x68>
 80084d2:	e788      	b.n	80083e6 <prvTimerTask+0x7e>
	vTaskSuspendAll();
 80084d4:	f7ff faba 	bl	8007a4c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80084d8:	f7ff fac0 	bl	8007a5c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80084dc:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80084de:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80084e0:	4290      	cmp	r0, r2
 80084e2:	d209      	bcs.n	80084f8 <prvTimerTask+0x190>
		prvSwitchTimerLists();
 80084e4:	f7ff ff02 	bl	80082ec <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80084e8:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80084ec:	f7ff fc02 	bl	8007cf4 <xTaskResumeAll>
 80084f0:	e76e      	b.n	80083d0 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80084f2:	f7ff fefb 	bl	80082ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084f6:	e782      	b.n	80083fe <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084f8:	4b36      	ldr	r3, [pc, #216]	@ (80085d4 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 80084fa:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	fab2 f282 	clz	r2, r2
 8008506:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008508:	eba7 010a 	sub.w	r1, r7, sl
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	f7ff f843 	bl	8007598 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008512:	f7ff fbef 	bl	8007cf4 <xTaskResumeAll>
 8008516:	2800      	cmp	r0, #0
 8008518:	f47f af5a 	bne.w	80083d0 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 800851c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008520:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	e750      	b.n	80083d0 <prvTimerTask+0x68>
 800852e:	2200      	movs	r2, #0
 8008530:	e7ea      	b.n	8008508 <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008532:	4543      	cmp	r3, r8
 8008534:	d901      	bls.n	800853a <prvTimerTask+0x1d2>
 8008536:	2800      	cmp	r0, #0
 8008538:	d082      	beq.n	8008440 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800853a:	1d39      	adds	r1, r7, #4
 800853c:	6830      	ldr	r0, [r6, #0]
 800853e:	f7fe f9fd 	bl	800693c <vListInsert>
	return xProcessTimerNow;
 8008542:	e745      	b.n	80083d0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008544:	6830      	ldr	r0, [r6, #0]
 8008546:	f7fe f9f9 	bl	800693c <vListInsert>
 800854a:	e741      	b.n	80083d0 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800854c:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008550:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008554:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8008556:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008558:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800855c:	d31a      	bcc.n	8008594 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855e:	ebaa 0307 	sub.w	r3, sl, r7
 8008562:	429a      	cmp	r2, r3
 8008564:	d821      	bhi.n	80085aa <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008566:	2300      	movs	r3, #0
 8008568:	463a      	mov	r2, r7
 800856a:	4658      	mov	r0, fp
 800856c:	4619      	mov	r1, r3
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	f7ff fe86 	bl	8008280 <xTimerGenericCommand>
			configASSERT( xResult );
 8008574:	2800      	cmp	r0, #0
 8008576:	f47f af27 	bne.w	80083c8 <prvTimerTask+0x60>
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	e7fe      	b.n	800858a <prvTimerTask+0x222>
							vPortFree( pxTimer );
 800858c:	4638      	mov	r0, r7
 800858e:	f000 fa9b 	bl	8008ac8 <vPortFree>
 8008592:	e71d      	b.n	80083d0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008594:	4641      	mov	r1, r8
 8008596:	6830      	ldr	r0, [r6, #0]
 8008598:	f7fe f9d0 	bl	800693c <vListInsert>
	return xProcessTimerNow;
 800859c:	e714      	b.n	80083c8 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800859e:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <prvTimerTask+0x26c>)
 80085a0:	1d39      	adds	r1, r7, #4
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	f7fe f9ca 	bl	800693c <vListInsert>
	return xProcessTimerNow;
 80085a8:	e712      	b.n	80083d0 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085aa:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <prvTimerTask+0x26c>)
 80085ac:	4641      	mov	r1, r8
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	f7fe f9c4 	bl	800693c <vListInsert>
	return xProcessTimerNow;
 80085b4:	e708      	b.n	80083c8 <prvTimerTask+0x60>
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085c6:	e7fe      	b.n	80085c6 <prvTimerTask+0x25e>
 80085c8:	2400237c 	.word	0x2400237c
 80085cc:	2400236c 	.word	0x2400236c
 80085d0:	24002374 	.word	0x24002374
 80085d4:	24002378 	.word	0x24002378

080085d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085d8:	4808      	ldr	r0, [pc, #32]	@ (80085fc <prvPortStartFirstTask+0x24>)
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	6800      	ldr	r0, [r0, #0]
 80085de:	f380 8808 	msr	MSP, r0
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8814 	msr	CONTROL, r0
 80085ea:	b662      	cpsie	i
 80085ec:	b661      	cpsie	f
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	df00      	svc	0
 80085f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085fa:	0000      	.short	0x0000
 80085fc:	e000ed08 	.word	0xe000ed08

08008600 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008600:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008610 <vPortEnableVFP+0x10>
 8008604:	6801      	ldr	r1, [r0, #0]
 8008606:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800860a:	6001      	str	r1, [r0, #0]
 800860c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800860e:	0000      	.short	0x0000
 8008610:	e000ed88 	.word	0xe000ed88

08008614 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8008614:	4b0e      	ldr	r3, [pc, #56]	@ (8008650 <prvTaskExitError+0x3c>)
{
 8008616:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008618:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800861a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 800861c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800861e:	3301      	adds	r3, #1
 8008620:	d008      	beq.n	8008634 <prvTaskExitError+0x20>
 8008622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	e7fe      	b.n	8008632 <prvTaskExitError+0x1e>
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0fc      	beq.n	8008644 <prvTaskExitError+0x30>
}
 800864a:	b002      	add	sp, #8
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	24000084 	.word	0x24000084

08008654 <pxPortInitialiseStack>:
{
 8008654:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008656:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800865a:	4809      	ldr	r0, [pc, #36]	@ (8008680 <pxPortInitialiseStack+0x2c>)
{
 800865c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800865e:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008662:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008666:	f843 2c20 	str.w	r2, [r3, #-32]
}
 800866a:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800866e:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008672:	f06f 0102 	mvn.w	r1, #2
}
 8008676:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800867a:	f843 1c24 	str.w	r1, [r3, #-36]
}
 800867e:	4770      	bx	lr
 8008680:	08008615 	.word	0x08008615
	...

08008690 <SVC_Handler>:
	__asm volatile (
 8008690:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <pxCurrentTCBConst2>)
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	6808      	ldr	r0, [r1, #0]
 8008696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	f380 8809 	msr	PSP, r0
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8811 	msr	BASEPRI, r0
 80086aa:	4770      	bx	lr
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst2>:
 80086b0:	24002278 	.word	0x24002278

080086b4 <vPortEnterCritical>:
 80086b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80086c4:	4a0b      	ldr	r2, [pc, #44]	@ (80086f4 <vPortEnterCritical+0x40>)
 80086c6:	6813      	ldr	r3, [r2, #0]
 80086c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80086ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80086cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80086ce:	d000      	beq.n	80086d2 <vPortEnterCritical+0x1e>
}
 80086d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80086d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f7      	beq.n	80086d0 <vPortEnterCritical+0x1c>
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	e7fe      	b.n	80086f0 <vPortEnterCritical+0x3c>
 80086f2:	bf00      	nop
 80086f4:	24000084 	.word	0x24000084

080086f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80086f8:	4a08      	ldr	r2, [pc, #32]	@ (800871c <vPortExitCritical+0x24>)
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	b943      	cbnz	r3, 8008710 <vPortExitCritical+0x18>
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	e7fe      	b.n	800870e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008710:	3b01      	subs	r3, #1
 8008712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008714:	b90b      	cbnz	r3, 800871a <vPortExitCritical+0x22>
	__asm volatile
 8008716:	f383 8811 	msr	BASEPRI, r3
}
 800871a:	4770      	bx	lr
 800871c:	24000084 	.word	0x24000084

08008720 <PendSV_Handler>:
	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	@ (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008744:	f380 8811 	msr	BASEPRI, r0
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f7ff fb10 	bl	8007d74 <vTaskSwitchContext>
 8008754:	f04f 0000 	mov.w	r0, #0
 8008758:	f380 8811 	msr	BASEPRI, r0
 800875c:	bc09      	pop	{r0, r3}
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	6808      	ldr	r0, [r1, #0]
 8008762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008766:	f01e 0f10 	tst.w	lr, #16
 800876a:	bf08      	it	eq
 800876c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008770:	f380 8809 	msr	PSP, r0
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst>:
 8008780:	24002278 	.word	0x24002278

08008784 <xPortSysTickHandler>:
{
 8008784:	b508      	push	{r3, lr}
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008796:	f7ff f96f 	bl	8007a78 <xTaskIncrementTick>
 800879a:	b128      	cbz	r0, 80087a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800879c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80087a8:	2300      	movs	r3, #0
 80087aa:	f383 8811 	msr	BASEPRI, r3
}
 80087ae:	bd08      	pop	{r3, pc}

080087b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80087b4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087b6:	4806      	ldr	r0, [pc, #24]	@ (80087d0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087b8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ba:	4906      	ldr	r1, [pc, #24]	@ (80087d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087bc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087be:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087c0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087c2:	fba1 1303 	umull	r1, r3, r1, r3
 80087c6:	099b      	lsrs	r3, r3, #6
 80087c8:	3b01      	subs	r3, #1
 80087ca:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087cc:	6110      	str	r0, [r2, #16]
}
 80087ce:	4770      	bx	lr
 80087d0:	24000004 	.word	0x24000004
 80087d4:	10624dd3 	.word	0x10624dd3

080087d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087dc:	4a3d      	ldr	r2, [pc, #244]	@ (80088d4 <xPortStartScheduler+0xfc>)
 80087de:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80087e2:	4291      	cmp	r1, r2
 80087e4:	d041      	beq.n	800886a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087e6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80087ea:	4b3b      	ldr	r3, [pc, #236]	@ (80088d8 <xPortStartScheduler+0x100>)
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d033      	beq.n	8008858 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087f0:	4b3a      	ldr	r3, [pc, #232]	@ (80088dc <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087f6:	483a      	ldr	r0, [pc, #232]	@ (80088e0 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087f8:	493a      	ldr	r1, [pc, #232]	@ (80088e4 <xPortStartScheduler+0x10c>)
{
 80087fa:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087fc:	781a      	ldrb	r2, [r3, #0]
{
 80087fe:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008804:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008806:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800880a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800880c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008814:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008818:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800881c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008820:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008822:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008824:	d50f      	bpl.n	8008846 <xPortStartScheduler+0x6e>
 8008826:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008828:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800882c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008838:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800883c:	061b      	lsls	r3, r3, #24
 800883e:	d4f3      	bmi.n	8008828 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008840:	2903      	cmp	r1, #3
 8008842:	d01b      	beq.n	800887c <xPortStartScheduler+0xa4>
 8008844:	6001      	str	r1, [r0, #0]
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	e7fe      	b.n	8008856 <xPortStartScheduler+0x7e>
 8008858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008868:	e7fe      	b.n	8008868 <xPortStartScheduler+0x90>
 800886a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800887a:	e7fe      	b.n	800887a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800887c:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800887e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008882:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008884:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008888:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 800888a:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800888c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800888e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008890:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008898:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800889c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80088a0:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80088a4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80088a8:	f7ff ff82 	bl	80087b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80088ac:	4b0e      	ldr	r3, [pc, #56]	@ (80088e8 <xPortStartScheduler+0x110>)
 80088ae:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80088b0:	f7ff fea6 	bl	8008600 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088b4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80088b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088bc:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80088c0:	f7ff fe8a 	bl	80085d8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80088c4:	f7ff fa56 	bl	8007d74 <vTaskSwitchContext>
}
 80088c8:	4628      	mov	r0, r5
	prvTaskExitError();
 80088ca:	f7ff fea3 	bl	8008614 <prvTaskExitError>
}
 80088ce:	b003      	add	sp, #12
 80088d0:	bd30      	pop	{r4, r5, pc}
 80088d2:	bf00      	nop
 80088d4:	410fc271 	.word	0x410fc271
 80088d8:	410fc270 	.word	0x410fc270
 80088dc:	e000e400 	.word	0xe000e400
 80088e0:	240023a8 	.word	0x240023a8
 80088e4:	240023ac 	.word	0x240023ac
 80088e8:	24000084 	.word	0x24000084

080088ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088f0:	2b0f      	cmp	r3, #15
 80088f2:	d90e      	bls.n	8008912 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088f4:	4911      	ldr	r1, [pc, #68]	@ (800893c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088f6:	4a12      	ldr	r2, [pc, #72]	@ (8008940 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088f8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088fa:	7812      	ldrb	r2, [r2, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d908      	bls.n	8008912 <vPortValidateInterruptPriority+0x26>
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	e7fe      	b.n	8008910 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008912:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008916:	4a0b      	ldr	r2, [pc, #44]	@ (8008944 <vPortValidateInterruptPriority+0x58>)
 8008918:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008922:	4293      	cmp	r3, r2
 8008924:	d908      	bls.n	8008938 <vPortValidateInterruptPriority+0x4c>
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	e7fe      	b.n	8008936 <vPortValidateInterruptPriority+0x4a>
	}
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000e3f0 	.word	0xe000e3f0
 8008940:	240023ac 	.word	0x240023ac
 8008944:	240023a8 	.word	0x240023a8

08008948 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008948:	4b12      	ldr	r3, [pc, #72]	@ (8008994 <prvInsertBlockIntoFreeList+0x4c>)
{
 800894a:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800894c:	461a      	mov	r2, r3
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4283      	cmp	r3, r0
 8008952:	d3fb      	bcc.n	800894c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008954:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008956:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008958:	eb02 0c04 	add.w	ip, r2, r4
 800895c:	4560      	cmp	r0, ip
 800895e:	d008      	beq.n	8008972 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008960:	1844      	adds	r4, r0, r1
 8008962:	42a3      	cmp	r3, r4
 8008964:	d00b      	beq.n	800897e <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008966:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008968:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800896a:	bf18      	it	ne
 800896c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800896e:	bc30      	pop	{r4, r5}
 8008970:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008972:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008974:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008976:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008978:	4283      	cmp	r3, r0
 800897a:	d1f8      	bne.n	800896e <prvInsertBlockIntoFreeList+0x26>
 800897c:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800897e:	4c06      	ldr	r4, [pc, #24]	@ (8008998 <prvInsertBlockIntoFreeList+0x50>)
 8008980:	6824      	ldr	r4, [r4, #0]
 8008982:	42a3      	cmp	r3, r4
 8008984:	d003      	beq.n	800898e <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008986:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800898a:	4429      	add	r1, r5
 800898c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800898e:	6004      	str	r4, [r0, #0]
 8008990:	e7ea      	b.n	8008968 <prvInsertBlockIntoFreeList+0x20>
 8008992:	bf00      	nop
 8008994:	240023c8 	.word	0x240023c8
 8008998:	240023c4 	.word	0x240023c4

0800899c <pvPortMalloc>:
{
 800899c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 80089a0:	4d41      	ldr	r5, [pc, #260]	@ (8008aa8 <pvPortMalloc+0x10c>)
{
 80089a2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80089a4:	f7ff f852 	bl	8007a4c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d05c      	beq.n	8008a68 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089ae:	4b3f      	ldr	r3, [pc, #252]	@ (8008aac <pvPortMalloc+0x110>)
 80089b0:	681e      	ldr	r6, [r3, #0]
 80089b2:	4234      	tst	r4, r6
 80089b4:	d12e      	bne.n	8008a14 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 80089b6:	b36c      	cbz	r4, 8008a14 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089b8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80089ba:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089be:	d002      	beq.n	80089c6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089c0:	f021 0107 	bic.w	r1, r1, #7
 80089c4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089c6:	b329      	cbz	r1, 8008a14 <pvPortMalloc+0x78>
 80089c8:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8008ac4 <pvPortMalloc+0x128>
 80089cc:	f8d8 7000 	ldr.w	r7, [r8]
 80089d0:	428f      	cmp	r7, r1
 80089d2:	d31f      	bcc.n	8008a14 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 80089d4:	4836      	ldr	r0, [pc, #216]	@ (8008ab0 <pvPortMalloc+0x114>)
 80089d6:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089d8:	e003      	b.n	80089e2 <pvPortMalloc+0x46>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	b123      	cbz	r3, 80089e8 <pvPortMalloc+0x4c>
 80089de:	4620      	mov	r0, r4
 80089e0:	461c      	mov	r4, r3
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	428a      	cmp	r2, r1
 80089e6:	d3f8      	bcc.n	80089da <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	d012      	beq.n	8008a14 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089ee:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089f0:	6825      	ldr	r5, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089f2:	f8d0 9000 	ldr.w	r9, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089f6:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089f8:	6005      	str	r5, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089fa:	d916      	bls.n	8008a2a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089fc:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089fe:	0742      	lsls	r2, r0, #29
 8008a00:	d00e      	beq.n	8008a20 <pvPortMalloc+0x84>
 8008a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	e7fe      	b.n	8008a12 <pvPortMalloc+0x76>
void *pvReturn = NULL;
 8008a14:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8008a16:	f7ff f96d 	bl	8007cf4 <xTaskResumeAll>
}
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a20:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a22:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a24:	f7ff ff90 	bl	8008948 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a28:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a2a:	4b22      	ldr	r3, [pc, #136]	@ (8008ab4 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a2c:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a2e:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a30:	f109 0508 	add.w	r5, r9, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a34:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a36:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a3a:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8008a3c:	491e      	ldr	r1, [pc, #120]	@ (8008ab8 <pvPortMalloc+0x11c>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a3e:	bf38      	it	cc
 8008a40:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8008a48:	680b      	ldr	r3, [r1, #0]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 8008a4e:	f7ff f951 	bl	8007cf4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a52:	076b      	lsls	r3, r5, #29
 8008a54:	d0e1      	beq.n	8008a1a <pvPortMalloc+0x7e>
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	e7fe      	b.n	8008a66 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 8008a68:	4b14      	ldr	r3, [pc, #80]	@ (8008abc <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 8008a6a:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8008a6c:	4a14      	ldr	r2, [pc, #80]	@ (8008ac0 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a6e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a72:	075e      	lsls	r6, r3, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a74:	4e0e      	ldr	r6, [pc, #56]	@ (8008ab0 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a76:	f022 0207 	bic.w	r2, r2, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a7a:	bf18      	it	ne
 8008a7c:	3307      	addne	r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008a7e:	6071      	str	r1, [r6, #4]
	pxEnd = ( void * ) uxAddress;
 8008a80:	602a      	str	r2, [r5, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a82:	bf18      	it	ne
 8008a84:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a8c:	1ad3      	subs	r3, r2, r3
}
 8008a8e:	463e      	mov	r6, r7
	pxEnd->pxNextFreeBlock = NULL;
 8008a90:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a94:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a98:	4a06      	ldr	r2, [pc, #24]	@ (8008ab4 <pvPortMalloc+0x118>)
 8008a9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a9c:	4a09      	ldr	r2, [pc, #36]	@ (8008ac4 <pvPortMalloc+0x128>)
 8008a9e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008aa0:	4b02      	ldr	r3, [pc, #8]	@ (8008aac <pvPortMalloc+0x110>)
 8008aa2:	601f      	str	r7, [r3, #0]
}
 8008aa4:	e785      	b.n	80089b2 <pvPortMalloc+0x16>
 8008aa6:	bf00      	nop
 8008aa8:	240023c4 	.word	0x240023c4
 8008aac:	240023b0 	.word	0x240023b0
 8008ab0:	240023c8 	.word	0x240023c8
 8008ab4:	240023bc 	.word	0x240023bc
 8008ab8:	240023b8 	.word	0x240023b8
 8008abc:	240023d0 	.word	0x240023d0
 8008ac0:	24009bc8 	.word	0x24009bc8
 8008ac4:	240023c0 	.word	0x240023c0

08008ac8 <vPortFree>:
	if( pv != NULL )
 8008ac8:	b1d0      	cbz	r0, 8008b00 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008aca:	4a1c      	ldr	r2, [pc, #112]	@ (8008b3c <vPortFree+0x74>)
 8008acc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	4213      	tst	r3, r2
 8008ad4:	d00b      	beq.n	8008aee <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ad6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008ada:	b191      	cbz	r1, 8008b02 <vPortFree+0x3a>
 8008adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	e7fe      	b.n	8008aec <vPortFree+0x24>
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008afe:	e7fe      	b.n	8008afe <vPortFree+0x36>
 8008b00:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b02:	ea23 0302 	bic.w	r3, r3, r2
{
 8008b06:	b500      	push	{lr}
 8008b08:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b0a:	f840 3c04 	str.w	r3, [r0, #-4]
 8008b0e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8008b10:	f7fe ff9c 	bl	8007a4c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b14:	4a0a      	ldr	r2, [pc, #40]	@ (8008b40 <vPortFree+0x78>)
 8008b16:	9801      	ldr	r0, [sp, #4]
 8008b18:	6811      	ldr	r1, [r2, #0]
 8008b1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b1e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b20:	440b      	add	r3, r1
 8008b22:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b24:	f7ff ff10 	bl	8008948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b28:	4a06      	ldr	r2, [pc, #24]	@ (8008b44 <vPortFree+0x7c>)
 8008b2a:	6813      	ldr	r3, [r2, #0]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	6013      	str	r3, [r2, #0]
}
 8008b30:	b003      	add	sp, #12
 8008b32:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8008b36:	f7ff b8dd 	b.w	8007cf4 <xTaskResumeAll>
 8008b3a:	bf00      	nop
 8008b3c:	240023b0 	.word	0x240023b0
 8008b40:	240023c0 	.word	0x240023c0
 8008b44:	240023b4 	.word	0x240023b4

08008b48 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 8008b4c:	2300      	movs	r3, #0
{
 8008b4e:	b082      	sub	sp, #8
  void *buf = NULL;
 8008b50:	9301      	str	r3, [sp, #4]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008b52:	2900      	cmp	r1, #0
 8008b54:	d074      	beq.n	8008c40 <netconn_recv_data+0xf8>
  *new_buf = NULL;
 8008b56:	4604      	mov	r4, r0
 8008b58:	460d      	mov	r5, r1
 8008b5a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d065      	beq.n	8008c2c <netconn_recv_data+0xe4>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008b60:	f100 0810 	add.w	r8, r0, #16
 8008b64:	4616      	mov	r6, r2
 8008b66:	4640      	mov	r0, r8
 8008b68:	f00b fbd4 	bl	8014314 <sys_mbox_valid>
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	b310      	cbz	r0, 8008bb6 <netconn_recv_data+0x6e>
    }
    return ERR_CONN;
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008b70:	7f23      	ldrb	r3, [r4, #28]
 8008b72:	f006 0204 	and.w	r2, r6, #4
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008b76:	a901      	add	r1, sp, #4
 8008b78:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008b7a:	f003 0303 	and.w	r3, r3, #3
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	d025      	beq.n	8008bce <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008b82:	f00b fbbb 	bl	80142fc <sys_arch_mbox_tryfetch>
 8008b86:	3001      	adds	r0, #1
 8008b88:	d034      	beq.n	8008bf4 <netconn_recv_data+0xac>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008b8a:	7823      	ldrb	r3, [r4, #0]
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008b8c:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b92:	2b10      	cmp	r3, #16
 8008b94:	d022      	beq.n	8008bdc <netconn_recv_data+0x94>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d03c      	beq.n	8008c14 <netconn_recv_data+0xcc>
    len = netbuf_len((struct netbuf *)buf);
 8008b9a:	6803      	ldr	r3, [r0, #0]
 8008b9c:	891a      	ldrh	r2, [r3, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008b9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008ba0:	b11b      	cbz	r3, 8008baa <netconn_recv_data+0x62>
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	4798      	blx	r3
 8008ba8:	9801      	ldr	r0, [sp, #4]

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008baa:	2600      	movs	r6, #0
  *new_buf = buf;
 8008bac:	6028      	str	r0, [r5, #0]
}
 8008bae:	4630      	mov	r0, r6
 8008bb0:	b002      	add	sp, #8
 8008bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8008bb6:	f00b fc2f 	bl	8014418 <sys_arch_protect>
  err = conn->pending_err;
 8008bba:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8008bbe:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008bc0:	f00b fc36 	bl	8014430 <sys_arch_unprotect>
    if (err != ERR_OK) {
 8008bc4:	2e00      	cmp	r6, #0
 8008bc6:	d1f2      	bne.n	8008bae <netconn_recv_data+0x66>
    return ERR_CONN;
 8008bc8:	f06f 060a 	mvn.w	r6, #10
 8008bcc:	e7ef      	b.n	8008bae <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008bce:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	d1d5      	bne.n	8008b82 <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008bd6:	f00b fb73 	bl	80142c0 <sys_arch_mbox_fetch>
 8008bda:	e7d6      	b.n	8008b8a <netconn_recv_data+0x42>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008bdc:	f10d 0103 	add.w	r1, sp, #3
 8008be0:	f001 f8aa 	bl	8009d38 <lwip_netconn_is_err_msg>
 8008be4:	b1f8      	cbz	r0, 8008c26 <netconn_recv_data+0xde>
      if (err == ERR_CLSD) {
 8008be6:	f99d 6003 	ldrsb.w	r6, [sp, #3]
        return ERR_OK;
 8008bea:	f116 0f0f 	cmn.w	r6, #15
 8008bee:	bf08      	it	eq
 8008bf0:	2600      	moveq	r6, #0
 8008bf2:	e7dc      	b.n	8008bae <netconn_recv_data+0x66>
  SYS_ARCH_PROTECT(lev);
 8008bf4:	f00b fc10 	bl	8014418 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 8008bf8:	2300      	movs	r3, #0
  err = conn->pending_err;
 8008bfa:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8008bfe:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008c00:	f00b fc16 	bl	8014430 <sys_arch_unprotect>
      if (err != ERR_OK) {
 8008c04:	2e00      	cmp	r6, #0
 8008c06:	d1d2      	bne.n	8008bae <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008c08:	7f23      	ldrb	r3, [r4, #28]
 8008c0a:	07db      	lsls	r3, r3, #31
 8008c0c:	d4dc      	bmi.n	8008bc8 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 8008c0e:	f06f 0606 	mvn.w	r6, #6
 8008c12:	e7cc      	b.n	8008bae <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008c14:	4b0e      	ldr	r3, [pc, #56]	@ (8008c50 <netconn_recv_data+0x108>)
 8008c16:	f240 2291 	movw	r2, #657	@ 0x291
 8008c1a:	490e      	ldr	r1, [pc, #56]	@ (8008c54 <netconn_recv_data+0x10c>)
 8008c1c:	480e      	ldr	r0, [pc, #56]	@ (8008c58 <netconn_recv_data+0x110>)
 8008c1e:	f00b fe79 	bl	8014914 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008c22:	9801      	ldr	r0, [sp, #4]
 8008c24:	e7b9      	b.n	8008b9a <netconn_recv_data+0x52>
    len = ((struct pbuf *)buf)->tot_len;
 8008c26:	9801      	ldr	r0, [sp, #4]
 8008c28:	8902      	ldrh	r2, [r0, #8]
 8008c2a:	e7b8      	b.n	8008b9e <netconn_recv_data+0x56>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008c2c:	4b08      	ldr	r3, [pc, #32]	@ (8008c50 <netconn_recv_data+0x108>)
 8008c2e:	f240 224a 	movw	r2, #586	@ 0x24a
 8008c32:	490a      	ldr	r1, [pc, #40]	@ (8008c5c <netconn_recv_data+0x114>)
 8008c34:	4808      	ldr	r0, [pc, #32]	@ (8008c58 <netconn_recv_data+0x110>)
 8008c36:	f00b fe6d 	bl	8014914 <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008c3a:	f06f 060f 	mvn.w	r6, #15
 8008c3e:	e7b6      	b.n	8008bae <netconn_recv_data+0x66>
 8008c40:	4b03      	ldr	r3, [pc, #12]	@ (8008c50 <netconn_recv_data+0x108>)
 8008c42:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8008c46:	4906      	ldr	r1, [pc, #24]	@ (8008c60 <netconn_recv_data+0x118>)
 8008c48:	4803      	ldr	r0, [pc, #12]	@ (8008c58 <netconn_recv_data+0x110>)
 8008c4a:	f00b fe63 	bl	8014914 <iprintf>
 8008c4e:	e7f4      	b.n	8008c3a <netconn_recv_data+0xf2>
 8008c50:	08015ca8 	.word	0x08015ca8
 8008c54:	08015d18 	.word	0x08015d18
 8008c58:	08015bd0 	.word	0x08015bd0
 8008c5c:	08015cfc 	.word	0x08015cfc
 8008c60:	08015cdc 	.word	0x08015cdc

08008c64 <netconn_recv_data_tcp>:
{
 8008c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c66:	4604      	mov	r4, r0
 8008c68:	b091      	sub	sp, #68	@ 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008c6a:	3010      	adds	r0, #16
{
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008c70:	f00b fb50 	bl	8014314 <sys_mbox_valid>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d053      	beq.n	8008d20 <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008c78:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8008c7c:	7f23      	ldrb	r3, [r4, #28]
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	db1c      	blt.n	8008cbc <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008c82:	463a      	mov	r2, r7
 8008c84:	4631      	mov	r1, r6
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7ff ff5e 	bl	8008b48 <netconn_recv_data>
  if (err != ERR_OK) {
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	b990      	cbnz	r0, 8008cb6 <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008c90:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 8008c92:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008c94:	d40e      	bmi.n	8008cb4 <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 8008c96:	b39e      	cbz	r6, 8008d00 <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008c98:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008c9a:	7823      	ldrb	r3, [r4, #0]
 8008c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d140      	bne.n	8008d26 <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 8008ca4:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008ca6:	4669      	mov	r1, sp
 8008ca8:	f104 020c 	add.w	r2, r4, #12
 8008cac:	4823      	ldr	r0, [pc, #140]	@ (8008d3c <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 8008cae:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008cb0:	f002 fad4 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 8008cb4:	b1de      	cbz	r6, 8008cee <netconn_recv_data_tcp+0x8a>
}
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	b011      	add	sp, #68	@ 0x44
 8008cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cc0:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008cc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008cc4:	b11b      	cbz	r3, 8008cce <netconn_recv_data_tcp+0x6a>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2101      	movs	r1, #1
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008cce:	6866      	ldr	r6, [r4, #4]
 8008cd0:	b9c6      	cbnz	r6, 8008d04 <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 8008cd2:	f00b fba1 	bl	8014418 <sys_arch_protect>
  err = conn->pending_err;
 8008cd6:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8008cda:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008cdc:	f00b fba8 	bl	8014430 <sys_arch_unprotect>
        return ERR_RST;
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	bf08      	it	eq
 8008ce4:	f06f 050d 	mvneq.w	r5, #13
}
 8008ce8:	4628      	mov	r0, r5
 8008cea:	b011      	add	sp, #68	@ 0x44
 8008cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 8008cee:	06fb      	lsls	r3, r7, #27
 8008cf0:	d5e7      	bpl.n	8008cc2 <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008cf2:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8008cf4:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008cf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cfc:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8008cfe:	e7da      	b.n	8008cb6 <netconn_recv_data_tcp+0x52>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008d00:	2201      	movs	r2, #1
 8008d02:	e7ca      	b.n	8008c9a <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008d04:	f642 1301 	movw	r3, #10497	@ 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008d08:	f104 020c 	add.w	r2, r4, #12
 8008d0c:	a908      	add	r1, sp, #32
 8008d0e:	480c      	ldr	r0, [pc, #48]	@ (8008d40 <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 8008d10:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 8008d14:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008d16:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008d1a:	f002 fa9f 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8008d1e:	e7ca      	b.n	8008cb6 <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 8008d20:	f06f 050a 	mvn.w	r5, #10
 8008d24:	e7c7      	b.n	8008cb6 <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008d26:	4b07      	ldr	r3, [pc, #28]	@ (8008d44 <netconn_recv_data_tcp+0xe0>)
 8008d28:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8008d2c:	4906      	ldr	r1, [pc, #24]	@ (8008d48 <netconn_recv_data_tcp+0xe4>)
 8008d2e:	4807      	ldr	r0, [pc, #28]	@ (8008d4c <netconn_recv_data_tcp+0xe8>)
 8008d30:	f00b fdf0 	bl	8014914 <iprintf>
  if (buf == NULL) {
 8008d34:	2e00      	cmp	r6, #0
 8008d36:	d1be      	bne.n	8008cb6 <netconn_recv_data_tcp+0x52>
 8008d38:	e7d9      	b.n	8008cee <netconn_recv_data_tcp+0x8a>
 8008d3a:	bf00      	nop
 8008d3c:	0800a239 	.word	0x0800a239
 8008d40:	0800a3cd 	.word	0x0800a3cd
 8008d44:	08015ca8 	.word	0x08015ca8
 8008d48:	08015d24 	.word	0x08015d24
 8008d4c:	08015bd0 	.word	0x08015bd0

08008d50 <netconn_new_with_proto_and_callback>:
{
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	460d      	mov	r5, r1
 8008d54:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8008d56:	4611      	mov	r1, r2
 8008d58:	f001 f850 	bl	8009dfc <netconn_alloc>
  if (conn != NULL) {
 8008d5c:	b398      	cbz	r0, 8008dc6 <netconn_new_with_proto_and_callback+0x76>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008d5e:	f100 060c 	add.w	r6, r0, #12
 8008d62:	4604      	mov	r4, r0
 8008d64:	4669      	mov	r1, sp
 8008d66:	4823      	ldr	r0, [pc, #140]	@ (8008df4 <netconn_new_with_proto_and_callback+0xa4>)
 8008d68:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008d6a:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8008d6e:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008d70:	f002 fa74 	bl	800b25c <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 8008d74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008d78:	4318      	orrs	r0, r3
 8008d7a:	b240      	sxtb	r0, r0
 8008d7c:	b910      	cbnz	r0, 8008d84 <netconn_new_with_proto_and_callback+0x34>
}
 8008d7e:	4620      	mov	r0, r4
 8008d80:	b008      	add	sp, #32
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008d84:	6863      	ldr	r3, [r4, #4]
 8008d86:	b12b      	cbz	r3, 8008d94 <netconn_new_with_proto_and_callback+0x44>
 8008d88:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <netconn_new_with_proto_and_callback+0xa8>)
 8008d8a:	22a3      	movs	r2, #163	@ 0xa3
 8008d8c:	491b      	ldr	r1, [pc, #108]	@ (8008dfc <netconn_new_with_proto_and_callback+0xac>)
 8008d8e:	481c      	ldr	r0, [pc, #112]	@ (8008e00 <netconn_new_with_proto_and_callback+0xb0>)
 8008d90:	f00b fdc0 	bl	8014914 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008d94:	f104 0510 	add.w	r5, r4, #16
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f00b fabb 	bl	8014314 <sys_mbox_valid>
 8008d9e:	b310      	cbz	r0, 8008de6 <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008da0:	f104 0014 	add.w	r0, r4, #20
 8008da4:	f00b fab6 	bl	8014314 <sys_mbox_valid>
 8008da8:	b9b0      	cbnz	r0, 8008dd8 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008daa:	4630      	mov	r0, r6
 8008dac:	f00b faf4 	bl	8014398 <sys_sem_valid>
 8008db0:	b158      	cbz	r0, 8008dca <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 8008db2:	4630      	mov	r0, r6
 8008db4:	f00b faec 	bl	8014390 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8008db8:	4628      	mov	r0, r5
 8008dba:	f00b fa67 	bl	801428c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	2007      	movs	r0, #7
 8008dc2:	f002 fe83 	bl	800bacc <memp_free>
      return NULL;
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	e7d9      	b.n	8008d7e <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008dca:	4b0b      	ldr	r3, [pc, #44]	@ (8008df8 <netconn_new_with_proto_and_callback+0xa8>)
 8008dcc:	22a9      	movs	r2, #169	@ 0xa9
 8008dce:	490d      	ldr	r1, [pc, #52]	@ (8008e04 <netconn_new_with_proto_and_callback+0xb4>)
 8008dd0:	480b      	ldr	r0, [pc, #44]	@ (8008e00 <netconn_new_with_proto_and_callback+0xb0>)
 8008dd2:	f00b fd9f 	bl	8014914 <iprintf>
 8008dd6:	e7ec      	b.n	8008db2 <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008dd8:	4b07      	ldr	r3, [pc, #28]	@ (8008df8 <netconn_new_with_proto_and_callback+0xa8>)
 8008dda:	22a6      	movs	r2, #166	@ 0xa6
 8008ddc:	490a      	ldr	r1, [pc, #40]	@ (8008e08 <netconn_new_with_proto_and_callback+0xb8>)
 8008dde:	4808      	ldr	r0, [pc, #32]	@ (8008e00 <netconn_new_with_proto_and_callback+0xb0>)
 8008de0:	f00b fd98 	bl	8014914 <iprintf>
 8008de4:	e7e1      	b.n	8008daa <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008de6:	4b04      	ldr	r3, [pc, #16]	@ (8008df8 <netconn_new_with_proto_and_callback+0xa8>)
 8008de8:	22a4      	movs	r2, #164	@ 0xa4
 8008dea:	4908      	ldr	r1, [pc, #32]	@ (8008e0c <netconn_new_with_proto_and_callback+0xbc>)
 8008dec:	4804      	ldr	r0, [pc, #16]	@ (8008e00 <netconn_new_with_proto_and_callback+0xb0>)
 8008dee:	f00b fd91 	bl	8014914 <iprintf>
 8008df2:	e7d5      	b.n	8008da0 <netconn_new_with_proto_and_callback+0x50>
 8008df4:	08009d95 	.word	0x08009d95
 8008df8:	08015ca8 	.word	0x08015ca8
 8008dfc:	08015d48 	.word	0x08015d48
 8008e00:	08015bd0 	.word	0x08015bd0
 8008e04:	08015da8 	.word	0x08015da8
 8008e08:	08015d84 	.word	0x08015d84
 8008e0c:	08015d6c 	.word	0x08015d6c

08008e10 <netconn_prepare_delete>:
  if (conn == NULL) {
 8008e10:	4603      	mov	r3, r0
 8008e12:	b1a8      	cbz	r0, 8008e40 <netconn_prepare_delete+0x30>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e14:	f04f 0c29 	mov.w	ip, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e18:	f100 020c 	add.w	r2, r0, #12
 8008e1c:	4809      	ldr	r0, [pc, #36]	@ (8008e44 <netconn_prepare_delete+0x34>)
{
 8008e1e:	b500      	push	{lr}
 8008e20:	b089      	sub	sp, #36	@ 0x24
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e22:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).conn = conn;
 8008e24:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e26:	f88d c009 	strb.w	ip, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e2a:	f002 fa17 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8008e2e:	b110      	cbz	r0, 8008e36 <netconn_prepare_delete+0x26>
}
 8008e30:	b009      	add	sp, #36	@ 0x24
 8008e32:	f85d fb04 	ldr.w	pc, [sp], #4
    return apimsg->err;
 8008e36:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8008e3a:	b009      	add	sp, #36	@ 0x24
 8008e3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	08009ff1 	.word	0x08009ff1

08008e48 <netconn_delete>:
  if (conn == NULL) {
 8008e48:	b1c8      	cbz	r0, 8008e7e <netconn_delete+0x36>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e4a:	2329      	movs	r3, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e4c:	f100 020c 	add.w	r2, r0, #12
{
 8008e50:	b510      	push	{r4, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	4604      	mov	r4, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e56:	480b      	ldr	r0, [pc, #44]	@ (8008e84 <netconn_delete+0x3c>)
 8008e58:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).conn = conn;
 8008e5a:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e5c:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e60:	f002 f9fc 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8008e64:	b108      	cbz	r0, 8008e6a <netconn_delete+0x22>
}
 8008e66:	b008      	add	sp, #32
 8008e68:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8008e6a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err != ERR_OK) {
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d1f9      	bne.n	8008e66 <netconn_delete+0x1e>
    netconn_free(conn);
 8008e72:	4620      	mov	r0, r4
 8008e74:	f001 f808 	bl	8009e88 <netconn_free>
    return ERR_OK;
 8008e78:	2000      	movs	r0, #0
}
 8008e7a:	b008      	add	sp, #32
 8008e7c:	bd10      	pop	{r4, pc}
    return ERR_OK;
 8008e7e:	2000      	movs	r0, #0
}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	08009ff1 	.word	0x08009ff1

08008e88 <netconn_getaddr>:
{
 8008e88:	b530      	push	{r4, r5, lr}
 8008e8a:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e8c:	b328      	cbz	r0, 8008eda <netconn_getaddr+0x52>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008e8e:	460c      	mov	r4, r1
 8008e90:	b1d9      	cbz	r1, 8008eca <netconn_getaddr+0x42>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008e92:	4615      	mov	r5, r2
 8008e94:	b17a      	cbz	r2, 8008eb6 <netconn_getaddr+0x2e>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e96:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8008e9a:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008e9c:	4669      	mov	r1, sp
 8008e9e:	4813      	ldr	r0, [pc, #76]	@ (8008eec <netconn_getaddr+0x64>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8008ea0:	f88d 3010 	strb.w	r3, [sp, #16]
  msg.msg.ad.port = port;
 8008ea4:	e9cd 4502 	strd	r4, r5, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008ea8:	f002 f9d8 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8008eac:	b908      	cbnz	r0, 8008eb2 <netconn_getaddr+0x2a>
    return apimsg->err;
 8008eae:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8008eb2:	b009      	add	sp, #36	@ 0x24
 8008eb4:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef0 <netconn_getaddr+0x68>)
 8008eb8:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8008ebc:	490d      	ldr	r1, [pc, #52]	@ (8008ef4 <netconn_getaddr+0x6c>)
 8008ebe:	480e      	ldr	r0, [pc, #56]	@ (8008ef8 <netconn_getaddr+0x70>)
 8008ec0:	f00b fd28 	bl	8014914 <iprintf>
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ec4:	f06f 000f 	mvn.w	r0, #15
 8008ec8:	e7f3      	b.n	8008eb2 <netconn_getaddr+0x2a>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008eca:	4b09      	ldr	r3, [pc, #36]	@ (8008ef0 <netconn_getaddr+0x68>)
 8008ecc:	f240 1213 	movw	r2, #275	@ 0x113
 8008ed0:	490a      	ldr	r1, [pc, #40]	@ (8008efc <netconn_getaddr+0x74>)
 8008ed2:	4809      	ldr	r0, [pc, #36]	@ (8008ef8 <netconn_getaddr+0x70>)
 8008ed4:	f00b fd1e 	bl	8014914 <iprintf>
 8008ed8:	e7f4      	b.n	8008ec4 <netconn_getaddr+0x3c>
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <netconn_getaddr+0x68>)
 8008edc:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008ee0:	4907      	ldr	r1, [pc, #28]	@ (8008f00 <netconn_getaddr+0x78>)
 8008ee2:	4805      	ldr	r0, [pc, #20]	@ (8008ef8 <netconn_getaddr+0x70>)
 8008ee4:	f00b fd16 	bl	8014914 <iprintf>
 8008ee8:	e7ec      	b.n	8008ec4 <netconn_getaddr+0x3c>
 8008eea:	bf00      	nop
 8008eec:	0800a341 	.word	0x0800a341
 8008ef0:	08015ca8 	.word	0x08015ca8
 8008ef4:	08015e04 	.word	0x08015e04
 8008ef8:	08015bd0 	.word	0x08015bd0
 8008efc:	08015de4 	.word	0x08015de4
 8008f00:	08015dc4 	.word	0x08015dc4

08008f04 <netconn_connect>:
{
 8008f04:	b500      	push	{lr}
 8008f06:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f08:	b1a0      	cbz	r0, 8008f34 <netconn_connect+0x30>
  if (addr == NULL) {
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4694      	mov	ip, r2
 8008f0e:	b179      	cbz	r1, 8008f30 <netconn_connect+0x2c>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008f10:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8008f14:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008f16:	4669      	mov	r1, sp
 8008f18:	480b      	ldr	r0, [pc, #44]	@ (8008f48 <netconn_connect+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f1a:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f1c:	f8ad c00c 	strh.w	ip, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008f20:	f002 f99c 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8008f24:	b908      	cbnz	r0, 8008f2a <netconn_connect+0x26>
    return apimsg->err;
 8008f26:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8008f2a:	b009      	add	sp, #36	@ 0x24
 8008f2c:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8008f30:	4b06      	ldr	r3, [pc, #24]	@ (8008f4c <netconn_connect+0x48>)
 8008f32:	e7ed      	b.n	8008f10 <netconn_connect+0xc>
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f34:	4b06      	ldr	r3, [pc, #24]	@ (8008f50 <netconn_connect+0x4c>)
 8008f36:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8008f3a:	4906      	ldr	r1, [pc, #24]	@ (8008f54 <netconn_connect+0x50>)
 8008f3c:	4806      	ldr	r0, [pc, #24]	@ (8008f58 <netconn_connect+0x54>)
 8008f3e:	f00b fce9 	bl	8014914 <iprintf>
 8008f42:	f06f 000f 	mvn.w	r0, #15
 8008f46:	e7f0      	b.n	8008f2a <netconn_connect+0x26>
 8008f48:	0800a101 	.word	0x0800a101
 8008f4c:	080189c0 	.word	0x080189c0
 8008f50:	08015ca8 	.word	0x08015ca8
 8008f54:	08015e24 	.word	0x08015e24
 8008f58:	08015bd0 	.word	0x08015bd0

08008f5c <netconn_disconnect>:
{
 8008f5c:	b500      	push	{lr}
 8008f5e:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f60:	b168      	cbz	r0, 8008f7e <netconn_disconnect+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 8008f62:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008f64:	f100 020c 	add.w	r2, r0, #12
 8008f68:	4669      	mov	r1, sp
 8008f6a:	480a      	ldr	r0, [pc, #40]	@ (8008f94 <netconn_disconnect+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 8008f6c:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008f6e:	f002 f975 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8008f72:	b908      	cbnz	r0, 8008f78 <netconn_disconnect+0x1c>
    return apimsg->err;
 8008f74:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8008f78:	b009      	add	sp, #36	@ 0x24
 8008f7a:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f7e:	4b06      	ldr	r3, [pc, #24]	@ (8008f98 <netconn_disconnect+0x3c>)
 8008f80:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8008f84:	4905      	ldr	r1, [pc, #20]	@ (8008f9c <netconn_disconnect+0x40>)
 8008f86:	4806      	ldr	r0, [pc, #24]	@ (8008fa0 <netconn_disconnect+0x44>)
 8008f88:	f00b fcc4 	bl	8014914 <iprintf>
 8008f8c:	f06f 000f 	mvn.w	r0, #15
 8008f90:	e7f2      	b.n	8008f78 <netconn_disconnect+0x1c>
 8008f92:	bf00      	nop
 8008f94:	0800a1d9 	.word	0x0800a1d9
 8008f98:	08015ca8 	.word	0x08015ca8
 8008f9c:	08015e44 	.word	0x08015e44
 8008fa0:	08015bd0 	.word	0x08015bd0

08008fa4 <netconn_tcp_recvd>:
{
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008fa8:	b198      	cbz	r0, 8008fd2 <netconn_tcp_recvd+0x2e>
 8008faa:	7802      	ldrb	r2, [r0, #0]
 8008fac:	4603      	mov	r3, r0
 8008fae:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8008fb2:	2a10      	cmp	r2, #16
 8008fb4:	d10d      	bne.n	8008fd2 <netconn_tcp_recvd+0x2e>
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8008fb6:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008fb8:	f100 020c 	add.w	r2, r0, #12
 8008fbc:	4669      	mov	r1, sp
 8008fbe:	480a      	ldr	r0, [pc, #40]	@ (8008fe8 <netconn_tcp_recvd+0x44>)
  msg->conn = conn;
 8008fc0:	9300      	str	r3, [sp, #0]
  msg->msg.r.len = len;
 8008fc2:	9402      	str	r4, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008fc4:	f002 f94a 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8008fc8:	b908      	cbnz	r0, 8008fce <netconn_tcp_recvd+0x2a>
    return apimsg->err;
 8008fca:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8008fce:	b008      	add	sp, #32
 8008fd0:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008fd2:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <netconn_tcp_recvd+0x48>)
 8008fd4:	f240 22b5 	movw	r2, #693	@ 0x2b5
 8008fd8:	4905      	ldr	r1, [pc, #20]	@ (8008ff0 <netconn_tcp_recvd+0x4c>)
 8008fda:	4806      	ldr	r0, [pc, #24]	@ (8008ff4 <netconn_tcp_recvd+0x50>)
 8008fdc:	f00b fc9a 	bl	8014914 <iprintf>
 8008fe0:	f06f 000f 	mvn.w	r0, #15
 8008fe4:	e7f3      	b.n	8008fce <netconn_tcp_recvd+0x2a>
 8008fe6:	bf00      	nop
 8008fe8:	0800a239 	.word	0x0800a239
 8008fec:	08015ca8 	.word	0x08015ca8
 8008ff0:	08015d24 	.word	0x08015d24
 8008ff4:	08015bd0 	.word	0x08015bd0

08008ff8 <netconn_recv_tcp_pbuf_flags>:
{
 8008ff8:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008ffa:	b140      	cbz	r0, 800900e <netconn_recv_tcp_pbuf_flags+0x16>
 8008ffc:	7803      	ldrb	r3, [r0, #0]
 8008ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009002:	2b10      	cmp	r3, #16
 8009004:	d103      	bne.n	800900e <netconn_recv_tcp_pbuf_flags+0x16>
}
 8009006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800900a:	f7ff be2b 	b.w	8008c64 <netconn_recv_data_tcp>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800900e:	4b05      	ldr	r3, [pc, #20]	@ (8009024 <netconn_recv_tcp_pbuf_flags+0x2c>)
 8009010:	f240 3225 	movw	r2, #805	@ 0x325
 8009014:	4904      	ldr	r1, [pc, #16]	@ (8009028 <netconn_recv_tcp_pbuf_flags+0x30>)
 8009016:	4805      	ldr	r0, [pc, #20]	@ (800902c <netconn_recv_tcp_pbuf_flags+0x34>)
 8009018:	f00b fc7c 	bl	8014914 <iprintf>
}
 800901c:	f06f 000f 	mvn.w	r0, #15
 8009020:	bd08      	pop	{r3, pc}
 8009022:	bf00      	nop
 8009024:	08015ca8 	.word	0x08015ca8
 8009028:	08015d24 	.word	0x08015d24
 800902c:	08015bd0 	.word	0x08015bd0

08009030 <netconn_recv_udp_raw_netbuf_flags>:
{
 8009030:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8009032:	b140      	cbz	r0, 8009046 <netconn_recv_udp_raw_netbuf_flags+0x16>
 8009034:	7803      	ldrb	r3, [r0, #0]
 8009036:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800903a:	2b10      	cmp	r3, #16
 800903c:	d003      	beq.n	8009046 <netconn_recv_udp_raw_netbuf_flags+0x16>
}
 800903e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009042:	f7ff bd81 	b.w	8008b48 <netconn_recv_data>
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8009046:	4b05      	ldr	r3, [pc, #20]	@ (800905c <netconn_recv_udp_raw_netbuf_flags+0x2c>)
 8009048:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800904c:	4904      	ldr	r1, [pc, #16]	@ (8009060 <netconn_recv_udp_raw_netbuf_flags+0x30>)
 800904e:	4805      	ldr	r0, [pc, #20]	@ (8009064 <netconn_recv_udp_raw_netbuf_flags+0x34>)
 8009050:	f00b fc60 	bl	8014914 <iprintf>
}
 8009054:	f06f 000f 	mvn.w	r0, #15
 8009058:	bd08      	pop	{r3, pc}
 800905a:	bf00      	nop
 800905c:	08015ca8 	.word	0x08015ca8
 8009060:	08015e68 	.word	0x08015e68
 8009064:	08015bd0 	.word	0x08015bd0

08009068 <netconn_send>:
{
 8009068:	b510      	push	{r4, lr}
 800906a:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800906c:	b170      	cbz	r0, 800908c <netconn_send+0x24>
  API_MSG_VAR_REF(msg).conn = conn;
 800906e:	4603      	mov	r3, r0
 8009070:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009072:	f100 020c 	add.w	r2, r0, #12
 8009076:	4669      	mov	r1, sp
 8009078:	4809      	ldr	r0, [pc, #36]	@ (80090a0 <netconn_send+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 800907a:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800907c:	9402      	str	r4, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800907e:	f002 f8ed 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009082:	b908      	cbnz	r0, 8009088 <netconn_send+0x20>
    return apimsg->err;
 8009084:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8009088:	b008      	add	sp, #32
 800908a:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800908c:	4b05      	ldr	r3, [pc, #20]	@ (80090a4 <netconn_send+0x3c>)
 800908e:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8009092:	4905      	ldr	r1, [pc, #20]	@ (80090a8 <netconn_send+0x40>)
 8009094:	4805      	ldr	r0, [pc, #20]	@ (80090ac <netconn_send+0x44>)
 8009096:	f00b fc3d 	bl	8014914 <iprintf>
 800909a:	f06f 000f 	mvn.w	r0, #15
 800909e:	e7f3      	b.n	8009088 <netconn_send+0x20>
 80090a0:	0800a1fd 	.word	0x0800a1fd
 80090a4:	08015ca8 	.word	0x08015ca8
 80090a8:	08015e94 	.word	0x08015e94
 80090ac:	08015bd0 	.word	0x08015bd0

080090b0 <netconn_write_vectors_partly>:
{
 80090b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090b2:	b089      	sub	sp, #36	@ 0x24
 80090b4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d05b      	beq.n	8009172 <netconn_write_vectors_partly+0xc2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80090ba:	7804      	ldrb	r4, [r0, #0]
 80090bc:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 80090c0:	2c10      	cmp	r4, #16
 80090c2:	d14e      	bne.n	8009162 <netconn_write_vectors_partly+0xb2>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80090c4:	7f04      	ldrb	r4, [r0, #28]
 80090c6:	f003 0604 	and.w	r6, r3, #4
 80090ca:	f004 0402 	and.w	r4, r4, #2
 80090ce:	4334      	orrs	r4, r6
 80090d0:	d016      	beq.n	8009100 <netconn_write_vectors_partly+0x50>
  if (dontblock && !bytes_written) {
 80090d2:	b18d      	cbz	r5, 80090f8 <netconn_write_vectors_partly+0x48>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80090d4:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 80090d6:	2a00      	cmp	r2, #0
 80090d8:	d038      	beq.n	800914c <netconn_write_vectors_partly+0x9c>
 80090da:	f04f 0c00 	mov.w	ip, #0
 80090de:	f101 0e04 	add.w	lr, r1, #4
  size = 0;
 80090e2:	4666      	mov	r6, ip
 80090e4:	e001      	b.n	80090ea <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 80090e6:	4562      	cmp	r2, ip
 80090e8:	d00c      	beq.n	8009104 <netconn_write_vectors_partly+0x54>
 80090ea:	f85e 403c 	ldr.w	r4, [lr, ip, lsl #3]
 80090ee:	f10c 0c01 	add.w	ip, ip, #1
 80090f2:	19a4      	adds	r4, r4, r6
    size += vectors[i].len;
 80090f4:	4626      	mov	r6, r4
    if (size < vectors[i].len) {
 80090f6:	d3f6      	bcc.n	80090e6 <netconn_write_vectors_partly+0x36>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80090f8:	f06f 0005 	mvn.w	r0, #5
}
 80090fc:	b009      	add	sp, #36	@ 0x24
 80090fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009100:	4627      	mov	r7, r4
 8009102:	e7e8      	b.n	80090d6 <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 8009104:	2c00      	cmp	r4, #0
 8009106:	d021      	beq.n	800914c <netconn_write_vectors_partly+0x9c>
  } else if (size > SSIZE_MAX) {
 8009108:	da03      	bge.n	8009112 <netconn_write_vectors_partly+0x62>
    if (!bytes_written) {
 800910a:	2d00      	cmp	r5, #0
 800910c:	d0f4      	beq.n	80090f8 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 800910e:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009112:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009116:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009118:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800911a:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800911c:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009120:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8009124:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009126:	4818      	ldr	r0, [pc, #96]	@ (8009188 <netconn_write_vectors_partly+0xd8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009128:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800912a:	e9cd 3604 	strd	r3, r6, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800912e:	f002 f895 	bl	800b25c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009132:	2800      	cmp	r0, #0
 8009134:	d1e2      	bne.n	80090fc <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 8009136:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err == ERR_OK) {
 800913a:	2800      	cmp	r0, #0
 800913c:	d1de      	bne.n	80090fc <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 800913e:	b10d      	cbz	r5, 8009144 <netconn_write_vectors_partly+0x94>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009140:	9b06      	ldr	r3, [sp, #24]
 8009142:	602b      	str	r3, [r5, #0]
    if (!dontblock) {
 8009144:	b917      	cbnz	r7, 800914c <netconn_write_vectors_partly+0x9c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009146:	9b06      	ldr	r3, [sp, #24]
 8009148:	42b3      	cmp	r3, r6
 800914a:	d102      	bne.n	8009152 <netconn_write_vectors_partly+0xa2>
    return ERR_OK;
 800914c:	2000      	movs	r0, #0
}
 800914e:	b009      	add	sp, #36	@ 0x24
 8009150:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009152:	4b0e      	ldr	r3, [pc, #56]	@ (800918c <netconn_write_vectors_partly+0xdc>)
 8009154:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009158:	490d      	ldr	r1, [pc, #52]	@ (8009190 <netconn_write_vectors_partly+0xe0>)
 800915a:	480e      	ldr	r0, [pc, #56]	@ (8009194 <netconn_write_vectors_partly+0xe4>)
 800915c:	f00b fbda 	bl	8014914 <iprintf>
 8009160:	e7f4      	b.n	800914c <netconn_write_vectors_partly+0x9c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009162:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <netconn_write_vectors_partly+0xdc>)
 8009164:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009168:	490b      	ldr	r1, [pc, #44]	@ (8009198 <netconn_write_vectors_partly+0xe8>)
 800916a:	480a      	ldr	r0, [pc, #40]	@ (8009194 <netconn_write_vectors_partly+0xe4>)
 800916c:	f00b fbd2 	bl	8014914 <iprintf>
 8009170:	e7c2      	b.n	80090f8 <netconn_write_vectors_partly+0x48>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009172:	4b06      	ldr	r3, [pc, #24]	@ (800918c <netconn_write_vectors_partly+0xdc>)
 8009174:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009178:	4908      	ldr	r1, [pc, #32]	@ (800919c <netconn_write_vectors_partly+0xec>)
 800917a:	4806      	ldr	r0, [pc, #24]	@ (8009194 <netconn_write_vectors_partly+0xe4>)
 800917c:	f00b fbca 	bl	8014914 <iprintf>
 8009180:	f06f 000f 	mvn.w	r0, #15
 8009184:	e7ba      	b.n	80090fc <netconn_write_vectors_partly+0x4c>
 8009186:	bf00      	nop
 8009188:	0800a275 	.word	0x0800a275
 800918c:	08015ca8 	.word	0x08015ca8
 8009190:	08015ef0 	.word	0x08015ef0
 8009194:	08015bd0 	.word	0x08015bd0
 8009198:	08015ecc 	.word	0x08015ecc
 800919c:	08015eb0 	.word	0x08015eb0

080091a0 <netconn_write_partly>:
{
 80091a0:	b510      	push	{r4, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	4614      	mov	r4, r2
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80091a6:	9a06      	ldr	r2, [sp, #24]
  vector.len = size;
 80091a8:	e9cd 1402 	strd	r1, r4, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80091ac:	9200      	str	r2, [sp, #0]
 80091ae:	a902      	add	r1, sp, #8
 80091b0:	2201      	movs	r2, #1
 80091b2:	f7ff ff7d 	bl	80090b0 <netconn_write_vectors_partly>
}
 80091b6:	b004      	add	sp, #16
 80091b8:	bd10      	pop	{r4, pc}
 80091ba:	bf00      	nop

080091bc <netconn_err>:
{
 80091bc:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 80091be:	4604      	mov	r4, r0
 80091c0:	b148      	cbz	r0, 80091d6 <netconn_err+0x1a>
  SYS_ARCH_PROTECT(lev);
 80091c2:	f00b f929 	bl	8014418 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 80091c6:	2300      	movs	r3, #0
  err = conn->pending_err;
 80091c8:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 80091cc:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80091ce:	f00b f92f 	bl	8014430 <sys_arch_unprotect>
  return err;
}
 80091d2:	4628      	mov	r0, r5
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80091d6:	4605      	mov	r5, r0
}
 80091d8:	4628      	mov	r0, r5
 80091da:	bd38      	pop	{r3, r4, r5, pc}

080091dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80091dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 80091e6:	4617      	mov	r7, r2
 80091e8:	461e      	mov	r6, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80091ea:	460d      	mov	r5, r1
 80091ec:	b379      	cbz	r1, 800924e <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80091ee:	2c00      	cmp	r4, #0
 80091f0:	d03b      	beq.n	800926a <recv_udp+0x8e>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	d005      	beq.n	8009204 <recv_udp+0x28>
 80091f8:	4b21      	ldr	r3, [pc, #132]	@ (8009280 <recv_udp+0xa4>)
 80091fa:	22ee      	movs	r2, #238	@ 0xee
 80091fc:	4921      	ldr	r1, [pc, #132]	@ (8009284 <recv_udp+0xa8>)
 80091fe:	4822      	ldr	r0, [pc, #136]	@ (8009288 <recv_udp+0xac>)
 8009200:	f00b fb88 	bl	8014914 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009204:	f104 0910 	add.w	r9, r4, #16
 8009208:	4648      	mov	r0, r9
 800920a:	f00b f883 	bl	8014314 <sys_mbox_valid>
 800920e:	b1c8      	cbz	r0, 8009244 <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009210:	2006      	movs	r0, #6
 8009212:	f002 fc15 	bl	800ba40 <memp_malloc>
  if (buf == NULL) {
 8009216:	4605      	mov	r5, r0
 8009218:	b1a0      	cbz	r0, 8009244 <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 800921a:	e9c0 7700 	strd	r7, r7, [r0]
    buf->ptr = p;
    ip_addr_set(&buf->addr, addr);
 800921e:	b106      	cbz	r6, 8009222 <recv_udp+0x46>
 8009220:	6836      	ldr	r6, [r6, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009222:	4629      	mov	r1, r5
    ip_addr_set(&buf->addr, addr);
 8009224:	60ae      	str	r6, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009226:	4648      	mov	r0, r9
    buf->port = port;
 8009228:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 800922c:	893e      	ldrh	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800922e:	f00b f837 	bl	80142a0 <sys_mbox_trypost>
 8009232:	4601      	mov	r1, r0
 8009234:	b990      	cbnz	r0, 800925c <recv_udp+0x80>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009236:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009238:	b1ab      	cbz	r3, 8009266 <recv_udp+0x8a>
 800923a:	4632      	mov	r2, r6
 800923c:	4620      	mov	r0, r4
  }
}
 800923e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009242:	4718      	bx	r3
    pbuf_free(p);
 8009244:	4638      	mov	r0, r7
}
 8009246:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800924a:	f002 bf73 	b.w	800c134 <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800924e:	4b0c      	ldr	r3, [pc, #48]	@ (8009280 <recv_udp+0xa4>)
 8009250:	22e5      	movs	r2, #229	@ 0xe5
 8009252:	490e      	ldr	r1, [pc, #56]	@ (800928c <recv_udp+0xb0>)
 8009254:	480c      	ldr	r0, [pc, #48]	@ (8009288 <recv_udp+0xac>)
 8009256:	f00b fb5d 	bl	8014914 <iprintf>
 800925a:	e7c8      	b.n	80091ee <recv_udp+0x12>
    netbuf_delete(buf);
 800925c:	4628      	mov	r0, r5
}
 800925e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8009262:	f001 b91f 	b.w	800a4a4 <netbuf_delete>
}
 8009266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800926a:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <recv_udp+0xa4>)
 800926c:	22e6      	movs	r2, #230	@ 0xe6
 800926e:	4908      	ldr	r1, [pc, #32]	@ (8009290 <recv_udp+0xb4>)
 8009270:	4805      	ldr	r0, [pc, #20]	@ (8009288 <recv_udp+0xac>)
 8009272:	f00b fb4f 	bl	8014914 <iprintf>
    pbuf_free(p);
 8009276:	4638      	mov	r0, r7
}
 8009278:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800927c:	f002 bf5a 	b.w	800c134 <pbuf_free>
 8009280:	08015f14 	.word	0x08015f14
 8009284:	08015f8c 	.word	0x08015f8c
 8009288:	08015bd0 	.word	0x08015bd0
 800928c:	08015f48 	.word	0x08015f48
 8009290:	08015f6c 	.word	0x08015f6c

08009294 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009294:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009296:	6844      	ldr	r4, [r0, #4]
{
 8009298:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 800929a:	4620      	mov	r0, r4
 800929c:	f003 fca0 	bl	800cbe0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80092a0:	4620      	mov	r0, r4
 80092a2:	4909      	ldr	r1, [pc, #36]	@ (80092c8 <setup_tcp+0x34>)
 80092a4:	f003 fca4 	bl	800cbf0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80092a8:	4620      	mov	r0, r4
 80092aa:	4908      	ldr	r1, [pc, #32]	@ (80092cc <setup_tcp+0x38>)
 80092ac:	f003 fcba 	bl	800cc24 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80092b0:	4620      	mov	r0, r4
 80092b2:	4907      	ldr	r1, [pc, #28]	@ (80092d0 <setup_tcp+0x3c>)
 80092b4:	2202      	movs	r2, #2
 80092b6:	f003 fcf5 	bl	800cca4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80092ba:	4620      	mov	r0, r4
 80092bc:	4905      	ldr	r1, [pc, #20]	@ (80092d4 <setup_tcp+0x40>)
}
 80092be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 80092c2:	f003 bcc9 	b.w	800cc58 <tcp_err>
 80092c6:	bf00      	nop
 80092c8:	08009b19 	.word	0x08009b19
 80092cc:	08009aa9 	.word	0x08009aa9
 80092d0:	08009a29 	.word	0x08009a29
 80092d4:	08009bf1 	.word	0x08009bf1

080092d8 <lwip_netconn_do_connected>:

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 80092d8:	2800      	cmp	r0, #0
 80092da:	f000 8082 	beq.w	80093e2 <lwip_netconn_do_connected+0x10a>
{
 80092de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80092e0:	7843      	ldrb	r3, [r0, #1]
 80092e2:	4604      	mov	r4, r0
 80092e4:	4615      	mov	r5, r2
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d006      	beq.n	80092f8 <lwip_netconn_do_connected+0x20>
 80092ea:	4b3f      	ldr	r3, [pc, #252]	@ (80093e8 <lwip_netconn_do_connected+0x110>)
 80092ec:	f240 5223 	movw	r2, #1315	@ 0x523
 80092f0:	493e      	ldr	r1, [pc, #248]	@ (80093ec <lwip_netconn_do_connected+0x114>)
 80092f2:	483f      	ldr	r0, [pc, #252]	@ (80093f0 <lwip_netconn_do_connected+0x118>)
 80092f4:	f00b fb0e 	bl	8014914 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80092f8:	6a26      	ldr	r6, [r4, #32]
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	d038      	beq.n	8009370 <lwip_netconn_do_connected+0x98>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
    conn->current_msg->err = err;
 80092fe:	7135      	strb	r5, [r6, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009300:	7823      	ldrb	r3, [r4, #0]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009302:	6836      	ldr	r6, [r6, #0]
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009308:	360c      	adds	r6, #12
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800930a:	2b10      	cmp	r3, #16
 800930c:	bf08      	it	eq
 800930e:	2d00      	cmpeq	r5, #0
 8009310:	bf0c      	ite	eq
 8009312:	2501      	moveq	r5, #1
 8009314:	2500      	movne	r5, #0
 8009316:	d053      	beq.n	80093c0 <lwip_netconn_do_connected+0xe8>
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009318:	7f22      	ldrb	r2, [r4, #28]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800931a:	f022 0304 	bic.w	r3, r2, #4
 800931e:	7723      	strb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
 8009320:	f002 0304 	and.w	r3, r2, #4
 8009324:	0752      	lsls	r2, r2, #29
 8009326:	d40d      	bmi.n	8009344 <lwip_netconn_do_connected+0x6c>
 8009328:	b965      	cbnz	r5, 8009344 <lwip_netconn_do_connected+0x6c>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  conn->state = NETCONN_NONE;
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800932a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  conn->current_msg = NULL;
 800932c:	6225      	str	r5, [r4, #32]
  conn->state = NETCONN_NONE;
 800932e:	7065      	strb	r5, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009330:	b11b      	cbz	r3, 800933a <lwip_netconn_do_connected+0x62>
 8009332:	462a      	mov	r2, r5
 8009334:	2102      	movs	r1, #2
 8009336:	4620      	mov	r0, r4
 8009338:	4798      	blx	r3

  if (was_blocking) {
    sys_sem_signal(op_completed_sem);
 800933a:	4630      	mov	r0, r6
 800933c:	f00b f824 	bl	8014388 <sys_sem_signal>
  }
  return ERR_OK;
 8009340:	2000      	movs	r0, #0
}
 8009342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009344:	fab3 f583 	clz	r5, r3
 8009348:	096d      	lsrs	r5, r5, #5
  LWIP_ASSERT("blocking connect state error",
 800934a:	2e00      	cmp	r6, #0
 800934c:	bf0c      	ite	eq
 800934e:	462b      	moveq	r3, r5
 8009350:	f045 0301 	orrne.w	r3, r5, #1
 8009354:	bb23      	cbnz	r3, 80093a0 <lwip_netconn_do_connected+0xc8>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009356:	6a67      	ldr	r7, [r4, #36]	@ 0x24
  conn->current_msg = NULL;
 8009358:	6223      	str	r3, [r4, #32]
  conn->state = NETCONN_NONE;
 800935a:	7063      	strb	r3, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800935c:	2f00      	cmp	r7, #0
 800935e:	d0ef      	beq.n	8009340 <lwip_netconn_do_connected+0x68>
 8009360:	2200      	movs	r2, #0
 8009362:	4620      	mov	r0, r4
 8009364:	2102      	movs	r1, #2
 8009366:	47b8      	blx	r7
  if (was_blocking) {
 8009368:	2d00      	cmp	r5, #0
 800936a:	d1e6      	bne.n	800933a <lwip_netconn_do_connected+0x62>
  return ERR_OK;
 800936c:	2000      	movs	r0, #0
}
 800936e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009370:	7f23      	ldrb	r3, [r4, #28]
 8009372:	0759      	lsls	r1, r3, #29
 8009374:	d529      	bpl.n	80093ca <lwip_netconn_do_connected+0xf2>
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009376:	7823      	ldrb	r3, [r4, #0]
 8009378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800937c:	2b10      	cmp	r3, #16
 800937e:	bf08      	it	eq
 8009380:	2d00      	cmpeq	r5, #0
 8009382:	bf0c      	ite	eq
 8009384:	2501      	moveq	r5, #1
 8009386:	2500      	movne	r5, #0
 8009388:	d01b      	beq.n	80093c2 <lwip_netconn_do_connected+0xea>
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800938a:	7f23      	ldrb	r3, [r4, #28]
 800938c:	f083 0504 	eor.w	r5, r3, #4
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009390:	f023 0304 	bic.w	r3, r3, #4
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009394:	f3c5 0580 	ubfx	r5, r5, #2, #1
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009398:	7723      	strb	r3, [r4, #28]
 800939a:	462b      	mov	r3, r5
  LWIP_ASSERT("blocking connect state error",
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0da      	beq.n	8009356 <lwip_netconn_do_connected+0x7e>
 80093a0:	4b11      	ldr	r3, [pc, #68]	@ (80093e8 <lwip_netconn_do_connected+0x110>)
 80093a2:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 80093a6:	4913      	ldr	r1, [pc, #76]	@ (80093f4 <lwip_netconn_do_connected+0x11c>)
 80093a8:	4811      	ldr	r0, [pc, #68]	@ (80093f0 <lwip_netconn_do_connected+0x118>)
 80093aa:	f00b fab3 	bl	8014914 <iprintf>
  conn->current_msg = NULL;
 80093ae:	2300      	movs	r3, #0
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80093b0:	6a67      	ldr	r7, [r4, #36]	@ 0x24
  conn->current_msg = NULL;
 80093b2:	6223      	str	r3, [r4, #32]
  conn->state = NETCONN_NONE;
 80093b4:	7063      	strb	r3, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80093b6:	2f00      	cmp	r7, #0
 80093b8:	d1d2      	bne.n	8009360 <lwip_netconn_do_connected+0x88>
  if (was_blocking) {
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	d0d6      	beq.n	800936c <lwip_netconn_do_connected+0x94>
 80093be:	e7bc      	b.n	800933a <lwip_netconn_do_connected+0x62>
 80093c0:	2500      	movs	r5, #0
    setup_tcp(conn);
 80093c2:	4620      	mov	r0, r4
 80093c4:	f7ff ff66 	bl	8009294 <setup_tcp>
 80093c8:	e7a6      	b.n	8009318 <lwip_netconn_do_connected+0x40>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80093ca:	4b07      	ldr	r3, [pc, #28]	@ (80093e8 <lwip_netconn_do_connected+0x110>)
 80093cc:	f240 5224 	movw	r2, #1316	@ 0x524
 80093d0:	4909      	ldr	r1, [pc, #36]	@ (80093f8 <lwip_netconn_do_connected+0x120>)
 80093d2:	4807      	ldr	r0, [pc, #28]	@ (80093f0 <lwip_netconn_do_connected+0x118>)
 80093d4:	f00b fa9e 	bl	8014914 <iprintf>
  if (conn->current_msg != NULL) {
 80093d8:	6a23      	ldr	r3, [r4, #32]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0cb      	beq.n	8009376 <lwip_netconn_do_connected+0x9e>
 80093de:	461e      	mov	r6, r3
 80093e0:	e78d      	b.n	80092fe <lwip_netconn_do_connected+0x26>
    return ERR_VAL;
 80093e2:	f06f 0005 	mvn.w	r0, #5
}
 80093e6:	4770      	bx	lr
 80093e8:	08015f14 	.word	0x08015f14
 80093ec:	08015fac 	.word	0x08015fac
 80093f0:	08015bd0 	.word	0x08015bd0
 80093f4:	0801600c 	.word	0x0801600c
 80093f8:	08015fcc 	.word	0x08015fcc

080093fc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009400:	4680      	mov	r8, r0
{
 8009402:	b083      	sub	sp, #12
 8009404:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009406:	2800      	cmp	r0, #0
 8009408:	f000 8140 	beq.w	800968c <lwip_netconn_do_writemore+0x290>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800940c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d006      	beq.n	8009422 <lwip_netconn_do_writemore+0x26>
 8009414:	4bab      	ldr	r3, [pc, #684]	@ (80096c4 <lwip_netconn_do_writemore+0x2c8>)
 8009416:	f240 6274 	movw	r2, #1652	@ 0x674
 800941a:	49ab      	ldr	r1, [pc, #684]	@ (80096c8 <lwip_netconn_do_writemore+0x2cc>)
 800941c:	48ab      	ldr	r0, [pc, #684]	@ (80096cc <lwip_netconn_do_writemore+0x2d0>)
 800941e:	f00b fa79 	bl	8014914 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009422:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 8138 	beq.w	800969c <lwip_netconn_do_writemore+0x2a0>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800942c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 813f 	beq.w	80096b4 <lwip_netconn_do_writemore+0x2b8>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009436:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800943a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 800943e:	4291      	cmp	r1, r2
 8009440:	f080 80cf 	bcs.w	80095e2 <lwip_netconn_do_writemore+0x1e6>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009444:	899a      	ldrh	r2, [r3, #12]
 8009446:	2a00      	cmp	r2, #0
 8009448:	f000 80c1 	beq.w	80095ce <lwip_netconn_do_writemore+0x1d2>

  apiflags = conn->current_msg->msg.w.apiflags;
 800944c:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800944e:	f898 901c 	ldrb.w	r9, [r8, #28]
 8009452:	f007 0204 	and.w	r2, r7, #4
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009456:	f8df b26c 	ldr.w	fp, [pc, #620]	@ 80096c4 <lwip_netconn_do_writemore+0x2c8>
 800945a:	f009 0902 	and.w	r9, r9, #2
 800945e:	f8df a284 	ldr.w	sl, [pc, #644]	@ 80096e4 <lwip_netconn_do_writemore+0x2e8>
 8009462:	9501      	str	r5, [sp, #4]
 8009464:	ea49 0902 	orr.w	r9, r9, r2
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	6919      	ldr	r1, [r3, #16]
 800946c:	e9d2 6c00 	ldrd	r6, ip, [r2]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009470:	ebac 0501 	sub.w	r5, ip, r1
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009474:	440e      	add	r6, r1
      if (diff > 0xffffUL) { /* max_u16_t */
 8009476:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800947a:	d371      	bcc.n	8009560 <lwip_netconn_do_writemore+0x164>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800947c:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 8009480:	f64f 74ff 	movw	r4, #65535	@ 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 8009484:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009488:	f8b2 e064 	ldrh.w	lr, [r2, #100]	@ 0x64
 800948c:	4610      	mov	r0, r2
      if (available < len) {
 800948e:	4574      	cmp	r4, lr
 8009490:	d908      	bls.n	80094a4 <lwip_netconn_do_writemore+0xa8>
        if (dontblock) {
 8009492:	f1b9 0f00 	cmp.w	r9, #0
 8009496:	f000 8088 	beq.w	80095aa <lwip_netconn_do_writemore+0x1ae>
          if (!len) {
 800949a:	f1be 0f00 	cmp.w	lr, #0
 800949e:	f000 80aa 	beq.w	80095f6 <lwip_netconn_do_writemore+0x1fa>
 80094a2:	4674      	mov	r4, lr
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80094a4:	4421      	add	r1, r4
 80094a6:	458c      	cmp	ip, r1
 80094a8:	d375      	bcc.n	8009596 <lwip_netconn_do_writemore+0x19a>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80094aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80094ae:	429c      	cmp	r4, r3
 80094b0:	d16c      	bne.n	800958c <lwip_netconn_do_writemore+0x190>
 80094b2:	429d      	cmp	r5, r3
 80094b4:	d96a      	bls.n	800958c <lwip_netconn_do_writemore+0x190>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
 80094b6:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 80094ba:	2501      	movs	r5, #1
      } else {
        write_more = 0;
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80094bc:	463b      	mov	r3, r7
 80094be:	4622      	mov	r2, r4
 80094c0:	4631      	mov	r1, r6
 80094c2:	f006 f91f 	bl	800f704 <tcp_write>
      if (err == ERR_OK) {
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d14c      	bne.n	8009564 <lwip_netconn_do_writemore+0x168>
        conn->current_msg->msg.w.offset += len;
 80094ca:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80094ce:	699a      	ldr	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80094d0:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 80094d2:	4422      	add	r2, r4
 80094d4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80094d6:	691a      	ldr	r2, [r3, #16]
 80094d8:	4414      	add	r4, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80094da:	684a      	ldr	r2, [r1, #4]
 80094dc:	4294      	cmp	r4, r2
        conn->current_msg->msg.w.vector_off += len;
 80094de:	611c      	str	r4, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80094e0:	d032      	beq.n	8009548 <lwip_netconn_do_writemore+0x14c>
            conn->current_msg->msg.w.vector++;
            conn->current_msg->msg.w.vector_off = 0;
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80094e2:	2d00      	cmp	r5, #0
 80094e4:	d1c0      	bne.n	8009468 <lwip_netconn_do_writemore+0x6c>
 80094e6:	4606      	mov	r6, r0
 80094e8:	9d01      	ldr	r5, [sp, #4]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	f040 80fb 	bne.w	80096e8 <lwip_netconn_do_writemore+0x2ec>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80094f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80094f6:	f640 3369 	movw	r3, #2921	@ 0xb69
 80094fa:	f8b2 1064 	ldrh.w	r1, [r2, #100]	@ 0x64
 80094fe:	4299      	cmp	r1, r3
 8009500:	d903      	bls.n	800950a <lwip_netconn_do_writemore+0x10e>
 8009502:	f8b2 3066 	ldrh.w	r3, [r2, #102]	@ 0x66
 8009506:	2b07      	cmp	r3, #7
 8009508:	d908      	bls.n	800951c <lwip_netconn_do_writemore+0x120>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800950a:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800950e:	b12b      	cbz	r3, 800951c <lwip_netconn_do_writemore+0x120>
 8009510:	2200      	movs	r2, #0
 8009512:	2103      	movs	r1, #3
 8009514:	4640      	mov	r0, r8
 8009516:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009518:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800951c:	2e00      	cmp	r6, #0
 800951e:	f000 8086 	beq.w	800962e <lwip_netconn_do_writemore+0x232>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009522:	4610      	mov	r0, r2
 8009524:	f006 fee6 	bl	80102f4 <tcp_output>
      if (out_err == ERR_RTE) {
 8009528:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 800952a:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800952c:	d020      	beq.n	8009570 <lwip_netconn_do_writemore+0x174>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
      } else if (dontblock) {
 800952e:	f1b9 0f00 	cmp.w	r9, #0
 8009532:	f000 808b 	beq.w	800964c <lwip_netconn_do_writemore+0x250>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009536:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	2a00      	cmp	r2, #0
 800953e:	bf14      	ite	ne
 8009540:	2600      	movne	r6, #0
 8009542:	f06f 0606 	mvneq.w	r6, #6
 8009546:	e015      	b.n	8009574 <lwip_netconn_do_writemore+0x178>
          conn->current_msg->msg.w.vector_cnt--;
 8009548:	899a      	ldrh	r2, [r3, #12]
 800954a:	3a01      	subs	r2, #1
 800954c:	b292      	uxth	r2, r2
 800954e:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009550:	2a00      	cmp	r2, #0
 8009552:	d0c6      	beq.n	80094e2 <lwip_netconn_do_writemore+0xe6>
            conn->current_msg->msg.w.vector++;
 8009554:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 8009556:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8009558:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 800955a:	2d00      	cmp	r5, #0
 800955c:	d184      	bne.n	8009468 <lwip_netconn_do_writemore+0x6c>
 800955e:	e7c2      	b.n	80094e6 <lwip_netconn_do_writemore+0xea>
        len = (u16_t)diff;
 8009560:	b2ac      	uxth	r4, r5
 8009562:	e78f      	b.n	8009484 <lwip_netconn_do_writemore+0x88>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	4606      	mov	r6, r0
 8009568:	9d01      	ldr	r5, [sp, #4]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b01      	cmp	r3, #1
 800956e:	d927      	bls.n	80095c0 <lwip_netconn_do_writemore+0x1c4>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009570:	f8d8 3020 	ldr.w	r3, [r8, #32]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009574:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8009576:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8009578:	2300      	movs	r3, #0
 800957a:	f8c8 3020 	str.w	r3, [r8, #32]
    conn->state = NETCONN_NONE;
 800957e:	f888 3001 	strb.w	r3, [r8, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009582:	bb05      	cbnz	r5, 80095c6 <lwip_netconn_do_writemore+0x1ca>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8009584:	2000      	movs	r0, #0
}
 8009586:	b003      	add	sp, #12
 8009588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((len == 0xffff && diff > 0xffffUL) ||
 800958c:	b2ad      	uxth	r5, r5
 800958e:	42a5      	cmp	r5, r4
 8009590:	d00f      	beq.n	80095b2 <lwip_netconn_do_writemore+0x1b6>
        write_more = 0;
 8009592:	2500      	movs	r5, #0
 8009594:	e792      	b.n	80094bc <lwip_netconn_do_writemore+0xc0>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009596:	465b      	mov	r3, fp
 8009598:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800959c:	4651      	mov	r1, sl
 800959e:	484b      	ldr	r0, [pc, #300]	@ (80096cc <lwip_netconn_do_writemore+0x2d0>)
 80095a0:	f00b f9b8 	bl	8014914 <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80095a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80095a8:	e77f      	b.n	80094aa <lwip_netconn_do_writemore+0xae>
          apiflags |= TCP_WRITE_FLAG_MORE;
 80095aa:	f047 0702 	orr.w	r7, r7, #2
 80095ae:	4674      	mov	r4, lr
 80095b0:	e778      	b.n	80094a4 <lwip_netconn_do_writemore+0xa8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80095b2:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80095b6:	899b      	ldrh	r3, [r3, #12]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	f63f af7c 	bhi.w	80094b6 <lwip_netconn_do_writemore+0xba>
 80095be:	e7e8      	b.n	8009592 <lwip_netconn_do_writemore+0x196>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80095c0:	f04f 36ff 	mov.w	r6, #4294967295
 80095c4:	e791      	b.n	80094ea <lwip_netconn_do_writemore+0xee>
      sys_sem_signal(op_completed_sem);
 80095c6:	300c      	adds	r0, #12
 80095c8:	f00a fede 	bl	8014388 <sys_sem_signal>
 80095cc:	e7da      	b.n	8009584 <lwip_netconn_do_writemore+0x188>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80095ce:	4b3d      	ldr	r3, [pc, #244]	@ (80096c4 <lwip_netconn_do_writemore+0x2c8>)
 80095d0:	f240 6279 	movw	r2, #1657	@ 0x679
 80095d4:	493e      	ldr	r1, [pc, #248]	@ (80096d0 <lwip_netconn_do_writemore+0x2d4>)
 80095d6:	483d      	ldr	r0, [pc, #244]	@ (80096cc <lwip_netconn_do_writemore+0x2d0>)
 80095d8:	f00b f99c 	bl	8014914 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 80095dc:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80095e0:	e734      	b.n	800944c <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80095e2:	4b38      	ldr	r3, [pc, #224]	@ (80096c4 <lwip_netconn_do_writemore+0x2c8>)
 80095e4:	f240 6277 	movw	r2, #1655	@ 0x677
 80095e8:	493a      	ldr	r1, [pc, #232]	@ (80096d4 <lwip_netconn_do_writemore+0x2d8>)
 80095ea:	4838      	ldr	r0, [pc, #224]	@ (80096cc <lwip_netconn_do_writemore+0x2d0>)
 80095ec:	f00b f992 	bl	8014914 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80095f0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80095f4:	e726      	b.n	8009444 <lwip_netconn_do_writemore+0x48>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80095f6:	6999      	ldr	r1, [r3, #24]
 80095f8:	9d01      	ldr	r5, [sp, #4]
 80095fa:	b961      	cbnz	r1, 8009616 <lwip_netconn_do_writemore+0x21a>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80095fc:	695a      	ldr	r2, [r3, #20]
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80095fe:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009602:	bb32      	cbnz	r2, 8009652 <lwip_netconn_do_writemore+0x256>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009604:	b124      	cbz	r4, 8009610 <lwip_netconn_do_writemore+0x214>
 8009606:	2103      	movs	r1, #3
 8009608:	4640      	mov	r0, r8
 800960a:	47a0      	blx	r4
    if (err == ERR_OK) {
 800960c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009610:	f06f 0606 	mvn.w	r6, #6
 8009614:	e7ae      	b.n	8009574 <lwip_netconn_do_writemore+0x178>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	4299      	cmp	r1, r3
 800961a:	d37b      	bcc.n	8009714 <lwip_netconn_do_writemore+0x318>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800961c:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8009620:	b34b      	cbz	r3, 8009676 <lwip_netconn_do_writemore+0x27a>
 8009622:	4672      	mov	r2, lr
 8009624:	2103      	movs	r1, #3
 8009626:	4640      	mov	r0, r8
 8009628:	4798      	blx	r3
    if (err == ERR_OK) {
 800962a:	f8d8 2004 	ldr.w	r2, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800962e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009632:	e9d3 3105 	ldrd	r3, r1, [r3, #20]
 8009636:	4299      	cmp	r1, r3
 8009638:	d01d      	beq.n	8009676 <lwip_netconn_do_writemore+0x27a>
 800963a:	f1b9 0f00 	cmp.w	r9, #0
 800963e:	d11a      	bne.n	8009676 <lwip_netconn_do_writemore+0x27a>
      out_err = tcp_output(conn->pcb.tcp);
 8009640:	4610      	mov	r0, r2
 8009642:	f006 fe57 	bl	80102f4 <tcp_output>
      if (out_err == ERR_RTE) {
 8009646:	1d02      	adds	r2, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 8009648:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800964a:	d091      	beq.n	8009570 <lwip_netconn_do_writemore+0x174>
    return ERR_MEM;
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e799      	b.n	8009586 <lwip_netconn_do_writemore+0x18a>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009652:	2c00      	cmp	r4, #0
 8009654:	d063      	beq.n	800971e <lwip_netconn_do_writemore+0x322>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009656:	f06f 0606 	mvn.w	r6, #6
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800965a:	2200      	movs	r2, #0
 800965c:	2103      	movs	r1, #3
 800965e:	4640      	mov	r0, r8
 8009660:	47a0      	blx	r4
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009662:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009666:	f043 0310 	orr.w	r3, r3, #16
 800966a:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 800966e:	2e00      	cmp	r6, #0
 8009670:	d163      	bne.n	800973a <lwip_netconn_do_writemore+0x33e>
 8009672:	f8d8 2004 	ldr.w	r2, [r8, #4]
      out_err = tcp_output(conn->pcb.tcp);
 8009676:	4610      	mov	r0, r2
 8009678:	f006 fe3c 	bl	80102f4 <tcp_output>
      if (out_err == ERR_RTE) {
 800967c:	1d01      	adds	r1, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 800967e:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8009680:	f43f af76 	beq.w	8009570 <lwip_netconn_do_writemore+0x174>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009684:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009688:	2600      	movs	r6, #0
 800968a:	e773      	b.n	8009574 <lwip_netconn_do_writemore+0x178>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800968c:	4b0d      	ldr	r3, [pc, #52]	@ (80096c4 <lwip_netconn_do_writemore+0x2c8>)
 800968e:	f240 6273 	movw	r2, #1651	@ 0x673
 8009692:	4911      	ldr	r1, [pc, #68]	@ (80096d8 <lwip_netconn_do_writemore+0x2dc>)
 8009694:	480d      	ldr	r0, [pc, #52]	@ (80096cc <lwip_netconn_do_writemore+0x2d0>)
 8009696:	f00b f93d 	bl	8014914 <iprintf>
 800969a:	e6b7      	b.n	800940c <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800969c:	4b09      	ldr	r3, [pc, #36]	@ (80096c4 <lwip_netconn_do_writemore+0x2c8>)
 800969e:	f240 6275 	movw	r2, #1653	@ 0x675
 80096a2:	490e      	ldr	r1, [pc, #56]	@ (80096dc <lwip_netconn_do_writemore+0x2e0>)
 80096a4:	4809      	ldr	r0, [pc, #36]	@ (80096cc <lwip_netconn_do_writemore+0x2d0>)
 80096a6:	f00b f935 	bl	8014914 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80096aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f aec1 	bne.w	8009436 <lwip_netconn_do_writemore+0x3a>
 80096b4:	4b03      	ldr	r3, [pc, #12]	@ (80096c4 <lwip_netconn_do_writemore+0x2c8>)
 80096b6:	f240 6276 	movw	r2, #1654	@ 0x676
 80096ba:	4909      	ldr	r1, [pc, #36]	@ (80096e0 <lwip_netconn_do_writemore+0x2e4>)
 80096bc:	4803      	ldr	r0, [pc, #12]	@ (80096cc <lwip_netconn_do_writemore+0x2d0>)
 80096be:	f00b f929 	bl	8014914 <iprintf>
 80096c2:	e6b8      	b.n	8009436 <lwip_netconn_do_writemore+0x3a>
 80096c4:	08015f14 	.word	0x08015f14
 80096c8:	0801603c 	.word	0x0801603c
 80096cc:	08015bd0 	.word	0x08015bd0
 80096d0:	080160d0 	.word	0x080160d0
 80096d4:	08016090 	.word	0x08016090
 80096d8:	0801602c 	.word	0x0801602c
 80096dc:	0801605c 	.word	0x0801605c
 80096e0:	08016078 	.word	0x08016078
 80096e4:	080160f8 	.word	0x080160f8
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80096e8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80096ec:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	f4bf aefe 	bcs.w	80094f2 <lwip_netconn_do_writemore+0xf6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80096f6:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 80096fa:	2c00      	cmp	r4, #0
 80096fc:	d1ad      	bne.n	800965a <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80096fe:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009702:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009706:	f043 0310 	orr.w	r3, r3, #16
 800970a:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 800970e:	2e00      	cmp	r6, #0
 8009710:	d0b1      	beq.n	8009676 <lwip_netconn_do_writemore+0x27a>
 8009712:	e706      	b.n	8009522 <lwip_netconn_do_writemore+0x126>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009714:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 8009718:	b144      	cbz	r4, 800972c <lwip_netconn_do_writemore+0x330>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800971a:	4676      	mov	r6, lr
 800971c:	e79d      	b.n	800965a <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800971e:	f898 201c 	ldrb.w	r2, [r8, #28]
 8009722:	f042 0210 	orr.w	r2, r2, #16
 8009726:	f888 201c 	strb.w	r2, [r8, #28]
    } else if (err == ERR_MEM) {
 800972a:	e771      	b.n	8009610 <lwip_netconn_do_writemore+0x214>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800972c:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009730:	f043 0310 	orr.w	r3, r3, #16
 8009734:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 8009738:	e79d      	b.n	8009676 <lwip_netconn_do_writemore+0x27a>
    } else if (err == ERR_MEM) {
 800973a:	3601      	adds	r6, #1
 800973c:	d004      	beq.n	8009748 <lwip_netconn_do_writemore+0x34c>
 800973e:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009742:	f06f 0606 	mvn.w	r6, #6
 8009746:	e715      	b.n	8009574 <lwip_netconn_do_writemore+0x178>
 8009748:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800974c:	e6e9      	b.n	8009522 <lwip_netconn_do_writemore+0x126>
 800974e:	bf00      	nop

08009750 <lwip_netconn_do_close_internal>:
{
 8009750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009754:	4604      	mov	r4, r0
{
 8009756:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009758:	2800      	cmp	r0, #0
 800975a:	f000 80e7 	beq.w	800992c <lwip_netconn_do_close_internal+0x1dc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800975e:	7823      	ldrb	r3, [r4, #0]
 8009760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009764:	2b10      	cmp	r3, #16
 8009766:	d006      	beq.n	8009776 <lwip_netconn_do_close_internal+0x26>
 8009768:	4ba4      	ldr	r3, [pc, #656]	@ (80099fc <lwip_netconn_do_close_internal+0x2ac>)
 800976a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800976e:	49a4      	ldr	r1, [pc, #656]	@ (8009a00 <lwip_netconn_do_close_internal+0x2b0>)
 8009770:	48a4      	ldr	r0, [pc, #656]	@ (8009a04 <lwip_netconn_do_close_internal+0x2b4>)
 8009772:	f00b f8cf 	bl	8014914 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009776:	7863      	ldrb	r3, [r4, #1]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d006      	beq.n	800978a <lwip_netconn_do_close_internal+0x3a>
 800977c:	4b9f      	ldr	r3, [pc, #636]	@ (80099fc <lwip_netconn_do_close_internal+0x2ac>)
 800977e:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8009782:	49a1      	ldr	r1, [pc, #644]	@ (8009a08 <lwip_netconn_do_close_internal+0x2b8>)
 8009784:	489f      	ldr	r0, [pc, #636]	@ (8009a04 <lwip_netconn_do_close_internal+0x2b4>)
 8009786:	f00b f8c5 	bl	8014914 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800978a:	6863      	ldr	r3, [r4, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 80b9 	beq.w	8009904 <lwip_netconn_do_close_internal+0x1b4>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009792:	6a23      	ldr	r3, [r4, #32]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80c0 	beq.w	800991a <lwip_netconn_do_close_internal+0x1ca>
  shut = conn->current_msg->msg.sd.shut;
 800979a:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 800979c:	6865      	ldr	r5, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 800979e:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80097a0:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80097a4:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80097a8:	d03d      	beq.n	8009826 <lwip_netconn_do_close_internal+0xd6>
  } else if (shut_rx &&
 80097aa:	b36f      	cbz	r7, 8009808 <lwip_netconn_do_close_internal+0xb8>
             ((tpcb->state == FIN_WAIT_1) ||
 80097ac:	7d2b      	ldrb	r3, [r5, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80097ae:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 80097b0:	2a01      	cmp	r2, #1
 80097b2:	d978      	bls.n	80098a6 <lwip_netconn_do_close_internal+0x156>
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d076      	beq.n	80098a6 <lwip_netconn_do_close_internal+0x156>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80097b8:	f1b8 0f00 	cmp.w	r8, #0
 80097bc:	f040 80be 	bne.w	800993c <lwip_netconn_do_close_internal+0x1ec>
  if (tpcb->state == LISTEN) {
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d06b      	beq.n	800989c <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 80097c4:	4641      	mov	r1, r8
 80097c6:	4628      	mov	r0, r5
 80097c8:	f003 fa12 	bl	800cbf0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80097cc:	4641      	mov	r1, r8
 80097ce:	4628      	mov	r0, r5
 80097d0:	f003 fa5c 	bl	800cc8c <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80097d4:	4642      	mov	r2, r8
 80097d6:	4639      	mov	r1, r7
 80097d8:	4628      	mov	r0, r5
 80097da:	f004 f8a9 	bl	800d930 <tcp_shutdown>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80097de:	6a23      	ldr	r3, [r4, #32]
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80097e0:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 80097e2:	2800      	cmp	r0, #0
 80097e4:	f000 8088 	beq.w	80098f8 <lwip_netconn_do_close_internal+0x1a8>
    if (err == ERR_MEM) {
 80097e8:	1c41      	adds	r1, r0, #1
 80097ea:	d17e      	bne.n	80098ea <lwip_netconn_do_close_internal+0x19a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80097ec:	7a5a      	ldrb	r2, [r3, #9]
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	f040 80e0 	bne.w	80099b4 <lwip_netconn_do_close_internal+0x264>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80097f4:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80097f6:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80097f8:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80097fa:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 80097fc:	7062      	strb	r2, [r4, #1]
    if (delayed)
 80097fe:	2e00      	cmp	r6, #0
 8009800:	d145      	bne.n	800988e <lwip_netconn_do_close_internal+0x13e>
    return ERR_OK;
 8009802:	2000      	movs	r0, #0
}
 8009804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009808:	f1b8 0f00 	cmp.w	r8, #0
 800980c:	d043      	beq.n	8009896 <lwip_netconn_do_close_internal+0x146>
 800980e:	8b6b      	ldrh	r3, [r5, #26]
 8009810:	06d8      	lsls	r0, r3, #27
 8009812:	f100 8097 	bmi.w	8009944 <lwip_netconn_do_close_internal+0x1f4>
  if (tpcb->state == LISTEN) {
 8009816:	7d2b      	ldrb	r3, [r5, #20]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d03f      	beq.n	800989c <lwip_netconn_do_close_internal+0x14c>
      tcp_sent(tpcb, NULL);
 800981c:	4639      	mov	r1, r7
 800981e:	4628      	mov	r0, r5
 8009820:	f003 fa00 	bl	800cc24 <tcp_sent>
    if (shut_close) {
 8009824:	e7d6      	b.n	80097d4 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 8009826:	2100      	movs	r1, #0
 8009828:	4628      	mov	r0, r5
 800982a:	f003 f9d9 	bl	800cbe0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800982e:	7d2b      	ldrb	r3, [r5, #20]
 8009830:	2b01      	cmp	r3, #1
 8009832:	f040 80a8 	bne.w	8009986 <lwip_netconn_do_close_internal+0x236>
    tcp_accept(tpcb, NULL);
 8009836:	2100      	movs	r1, #0
 8009838:	4628      	mov	r0, r5
 800983a:	f003 fa27 	bl	800cc8c <tcp_accept>
      err = tcp_close(tpcb);
 800983e:	4628      	mov	r0, r5
 8009840:	f004 f854 	bl	800d8ec <tcp_close>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009844:	6a23      	ldr	r3, [r4, #32]
      err = tcp_close(tpcb);
 8009846:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 8009848:	2800      	cmp	r0, #0
 800984a:	d14c      	bne.n	80098e6 <lwip_netconn_do_close_internal+0x196>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800984c:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800984e:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009850:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8009852:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009854:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    conn->current_msg = NULL;
 8009856:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 8009858:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 800985a:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800985c:	2b00      	cmp	r3, #0
 800985e:	d07f      	beq.n	8009960 <lwip_netconn_do_close_internal+0x210>
 8009860:	2104      	movs	r1, #4
 8009862:	4620      	mov	r0, r4
 8009864:	4798      	blx	r3
      if (shut_rx) {
 8009866:	b137      	cbz	r7, 8009876 <lwip_netconn_do_close_internal+0x126>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009868:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0c7      	beq.n	80097fe <lwip_netconn_do_close_internal+0xae>
 800986e:	2200      	movs	r2, #0
 8009870:	4620      	mov	r0, r4
 8009872:	4611      	mov	r1, r2
 8009874:	4798      	blx	r3
      if (shut_tx) {
 8009876:	f1b8 0f00 	cmp.w	r8, #0
 800987a:	d0c0      	beq.n	80097fe <lwip_netconn_do_close_internal+0xae>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800987c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0bd      	beq.n	80097fe <lwip_netconn_do_close_internal+0xae>
 8009882:	2200      	movs	r2, #0
 8009884:	4620      	mov	r0, r4
 8009886:	2102      	movs	r1, #2
 8009888:	4798      	blx	r3
    if (delayed)
 800988a:	2e00      	cmp	r6, #0
 800988c:	d0b9      	beq.n	8009802 <lwip_netconn_do_close_internal+0xb2>
      sys_sem_signal(op_completed_sem);
 800988e:	4628      	mov	r0, r5
 8009890:	f00a fd7a 	bl	8014388 <sys_sem_signal>
 8009894:	e7b5      	b.n	8009802 <lwip_netconn_do_close_internal+0xb2>
  if (tpcb->state == LISTEN) {
 8009896:	7d2b      	ldrb	r3, [r5, #20]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d19b      	bne.n	80097d4 <lwip_netconn_do_close_internal+0x84>
    tcp_accept(tpcb, NULL);
 800989c:	2100      	movs	r1, #0
 800989e:	4628      	mov	r0, r5
 80098a0:	f003 f9f4 	bl	800cc8c <tcp_accept>
  if (shut_close) {
 80098a4:	e796      	b.n	80097d4 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 80098a6:	2100      	movs	r1, #0
 80098a8:	4628      	mov	r0, r5
 80098aa:	f003 f999 	bl	800cbe0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 80098ae:	7d2b      	ldrb	r3, [r5, #20]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d0c0      	beq.n	8009836 <lwip_netconn_do_close_internal+0xe6>
      tcp_recv(tpcb, NULL);
 80098b4:	2100      	movs	r1, #0
 80098b6:	4628      	mov	r0, r5
 80098b8:	f003 f99a 	bl	800cbf0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80098bc:	2100      	movs	r1, #0
 80098be:	4628      	mov	r0, r5
 80098c0:	f003 f9e4 	bl	800cc8c <tcp_accept>
    if (shut_tx) {
 80098c4:	f1b8 0f00 	cmp.w	r8, #0
 80098c8:	d003      	beq.n	80098d2 <lwip_netconn_do_close_internal+0x182>
      tcp_sent(tpcb, NULL);
 80098ca:	2100      	movs	r1, #0
 80098cc:	4628      	mov	r0, r5
 80098ce:	f003 f9a9 	bl	800cc24 <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 80098d2:	2200      	movs	r2, #0
 80098d4:	4628      	mov	r0, r5
 80098d6:	4611      	mov	r1, r2
 80098d8:	f003 f9e4 	bl	800cca4 <tcp_poll>
      tcp_err(tpcb, NULL);
 80098dc:	2100      	movs	r1, #0
 80098de:	4628      	mov	r0, r5
 80098e0:	f003 f9ba 	bl	800cc58 <tcp_err>
  if (shut_close) {
 80098e4:	e7ab      	b.n	800983e <lwip_netconn_do_close_internal+0xee>
    if (err == ERR_MEM) {
 80098e6:	3001      	adds	r0, #1
 80098e8:	d056      	beq.n	8009998 <lwip_netconn_do_close_internal+0x248>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098ea:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80098ec:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098ee:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098f0:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80098f2:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80098f4:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80098f6:	e782      	b.n	80097fe <lwip_netconn_do_close_internal+0xae>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098f8:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80098fa:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098fc:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80098fe:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 8009900:	7060      	strb	r0, [r4, #1]
 8009902:	e7b0      	b.n	8009866 <lwip_netconn_do_close_internal+0x116>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009904:	4b3d      	ldr	r3, [pc, #244]	@ (80099fc <lwip_netconn_do_close_internal+0x2ac>)
 8009906:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800990a:	4940      	ldr	r1, [pc, #256]	@ (8009a0c <lwip_netconn_do_close_internal+0x2bc>)
 800990c:	483d      	ldr	r0, [pc, #244]	@ (8009a04 <lwip_netconn_do_close_internal+0x2b4>)
 800990e:	f00b f801 	bl	8014914 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009912:	6a23      	ldr	r3, [r4, #32]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f47f af40 	bne.w	800979a <lwip_netconn_do_close_internal+0x4a>
 800991a:	4b38      	ldr	r3, [pc, #224]	@ (80099fc <lwip_netconn_do_close_internal+0x2ac>)
 800991c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009920:	493b      	ldr	r1, [pc, #236]	@ (8009a10 <lwip_netconn_do_close_internal+0x2c0>)
 8009922:	4838      	ldr	r0, [pc, #224]	@ (8009a04 <lwip_netconn_do_close_internal+0x2b4>)
 8009924:	f00a fff6 	bl	8014914 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8009928:	6a23      	ldr	r3, [r4, #32]
 800992a:	e736      	b.n	800979a <lwip_netconn_do_close_internal+0x4a>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800992c:	4b33      	ldr	r3, [pc, #204]	@ (80099fc <lwip_netconn_do_close_internal+0x2ac>)
 800992e:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8009932:	4938      	ldr	r1, [pc, #224]	@ (8009a14 <lwip_netconn_do_close_internal+0x2c4>)
 8009934:	4833      	ldr	r0, [pc, #204]	@ (8009a04 <lwip_netconn_do_close_internal+0x2b4>)
 8009936:	f00a ffed 	bl	8014914 <iprintf>
 800993a:	e710      	b.n	800975e <lwip_netconn_do_close_internal+0xe>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800993c:	8b69      	ldrh	r1, [r5, #26]
 800993e:	f011 0910 	ands.w	r9, r1, #16
 8009942:	d011      	beq.n	8009968 <lwip_netconn_do_close_internal+0x218>
    tcp_arg(tpcb, NULL);
 8009944:	2100      	movs	r1, #0
 8009946:	4628      	mov	r0, r5
 8009948:	f003 f94a 	bl	800cbe0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800994c:	7d2b      	ldrb	r3, [r5, #20]
 800994e:	2b01      	cmp	r3, #1
 8009950:	f43f af71 	beq.w	8009836 <lwip_netconn_do_close_internal+0xe6>
    if (shut_rx) {
 8009954:	2f00      	cmp	r7, #0
 8009956:	d1ad      	bne.n	80098b4 <lwip_netconn_do_close_internal+0x164>
    if (shut_tx) {
 8009958:	f1b8 0f00 	cmp.w	r8, #0
 800995c:	d0b9      	beq.n	80098d2 <lwip_netconn_do_close_internal+0x182>
 800995e:	e7b4      	b.n	80098ca <lwip_netconn_do_close_internal+0x17a>
      if (shut_rx) {
 8009960:	2f00      	cmp	r7, #0
 8009962:	f47f af4c 	bne.w	80097fe <lwip_netconn_do_close_internal+0xae>
 8009966:	e786      	b.n	8009876 <lwip_netconn_do_close_internal+0x126>
  if (tpcb->state == LISTEN) {
 8009968:	2b01      	cmp	r3, #1
 800996a:	d097      	beq.n	800989c <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 800996c:	4649      	mov	r1, r9
 800996e:	4628      	mov	r0, r5
 8009970:	f003 f93e 	bl	800cbf0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009974:	4649      	mov	r1, r9
 8009976:	4628      	mov	r0, r5
 8009978:	f003 f988 	bl	800cc8c <tcp_accept>
      tcp_sent(tpcb, NULL);
 800997c:	4649      	mov	r1, r9
 800997e:	4628      	mov	r0, r5
 8009980:	f003 f950 	bl	800cc24 <tcp_sent>
    if (shut_close) {
 8009984:	e726      	b.n	80097d4 <lwip_netconn_do_close_internal+0x84>
      tcp_recv(tpcb, NULL);
 8009986:	4628      	mov	r0, r5
 8009988:	2100      	movs	r1, #0
 800998a:	f003 f931 	bl	800cbf0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800998e:	2100      	movs	r1, #0
 8009990:	4628      	mov	r0, r5
 8009992:	f003 f97b 	bl	800cc8c <tcp_accept>
    if (shut_tx) {
 8009996:	e798      	b.n	80098ca <lwip_netconn_do_close_internal+0x17a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009998:	f893 9009 	ldrb.w	r9, [r3, #9]
 800999c:	f1b9 0f00 	cmp.w	r9, #0
 80099a0:	d108      	bne.n	80099b4 <lwip_netconn_do_close_internal+0x264>
          tcp_abort(tpcb);
 80099a2:	4628      	mov	r0, r5
 80099a4:	f003 fde0 	bl	800d568 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099a8:	6a23      	ldr	r3, [r4, #32]
 80099aa:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80099ac:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099b0:	350c      	adds	r5, #12
      if (shut_close) {
 80099b2:	e74e      	b.n	8009852 <lwip_netconn_do_close_internal+0x102>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80099b4:	7d2b      	ldrb	r3, [r5, #20]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d012      	beq.n	80099e0 <lwip_netconn_do_close_internal+0x290>
    if (shut_tx) {
 80099ba:	f1b8 0f00 	cmp.w	r8, #0
 80099be:	d117      	bne.n	80099f0 <lwip_netconn_do_close_internal+0x2a0>
    tcp_poll(tpcb, poll_tcp, 1);
 80099c0:	2201      	movs	r2, #1
 80099c2:	4915      	ldr	r1, [pc, #84]	@ (8009a18 <lwip_netconn_do_close_internal+0x2c8>)
 80099c4:	4628      	mov	r0, r5
 80099c6:	f003 f96d 	bl	800cca4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80099ca:	4914      	ldr	r1, [pc, #80]	@ (8009a1c <lwip_netconn_do_close_internal+0x2cc>)
 80099cc:	4628      	mov	r0, r5
 80099ce:	f003 f943 	bl	800cc58 <tcp_err>
    tcp_arg(tpcb, conn);
 80099d2:	4628      	mov	r0, r5
 80099d4:	4621      	mov	r1, r4
 80099d6:	f003 f903 	bl	800cbe0 <tcp_arg>
  return err;
 80099da:	f04f 30ff 	mov.w	r0, #4294967295
 80099de:	e711      	b.n	8009804 <lwip_netconn_do_close_internal+0xb4>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80099e0:	4b06      	ldr	r3, [pc, #24]	@ (80099fc <lwip_netconn_do_close_internal+0x2ac>)
 80099e2:	f240 4241 	movw	r2, #1089	@ 0x441
 80099e6:	490e      	ldr	r1, [pc, #56]	@ (8009a20 <lwip_netconn_do_close_internal+0x2d0>)
 80099e8:	4806      	ldr	r0, [pc, #24]	@ (8009a04 <lwip_netconn_do_close_internal+0x2b4>)
 80099ea:	f00a ff93 	bl	8014914 <iprintf>
 80099ee:	e7e4      	b.n	80099ba <lwip_netconn_do_close_internal+0x26a>
      tcp_sent(tpcb, sent_tcp);
 80099f0:	490c      	ldr	r1, [pc, #48]	@ (8009a24 <lwip_netconn_do_close_internal+0x2d4>)
 80099f2:	4628      	mov	r0, r5
 80099f4:	f003 f916 	bl	800cc24 <tcp_sent>
 80099f8:	e7e2      	b.n	80099c0 <lwip_netconn_do_close_internal+0x270>
 80099fa:	bf00      	nop
 80099fc:	08015f14 	.word	0x08015f14
 8009a00:	08016124 	.word	0x08016124
 8009a04:	08015bd0 	.word	0x08015bd0
 8009a08:	08016144 	.word	0x08016144
 8009a0c:	08016168 	.word	0x08016168
 8009a10:	0801605c 	.word	0x0801605c
 8009a14:	08015e58 	.word	0x08015e58
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009bf1 	.word	0x08009bf1
 8009a20:	0801617c 	.word	0x0801617c
 8009a24:	08009aa9 	.word	0x08009aa9

08009a28 <poll_tcp>:
{
 8009a28:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	b368      	cbz	r0, 8009a8a <poll_tcp+0x62>
  if (conn->state == NETCONN_WRITE) {
 8009a2e:	7861      	ldrb	r1, [r4, #1]
 8009a30:	2901      	cmp	r1, #1
 8009a32:	d026      	beq.n	8009a82 <poll_tcp+0x5a>
  } else if (conn->state == NETCONN_CLOSE) {
 8009a34:	2904      	cmp	r1, #4
 8009a36:	d019      	beq.n	8009a6c <poll_tcp+0x44>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009a38:	7f23      	ldrb	r3, [r4, #28]
 8009a3a:	06da      	lsls	r2, r3, #27
 8009a3c:	d514      	bpl.n	8009a68 <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a3e:	6862      	ldr	r2, [r4, #4]
 8009a40:	b192      	cbz	r2, 8009a68 <poll_tcp+0x40>
 8009a42:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 8009a46:	f640 3169 	movw	r1, #2921	@ 0xb69
 8009a4a:	4288      	cmp	r0, r1
 8009a4c:	d90c      	bls.n	8009a68 <poll_tcp+0x40>
 8009a4e:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 8009a52:	2a07      	cmp	r2, #7
 8009a54:	d808      	bhi.n	8009a68 <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a56:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a5a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a5c:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a5e:	b11d      	cbz	r5, 8009a68 <poll_tcp+0x40>
 8009a60:	2200      	movs	r2, #0
 8009a62:	2102      	movs	r1, #2
 8009a64:	4620      	mov	r0, r4
 8009a66:	47a8      	blx	r5
}
 8009a68:	2000      	movs	r0, #0
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009a6c:	6a23      	ldr	r3, [r4, #32]
 8009a6e:	b11b      	cbz	r3, 8009a78 <poll_tcp+0x50>
 8009a70:	7a5a      	ldrb	r2, [r3, #9]
 8009a72:	b10a      	cbz	r2, 8009a78 <poll_tcp+0x50>
      conn->current_msg->msg.sd.polls_left--;
 8009a74:	3a01      	subs	r2, #1
 8009a76:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009a78:	2101      	movs	r1, #1
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f7ff fe68 	bl	8009750 <lwip_netconn_do_close_internal>
 8009a80:	e7da      	b.n	8009a38 <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7ff fcba 	bl	80093fc <lwip_netconn_do_writemore>
 8009a88:	e7d6      	b.n	8009a38 <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a8a:	4b04      	ldr	r3, [pc, #16]	@ (8009a9c <poll_tcp+0x74>)
 8009a8c:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009a90:	4903      	ldr	r1, [pc, #12]	@ (8009aa0 <poll_tcp+0x78>)
 8009a92:	4804      	ldr	r0, [pc, #16]	@ (8009aa4 <poll_tcp+0x7c>)
 8009a94:	f00a ff3e 	bl	8014914 <iprintf>
 8009a98:	e7c9      	b.n	8009a2e <poll_tcp+0x6>
 8009a9a:	bf00      	nop
 8009a9c:	08015f14 	.word	0x08015f14
 8009aa0:	0801602c 	.word	0x0801602c
 8009aa4:	08015bd0 	.word	0x08015bd0

08009aa8 <sent_tcp>:
{
 8009aa8:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009aaa:	b1f0      	cbz	r0, 8009aea <sent_tcp+0x42>
    if (conn->state == NETCONN_WRITE) {
 8009aac:	7841      	ldrb	r1, [r0, #1]
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	2901      	cmp	r1, #1
 8009ab4:	d022      	beq.n	8009afc <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 8009ab6:	2904      	cmp	r1, #4
 8009ab8:	d023      	beq.n	8009b02 <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009aba:	6863      	ldr	r3, [r4, #4]
 8009abc:	b19b      	cbz	r3, 8009ae6 <sent_tcp+0x3e>
 8009abe:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8009ac2:	f640 3269 	movw	r2, #2921	@ 0xb69
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	d90d      	bls.n	8009ae6 <sent_tcp+0x3e>
 8009aca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009ace:	2b07      	cmp	r3, #7
 8009ad0:	d809      	bhi.n	8009ae6 <sent_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009ad2:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009ad4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009ad6:	f023 0310 	bic.w	r3, r3, #16
 8009ada:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009adc:	b11e      	cbz	r6, 8009ae6 <sent_tcp+0x3e>
 8009ade:	462a      	mov	r2, r5
 8009ae0:	2102      	movs	r1, #2
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	47b0      	blx	r6
}
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009aea:	4b08      	ldr	r3, [pc, #32]	@ (8009b0c <sent_tcp+0x64>)
 8009aec:	f240 1293 	movw	r2, #403	@ 0x193
 8009af0:	4907      	ldr	r1, [pc, #28]	@ (8009b10 <sent_tcp+0x68>)
 8009af2:	4808      	ldr	r0, [pc, #32]	@ (8009b14 <sent_tcp+0x6c>)
 8009af4:	f00a ff0e 	bl	8014914 <iprintf>
}
 8009af8:	2000      	movs	r0, #0
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009afc:	f7ff fc7e 	bl	80093fc <lwip_netconn_do_writemore>
 8009b00:	e7db      	b.n	8009aba <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009b02:	2101      	movs	r1, #1
 8009b04:	f7ff fe24 	bl	8009750 <lwip_netconn_do_close_internal>
 8009b08:	e7d7      	b.n	8009aba <sent_tcp+0x12>
 8009b0a:	bf00      	nop
 8009b0c:	08015f14 	.word	0x08015f14
 8009b10:	0801602c 	.word	0x0801602c
 8009b14:	08015bd0 	.word	0x08015bd0

08009b18 <recv_tcp>:
{
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	4604      	mov	r4, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009b1c:	460f      	mov	r7, r1
{
 8009b1e:	4615      	mov	r5, r2
 8009b20:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009b22:	2900      	cmp	r1, #0
 8009b24:	d037      	beq.n	8009b96 <recv_tcp+0x7e>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009b26:	2c00      	cmp	r4, #0
 8009b28:	d03e      	beq.n	8009ba8 <recv_tcp+0x90>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009b2a:	bb4e      	cbnz	r6, 8009b80 <recv_tcp+0x68>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	42bb      	cmp	r3, r7
 8009b30:	d006      	beq.n	8009b40 <recv_tcp+0x28>
 8009b32:	4b28      	ldr	r3, [pc, #160]	@ (8009bd4 <recv_tcp+0xbc>)
 8009b34:	f240 1235 	movw	r2, #309	@ 0x135
 8009b38:	4927      	ldr	r1, [pc, #156]	@ (8009bd8 <recv_tcp+0xc0>)
 8009b3a:	4828      	ldr	r0, [pc, #160]	@ (8009bdc <recv_tcp+0xc4>)
 8009b3c:	f00a feea 	bl	8014914 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009b40:	f104 0610 	add.w	r6, r4, #16
 8009b44:	4630      	mov	r0, r6
 8009b46:	f00a fbe5 	bl	8014314 <sys_mbox_valid>
 8009b4a:	b178      	cbz	r0, 8009b6c <recv_tcp+0x54>
  if (p != NULL) {
 8009b4c:	b305      	cbz	r5, 8009b90 <recv_tcp+0x78>
    len = p->tot_len;
 8009b4e:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009b50:	4629      	mov	r1, r5
 8009b52:	4630      	mov	r0, r6
 8009b54:	f00a fba4 	bl	80142a0 <sys_mbox_trypost>
 8009b58:	4601      	mov	r1, r0
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d137      	bne.n	8009bce <recv_tcp+0xb6>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009b5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b60:	b113      	cbz	r3, 8009b68 <recv_tcp+0x50>
 8009b62:	463a      	mov	r2, r7
 8009b64:	4620      	mov	r0, r4
 8009b66:	4798      	blx	r3
    return ERR_OK;
 8009b68:	2000      	movs	r0, #0
}
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (p != NULL) {
 8009b6c:	2d00      	cmp	r5, #0
 8009b6e:	d0fb      	beq.n	8009b68 <recv_tcp+0x50>
      tcp_recved(pcb, p->tot_len);
 8009b70:	4638      	mov	r0, r7
 8009b72:	8929      	ldrh	r1, [r5, #8]
 8009b74:	f002 fefe 	bl	800c974 <tcp_recved>
      pbuf_free(p);
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f002 fadb 	bl	800c134 <pbuf_free>
 8009b7e:	e7f3      	b.n	8009b68 <recv_tcp+0x50>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009b80:	4b14      	ldr	r3, [pc, #80]	@ (8009bd4 <recv_tcp+0xbc>)
 8009b82:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009b86:	4916      	ldr	r1, [pc, #88]	@ (8009be0 <recv_tcp+0xc8>)
 8009b88:	4814      	ldr	r0, [pc, #80]	@ (8009bdc <recv_tcp+0xc4>)
 8009b8a:	f00a fec3 	bl	8014914 <iprintf>
  if (conn == NULL) {
 8009b8e:	e7cd      	b.n	8009b2c <recv_tcp+0x14>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009b90:	4d14      	ldr	r5, [pc, #80]	@ (8009be4 <recv_tcp+0xcc>)
    len = 0;
 8009b92:	2700      	movs	r7, #0
 8009b94:	e7dc      	b.n	8009b50 <recv_tcp+0x38>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009b96:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd4 <recv_tcp+0xbc>)
 8009b98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009b9c:	4912      	ldr	r1, [pc, #72]	@ (8009be8 <recv_tcp+0xd0>)
 8009b9e:	480f      	ldr	r0, [pc, #60]	@ (8009bdc <recv_tcp+0xc4>)
 8009ba0:	f00a feb8 	bl	8014914 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009ba4:	2c00      	cmp	r4, #0
 8009ba6:	d1c0      	bne.n	8009b2a <recv_tcp+0x12>
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd4 <recv_tcp+0xbc>)
 8009baa:	f240 122d 	movw	r2, #301	@ 0x12d
 8009bae:	490f      	ldr	r1, [pc, #60]	@ (8009bec <recv_tcp+0xd4>)
 8009bb0:	480a      	ldr	r0, [pc, #40]	@ (8009bdc <recv_tcp+0xc4>)
 8009bb2:	f00a feaf 	bl	8014914 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009bb6:	b916      	cbnz	r6, 8009bbe <recv_tcp+0xa6>
    return ERR_VAL;
 8009bb8:	f06f 0005 	mvn.w	r0, #5
}
 8009bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009bbe:	4b05      	ldr	r3, [pc, #20]	@ (8009bd4 <recv_tcp+0xbc>)
 8009bc0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009bc4:	4906      	ldr	r1, [pc, #24]	@ (8009be0 <recv_tcp+0xc8>)
 8009bc6:	4805      	ldr	r0, [pc, #20]	@ (8009bdc <recv_tcp+0xc4>)
 8009bc8:	f00a fea4 	bl	8014914 <iprintf>
  if (conn == NULL) {
 8009bcc:	e7f4      	b.n	8009bb8 <recv_tcp+0xa0>
    return ERR_MEM;
 8009bce:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd4:	08015f14 	.word	0x08015f14
 8009bd8:	080161fc 	.word	0x080161fc
 8009bdc:	08015bd0 	.word	0x08015bd0
 8009be0:	080161c4 	.word	0x080161c4
 8009be4:	080163c8 	.word	0x080163c8
 8009be8:	080161a0 	.word	0x080161a0
 8009bec:	080161dc 	.word	0x080161dc

08009bf0 <err_tcp>:
{
 8009bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009bf4:	4604      	mov	r4, r0
{
 8009bf6:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d073      	beq.n	8009ce4 <err_tcp+0xf4>
  SYS_ARCH_PROTECT(lev);
 8009bfc:	f00a fc0c 	bl	8014418 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009c00:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 8009c02:	2600      	movs	r6, #0
  old_state = conn->state;
 8009c04:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009c06:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8009c0a:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8009c0c:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009c0e:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 8009c10:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8009c12:	f00a fc0d 	bl	8014430 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009c16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c18:	b17b      	cbz	r3, 8009c3a <err_tcp+0x4a>
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	2104      	movs	r1, #4
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009c22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c24:	b14b      	cbz	r3, 8009c3a <err_tcp+0x4a>
 8009c26:	4632      	mov	r2, r6
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c30:	b11b      	cbz	r3, 8009c3a <err_tcp+0x4a>
 8009c32:	4632      	mov	r2, r6
 8009c34:	2102      	movs	r1, #2
 8009c36:	4620      	mov	r0, r4
 8009c38:	4798      	blx	r3
  switch (err) {
 8009c3a:	f105 030f 	add.w	r3, r5, #15
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d83b      	bhi.n	8009cbc <err_tcp+0xcc>
 8009c44:	4a34      	ldr	r2, [pc, #208]	@ (8009d18 <err_tcp+0x128>)
 8009c46:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c4a:	f104 0610 	add.w	r6, r4, #16
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f00a fb60 	bl	8014314 <sys_mbox_valid>
 8009c54:	bb68      	cbnz	r0, 8009cb2 <err_tcp+0xc2>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009c56:	f104 0614 	add.w	r6, r4, #20
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f00a fb5a 	bl	8014314 <sys_mbox_valid>
 8009c60:	bb10      	cbnz	r0, 8009ca8 <err_tcp+0xb8>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009c62:	1efb      	subs	r3, r7, #3
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d901      	bls.n	8009c6c <err_tcp+0x7c>
 8009c68:	2f01      	cmp	r7, #1
 8009c6a:	d119      	bne.n	8009ca0 <err_tcp+0xb0>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009c6c:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009c6e:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8009c72:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009c74:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8009c76:	d415      	bmi.n	8009ca4 <err_tcp+0xb4>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c78:	6a23      	ldr	r3, [r4, #32]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d042      	beq.n	8009d04 <err_tcp+0x114>
      if (old_state == NETCONN_CLOSE) {
 8009c7e:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c80:	681e      	ldr	r6, [r3, #0]
 8009c82:	bf08      	it	eq
 8009c84:	2500      	moveq	r5, #0
 8009c86:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 8009c88:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f00a fb84 	bl	8014398 <sys_sem_valid>
 8009c90:	b380      	cbz	r0, 8009cf4 <err_tcp+0x104>
      conn->current_msg = NULL;
 8009c92:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8009c94:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 8009c96:	6223      	str	r3, [r4, #32]
}
 8009c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8009c9c:	f00a bb74 	b.w	8014388 <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009ca0:	6a23      	ldr	r3, [r4, #32]
 8009ca2:	b97b      	cbnz	r3, 8009cc4 <err_tcp+0xd4>
}
 8009ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009ca8:	4641      	mov	r1, r8
 8009caa:	4630      	mov	r0, r6
 8009cac:	f00a faf8 	bl	80142a0 <sys_mbox_trypost>
 8009cb0:	e7d7      	b.n	8009c62 <err_tcp+0x72>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	f00a faf3 	bl	80142a0 <sys_mbox_trypost>
 8009cba:	e7cc      	b.n	8009c56 <err_tcp+0x66>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009cbc:	b95d      	cbnz	r5, 8009cd6 <err_tcp+0xe6>
{
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	e7c2      	b.n	8009c4a <err_tcp+0x5a>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009cc4:	4b15      	ldr	r3, [pc, #84]	@ (8009d1c <err_tcp+0x12c>)
 8009cc6:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009cca:	4915      	ldr	r1, [pc, #84]	@ (8009d20 <err_tcp+0x130>)
 8009ccc:	4815      	ldr	r0, [pc, #84]	@ (8009d24 <err_tcp+0x134>)
}
 8009cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009cd2:	f00a be1f 	b.w	8014914 <iprintf>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009cd6:	4b11      	ldr	r3, [pc, #68]	@ (8009d1c <err_tcp+0x12c>)
 8009cd8:	227d      	movs	r2, #125	@ 0x7d
 8009cda:	4913      	ldr	r1, [pc, #76]	@ (8009d28 <err_tcp+0x138>)
 8009cdc:	4811      	ldr	r0, [pc, #68]	@ (8009d24 <err_tcp+0x134>)
 8009cde:	f00a fe19 	bl	8014914 <iprintf>
 8009ce2:	e7ec      	b.n	8009cbe <err_tcp+0xce>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8009d1c <err_tcp+0x12c>)
 8009ce6:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009cea:	4910      	ldr	r1, [pc, #64]	@ (8009d2c <err_tcp+0x13c>)
 8009cec:	480d      	ldr	r0, [pc, #52]	@ (8009d24 <err_tcp+0x134>)
 8009cee:	f00a fe11 	bl	8014914 <iprintf>
 8009cf2:	e783      	b.n	8009bfc <err_tcp+0xc>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009cf4:	4b09      	ldr	r3, [pc, #36]	@ (8009d1c <err_tcp+0x12c>)
 8009cf6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009cfa:	490d      	ldr	r1, [pc, #52]	@ (8009d30 <err_tcp+0x140>)
 8009cfc:	4809      	ldr	r0, [pc, #36]	@ (8009d24 <err_tcp+0x134>)
 8009cfe:	f00a fe09 	bl	8014914 <iprintf>
 8009d02:	e7c6      	b.n	8009c92 <err_tcp+0xa2>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009d04:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <err_tcp+0x12c>)
 8009d06:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009d0a:	490a      	ldr	r1, [pc, #40]	@ (8009d34 <err_tcp+0x144>)
 8009d0c:	4805      	ldr	r0, [pc, #20]	@ (8009d24 <err_tcp+0x134>)
 8009d0e:	f00a fe01 	bl	8014914 <iprintf>
        conn->current_msg->err = ERR_OK;
 8009d12:	6a23      	ldr	r3, [r4, #32]
 8009d14:	e7b3      	b.n	8009c7e <err_tcp+0x8e>
 8009d16:	bf00      	nop
 8009d18:	080163bc 	.word	0x080163bc
 8009d1c:	08015f14 	.word	0x08015f14
 8009d20:	08016248 	.word	0x08016248
 8009d24:	08015bd0 	.word	0x08015bd0
 8009d28:	0801621c 	.word	0x0801621c
 8009d2c:	0801602c 	.word	0x0801602c
 8009d30:	0801622c 	.word	0x0801622c
 8009d34:	0801605c 	.word	0x0801605c

08009d38 <lwip_netconn_is_err_msg>:
{
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	b179      	cbz	r1, 8009d60 <lwip_netconn_is_err_msg+0x28>
  if (msg == &netconn_aborted) {
 8009d40:	4b0e      	ldr	r3, [pc, #56]	@ (8009d7c <lwip_netconn_is_err_msg+0x44>)
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d007      	beq.n	8009d56 <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_reset) {
 8009d46:	4b0e      	ldr	r3, [pc, #56]	@ (8009d80 <lwip_netconn_is_err_msg+0x48>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	d010      	beq.n	8009d6e <lwip_netconn_is_err_msg+0x36>
  } else if (msg == &netconn_closed) {
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d84 <lwip_netconn_is_err_msg+0x4c>)
 8009d4e:	429c      	cmp	r4, r3
 8009d50:	d010      	beq.n	8009d74 <lwip_netconn_is_err_msg+0x3c>
  return 0;
 8009d52:	2000      	movs	r0, #0
}
 8009d54:	bd38      	pop	{r3, r4, r5, pc}
 8009d56:	f06f 030c 	mvn.w	r3, #12
    return 1;
 8009d5a:	2001      	movs	r0, #1
    *err = ERR_RST;
 8009d5c:	702b      	strb	r3, [r5, #0]
}
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8009d60:	4b09      	ldr	r3, [pc, #36]	@ (8009d88 <lwip_netconn_is_err_msg+0x50>)
 8009d62:	2285      	movs	r2, #133	@ 0x85
 8009d64:	4909      	ldr	r1, [pc, #36]	@ (8009d8c <lwip_netconn_is_err_msg+0x54>)
 8009d66:	480a      	ldr	r0, [pc, #40]	@ (8009d90 <lwip_netconn_is_err_msg+0x58>)
 8009d68:	f00a fdd4 	bl	8014914 <iprintf>
 8009d6c:	e7e8      	b.n	8009d40 <lwip_netconn_is_err_msg+0x8>
 8009d6e:	f06f 030d 	mvn.w	r3, #13
 8009d72:	e7f2      	b.n	8009d5a <lwip_netconn_is_err_msg+0x22>
 8009d74:	f06f 030e 	mvn.w	r3, #14
 8009d78:	e7ef      	b.n	8009d5a <lwip_netconn_is_err_msg+0x22>
 8009d7a:	bf00      	nop
 8009d7c:	080163ca 	.word	0x080163ca
 8009d80:	080163c9 	.word	0x080163c9
 8009d84:	080163c8 	.word	0x080163c8
 8009d88:	08015f14 	.word	0x08015f14
 8009d8c:	08016264 	.word	0x08016264
 8009d90:	08015bd0 	.word	0x08015bd0

08009d94 <lwip_netconn_do_newconn>:
{
 8009d94:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8009d96:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8009d98:	6805      	ldr	r5, [r0, #0]
{
 8009d9a:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8009d9c:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009d9e:	6868      	ldr	r0, [r5, #4]
 8009da0:	b100      	cbz	r0, 8009da4 <lwip_netconn_do_newconn+0x10>
}
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009da4:	782b      	ldrb	r3, [r5, #0]
 8009da6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009daa:	2b10      	cmp	r3, #16
 8009dac:	d016      	beq.n	8009ddc <lwip_netconn_do_newconn+0x48>
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d11f      	bne.n	8009df2 <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009db2:	f007 fa09 	bl	80111c8 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8009db6:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009db8:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009dba:	6850      	ldr	r0, [r2, #4]
 8009dbc:	b158      	cbz	r0, 8009dd6 <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009dbe:	7813      	ldrb	r3, [r2, #0]
 8009dc0:	2b22      	cmp	r3, #34	@ 0x22
 8009dc2:	d101      	bne.n	8009dc8 <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009dc8:	490b      	ldr	r1, [pc, #44]	@ (8009df8 <lwip_netconn_do_newconn+0x64>)
 8009dca:	f007 f9a3 	bl	8011114 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e5      	bne.n	8009da2 <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 8009dd6:	23ff      	movs	r3, #255	@ 0xff
 8009dd8:	7123      	strb	r3, [r4, #4]
}
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009ddc:	f003 fcb4 	bl	800d748 <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 8009de0:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009de2:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	d0f5      	beq.n	8009dd6 <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff fa52 	bl	8009294 <setup_tcp>
 8009df0:	e7ed      	b.n	8009dce <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 8009df2:	23fa      	movs	r3, #250	@ 0xfa
 8009df4:	7123      	strb	r3, [r4, #4]
}
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	080091dd 	.word	0x080091dd

08009dfc <netconn_alloc>:
{
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009e00:	2007      	movs	r0, #7
{
 8009e02:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009e04:	f001 fe1c 	bl	800ba40 <memp_malloc>
  if (conn == NULL) {
 8009e08:	b380      	cbz	r0, 8009e6c <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 8009e0a:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4604      	mov	r4, r0
  conn->type = t;
 8009e12:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 8009e14:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 8009e16:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 8009e18:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8009e1a:	d001      	beq.n	8009e20 <netconn_alloc+0x24>
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d11a      	bne.n	8009e56 <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009e20:	f104 0710 	add.w	r7, r4, #16
 8009e24:	2106      	movs	r1, #6
 8009e26:	4638      	mov	r0, r7
 8009e28:	f00a fa22 	bl	8014270 <sys_mbox_new>
 8009e2c:	4601      	mov	r1, r0
 8009e2e:	b9c8      	cbnz	r0, 8009e64 <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009e30:	f104 000c 	add.w	r0, r4, #12
 8009e34:	f00a fa78 	bl	8014328 <sys_sem_new>
 8009e38:	4605      	mov	r5, r0
 8009e3a:	b9d0      	cbnz	r0, 8009e72 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009e3c:	f104 0014 	add.w	r0, r4, #20
 8009e40:	f00a fa6e 	bl	8014320 <sys_mbox_set_invalid>
  conn->socket       = -1;
 8009e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e48:	4620      	mov	r0, r4
  conn->state        = NETCONN_NONE;
 8009e4a:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 8009e4c:	6266      	str	r6, [r4, #36]	@ 0x24
  conn->socket       = -1;
 8009e4e:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 8009e50:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 8009e52:	7725      	strb	r5, [r4, #28]
}
 8009e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009e56:	4b09      	ldr	r3, [pc, #36]	@ (8009e7c <netconn_alloc+0x80>)
 8009e58:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8009e5c:	4908      	ldr	r1, [pc, #32]	@ (8009e80 <netconn_alloc+0x84>)
 8009e5e:	4809      	ldr	r0, [pc, #36]	@ (8009e84 <netconn_alloc+0x88>)
 8009e60:	f00a fd58 	bl	8014914 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8009e64:	4621      	mov	r1, r4
 8009e66:	2007      	movs	r0, #7
 8009e68:	f001 fe30 	bl	800bacc <memp_free>
    return NULL;
 8009e6c:	2400      	movs	r4, #0
}
 8009e6e:	4620      	mov	r0, r4
 8009e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 8009e72:	4638      	mov	r0, r7
 8009e74:	f00a fa0a 	bl	801428c <sys_mbox_free>
    goto free_and_return;
 8009e78:	e7f4      	b.n	8009e64 <netconn_alloc+0x68>
 8009e7a:	bf00      	nop
 8009e7c:	08015f14 	.word	0x08015f14
 8009e80:	08016270 	.word	0x08016270
 8009e84:	08015bd0 	.word	0x08015bd0

08009e88 <netconn_free>:
{
 8009e88:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009e8a:	6843      	ldr	r3, [r0, #4]
{
 8009e8c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009e8e:	b133      	cbz	r3, 8009e9e <netconn_free+0x16>
 8009e90:	4b19      	ldr	r3, [pc, #100]	@ (8009ef8 <netconn_free+0x70>)
 8009e92:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009e96:	4919      	ldr	r1, [pc, #100]	@ (8009efc <netconn_free+0x74>)
 8009e98:	4819      	ldr	r0, [pc, #100]	@ (8009f00 <netconn_free+0x78>)
 8009e9a:	f00a fd3b 	bl	8014914 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009e9e:	f104 0010 	add.w	r0, r4, #16
 8009ea2:	f00a fa37 	bl	8014314 <sys_mbox_valid>
 8009ea6:	b990      	cbnz	r0, 8009ece <netconn_free+0x46>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009ea8:	f104 0014 	add.w	r0, r4, #20
 8009eac:	f00a fa32 	bl	8014314 <sys_mbox_valid>
 8009eb0:	b9d0      	cbnz	r0, 8009ee8 <netconn_free+0x60>
  sys_sem_free(&conn->op_completed);
 8009eb2:	f104 050c 	add.w	r5, r4, #12
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f00a fa6a 	bl	8014390 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f00a fa71 	bl	80143a4 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	2007      	movs	r0, #7
}
 8009ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8009eca:	f001 bdff 	b.w	800bacc <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009ece:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef8 <netconn_free+0x70>)
 8009ed0:	f240 3223 	movw	r2, #803	@ 0x323
 8009ed4:	490b      	ldr	r1, [pc, #44]	@ (8009f04 <netconn_free+0x7c>)
 8009ed6:	480a      	ldr	r0, [pc, #40]	@ (8009f00 <netconn_free+0x78>)
 8009ed8:	f00a fd1c 	bl	8014914 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009edc:	f104 0014 	add.w	r0, r4, #20
 8009ee0:	f00a fa18 	bl	8014314 <sys_mbox_valid>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d0e4      	beq.n	8009eb2 <netconn_free+0x2a>
 8009ee8:	4b03      	ldr	r3, [pc, #12]	@ (8009ef8 <netconn_free+0x70>)
 8009eea:	f240 3226 	movw	r2, #806	@ 0x326
 8009eee:	4906      	ldr	r1, [pc, #24]	@ (8009f08 <netconn_free+0x80>)
 8009ef0:	4803      	ldr	r0, [pc, #12]	@ (8009f00 <netconn_free+0x78>)
 8009ef2:	f00a fd0f 	bl	8014914 <iprintf>
 8009ef6:	e7dc      	b.n	8009eb2 <netconn_free+0x2a>
 8009ef8:	08015f14 	.word	0x08015f14
 8009efc:	08016298 	.word	0x08016298
 8009f00:	08015bd0 	.word	0x08015bd0
 8009f04:	080162c8 	.word	0x080162c8
 8009f08:	08016304 	.word	0x08016304

08009f0c <netconn_drain>:
{
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009f10:	f100 0610 	add.w	r6, r0, #16
{
 8009f14:	b082      	sub	sp, #8
 8009f16:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f00a f9fb 	bl	8014314 <sys_mbox_valid>
 8009f1e:	b300      	cbz	r0, 8009f62 <netconn_drain+0x56>
 8009f20:	ad01      	add	r5, sp, #4
  } else if (msg == &netconn_reset) {
 8009f22:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8009fe8 <netconn_drain+0xdc>
  if (msg == &netconn_aborted) {
 8009f26:	4f2f      	ldr	r7, [pc, #188]	@ (8009fe4 <netconn_drain+0xd8>)
  } else if (msg == &netconn_closed) {
 8009f28:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 8009fec <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f00a f9e4 	bl	80142fc <sys_arch_mbox_tryfetch>
 8009f34:	3001      	adds	r0, #1
 8009f36:	d00e      	beq.n	8009f56 <netconn_drain+0x4a>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009f38:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009f3a:	9a01      	ldr	r2, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          netbuf_delete((struct netbuf *)mem);
 8009f40:	4610      	mov	r0, r2
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009f42:	2b10      	cmp	r3, #16
 8009f44:	d045      	beq.n	8009fd2 <netconn_drain+0xc6>
          netbuf_delete((struct netbuf *)mem);
 8009f46:	f000 faad 	bl	800a4a4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f00a f9d5 	bl	80142fc <sys_arch_mbox_tryfetch>
 8009f52:	3001      	adds	r0, #1
 8009f54:	d1f0      	bne.n	8009f38 <netconn_drain+0x2c>
    sys_mbox_free(&conn->recvmbox);
 8009f56:	4630      	mov	r0, r6
 8009f58:	f00a f998 	bl	801428c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f00a f9df 	bl	8014320 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009f62:	3414      	adds	r4, #20
 8009f64:	4620      	mov	r0, r4
 8009f66:	f00a f9d5 	bl	8014314 <sys_mbox_valid>
 8009f6a:	b378      	cbz	r0, 8009fcc <netconn_drain+0xc0>
 8009f6c:	ad01      	add	r5, sp, #4
  if (msg == &netconn_aborted) {
 8009f6e:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8009fe4 <netconn_drain+0xd8>
  } else if (msg == &netconn_reset) {
 8009f72:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8009fe8 <netconn_drain+0xdc>
  } else if (msg == &netconn_closed) {
 8009f76:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8009fec <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f00a f9bd 	bl	80142fc <sys_arch_mbox_tryfetch>
 8009f82:	3001      	adds	r0, #1
 8009f84:	d01c      	beq.n	8009fc0 <netconn_drain+0xb4>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009f86:	9e01      	ldr	r6, [sp, #4]
  } else if (msg == &netconn_closed) {
 8009f88:	4546      	cmp	r6, r8
 8009f8a:	bf18      	it	ne
 8009f8c:	454e      	cmpne	r6, r9
          netconn_drain(newconn);
 8009f8e:	4630      	mov	r0, r6
  } else if (msg == &netconn_closed) {
 8009f90:	d0f3      	beq.n	8009f7a <netconn_drain+0x6e>
 8009f92:	eba6 070a 	sub.w	r7, r6, sl
 8009f96:	fab7 f787 	clz	r7, r7
 8009f9a:	097f      	lsrs	r7, r7, #5
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	d1ec      	bne.n	8009f7a <netconn_drain+0x6e>
          netconn_drain(newconn);
 8009fa0:	f7ff ffb4 	bl	8009f0c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009fa4:	6870      	ldr	r0, [r6, #4]
 8009fa6:	b110      	cbz	r0, 8009fae <netconn_drain+0xa2>
            tcp_abort(newconn->pcb.tcp);
 8009fa8:	f003 fade 	bl	800d568 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009fac:	6077      	str	r7, [r6, #4]
          netconn_free(newconn);
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f7ff ff6a 	bl	8009e88 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f00a f9a0 	bl	80142fc <sys_arch_mbox_tryfetch>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d1e2      	bne.n	8009f86 <netconn_drain+0x7a>
    sys_mbox_free(&conn->acceptmbox);
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f00a f963 	bl	801428c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f00a f9aa 	bl	8014320 <sys_mbox_set_invalid>
}
 8009fcc:	b002      	add	sp, #8
 8009fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (msg == &netconn_closed) {
 8009fd2:	42ba      	cmp	r2, r7
 8009fd4:	bf18      	it	ne
 8009fd6:	4542      	cmpne	r2, r8
 8009fd8:	d0a8      	beq.n	8009f2c <netconn_drain+0x20>
 8009fda:	454a      	cmp	r2, r9
 8009fdc:	d0a6      	beq.n	8009f2c <netconn_drain+0x20>
            pbuf_free((struct pbuf *)mem);
 8009fde:	f002 f8a9 	bl	800c134 <pbuf_free>
 8009fe2:	e7a3      	b.n	8009f2c <netconn_drain+0x20>
 8009fe4:	080163ca 	.word	0x080163ca
 8009fe8:	080163c9 	.word	0x080163c9
 8009fec:	080163c8 	.word	0x080163c8

08009ff0 <lwip_netconn_do_delconn>:
{
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8009ff4:	6800      	ldr	r0, [r0, #0]
 8009ff6:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009ff8:	b195      	cbz	r5, 800a020 <lwip_netconn_do_delconn+0x30>
 8009ffa:	7803      	ldrb	r3, [r0, #0]
 8009ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a000:	2b10      	cmp	r3, #16
 800a002:	d135      	bne.n	800a070 <lwip_netconn_do_delconn+0x80>
  if (((state != NETCONN_NONE) &&
 800a004:	2d02      	cmp	r5, #2
 800a006:	d00b      	beq.n	800a020 <lwip_netconn_do_delconn+0x30>
       (state != NETCONN_LISTEN) &&
 800a008:	2d03      	cmp	r5, #3
 800a00a:	d006      	beq.n	800a01a <lwip_netconn_do_delconn+0x2a>
    msg->err = ERR_INPROGRESS;
 800a00c:	23fb      	movs	r3, #251	@ 0xfb
 800a00e:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a010:	300c      	adds	r0, #12
}
 800a012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a016:	f00a b9bf 	b.w	8014398 <sys_sem_valid>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a01a:	7f03      	ldrb	r3, [r0, #28]
 800a01c:	075b      	lsls	r3, r3, #29
 800a01e:	d5f5      	bpl.n	800a00c <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 800a020:	2500      	movs	r5, #0
 800a022:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800a024:	f7ff ff72 	bl	8009f0c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	6842      	ldr	r2, [r0, #4]
 800a02c:	b16a      	cbz	r2, 800a04a <lwip_netconn_do_delconn+0x5a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a02e:	7803      	ldrb	r3, [r0, #0]
 800a030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a034:	2b10      	cmp	r3, #16
 800a036:	d024      	beq.n	800a082 <lwip_netconn_do_delconn+0x92>
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d104      	bne.n	800a046 <lwip_netconn_do_delconn+0x56>
          udp_remove(msg->conn->pcb.udp);
 800a03c:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 800a03e:	61d5      	str	r5, [r2, #28]
          udp_remove(msg->conn->pcb.udp);
 800a040:	f007 f882 	bl	8011148 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800a044:	6820      	ldr	r0, [r4, #0]
 800a046:	2300      	movs	r3, #0
 800a048:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a04a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0df      	beq.n	800a010 <lwip_netconn_do_delconn+0x20>
 800a050:	2200      	movs	r2, #0
 800a052:	4611      	mov	r1, r2
 800a054:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a056:	6820      	ldr	r0, [r4, #0]
 800a058:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0d8      	beq.n	800a010 <lwip_netconn_do_delconn+0x20>
 800a05e:	2200      	movs	r2, #0
 800a060:	2102      	movs	r1, #2
 800a062:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a064:	6820      	ldr	r0, [r4, #0]
}
 800a066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a06a:	300c      	adds	r0, #12
 800a06c:	f00a b994 	b.w	8014398 <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a070:	4b1e      	ldr	r3, [pc, #120]	@ (800a0ec <lwip_netconn_do_delconn+0xfc>)
 800a072:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a076:	491e      	ldr	r1, [pc, #120]	@ (800a0f0 <lwip_netconn_do_delconn+0x100>)
 800a078:	481e      	ldr	r0, [pc, #120]	@ (800a0f4 <lwip_netconn_do_delconn+0x104>)
 800a07a:	f00a fc4b 	bl	8014914 <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a07e:	6820      	ldr	r0, [r4, #0]
 800a080:	e7c0      	b.n	800a004 <lwip_netconn_do_delconn+0x14>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a082:	6a03      	ldr	r3, [r0, #32]
 800a084:	b13b      	cbz	r3, 800a096 <lwip_netconn_do_delconn+0xa6>
 800a086:	4b19      	ldr	r3, [pc, #100]	@ (800a0ec <lwip_netconn_do_delconn+0xfc>)
 800a088:	f240 4294 	movw	r2, #1172	@ 0x494
 800a08c:	491a      	ldr	r1, [pc, #104]	@ (800a0f8 <lwip_netconn_do_delconn+0x108>)
 800a08e:	4819      	ldr	r0, [pc, #100]	@ (800a0f4 <lwip_netconn_do_delconn+0x104>)
 800a090:	f00a fc40 	bl	8014914 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a098:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a09a:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 800a09c:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a09e:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800a0a0:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a0a2:	f7ff fb55 	bl	8009750 <lwip_netconn_do_close_internal>
 800a0a6:	b178      	cbz	r0, 800a0c8 <lwip_netconn_do_delconn+0xd8>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	785b      	ldrb	r3, [r3, #1]
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d10c      	bne.n	800a0ca <lwip_netconn_do_delconn+0xda>
            UNLOCK_TCPIP_CORE();
 800a0b0:	f7fc f918 	bl	80062e4 <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	300c      	adds	r0, #12
 800a0ba:	f00a f949 	bl	8014350 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a0be:	f7fc f893 	bl	80061e8 <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	785b      	ldrb	r3, [r3, #1]
 800a0c6:	b943      	cbnz	r3, 800a0da <lwip_netconn_do_delconn+0xea>
}
 800a0c8:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a0ca:	4b08      	ldr	r3, [pc, #32]	@ (800a0ec <lwip_netconn_do_delconn+0xfc>)
 800a0cc:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a0d0:	490a      	ldr	r1, [pc, #40]	@ (800a0fc <lwip_netconn_do_delconn+0x10c>)
 800a0d2:	4808      	ldr	r0, [pc, #32]	@ (800a0f4 <lwip_netconn_do_delconn+0x104>)
 800a0d4:	f00a fc1e 	bl	8014914 <iprintf>
 800a0d8:	e7ea      	b.n	800a0b0 <lwip_netconn_do_delconn+0xc0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a0da:	4b04      	ldr	r3, [pc, #16]	@ (800a0ec <lwip_netconn_do_delconn+0xfc>)
 800a0dc:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a0e0:	4906      	ldr	r1, [pc, #24]	@ (800a0fc <lwip_netconn_do_delconn+0x10c>)
 800a0e2:	4804      	ldr	r0, [pc, #16]	@ (800a0f4 <lwip_netconn_do_delconn+0x104>)
}
 800a0e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a0e8:	f00a bc14 	b.w	8014914 <iprintf>
 800a0ec:	08015f14 	.word	0x08015f14
 800a0f0:	08016340 	.word	0x08016340
 800a0f4:	08015bd0 	.word	0x08015bd0
 800a0f8:	08016354 	.word	0x08016354
 800a0fc:	08016370 	.word	0x08016370

0800a100 <lwip_netconn_do_connect>:
  if (msg->conn->pcb.tcp == NULL) {
 800a100:	6802      	ldr	r2, [r0, #0]
{
 800a102:	b570      	push	{r4, r5, r6, lr}
 800a104:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 800a106:	6850      	ldr	r0, [r2, #4]
 800a108:	b1f8      	cbz	r0, 800a14a <lwip_netconn_do_connect+0x4a>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a10a:	7813      	ldrb	r3, [r2, #0]
 800a10c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a110:	2b10      	cmp	r3, #16
 800a112:	d012      	beq.n	800a13a <lwip_netconn_do_connect+0x3a>
 800a114:	2b20      	cmp	r3, #32
 800a116:	d00a      	beq.n	800a12e <lwip_netconn_do_connect+0x2e>
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a118:	4b2a      	ldr	r3, [pc, #168]	@ (800a1c4 <lwip_netconn_do_connect+0xc4>)
 800a11a:	f240 527d 	movw	r2, #1405	@ 0x57d
 800a11e:	492a      	ldr	r1, [pc, #168]	@ (800a1c8 <lwip_netconn_do_connect+0xc8>)
 800a120:	482a      	ldr	r0, [pc, #168]	@ (800a1cc <lwip_netconn_do_connect+0xcc>)
 800a122:	f00a fbf7 	bl	8014914 <iprintf>
 800a126:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800a12a:	7120      	strb	r0, [r4, #4]
}
 800a12c:	bd70      	pop	{r4, r5, r6, pc}
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a12e:	89a2      	ldrh	r2, [r4, #12]
 800a130:	68a1      	ldr	r1, [r4, #8]
 800a132:	f006 ff8d 	bl	8011050 <udp_connect>
  msg->err = err;
 800a136:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a138:	e7f8      	b.n	800a12c <lwip_netconn_do_connect+0x2c>
        if (msg->conn->state == NETCONN_CONNECT) {
 800a13a:	7853      	ldrb	r3, [r2, #1]
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d008      	beq.n	800a152 <lwip_netconn_do_connect+0x52>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a140:	b15b      	cbz	r3, 800a15a <lwip_netconn_do_connect+0x5a>
          err = ERR_ISCONN;
 800a142:	f06f 0009 	mvn.w	r0, #9
  msg->err = err;
 800a146:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a148:	e7f0      	b.n	800a12c <lwip_netconn_do_connect+0x2c>
    err = ERR_CLSD;
 800a14a:	f06f 000e 	mvn.w	r0, #14
  msg->err = err;
 800a14e:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a150:	e7ec      	b.n	800a12c <lwip_netconn_do_connect+0x2c>
          err = ERR_ALREADY;
 800a152:	f06f 0008 	mvn.w	r0, #8
  msg->err = err;
 800a156:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a158:	e7e8      	b.n	800a12c <lwip_netconn_do_connect+0x2c>
          setup_tcp(msg->conn);
 800a15a:	4610      	mov	r0, r2
 800a15c:	f7ff f89a 	bl	8009294 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	4b1b      	ldr	r3, [pc, #108]	@ (800a1d0 <lwip_netconn_do_connect+0xd0>)
 800a164:	89a2      	ldrh	r2, [r4, #12]
 800a166:	68a1      	ldr	r1, [r4, #8]
 800a168:	6840      	ldr	r0, [r0, #4]
 800a16a:	f002 fc43 	bl	800c9f4 <tcp_connect>
          if (err == ERR_OK) {
 800a16e:	2800      	cmp	r0, #0
 800a170:	d1db      	bne.n	800a12a <lwip_netconn_do_connect+0x2a>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a172:	6822      	ldr	r2, [r4, #0]
            msg->conn->state = NETCONN_CONNECT;
 800a174:	2103      	movs	r1, #3
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a176:	7f13      	ldrb	r3, [r2, #28]
            msg->conn->state = NETCONN_CONNECT;
 800a178:	7051      	strb	r1, [r2, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a17a:	f013 0502 	ands.w	r5, r3, #2
 800a17e:	d006      	beq.n	800a18e <lwip_netconn_do_connect+0x8e>
 800a180:	f043 0304 	orr.w	r3, r3, #4
              err = ERR_INPROGRESS;
 800a184:	f06f 0004 	mvn.w	r0, #4
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a188:	7713      	strb	r3, [r2, #28]
  msg->err = err;
 800a18a:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a18c:	e7ce      	b.n	800a12c <lwip_netconn_do_connect+0x2c>
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a18e:	f023 0304 	bic.w	r3, r3, #4
              msg->conn->current_msg = msg;
 800a192:	6214      	str	r4, [r2, #32]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a194:	7713      	strb	r3, [r2, #28]
              UNLOCK_TCPIP_CORE();
 800a196:	f7fc f8a5 	bl	80062e4 <sys_unlock_tcpip_core>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	4629      	mov	r1, r5
 800a19e:	300c      	adds	r0, #12
 800a1a0:	f00a f8d6 	bl	8014350 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a1a4:	f7fc f820 	bl	80061e8 <sys_lock_tcpip_core>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d1bd      	bne.n	800a12c <lwip_netconn_do_connect+0x2c>
 800a1b0:	4b04      	ldr	r3, [pc, #16]	@ (800a1c4 <lwip_netconn_do_connect+0xc4>)
 800a1b2:	f240 5274 	movw	r2, #1396	@ 0x574
 800a1b6:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <lwip_netconn_do_connect+0xd4>)
 800a1b8:	4804      	ldr	r0, [pc, #16]	@ (800a1cc <lwip_netconn_do_connect+0xcc>)
}
 800a1ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a1be:	f00a bba9 	b.w	8014914 <iprintf>
 800a1c2:	bf00      	nop
 800a1c4:	08015f14 	.word	0x08015f14
 800a1c8:	08016378 	.word	0x08016378
 800a1cc:	08015bd0 	.word	0x08015bd0
 800a1d0:	080092d9 	.word	0x080092d9
 800a1d4:	08016370 	.word	0x08016370

0800a1d8 <lwip_netconn_do_disconnect>:
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800a1d8:	6802      	ldr	r2, [r0, #0]
{
 800a1da:	b510      	push	{r4, lr}
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800a1dc:	7813      	ldrb	r3, [r2, #0]
{
 800a1de:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800a1e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1e4:	2b20      	cmp	r3, #32
 800a1e6:	d003      	beq.n	800a1f0 <lwip_netconn_do_disconnect+0x18>
 800a1e8:	f06f 0305 	mvn.w	r3, #5
    msg->err = ERR_OK;
 800a1ec:	7123      	strb	r3, [r4, #4]
}
 800a1ee:	bd10      	pop	{r4, pc}
    udp_disconnect(msg->conn->pcb.udp);
 800a1f0:	6850      	ldr	r0, [r2, #4]
 800a1f2:	f006 ff71 	bl	80110d8 <udp_disconnect>
    msg->err = ERR_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	7123      	strb	r3, [r4, #4]
}
 800a1fa:	bd10      	pop	{r4, pc}

0800a1fc <lwip_netconn_do_send>:
{
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
 800a200:	6800      	ldr	r0, [r0, #0]
 800a202:	f7fe ffdb 	bl	80091bc <netconn_err>
  if (err == ERR_OK) {
 800a206:	b948      	cbnz	r0, 800a21c <lwip_netconn_do_send+0x20>
    if (msg->conn->pcb.tcp != NULL) {
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	6858      	ldr	r0, [r3, #4]
 800a20c:	b120      	cbz	r0, 800a218 <lwip_netconn_do_send+0x1c>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a214:	2b20      	cmp	r3, #32
 800a216:	d003      	beq.n	800a220 <lwip_netconn_do_send+0x24>
          err = ERR_CONN;
 800a218:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 800a21c:	7120      	strb	r0, [r4, #4]
}
 800a21e:	bd10      	pop	{r4, pc}
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a220:	68a2      	ldr	r2, [r4, #8]
 800a222:	6893      	ldr	r3, [r2, #8]
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a224:	6811      	ldr	r1, [r2, #0]
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a226:	b913      	cbnz	r3, 800a22e <lwip_netconn_do_send+0x32>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a228:	f006 fee2 	bl	8010ff0 <udp_send>
 800a22c:	e7f6      	b.n	800a21c <lwip_netconn_do_send+0x20>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800a22e:	8993      	ldrh	r3, [r2, #12]
 800a230:	3208      	adds	r2, #8
 800a232:	f006 fe97 	bl	8010f64 <udp_sendto>
 800a236:	e7f1      	b.n	800a21c <lwip_netconn_do_send+0x20>

0800a238 <lwip_netconn_do_recv>:
{
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800a23a:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 800a23c:	6803      	ldr	r3, [r0, #0]
{
 800a23e:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 800a240:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a242:	6858      	ldr	r0, [r3, #4]
 800a244:	b120      	cbz	r0, 800a250 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a24c:	2b10      	cmp	r3, #16
 800a24e:	d000      	beq.n	800a252 <lwip_netconn_do_recv+0x1a>
}
 800a250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 800a252:	68b4      	ldr	r4, [r6, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a254:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800a258:	e001      	b.n	800a25e <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a25a:	6833      	ldr	r3, [r6, #0]
 800a25c:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a25e:	42bc      	cmp	r4, r7
 800a260:	4625      	mov	r5, r4
 800a262:	bf28      	it	cs
 800a264:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a266:	b2a9      	uxth	r1, r5
 800a268:	f002 fb84 	bl	800c974 <tcp_recved>
      } while (remaining != 0);
 800a26c:	1b64      	subs	r4, r4, r5
 800a26e:	d1f4      	bne.n	800a25a <lwip_netconn_do_recv+0x22>
}
 800a270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a272:	bf00      	nop

0800a274 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a274:	b510      	push	{r4, lr}
 800a276:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800a278:	6800      	ldr	r0, [r0, #0]
 800a27a:	f7fe ff9f 	bl	80091bc <netconn_err>
  if (err == ERR_OK) {
 800a27e:	b938      	cbnz	r0, 800a290 <lwip_netconn_do_write+0x1c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	7813      	ldrb	r3, [r2, #0]
 800a284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d003      	beq.n	800a294 <lwip_netconn_do_write+0x20>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a28c:	f06f 0005 	mvn.w	r0, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a290:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a292:	bd10      	pop	{r4, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800a294:	7853      	ldrb	r3, [r2, #1]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d137      	bne.n	800a30a <lwip_netconn_do_write+0x96>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a29a:	6853      	ldr	r3, [r2, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d038      	beq.n	800a312 <lwip_netconn_do_write+0x9e>
        msg->conn->state = NETCONN_WRITE;
 800a2a0:	2101      	movs	r1, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a2a2:	6a13      	ldr	r3, [r2, #32]
        msg->conn->state = NETCONN_WRITE;
 800a2a4:	7051      	strb	r1, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a2a6:	b133      	cbz	r3, 800a2b6 <lwip_netconn_do_write+0x42>
 800a2a8:	4b20      	ldr	r3, [pc, #128]	@ (800a32c <lwip_netconn_do_write+0xb8>)
 800a2aa:	f240 7223 	movw	r2, #1827	@ 0x723
 800a2ae:	4920      	ldr	r1, [pc, #128]	@ (800a330 <lwip_netconn_do_write+0xbc>)
 800a2b0:	4820      	ldr	r0, [pc, #128]	@ (800a334 <lwip_netconn_do_write+0xc0>)
 800a2b2:	f00a fb2f 	bl	8014914 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a2b6:	6963      	ldr	r3, [r4, #20]
 800a2b8:	b37b      	cbz	r3, 800a31a <lwip_netconn_do_write+0xa6>
        msg->conn->current_msg = msg;
 800a2ba:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a2bc:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800a2be:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a2c0:	f7ff f89c 	bl	80093fc <lwip_netconn_do_writemore>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0e4      	beq.n	800a292 <lwip_netconn_do_write+0x1e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	785b      	ldrb	r3, [r3, #1]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d006      	beq.n	800a2de <lwip_netconn_do_write+0x6a>
 800a2d0:	4b16      	ldr	r3, [pc, #88]	@ (800a32c <lwip_netconn_do_write+0xb8>)
 800a2d2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800a2d6:	4918      	ldr	r1, [pc, #96]	@ (800a338 <lwip_netconn_do_write+0xc4>)
 800a2d8:	4816      	ldr	r0, [pc, #88]	@ (800a334 <lwip_netconn_do_write+0xc0>)
 800a2da:	f00a fb1b 	bl	8014914 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a2de:	f7fc f801 	bl	80062e4 <sys_unlock_tcpip_core>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a2e2:	6820      	ldr	r0, [r4, #0]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	300c      	adds	r0, #12
 800a2e8:	f00a f832 	bl	8014350 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a2ec:	f7fb ff7c 	bl	80061e8 <sys_lock_tcpip_core>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d1cc      	bne.n	800a292 <lwip_netconn_do_write+0x1e>
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a32c <lwip_netconn_do_write+0xb8>)
 800a2fa:	f240 722c 	movw	r2, #1836	@ 0x72c
 800a2fe:	490e      	ldr	r1, [pc, #56]	@ (800a338 <lwip_netconn_do_write+0xc4>)
 800a300:	480c      	ldr	r0, [pc, #48]	@ (800a334 <lwip_netconn_do_write+0xc0>)
}
 800a302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a306:	f00a bb05 	b.w	8014914 <iprintf>
        err = ERR_INPROGRESS;
 800a30a:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 800a30e:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a310:	e7bf      	b.n	800a292 <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 800a312:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 800a316:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a318:	e7bb      	b.n	800a292 <lwip_netconn_do_write+0x1e>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a31a:	4b04      	ldr	r3, [pc, #16]	@ (800a32c <lwip_netconn_do_write+0xb8>)
 800a31c:	f240 7224 	movw	r2, #1828	@ 0x724
 800a320:	4906      	ldr	r1, [pc, #24]	@ (800a33c <lwip_netconn_do_write+0xc8>)
 800a322:	4804      	ldr	r0, [pc, #16]	@ (800a334 <lwip_netconn_do_write+0xc0>)
 800a324:	f00a faf6 	bl	8014914 <iprintf>
 800a328:	e7c7      	b.n	800a2ba <lwip_netconn_do_write+0x46>
 800a32a:	bf00      	nop
 800a32c:	08015f14 	.word	0x08015f14
 800a330:	08016354 	.word	0x08016354
 800a334:	08015bd0 	.word	0x08015bd0
 800a338:	08016370 	.word	0x08016370
 800a33c:	08016390 	.word	0x08016390

0800a340 <lwip_netconn_do_getaddr>:
void
lwip_netconn_do_getaddr(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
 800a340:	6803      	ldr	r3, [r0, #0]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	2a00      	cmp	r2, #0
 800a346:	d02e      	beq.n	800a3a6 <lwip_netconn_do_getaddr+0x66>
    if (msg->msg.ad.local) {
 800a348:	7c01      	ldrb	r1, [r0, #16]
{
 800a34a:	b430      	push	{r4, r5}
 800a34c:	781b      	ldrb	r3, [r3, #0]
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a34e:	6884      	ldr	r4, [r0, #8]
 800a350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (msg->msg.ad.local) {
 800a354:	b169      	cbz	r1, 800a372 <lwip_netconn_do_getaddr+0x32>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a356:	6811      	ldr	r1, [r2, #0]
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a358:	2b10      	cmp	r3, #16
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a35a:	6021      	str	r1, [r4, #0]
    msg->err = ERR_OK;
 800a35c:	f04f 0100 	mov.w	r1, #0
 800a360:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a362:	d02b      	beq.n	800a3bc <lwip_netconn_do_getaddr+0x7c>
 800a364:	2b20      	cmp	r3, #32
 800a366:	d112      	bne.n	800a38e <lwip_netconn_do_getaddr+0x4e>
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800a368:	68c3      	ldr	r3, [r0, #12]
 800a36a:	8a52      	ldrh	r2, [r2, #18]
 800a36c:	801a      	strh	r2, [r3, #0]
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a36e:	bc30      	pop	{r4, r5}
 800a370:	4770      	bx	lr
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a372:	6855      	ldr	r5, [r2, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a374:	2b10      	cmp	r3, #16
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a376:	6025      	str	r5, [r4, #0]
    msg->err = ERR_OK;
 800a378:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a37a:	d017      	beq.n	800a3ac <lwip_netconn_do_getaddr+0x6c>
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d106      	bne.n	800a38e <lwip_netconn_do_getaddr+0x4e>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a380:	7c13      	ldrb	r3, [r2, #16]
 800a382:	075b      	lsls	r3, r3, #29
 800a384:	d50b      	bpl.n	800a39e <lwip_netconn_do_getaddr+0x5e>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800a386:	68c3      	ldr	r3, [r0, #12]
 800a388:	8a92      	ldrh	r2, [r2, #20]
 800a38a:	801a      	strh	r2, [r3, #0]
 800a38c:	e7ef      	b.n	800a36e <lwip_netconn_do_getaddr+0x2e>
        LWIP_ASSERT("invalid netconn_type", 0);
 800a38e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c0 <lwip_netconn_do_getaddr+0x80>)
 800a390:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a394:	490b      	ldr	r1, [pc, #44]	@ (800a3c4 <lwip_netconn_do_getaddr+0x84>)
 800a396:	480c      	ldr	r0, [pc, #48]	@ (800a3c8 <lwip_netconn_do_getaddr+0x88>)
}
 800a398:	bc30      	pop	{r4, r5}
        LWIP_ASSERT("invalid netconn_type", 0);
 800a39a:	f00a babb 	b.w	8014914 <iprintf>
            msg->err = ERR_CONN;
 800a39e:	23f5      	movs	r3, #245	@ 0xf5
 800a3a0:	7103      	strb	r3, [r0, #4]
}
 800a3a2:	bc30      	pop	{r4, r5}
 800a3a4:	4770      	bx	lr
            msg->err = ERR_CONN;
 800a3a6:	23f5      	movs	r3, #245	@ 0xf5
 800a3a8:	7103      	strb	r3, [r0, #4]
 800a3aa:	4770      	bx	lr
        if ((msg->msg.ad.local == 0) &&
 800a3ac:	7d13      	ldrb	r3, [r2, #20]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d9f5      	bls.n	800a39e <lwip_netconn_do_getaddr+0x5e>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800a3b2:	8b12      	ldrh	r2, [r2, #24]
 800a3b4:	68c3      	ldr	r3, [r0, #12]
}
 800a3b6:	bc30      	pop	{r4, r5}
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800a3b8:	801a      	strh	r2, [r3, #0]
}
 800a3ba:	4770      	bx	lr
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800a3bc:	8ad2      	ldrh	r2, [r2, #22]
 800a3be:	e7f9      	b.n	800a3b4 <lwip_netconn_do_getaddr+0x74>
 800a3c0:	08015f14 	.word	0x08015f14
 800a3c4:	080163a4 	.word	0x080163a4
 800a3c8:	08015bd0 	.word	0x08015bd0

0800a3cc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a3d0:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a3d2:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 800a3d4:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 800a3d6:	b123      	cbz	r3, 800a3e2 <lwip_netconn_do_close+0x16>
 800a3d8:	7803      	ldrb	r3, [r0, #0]
 800a3da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3de:	2b10      	cmp	r3, #16
 800a3e0:	d002      	beq.n	800a3e8 <lwip_netconn_do_close+0x1c>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a3e2:	23f5      	movs	r3, #245	@ 0xf5
 800a3e4:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a3e6:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a3e8:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d039      	beq.n	800a462 <lwip_netconn_do_close+0x96>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a3ee:	1e91      	subs	r1, r2, #2
 800a3f0:	2901      	cmp	r1, #1
 800a3f2:	d9f6      	bls.n	800a3e2 <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800a3f4:	2a01      	cmp	r2, #1
 800a3f6:	d038      	beq.n	800a46a <lwip_netconn_do_close+0x9e>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a3f8:	07db      	lsls	r3, r3, #31
 800a3fa:	d439      	bmi.n	800a470 <lwip_netconn_do_close+0xa4>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a3fc:	6a03      	ldr	r3, [r0, #32]
 800a3fe:	b13b      	cbz	r3, 800a410 <lwip_netconn_do_close+0x44>
 800a400:	4b1d      	ldr	r3, [pc, #116]	@ (800a478 <lwip_netconn_do_close+0xac>)
 800a402:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800a406:	491d      	ldr	r1, [pc, #116]	@ (800a47c <lwip_netconn_do_close+0xb0>)
 800a408:	481d      	ldr	r0, [pc, #116]	@ (800a480 <lwip_netconn_do_close+0xb4>)
 800a40a:	f00a fa83 	bl	8014914 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a40e:	6820      	ldr	r0, [r4, #0]
 800a410:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a412:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 800a414:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 800a416:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a418:	f7ff f99a 	bl	8009750 <lwip_netconn_do_close_internal>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d0e2      	beq.n	800a3e6 <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	785b      	ldrb	r3, [r3, #1]
 800a424:	2b04      	cmp	r3, #4
 800a426:	d006      	beq.n	800a436 <lwip_netconn_do_close+0x6a>
 800a428:	4b13      	ldr	r3, [pc, #76]	@ (800a478 <lwip_netconn_do_close+0xac>)
 800a42a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800a42e:	4915      	ldr	r1, [pc, #84]	@ (800a484 <lwip_netconn_do_close+0xb8>)
 800a430:	4813      	ldr	r0, [pc, #76]	@ (800a480 <lwip_netconn_do_close+0xb4>)
 800a432:	f00a fa6f 	bl	8014914 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a436:	f7fb ff55 	bl	80062e4 <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	2100      	movs	r1, #0
 800a43e:	300c      	adds	r0, #12
 800a440:	f009 ff86 	bl	8014350 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a444:	f7fb fed0 	bl	80061e8 <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	785b      	ldrb	r3, [r3, #1]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0ca      	beq.n	800a3e6 <lwip_netconn_do_close+0x1a>
 800a450:	4b09      	ldr	r3, [pc, #36]	@ (800a478 <lwip_netconn_do_close+0xac>)
 800a452:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800a456:	490b      	ldr	r1, [pc, #44]	@ (800a484 <lwip_netconn_do_close+0xb8>)
 800a458:	4809      	ldr	r0, [pc, #36]	@ (800a480 <lwip_netconn_do_close+0xb4>)
}
 800a45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a45e:	f00a ba59 	b.w	8014914 <iprintf>
    if (state == NETCONN_CONNECT) {
 800a462:	2a03      	cmp	r2, #3
 800a464:	d0bd      	beq.n	800a3e2 <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800a466:	2a01      	cmp	r2, #1
 800a468:	d102      	bne.n	800a470 <lwip_netconn_do_close+0xa4>
      msg->err = ERR_INPROGRESS;
 800a46a:	23fb      	movs	r3, #251	@ 0xfb
 800a46c:	7123      	strb	r3, [r4, #4]
}
 800a46e:	bd10      	pop	{r4, pc}
        netconn_drain(msg->conn);
 800a470:	f7ff fd4c 	bl	8009f0c <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a474:	6820      	ldr	r0, [r4, #0]
 800a476:	e7c1      	b.n	800a3fc <lwip_netconn_do_close+0x30>
 800a478:	08015f14 	.word	0x08015f14
 800a47c:	08016354 	.word	0x08016354
 800a480:	08015bd0 	.word	0x08015bd0
 800a484:	08016370 	.word	0x08016370

0800a488 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800a488:	f100 0310 	add.w	r3, r0, #16
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b10      	cmp	r3, #16
 800a490:	d804      	bhi.n	800a49c <err_to_errno+0x14>
    return EIO;
  }
  return err_to_errno_table[-err];
 800a492:	4b03      	ldr	r3, [pc, #12]	@ (800a4a0 <err_to_errno+0x18>)
 800a494:	4240      	negs	r0, r0
 800a496:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a49a:	4770      	bx	lr
    return EIO;
 800a49c:	2005      	movs	r0, #5
}
 800a49e:	4770      	bx	lr
 800a4a0:	080163cc 	.word	0x080163cc

0800a4a4 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 800a4a4:	b170      	cbz	r0, 800a4c4 <netbuf_delete+0x20>
{
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 800a4aa:	6800      	ldr	r0, [r0, #0]
 800a4ac:	b120      	cbz	r0, 800a4b8 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800a4ae:	f001 fe41 	bl	800c134 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	2006      	movs	r0, #6
  }
}
 800a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 800a4c0:	f001 bb04 	b.w	800bacc <memp_free>
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop

0800a4c8 <netbuf_free>:
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a4c8:	b148      	cbz	r0, 800a4de <netbuf_free+0x16>
{
 800a4ca:	b510      	push	{r4, lr}
 800a4cc:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 800a4ce:	6800      	ldr	r0, [r0, #0]
 800a4d0:	b108      	cbz	r0, 800a4d6 <netbuf_free+0xe>
    pbuf_free(buf->p);
 800a4d2:	f001 fe2f 	bl	800c134 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e9c4 3300 	strd	r3, r3, [r4]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800a4dc:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a4de:	4b03      	ldr	r3, [pc, #12]	@ (800a4ec <netbuf_free+0x24>)
 800a4e0:	2281      	movs	r2, #129	@ 0x81
 800a4e2:	4903      	ldr	r1, [pc, #12]	@ (800a4f0 <netbuf_free+0x28>)
 800a4e4:	4803      	ldr	r0, [pc, #12]	@ (800a4f4 <netbuf_free+0x2c>)
 800a4e6:	f00a ba15 	b.w	8014914 <iprintf>
 800a4ea:	bf00      	nop
 800a4ec:	08016410 	.word	0x08016410
 800a4f0:	08016484 	.word	0x08016484
 800a4f4:	08015bd0 	.word	0x08015bd0

0800a4f8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	f362 050f 	bfi	r5, r2, #0, #16
 800a500:	f362 451f 	bfi	r5, r2, #16, #16
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a504:	b1b0      	cbz	r0, 800a534 <netbuf_ref+0x3c>
  if (buf->p != NULL) {
 800a506:	4604      	mov	r4, r0
 800a508:	6800      	ldr	r0, [r0, #0]
 800a50a:	460e      	mov	r6, r1
 800a50c:	b108      	cbz	r0, 800a512 <netbuf_ref+0x1a>
    pbuf_free(buf->p);
 800a50e:	f001 fe11 	bl	800c134 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a512:	2241      	movs	r2, #65	@ 0x41
 800a514:	2100      	movs	r1, #0
 800a516:	2036      	movs	r0, #54	@ 0x36
 800a518:	f001 fe7c 	bl	800c214 <pbuf_alloc>
 800a51c:	4603      	mov	r3, r0
 800a51e:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 800a520:	b120      	cbz	r0, 800a52c <netbuf_ref+0x34>
    return ERR_MEM;
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
 800a522:	2000      	movs	r0, #0
  buf->p->len = buf->p->tot_len = size;
 800a524:	e9c3 6501 	strd	r6, r5, [r3, #4]
  buf->ptr = buf->p;
 800a528:	6063      	str	r3, [r4, #4]
}
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800a52c:	f04f 30ff 	mov.w	r0, #4294967295
    buf->ptr = NULL;
 800a530:	6063      	str	r3, [r4, #4]
}
 800a532:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a534:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <netbuf_ref+0x50>)
 800a536:	2299      	movs	r2, #153	@ 0x99
 800a538:	4904      	ldr	r1, [pc, #16]	@ (800a54c <netbuf_ref+0x54>)
 800a53a:	4805      	ldr	r0, [pc, #20]	@ (800a550 <netbuf_ref+0x58>)
 800a53c:	f00a f9ea 	bl	8014914 <iprintf>
 800a540:	f06f 000f 	mvn.w	r0, #15
}
 800a544:	bd70      	pop	{r4, r5, r6, pc}
 800a546:	bf00      	nop
 800a548:	08016410 	.word	0x08016410
 800a54c:	080164a0 	.word	0x080164a0
 800a550:	08015bd0 	.word	0x08015bd0

0800a554 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a558:	2400      	movs	r4, #0
 800a55a:	4d1b      	ldr	r5, [pc, #108]	@ (800a5c8 <alloc_socket+0x74>)
{
 800a55c:	4681      	mov	r9, r0
 800a55e:	468a      	mov	sl, r1
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 800a560:	0126      	lsls	r6, r4, #4
    SYS_ARCH_PROTECT(lev);
 800a562:	f009 ff59 	bl	8014418 <sys_arch_protect>
    if (!sockets[i].conn) {
 800a566:	59af      	ldr	r7, [r5, r6]
 800a568:	eb05 1804 	add.w	r8, r5, r4, lsl #4
 800a56c:	b14f      	cbz	r7, 800a582 <alloc_socket+0x2e>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a56e:	3401      	adds	r4, #1
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
      sockets[i].errevent   = 0;
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 800a570:	f009 ff5e 	bl	8014430 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a574:	2c04      	cmp	r4, #4
 800a576:	d1f3      	bne.n	800a560 <alloc_socket+0xc>
  }
  return -1;
 800a578:	f04f 34ff 	mov.w	r4, #4294967295
}
 800a57c:	4620      	mov	r0, r4
 800a57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sockets[i].conn       = newconn;
 800a582:	f845 9006 	str.w	r9, [r5, r6]
      SYS_ARCH_UNPROTECT(lev);
 800a586:	f009 ff53 	bl	8014430 <sys_arch_unprotect>
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a58a:	f898 300e 	ldrb.w	r3, [r8, #14]
      sockets[i].lastdata.pbuf = NULL;
 800a58e:	f8c8 7004 	str.w	r7, [r8, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a592:	b98b      	cbnz	r3, 800a5b8 <alloc_socket+0x64>
      sockets[i].rcvevent   = 0;
 800a594:	4435      	add	r5, r6
 800a596:	2200      	movs	r2, #0
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a598:	f00a 0101 	and.w	r1, sl, #1
}
 800a59c:	4620      	mov	r0, r4
      sockets[i].rcvevent   = 0;
 800a59e:	812a      	strh	r2, [r5, #8]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a5a0:	f899 3000 	ldrb.w	r3, [r9]
      sockets[i].errevent   = 0;
 800a5a4:	81aa      	strh	r2, [r5, #12]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a5a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5aa:	2b10      	cmp	r3, #16
 800a5ac:	bf18      	it	ne
 800a5ae:	f041 0101 	orrne.w	r1, r1, #1
 800a5b2:	8169      	strh	r1, [r5, #10]
}
 800a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a5b8:	4b04      	ldr	r3, [pc, #16]	@ (800a5cc <alloc_socket+0x78>)
 800a5ba:	f240 220e 	movw	r2, #526	@ 0x20e
 800a5be:	4904      	ldr	r1, [pc, #16]	@ (800a5d0 <alloc_socket+0x7c>)
 800a5c0:	4804      	ldr	r0, [pc, #16]	@ (800a5d4 <alloc_socket+0x80>)
 800a5c2:	f00a f9a7 	bl	8014914 <iprintf>
 800a5c6:	e7e5      	b.n	800a594 <alloc_socket+0x40>
 800a5c8:	24009bd8 	.word	0x24009bd8
 800a5cc:	080164b8 	.word	0x080164b8
 800a5d0:	080164ec 	.word	0x080164ec
 800a5d4:	08015bd0 	.word	0x08015bd0

0800a5d8 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	4699      	mov	r9, r3
  u8_t apiflags = NETCONN_NOAUTORCVD;
  ssize_t recvd = 0;
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;

  LWIP_ASSERT("no socket given", sock != NULL);
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800a5de:	6803      	ldr	r3, [r0, #0]
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800a5e0:	2a00      	cmp	r2, #0
{
 800a5e2:	b083      	sub	sp, #12
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800a5e4:	781b      	ldrb	r3, [r3, #0]
{
 800a5e6:	4680      	mov	r8, r0
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800a5e8:	bfac      	ite	ge
 800a5ea:	4615      	movge	r5, r2
 800a5ec:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800a5f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
{
 800a5f4:	468a      	mov	sl, r1
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800a5f6:	2b10      	cmp	r3, #16
 800a5f8:	d006      	beq.n	800a608 <lwip_recv_tcp+0x30>
 800a5fa:	4b48      	ldr	r3, [pc, #288]	@ (800a71c <lwip_recv_tcp+0x144>)
 800a5fc:	f240 329f 	movw	r2, #927	@ 0x39f
 800a600:	4947      	ldr	r1, [pc, #284]	@ (800a720 <lwip_recv_tcp+0x148>)
 800a602:	4848      	ldr	r0, [pc, #288]	@ (800a724 <lwip_recv_tcp+0x14c>)
 800a604:	f00a f986 	bl	8014914 <iprintf>

  if (flags & MSG_DONTWAIT) {
    apiflags |= NETCONN_DONTBLOCK;
 800a608:	f019 0f08 	tst.w	r9, #8
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800a60c:	f8d8 0004 	ldr.w	r0, [r8, #4]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800a610:	f04f 0700 	mov.w	r7, #0
    apiflags |= NETCONN_DONTBLOCK;
 800a614:	bf0c      	ite	eq
 800a616:	2208      	moveq	r2, #8
 800a618:	220c      	movne	r2, #12
    if (sock->lastdata.pbuf) {
 800a61a:	b370      	cbz	r0, 800a67a <lwip_recv_tcp+0xa2>
      p = sock->lastdata.pbuf;
 800a61c:	9001      	str	r0, [sp, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800a61e:	8904      	ldrh	r4, [r0, #8]
 800a620:	42ac      	cmp	r4, r5
 800a622:	4626      	mov	r6, r4
 800a624:	db01      	blt.n	800a62a <lwip_recv_tcp+0x52>
      copylen = p->tot_len;
    } else {
      copylen = (u16_t)recv_left;
 800a626:	b2ac      	uxth	r4, r5
 800a628:	462e      	mov	r6, r5
      copylen = (u16_t)(SSIZE_MAX - recvd);
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800a62a:	2300      	movs	r3, #0
 800a62c:	4622      	mov	r2, r4
 800a62e:	eb0a 0107 	add.w	r1, sl, r7
    if (recvd + copylen < recvd) {
 800a632:	eb07 0b06 	add.w	fp, r7, r6
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800a636:	f002 f861 	bl	800c6fc <pbuf_copy_partial>

    recvd += copylen;

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800a63a:	42b5      	cmp	r5, r6
 800a63c:	db29      	blt.n	800a692 <lwip_recv_tcp+0xba>
    recv_left -= copylen;

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800a63e:	f019 0f01 	tst.w	r9, #1
 800a642:	d006      	beq.n	800a652 <lwip_recv_tcp+0x7a>
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
lwip_recv_tcp_done:
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800a644:	f1bb 0f00 	cmp.w	fp, #0
 800a648:	d038      	beq.n	800a6bc <lwip_recv_tcp+0xe4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
  }
  sock_set_errno(sock, 0);
  return recvd;
}
 800a64a:	4658      	mov	r0, fp
 800a64c:	b003      	add	sp, #12
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800a652:	9801      	ldr	r0, [sp, #4]
 800a654:	8903      	ldrh	r3, [r0, #8]
 800a656:	42a3      	cmp	r3, r4
 800a658:	d333      	bcc.n	800a6c2 <lwip_recv_tcp+0xea>
      if (p->tot_len - copylen > 0) {
 800a65a:	42b3      	cmp	r3, r6
 800a65c:	dd21      	ble.n	800a6a2 <lwip_recv_tcp+0xca>
    recv_left -= copylen;
 800a65e:	1bad      	subs	r5, r5, r6
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800a660:	4621      	mov	r1, r4
 800a662:	f001 fedb 	bl	800c41c <pbuf_free_header>
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800a666:	221c      	movs	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800a668:	2d00      	cmp	r5, #0
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800a66a:	f8c8 0004 	str.w	r0, [r8, #4]
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800a66e:	dd22      	ble.n	800a6b6 <lwip_recv_tcp+0xde>
    if (sock->lastdata.pbuf) {
 800a670:	f8d8 0004 	ldr.w	r0, [r8, #4]
    if (recvd + copylen < recvd) {
 800a674:	465f      	mov	r7, fp
    if (sock->lastdata.pbuf) {
 800a676:	2800      	cmp	r0, #0
 800a678:	d1d0      	bne.n	800a61c <lwip_recv_tcp+0x44>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800a67a:	a901      	add	r1, sp, #4
 800a67c:	f8d8 0000 	ldr.w	r0, [r8]
 800a680:	f7fe fcba 	bl	8008ff8 <netconn_recv_tcp_pbuf_flags>
      if (err != ERR_OK) {
 800a684:	4604      	mov	r4, r0
 800a686:	bb78      	cbnz	r0, 800a6e8 <lwip_recv_tcp+0x110>
      LWIP_ASSERT("p != NULL", p != NULL);
 800a688:	9801      	ldr	r0, [sp, #4]
 800a68a:	b320      	cbz	r0, 800a6d6 <lwip_recv_tcp+0xfe>
      sock->lastdata.pbuf = p;
 800a68c:	f8c8 0004 	str.w	r0, [r8, #4]
 800a690:	e7c5      	b.n	800a61e <lwip_recv_tcp+0x46>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800a692:	4b22      	ldr	r3, [pc, #136]	@ (800a71c <lwip_recv_tcp+0x144>)
 800a694:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800a698:	4923      	ldr	r1, [pc, #140]	@ (800a728 <lwip_recv_tcp+0x150>)
 800a69a:	4822      	ldr	r0, [pc, #136]	@ (800a724 <lwip_recv_tcp+0x14c>)
 800a69c:	f00a f93a 	bl	8014914 <iprintf>
 800a6a0:	e7cd      	b.n	800a63e <lwip_recv_tcp+0x66>
        sock->lastdata.pbuf = NULL;
 800a6a2:	2300      	movs	r3, #0
    recv_left -= copylen;
 800a6a4:	1bad      	subs	r5, r5, r6
        sock->lastdata.pbuf = NULL;
 800a6a6:	f8c8 3004 	str.w	r3, [r8, #4]
        pbuf_free(p);
 800a6aa:	f001 fd43 	bl	800c134 <pbuf_free>
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800a6ae:	2d00      	cmp	r5, #0
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800a6b0:	f04f 021c 	mov.w	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800a6b4:	dcdc      	bgt.n	800a670 <lwip_recv_tcp+0x98>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800a6b6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ba:	d11a      	bne.n	800a6f2 <lwip_recv_tcp+0x11a>
 800a6bc:	f04f 0b00 	mov.w	fp, #0
 800a6c0:	e7c3      	b.n	800a64a <lwip_recv_tcp+0x72>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800a6c2:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <lwip_recv_tcp+0x144>)
 800a6c4:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800a6c8:	4918      	ldr	r1, [pc, #96]	@ (800a72c <lwip_recv_tcp+0x154>)
 800a6ca:	4816      	ldr	r0, [pc, #88]	@ (800a724 <lwip_recv_tcp+0x14c>)
 800a6cc:	f00a f922 	bl	8014914 <iprintf>
      if (p->tot_len - copylen > 0) {
 800a6d0:	9801      	ldr	r0, [sp, #4]
 800a6d2:	8903      	ldrh	r3, [r0, #8]
 800a6d4:	e7c1      	b.n	800a65a <lwip_recv_tcp+0x82>
      LWIP_ASSERT("p != NULL", p != NULL);
 800a6d6:	4b11      	ldr	r3, [pc, #68]	@ (800a71c <lwip_recv_tcp+0x144>)
 800a6d8:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800a6dc:	4914      	ldr	r1, [pc, #80]	@ (800a730 <lwip_recv_tcp+0x158>)
 800a6de:	4811      	ldr	r0, [pc, #68]	@ (800a724 <lwip_recv_tcp+0x14c>)
 800a6e0:	f00a f918 	bl	8014914 <iprintf>
      sock->lastdata.pbuf = p;
 800a6e4:	9801      	ldr	r0, [sp, #4]
 800a6e6:	e7d1      	b.n	800a68c <lwip_recv_tcp+0xb4>
        if (recvd > 0) {
 800a6e8:	b167      	cbz	r7, 800a704 <lwip_recv_tcp+0x12c>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800a6ea:	f019 0f01 	tst.w	r9, #1
 800a6ee:	46bb      	mov	fp, r7
 800a6f0:	d1ab      	bne.n	800a64a <lwip_recv_tcp+0x72>
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800a6f2:	4659      	mov	r1, fp
 800a6f4:	f8d8 0000 	ldr.w	r0, [r8]
 800a6f8:	f7fe fc54 	bl	8008fa4 <netconn_tcp_recvd>
}
 800a6fc:	4658      	mov	r0, fp
 800a6fe:	b003      	add	sp, #12
 800a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sock_set_errno(sock, err_to_errno(err));
 800a704:	f7ff fec0 	bl	800a488 <err_to_errno>
 800a708:	b108      	cbz	r0, 800a70e <lwip_recv_tcp+0x136>
 800a70a:	4b0a      	ldr	r3, [pc, #40]	@ (800a734 <lwip_recv_tcp+0x15c>)
 800a70c:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 800a70e:	f114 010f 	adds.w	r1, r4, #15
 800a712:	bf18      	it	ne
 800a714:	2101      	movne	r1, #1
 800a716:	f1c1 0b00 	rsb	fp, r1, #0
 800a71a:	e796      	b.n	800a64a <lwip_recv_tcp+0x72>
 800a71c:	080164b8 	.word	0x080164b8
 800a720:	0801650c 	.word	0x0801650c
 800a724:	08015bd0 	.word	0x08015bd0
 800a728:	08016530 	.word	0x08016530
 800a72c:	08016558 	.word	0x08016558
 800a730:	08018490 	.word	0x08018490
 800a734:	240109dc 	.word	0x240109dc

0800a738 <lwip_sock_make_addr.constprop.0.isra.0>:
#endif

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
 800a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73a:	4606      	mov	r6, r0
 800a73c:	b085      	sub	sp, #20
 800a73e:	460f      	mov	r7, r1
 800a740:	461c      	mov	r4, r3
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
  LWIP_ASSERT("from != NULL", from != NULL);
 800a742:	4615      	mov	r5, r2
 800a744:	b302      	cbz	r2, 800a788 <lwip_sock_make_addr.constprop.0.isra.0+0x50>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800a746:	b344      	cbz	r4, 800a79a <lwip_sock_make_addr.constprop.0.isra.0+0x62>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a748:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800a74c:	4638      	mov	r0, r7
 800a74e:	f8ad 3000 	strh.w	r3, [sp]
 800a752:	f000 fdd5 	bl	800b300 <lwip_htons>
  if (*fromlen < saddr.sa.sa_len) {
 800a756:	6822      	ldr	r2, [r4, #0]
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a758:	2300      	movs	r3, #0
 800a75a:	6831      	ldr	r1, [r6, #0]
    truncated = 1;
  } else if (*fromlen > saddr.sa.sa_len) {
 800a75c:	2a10      	cmp	r2, #16
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a75e:	f8ad 0002 	strh.w	r0, [sp, #2]
 800a762:	9101      	str	r1, [sp, #4]
 800a764:	e9cd 3302 	strd	r3, r3, [sp, #8]
  } else if (*fromlen > saddr.sa.sa_len) {
 800a768:	d805      	bhi.n	800a776 <lwip_sock_make_addr.constprop.0.isra.0+0x3e>
    *fromlen = saddr.sa.sa_len;
  }
  MEMCPY(from, &saddr, *fromlen);
 800a76a:	4669      	mov	r1, sp
 800a76c:	4628      	mov	r0, r5
 800a76e:	f00a fa66 	bl	8014c3e <memcpy>
  return truncated;
}
 800a772:	b005      	add	sp, #20
 800a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *fromlen = saddr.sa.sa_len;
 800a776:	2310      	movs	r3, #16
  MEMCPY(from, &saddr, *fromlen);
 800a778:	4669      	mov	r1, sp
 800a77a:	4628      	mov	r0, r5
    *fromlen = saddr.sa.sa_len;
 800a77c:	461a      	mov	r2, r3
 800a77e:	6023      	str	r3, [r4, #0]
  MEMCPY(from, &saddr, *fromlen);
 800a780:	f00a fa5d 	bl	8014c3e <memcpy>
}
 800a784:	b005      	add	sp, #20
 800a786:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("from != NULL", from != NULL);
 800a788:	4b08      	ldr	r3, [pc, #32]	@ (800a7ac <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 800a78a:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800a78e:	4908      	ldr	r1, [pc, #32]	@ (800a7b0 <lwip_sock_make_addr.constprop.0.isra.0+0x78>)
 800a790:	4808      	ldr	r0, [pc, #32]	@ (800a7b4 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 800a792:	f00a f8bf 	bl	8014914 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800a796:	2c00      	cmp	r4, #0
 800a798:	d1d6      	bne.n	800a748 <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 800a79a:	4b04      	ldr	r3, [pc, #16]	@ (800a7ac <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 800a79c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a7a0:	4905      	ldr	r1, [pc, #20]	@ (800a7b8 <lwip_sock_make_addr.constprop.0.isra.0+0x80>)
 800a7a2:	4804      	ldr	r0, [pc, #16]	@ (800a7b4 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 800a7a4:	f00a f8b6 	bl	8014914 <iprintf>
 800a7a8:	e7ce      	b.n	800a748 <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 800a7aa:	bf00      	nop
 800a7ac:	080164b8 	.word	0x080164b8
 800a7b0:	08016568 	.word	0x08016568
 800a7b4:	08015bd0 	.word	0x08015bd0
 800a7b8:	08016578 	.word	0x08016578

0800a7bc <lwip_recvfrom_udp_raw.constprop.0>:

/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 800a7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c0:	4699      	mov	r9, r3
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800a7c2:	6893      	ldr	r3, [r2, #8]
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	4615      	mov	r5, r2
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	460f      	mov	r7, r1
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d050      	beq.n	800a872 <lwip_recvfrom_udp_raw.constprop.0+0xb6>
    apiflags = 0;
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800a7d0:	6843      	ldr	r3, [r0, #4]
 800a7d2:	9301      	str	r3, [sp, #4]
  if (buf == NULL) {
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d052      	beq.n	800a87e <lwip_recvfrom_udp_raw.constprop.0+0xc2>
      return err;
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
    sock->lastdata.netbuf = buf;
  }
  buflen = buf->p->tot_len;
 800a7d8:	6818      	ldr	r0, [r3, #0]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a7da:	68eb      	ldr	r3, [r5, #12]
  buflen = buf->p->tot_len;
 800a7dc:	8906      	ldrh	r6, [r0, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	dd16      	ble.n	800a810 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 800a7e2:	b1ae      	cbz	r6, 800a810 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 800a7e4:	2400      	movs	r4, #0
  copied = 0;
 800a7e6:	4623      	mov	r3, r4
    u16_t len_left = (u16_t)(buflen - copied);
    if (msg->msg_iov[i].iov_len > len_left) {
 800a7e8:	68a9      	ldr	r1, [r5, #8]
    u16_t len_left = (u16_t)(buflen - copied);
 800a7ea:	eba6 0c03 	sub.w	ip, r6, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 800a7ee:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
      copylen = (u16_t)msg->msg_iov[i].iov_len;
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a7f2:	f851 1034 	ldr.w	r1, [r1, r4, lsl #3]
    u16_t len_left = (u16_t)(buflen - copied);
 800a7f6:	fa1f fc8c 	uxth.w	ip, ip
    if (msg->msg_iov[i].iov_len > len_left) {
 800a7fa:	f8d2 e004 	ldr.w	lr, [r2, #4]
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800a7fe:	fa1f f28e 	uxth.w	r2, lr
    if (msg->msg_iov[i].iov_len > len_left) {
 800a802:	45e6      	cmp	lr, ip
    copied = (u16_t)(copied + copylen);
 800a804:	eb02 0e03 	add.w	lr, r2, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 800a808:	d914      	bls.n	800a834 <lwip_recvfrom_udp_raw.constprop.0+0x78>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a80a:	4662      	mov	r2, ip
 800a80c:	f001 ff76 	bl	800c6fc <pbuf_copy_partial>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800a810:	682a      	ldr	r2, [r5, #0]
 800a812:	b10a      	cbz	r2, 800a818 <lwip_recvfrom_udp_raw.constprop.0+0x5c>
 800a814:	686b      	ldr	r3, [r5, #4]
 800a816:	b9fb      	cbnz	r3, 800a858 <lwip_recvfrom_udp_raw.constprop.0+0x9c>
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800a818:	2300      	movs	r3, #0

  if (msg->msg_control) {
 800a81a:	692a      	ldr	r2, [r5, #16]
  msg->msg_flags = 0;
 800a81c:	61ab      	str	r3, [r5, #24]
  if (msg->msg_control) {
 800a81e:	b102      	cbz	r2, 800a822 <lwip_recvfrom_udp_raw.constprop.0+0x66>
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
      msg->msg_controllen = 0;
 800a820:	616b      	str	r3, [r5, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800a822:	f017 0701 	ands.w	r7, r7, #1
 800a826:	d01e      	beq.n	800a866 <lwip_recvfrom_udp_raw.constprop.0+0xaa>
    netbuf_delete(buf);
  }
  if (datagram_len) {
    *datagram_len = buflen;
  }
  return ERR_OK;
 800a828:	2000      	movs	r0, #0
    *datagram_len = buflen;
 800a82a:	f8a9 6000 	strh.w	r6, [r9]
}
 800a82e:	b002      	add	sp, #8
 800a830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    copied = (u16_t)(copied + copylen);
 800a834:	fa1f fa8e 	uxth.w	sl, lr
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a838:	3401      	adds	r4, #1
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a83a:	f001 ff5f 	bl	800c6fc <pbuf_copy_partial>
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a83e:	68e9      	ldr	r1, [r5, #12]
 800a840:	4556      	cmp	r6, sl
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a842:	4653      	mov	r3, sl
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a844:	bf94      	ite	ls
 800a846:	2200      	movls	r2, #0
 800a848:	2201      	movhi	r2, #1
 800a84a:	428c      	cmp	r4, r1
 800a84c:	dae0      	bge.n	800a810 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 800a84e:	2a00      	cmp	r2, #0
 800a850:	d0de      	beq.n	800a810 <lwip_recvfrom_udp_raw.constprop.0+0x54>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a852:	9a01      	ldr	r2, [sp, #4]
 800a854:	6810      	ldr	r0, [r2, #0]
 800a856:	e7c7      	b.n	800a7e8 <lwip_recvfrom_udp_raw.constprop.0+0x2c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800a858:	9801      	ldr	r0, [sp, #4]
 800a85a:	1d2b      	adds	r3, r5, #4
 800a85c:	8981      	ldrh	r1, [r0, #12]
 800a85e:	3008      	adds	r0, #8
 800a860:	f7ff ff6a 	bl	800a738 <lwip_sock_make_addr.constprop.0.isra.0>
 800a864:	e7d8      	b.n	800a818 <lwip_recvfrom_udp_raw.constprop.0+0x5c>
    netbuf_delete(buf);
 800a866:	9801      	ldr	r0, [sp, #4]
    sock->lastdata.netbuf = NULL;
 800a868:	f8c8 7004 	str.w	r7, [r8, #4]
    netbuf_delete(buf);
 800a86c:	f7ff fe1a 	bl	800a4a4 <netbuf_delete>
  if (datagram_len) {
 800a870:	e7da      	b.n	800a828 <lwip_recvfrom_udp_raw.constprop.0+0x6c>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800a872:	68d3      	ldr	r3, [r2, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dc1d      	bgt.n	800a8b4 <lwip_recvfrom_udp_raw.constprop.0+0xf8>
  buf = sock->lastdata.netbuf;
 800a878:	6843      	ldr	r3, [r0, #4]
 800a87a:	9301      	str	r3, [sp, #4]
  if (buf == NULL) {
 800a87c:	b973      	cbnz	r3, 800a89c <lwip_recvfrom_udp_raw.constprop.0+0xe0>
  if (flags & MSG_DONTWAIT) {
 800a87e:	f3c7 02c0 	ubfx	r2, r7, #3, #1
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800a882:	a901      	add	r1, sp, #4
 800a884:	f8d8 0000 	ldr.w	r0, [r8]
  if (flags & MSG_DONTWAIT) {
 800a888:	0092      	lsls	r2, r2, #2
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800a88a:	f7fe fbd1 	bl	8009030 <netconn_recv_udp_raw_netbuf_flags>
    if (err != ERR_OK) {
 800a88e:	2800      	cmp	r0, #0
 800a890:	d1cd      	bne.n	800a82e <lwip_recvfrom_udp_raw.constprop.0+0x72>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a892:	9b01      	ldr	r3, [sp, #4]
 800a894:	b12b      	cbz	r3, 800a8a2 <lwip_recvfrom_udp_raw.constprop.0+0xe6>
    sock->lastdata.netbuf = buf;
 800a896:	f8c8 3004 	str.w	r3, [r8, #4]
 800a89a:	e79d      	b.n	800a7d8 <lwip_recvfrom_udp_raw.constprop.0+0x1c>
  buflen = buf->p->tot_len;
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	891e      	ldrh	r6, [r3, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a8a0:	e7b6      	b.n	800a810 <lwip_recvfrom_udp_raw.constprop.0+0x54>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a8a2:	4b09      	ldr	r3, [pc, #36]	@ (800a8c8 <lwip_recvfrom_udp_raw.constprop.0+0x10c>)
 800a8a4:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a8a8:	4908      	ldr	r1, [pc, #32]	@ (800a8cc <lwip_recvfrom_udp_raw.constprop.0+0x110>)
 800a8aa:	4809      	ldr	r0, [pc, #36]	@ (800a8d0 <lwip_recvfrom_udp_raw.constprop.0+0x114>)
 800a8ac:	f00a f832 	bl	8014914 <iprintf>
    sock->lastdata.netbuf = buf;
 800a8b0:	9b01      	ldr	r3, [sp, #4]
 800a8b2:	e7f0      	b.n	800a896 <lwip_recvfrom_udp_raw.constprop.0+0xda>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800a8b4:	4b04      	ldr	r3, [pc, #16]	@ (800a8c8 <lwip_recvfrom_udp_raw.constprop.0+0x10c>)
 800a8b6:	f240 4249 	movw	r2, #1097	@ 0x449
 800a8ba:	4906      	ldr	r1, [pc, #24]	@ (800a8d4 <lwip_recvfrom_udp_raw.constprop.0+0x118>)
 800a8bc:	4804      	ldr	r0, [pc, #16]	@ (800a8d0 <lwip_recvfrom_udp_raw.constprop.0+0x114>)
 800a8be:	f00a f829 	bl	8014914 <iprintf>
 800a8c2:	f06f 000f 	mvn.w	r0, #15
 800a8c6:	e7b2      	b.n	800a82e <lwip_recvfrom_udp_raw.constprop.0+0x72>
 800a8c8:	080164b8 	.word	0x080164b8
 800a8cc:	08015d18 	.word	0x08015d18
 800a8d0:	08015bd0 	.word	0x08015bd0
 800a8d4:	08016588 	.word	0x08016588

0800a8d8 <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	f000 80bb 	beq.w	800aa54 <event_callback+0x17c>
{
 800a8de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    s = conn->socket;
 800a8e2:	6984      	ldr	r4, [r0, #24]
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	460f      	mov	r7, r1
    if (s < 0) {
 800a8e8:	2c00      	cmp	r4, #0
 800a8ea:	db17      	blt.n	800a91c <event_callback+0x44>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a8ec:	2c03      	cmp	r4, #3
 800a8ee:	dc10      	bgt.n	800a912 <event_callback+0x3a>
    if (sock->conn) {
 800a8f0:	4d61      	ldr	r5, [pc, #388]	@ (800aa78 <event_callback+0x1a0>)
 800a8f2:	ea4f 1804 	mov.w	r8, r4, lsl #4
 800a8f6:	f855 3008 	ldr.w	r3, [r5, r8]
 800a8fa:	b153      	cbz	r3, 800a912 <event_callback+0x3a>
  } else {
    return;
  }

  check_waiters = 1;
  SYS_ARCH_PROTECT(lev);
 800a8fc:	f009 fd8c 	bl	8014418 <sys_arch_protect>
 800a900:	4606      	mov	r6, r0
  /* Set event as required */
  switch (evt) {
 800a902:	2f04      	cmp	r7, #4
 800a904:	f200 80aa 	bhi.w	800aa5c <event_callback+0x184>
 800a908:	e8df f007 	tbb	[pc, r7]
 800a90c:	5159696e 	.word	0x5159696e
 800a910:	11          	.byte	0x11
 800a911:	00          	.byte	0x00
    set_errno(EBADF);
 800a912:	4b5a      	ldr	r3, [pc, #360]	@ (800aa7c <event_callback+0x1a4>)
 800a914:	2209      	movs	r2, #9
 800a916:	601a      	str	r2, [r3, #0]
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
  } else {
    SYS_ARCH_UNPROTECT(lev);
  }
  done_socket(sock);
}
 800a918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SYS_ARCH_PROTECT(lev);
 800a91c:	f009 fd7c 	bl	8014418 <sys_arch_protect>
      if (conn->socket < 0) {
 800a920:	69ac      	ldr	r4, [r5, #24]
      SYS_ARCH_PROTECT(lev);
 800a922:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 800a924:	2c00      	cmp	r4, #0
 800a926:	db6e      	blt.n	800aa06 <event_callback+0x12e>
      SYS_ARCH_UNPROTECT(lev);
 800a928:	f009 fd82 	bl	8014430 <sys_arch_unprotect>
 800a92c:	e7de      	b.n	800a8ec <event_callback+0x14>
      sock->errevent = 1;
 800a92e:	4445      	add	r5, r8
 800a930:	f04f 0801 	mov.w	r8, #1
  if (sock->select_waiting && check_waiters) {
 800a934:	7bab      	ldrb	r3, [r5, #14]
      sock->errevent = 1;
 800a936:	f8a5 800c 	strh.w	r8, [r5, #12]
  if (sock->select_waiting && check_waiters) {
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d03a      	beq.n	800a9b4 <event_callback+0xdc>
    has_recvevent = sock->rcvevent > 0;
 800a93e:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    has_sendevent = sock->sendevent != 0;
 800a942:	f8b5 900a 	ldrh.w	r9, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 800a946:	4630      	mov	r0, r6
 800a948:	f009 fd72 	bl	8014430 <sys_arch_unprotect>
#if !LWIP_TCPIP_CORE_LOCKING
  int last_select_cb_ctr;
  SYS_ARCH_DECL_PROTECT(lev);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  LWIP_ASSERT_CORE_LOCKED();
 800a94c:	f7fb fcd4 	bl	80062f8 <sys_check_core_locking>
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a950:	4b4b      	ldr	r3, [pc, #300]	@ (800aa80 <event_callback+0x1a8>)
 800a952:	681d      	ldr	r5, [r3, #0]
 800a954:	2d00      	cmp	r5, #0
 800a956:	d0df      	beq.n	800a918 <event_callback+0x40>
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
        scb->sem_signalled = 1;
 800a958:	2601      	movs	r6, #1
    if (scb->sem_signalled == 0) {
 800a95a:	69eb      	ldr	r3, [r5, #28]
 800a95c:	bb1b      	cbnz	r3, 800a9a6 <event_callback+0xce>
      if (scb->poll_fds != NULL) {
 800a95e:	6969      	ldr	r1, [r5, #20]
 800a960:	2900      	cmp	r1, #0
 800a962:	d058      	beq.n	800aa16 <event_callback+0x13e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800a964:	69a8      	ldr	r0, [r5, #24]
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a966:	b1f0      	cbz	r0, 800a9a6 <event_callback+0xce>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a968:	f101 0c04 	add.w	ip, r1, #4
 800a96c:	e002      	b.n	800a974 <event_callback+0x9c>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a96e:	3301      	adds	r3, #1
 800a970:	4298      	cmp	r0, r3
 800a972:	d018      	beq.n	800a9a6 <event_callback+0xce>
    if (pollfd->fd == fd) {
 800a974:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800a978:	4294      	cmp	r4, r2
 800a97a:	d1f8      	bne.n	800a96e <event_callback+0x96>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800a97c:	2f00      	cmp	r7, #0
 800a97e:	dd03      	ble.n	800a988 <event_callback+0xb0>
 800a980:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 800a984:	07d2      	lsls	r2, r2, #31
 800a986:	d409      	bmi.n	800a99c <event_callback+0xc4>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a988:	f1b9 0f00 	cmp.w	r9, #0
 800a98c:	d003      	beq.n	800a996 <event_callback+0xbe>
 800a98e:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 800a992:	0792      	lsls	r2, r2, #30
 800a994:	d402      	bmi.n	800a99c <event_callback+0xc4>
      if (has_errevent) {
 800a996:	f1b8 0f00 	cmp.w	r8, #0
 800a99a:	d0e8      	beq.n	800a96e <event_callback+0x96>
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a99c:	f105 0020 	add.w	r0, r5, #32
        scb->sem_signalled = 1;
 800a9a0:	61ee      	str	r6, [r5, #28]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a9a2:	f009 fcf1 	bl	8014388 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a9a6:	682d      	ldr	r5, [r5, #0]
 800a9a8:	2d00      	cmp	r5, #0
 800a9aa:	d1d6      	bne.n	800a95a <event_callback+0x82>
 800a9ac:	e7b4      	b.n	800a918 <event_callback+0x40>
      sock->sendevent = 0;
 800a9ae:	4445      	add	r5, r8
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	816b      	strh	r3, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 800a9b4:	4630      	mov	r0, r6
}
 800a9b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SYS_ARCH_UNPROTECT(lev);
 800a9ba:	f009 bd39 	b.w	8014430 <sys_arch_unprotect>
      if (sock->sendevent) {
 800a9be:	4445      	add	r5, r8
 800a9c0:	896b      	ldrh	r3, [r5, #10]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d147      	bne.n	800aa56 <event_callback+0x17e>
      sock->sendevent = 1;
 800a9c6:	f04f 0901 	mov.w	r9, #1
  if (sock->select_waiting && check_waiters) {
 800a9ca:	7bab      	ldrb	r3, [r5, #14]
      sock->sendevent = 1;
 800a9cc:	f8a5 900a 	strh.w	r9, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0ef      	beq.n	800a9b4 <event_callback+0xdc>
    has_recvevent = sock->rcvevent > 0;
 800a9d4:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    has_errevent = sock->errevent != 0;
 800a9d8:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 800a9dc:	e7b3      	b.n	800a946 <event_callback+0x6e>
      sock->rcvevent--;
 800a9de:	4445      	add	r5, r8
 800a9e0:	892b      	ldrh	r3, [r5, #8]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	812b      	strh	r3, [r5, #8]
  if (sock->select_waiting && check_waiters) {
 800a9e6:	e7e5      	b.n	800a9b4 <event_callback+0xdc>
      sock->rcvevent++;
 800a9e8:	4445      	add	r5, r8
 800a9ea:	892f      	ldrh	r7, [r5, #8]
 800a9ec:	3701      	adds	r7, #1
 800a9ee:	b23f      	sxth	r7, r7
      if (sock->rcvevent > 1) {
 800a9f0:	2f01      	cmp	r7, #1
      sock->rcvevent++;
 800a9f2:	812f      	strh	r7, [r5, #8]
      if (sock->rcvevent > 1) {
 800a9f4:	dcde      	bgt.n	800a9b4 <event_callback+0xdc>
  if (sock->select_waiting && check_waiters) {
 800a9f6:	7bab      	ldrb	r3, [r5, #14]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0db      	beq.n	800a9b4 <event_callback+0xdc>
    has_sendevent = sock->sendevent != 0;
 800a9fc:	f8b5 900a 	ldrh.w	r9, [r5, #10]
    has_errevent = sock->errevent != 0;
 800aa00:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 800aa04:	e79f      	b.n	800a946 <event_callback+0x6e>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800aa06:	b90f      	cbnz	r7, 800aa0c <event_callback+0x134>
          conn->socket--;
 800aa08:	3c01      	subs	r4, #1
 800aa0a:	61ac      	str	r4, [r5, #24]
        SYS_ARCH_UNPROTECT(lev);
 800aa0c:	4618      	mov	r0, r3
}
 800aa0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        SYS_ARCH_UNPROTECT(lev);
 800aa12:	f009 bd0d 	b.w	8014430 <sys_arch_unprotect>
        if (has_recvevent) {
 800aa16:	2f00      	cmp	r7, #0
 800aa18:	dd06      	ble.n	800aa28 <event_callback+0x150>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800aa1a:	68ab      	ldr	r3, [r5, #8]
 800aa1c:	b123      	cbz	r3, 800aa28 <event_callback+0x150>
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	2301      	movs	r3, #1
 800aa22:	40a3      	lsls	r3, r4
 800aa24:	4213      	tst	r3, r2
 800aa26:	d1b9      	bne.n	800a99c <event_callback+0xc4>
        if (has_sendevent) {
 800aa28:	f1b9 0f00 	cmp.w	r9, #0
 800aa2c:	d006      	beq.n	800aa3c <event_callback+0x164>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800aa2e:	68eb      	ldr	r3, [r5, #12]
 800aa30:	b123      	cbz	r3, 800aa3c <event_callback+0x164>
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	2301      	movs	r3, #1
 800aa36:	40a3      	lsls	r3, r4
 800aa38:	4213      	tst	r3, r2
 800aa3a:	d1af      	bne.n	800a99c <event_callback+0xc4>
        if (has_errevent) {
 800aa3c:	f1b8 0f00 	cmp.w	r8, #0
 800aa40:	d0b1      	beq.n	800a9a6 <event_callback+0xce>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800aa42:	692b      	ldr	r3, [r5, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0ae      	beq.n	800a9a6 <event_callback+0xce>
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	40a3      	lsls	r3, r4
 800aa4e:	4213      	tst	r3, r2
 800aa50:	d0a9      	beq.n	800a9a6 <event_callback+0xce>
 800aa52:	e7a3      	b.n	800a99c <event_callback+0xc4>
 800aa54:	4770      	bx	lr
      sock->sendevent = 1;
 800aa56:	2301      	movs	r3, #1
 800aa58:	816b      	strh	r3, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 800aa5a:	e7ab      	b.n	800a9b4 <event_callback+0xdc>
 800aa5c:	4445      	add	r5, r8
      LWIP_ASSERT("unknown event", 0);
 800aa5e:	4b09      	ldr	r3, [pc, #36]	@ (800aa84 <event_callback+0x1ac>)
 800aa60:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800aa64:	4908      	ldr	r1, [pc, #32]	@ (800aa88 <event_callback+0x1b0>)
 800aa66:	4809      	ldr	r0, [pc, #36]	@ (800aa8c <event_callback+0x1b4>)
 800aa68:	f009 ff54 	bl	8014914 <iprintf>
  if (sock->select_waiting && check_waiters) {
 800aa6c:	7bab      	ldrb	r3, [r5, #14]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0a0      	beq.n	800a9b4 <event_callback+0xdc>
    has_recvevent = sock->rcvevent > 0;
 800aa72:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800aa76:	e7c1      	b.n	800a9fc <event_callback+0x124>
 800aa78:	24009bd8 	.word	0x24009bd8
 800aa7c:	240109dc 	.word	0x240109dc
 800aa80:	24009bd0 	.word	0x24009bd0
 800aa84:	080164b8 	.word	0x080164b8
 800aa88:	080165b4 	.word	0x080165b4
 800aa8c:	08015bd0 	.word	0x08015bd0

0800aa90 <lwip_close>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800aa90:	2803      	cmp	r0, #3
 800aa92:	d835      	bhi.n	800ab00 <lwip_close+0x70>
    if (sock->conn) {
 800aa94:	4603      	mov	r3, r0
{
 800aa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (sock->conn) {
 800aa9a:	4d20      	ldr	r5, [pc, #128]	@ (800ab1c <lwip_close+0x8c>)
 800aa9c:	0106      	lsls	r6, r0, #4
 800aa9e:	59a8      	ldr	r0, [r5, r6]
 800aaa0:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 800aaa4:	b300      	cbz	r0, 800aae8 <lwip_close+0x58>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800aaa6:	7807      	ldrb	r7, [r0, #0]
  err = netconn_prepare_delete(sock->conn);
 800aaa8:	f7fe f9b2 	bl	8008e10 <netconn_prepare_delete>
  if (err != ERR_OK) {
 800aaac:	bb70      	cbnz	r0, 800ab0c <lwip_close+0x7c>
  SYS_ARCH_PROTECT(lev);
 800aaae:	f009 fcb3 	bl	8014418 <sys_arch_protect>
  *lastdata = sock->lastdata;
 800aab2:	1d2b      	adds	r3, r5, #4
  *conn = sock->conn;
 800aab4:	f855 8006 	ldr.w	r8, [r5, r6]
  sock->conn = NULL;
 800aab8:	2200      	movs	r2, #0
  *lastdata = sock->lastdata;
 800aaba:	599d      	ldr	r5, [r3, r6]
  sock->conn = NULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	e9c4 2300 	strd	r2, r3, [r4]
  SYS_ARCH_UNPROTECT(lev);
 800aac2:	f009 fcb5 	bl	8014430 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 800aac6:	b135      	cbz	r5, 800aad6 <lwip_close+0x46>
    if (is_tcp) {
 800aac8:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
      pbuf_free(lastdata->pbuf);
 800aacc:	4628      	mov	r0, r5
    if (is_tcp) {
 800aace:	2f10      	cmp	r7, #16
 800aad0:	d110      	bne.n	800aaf4 <lwip_close+0x64>
      pbuf_free(lastdata->pbuf);
 800aad2:	f001 fb2f 	bl	800c134 <pbuf_free>
  if (conn != NULL) {
 800aad6:	f1b8 0f00 	cmp.w	r8, #0
 800aada:	d002      	beq.n	800aae2 <lwip_close+0x52>
    netconn_delete(conn);
 800aadc:	4640      	mov	r0, r8
 800aade:	f7fe f9b3 	bl	8008e48 <netconn_delete>
  return 0;
 800aae2:	2000      	movs	r0, #0
}
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    set_errno(EBADF);
 800aae8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab20 <lwip_close+0x90>)
 800aaea:	2209      	movs	r2, #9
 800aaec:	601a      	str	r2, [r3, #0]
    return -1;
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	e7f7      	b.n	800aae4 <lwip_close+0x54>
      netbuf_delete(lastdata->netbuf);
 800aaf4:	f7ff fcd6 	bl	800a4a4 <netbuf_delete>
  if (conn != NULL) {
 800aaf8:	f1b8 0f00 	cmp.w	r8, #0
 800aafc:	d1ee      	bne.n	800aadc <lwip_close+0x4c>
 800aafe:	e7f0      	b.n	800aae2 <lwip_close+0x52>
    set_errno(EBADF);
 800ab00:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <lwip_close+0x90>)
 800ab02:	2209      	movs	r2, #9
    return -1;
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 800ab08:	601a      	str	r2, [r3, #0]
}
 800ab0a:	4770      	bx	lr
    sock_set_errno(sock, err_to_errno(err));
 800ab0c:	f7ff fcbc 	bl	800a488 <err_to_errno>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d0ec      	beq.n	800aaee <lwip_close+0x5e>
 800ab14:	4b02      	ldr	r3, [pc, #8]	@ (800ab20 <lwip_close+0x90>)
 800ab16:	6018      	str	r0, [r3, #0]
 800ab18:	e7e9      	b.n	800aaee <lwip_close+0x5e>
 800ab1a:	bf00      	nop
 800ab1c:	24009bd8 	.word	0x24009bd8
 800ab20:	240109dc 	.word	0x240109dc

0800ab24 <lwip_connect>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800ab24:	2803      	cmp	r0, #3
 800ab26:	d823      	bhi.n	800ab70 <lwip_connect+0x4c>
{
 800ab28:	b530      	push	{r4, r5, lr}
    if (sock->conn) {
 800ab2a:	4d1c      	ldr	r5, [pc, #112]	@ (800ab9c <lwip_connect+0x78>)
 800ab2c:	0104      	lsls	r4, r0, #4
{
 800ab2e:	b083      	sub	sp, #12
    if (sock->conn) {
 800ab30:	5928      	ldr	r0, [r5, r4]
 800ab32:	b1b8      	cbz	r0, 800ab64 <lwip_connect+0x40>
  if (name->sa_family == AF_UNSPEC) {
 800ab34:	784b      	ldrb	r3, [r1, #1]
 800ab36:	b193      	cbz	r3, 800ab5e <lwip_connect+0x3a>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800ab38:	2a10      	cmp	r2, #16
 800ab3a:	d11f      	bne.n	800ab7c <lwip_connect+0x58>
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d11d      	bne.n	800ab7c <lwip_connect+0x58>
 800ab40:	078b      	lsls	r3, r1, #30
 800ab42:	d11b      	bne.n	800ab7c <lwip_connect+0x58>
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800ab44:	684b      	ldr	r3, [r1, #4]
 800ab46:	8848      	ldrh	r0, [r1, #2]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	f000 fbd9 	bl	800b300 <lwip_htons>
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800ab4e:	a901      	add	r1, sp, #4
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800ab50:	4602      	mov	r2, r0
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800ab52:	5928      	ldr	r0, [r5, r4]
 800ab54:	f7fe f9d6 	bl	8008f04 <netconn_connect>
  if (err != ERR_OK) {
 800ab58:	b9c8      	cbnz	r0, 800ab8e <lwip_connect+0x6a>
}
 800ab5a:	b003      	add	sp, #12
 800ab5c:	bd30      	pop	{r4, r5, pc}
    err = netconn_disconnect(sock->conn);
 800ab5e:	f7fe f9fd 	bl	8008f5c <netconn_disconnect>
 800ab62:	e7f9      	b.n	800ab58 <lwip_connect+0x34>
    set_errno(EBADF);
 800ab64:	4b0e      	ldr	r3, [pc, #56]	@ (800aba0 <lwip_connect+0x7c>)
 800ab66:	2209      	movs	r2, #9
 800ab68:	601a      	str	r2, [r3, #0]
    return -1;
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6e:	e7f4      	b.n	800ab5a <lwip_connect+0x36>
    set_errno(EBADF);
 800ab70:	4b0b      	ldr	r3, [pc, #44]	@ (800aba0 <lwip_connect+0x7c>)
 800ab72:	2209      	movs	r2, #9
    return -1;
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 800ab78:	601a      	str	r2, [r3, #0]
}
 800ab7a:	4770      	bx	lr
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800ab7c:	4b09      	ldr	r3, [pc, #36]	@ (800aba4 <lwip_connect+0x80>)
 800ab7e:	f240 3247 	movw	r2, #839	@ 0x347
 800ab82:	4909      	ldr	r1, [pc, #36]	@ (800aba8 <lwip_connect+0x84>)
 800ab84:	4809      	ldr	r0, [pc, #36]	@ (800abac <lwip_connect+0x88>)
 800ab86:	f009 fec5 	bl	8014914 <iprintf>
 800ab8a:	f06f 000f 	mvn.w	r0, #15
 800ab8e:	f7ff fc7b 	bl	800a488 <err_to_errno>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d0e9      	beq.n	800ab6a <lwip_connect+0x46>
 800ab96:	4b02      	ldr	r3, [pc, #8]	@ (800aba0 <lwip_connect+0x7c>)
 800ab98:	6018      	str	r0, [r3, #0]
 800ab9a:	e7e6      	b.n	800ab6a <lwip_connect+0x46>
 800ab9c:	24009bd8 	.word	0x24009bd8
 800aba0:	240109dc 	.word	0x240109dc
 800aba4:	080164b8 	.word	0x080164b8
 800aba8:	080165c4 	.word	0x080165c4
 800abac:	08015bd0 	.word	0x08015bd0

0800abb0 <lwip_recvfrom>:
{
 800abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800abb4:	2803      	cmp	r0, #3
{
 800abb6:	b08a      	sub	sp, #40	@ 0x28
 800abb8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800abba:	d836      	bhi.n	800ac2a <lwip_recvfrom+0x7a>
    if (sock->conn) {
 800abbc:	4f35      	ldr	r7, [pc, #212]	@ (800ac94 <lwip_recvfrom+0xe4>)
 800abbe:	ea4f 1800 	mov.w	r8, r0, lsl #4
 800abc2:	f857 e008 	ldr.w	lr, [r7, r8]
 800abc6:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 800abca:	f1be 0f00 	cmp.w	lr, #0
 800abce:	d02c      	beq.n	800ac2a <lwip_recvfrom+0x7a>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800abd0:	f89e e000 	ldrb.w	lr, [lr]
 800abd4:	f00e 0ef0 	and.w	lr, lr, #240	@ 0xf0
 800abd8:	f1be 0f10 	cmp.w	lr, #16
 800abdc:	d03c      	beq.n	800ac58 <lwip_recvfrom+0xa8>
    u16_t datagram_len = 0;
 800abde:	469c      	mov	ip, r3
    msg.msg_iov = &vec;
 800abe0:	ab01      	add	r3, sp, #4
 800abe2:	4614      	mov	r4, r2
    vec.iov_len = len;
 800abe4:	9202      	str	r2, [sp, #8]
    msg.msg_iov = &vec;
 800abe6:	9305      	str	r3, [sp, #20]
    msg.msg_iovlen = 1;
 800abe8:	2301      	movs	r3, #1
    msg.msg_name = from;
 800abea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    msg.msg_iovlen = 1;
 800abec:	9306      	str	r3, [sp, #24]
    u16_t datagram_len = 0;
 800abee:	2300      	movs	r3, #0
    vec.iov_base = mem;
 800abf0:	9101      	str	r1, [sp, #4]
    msg.msg_name = from;
 800abf2:	9203      	str	r2, [sp, #12]
    u16_t datagram_len = 0;
 800abf4:	f8ad 3002 	strh.w	r3, [sp, #2]
    msg.msg_flags = 0;
 800abf8:	9309      	str	r3, [sp, #36]	@ 0x24
    msg.msg_controllen = 0;
 800abfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800abfe:	b1d6      	cbz	r6, 800ac36 <lwip_recvfrom+0x86>
 800ac00:	6833      	ldr	r3, [r6, #0]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ac02:	4661      	mov	r1, ip
 800ac04:	aa03      	add	r2, sp, #12
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ac06:	9304      	str	r3, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ac08:	f10d 0302 	add.w	r3, sp, #2
 800ac0c:	f7ff fdd6 	bl	800a7bc <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d138      	bne.n	800ac86 <lwip_recvfrom+0xd6>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ac14:	f8bd 0002 	ldrh.w	r0, [sp, #2]
      *fromlen = msg.msg_namelen;
 800ac18:	9b04      	ldr	r3, [sp, #16]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ac1a:	4284      	cmp	r4, r0
      *fromlen = msg.msg_namelen;
 800ac1c:	6033      	str	r3, [r6, #0]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ac1e:	bf28      	it	cs
 800ac20:	4604      	movcs	r4, r0
}
 800ac22:	4620      	mov	r0, r4
 800ac24:	b00a      	add	sp, #40	@ 0x28
 800ac26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    set_errno(EBADF);
 800ac2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ac98 <lwip_recvfrom+0xe8>)
 800ac2c:	2209      	movs	r2, #9
 800ac2e:	601a      	str	r2, [r3, #0]
    return -1;
 800ac30:	f04f 34ff 	mov.w	r4, #4294967295
 800ac34:	e7f5      	b.n	800ac22 <lwip_recvfrom+0x72>
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ac36:	f10d 0302 	add.w	r3, sp, #2
 800ac3a:	4661      	mov	r1, ip
 800ac3c:	aa03      	add	r2, sp, #12
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ac3e:	9604      	str	r6, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ac40:	f7ff fdbc 	bl	800a7bc <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 800ac44:	b9f8      	cbnz	r0, 800ac86 <lwip_recvfrom+0xd6>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ac46:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800ac4a:	4284      	cmp	r4, r0
 800ac4c:	bf28      	it	cs
 800ac4e:	4604      	movcs	r4, r0
}
 800ac50:	4620      	mov	r0, r4
 800ac52:	b00a      	add	sp, #40	@ 0x28
 800ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ac58:	f7ff fcbe 	bl	800a5d8 <lwip_recv_tcp>
  if (from && fromlen)
 800ac5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ac5e:	4604      	mov	r4, r0
  if (from && fromlen)
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0de      	beq.n	800ac22 <lwip_recvfrom+0x72>
 800ac64:	2e00      	cmp	r6, #0
 800ac66:	d0dc      	beq.n	800ac22 <lwip_recvfrom+0x72>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800ac68:	aa01      	add	r2, sp, #4
 800ac6a:	a903      	add	r1, sp, #12
 800ac6c:	f857 0008 	ldr.w	r0, [r7, r8]
 800ac70:	2300      	movs	r3, #0
 800ac72:	f7fe f909 	bl	8008e88 <netconn_getaddr>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800ac76:	4633      	mov	r3, r6
 800ac78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ac7a:	a803      	add	r0, sp, #12
 800ac7c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800ac80:	f7ff fd5a 	bl	800a738 <lwip_sock_make_addr.constprop.0.isra.0>
 800ac84:	e7cd      	b.n	800ac22 <lwip_recvfrom+0x72>
      sock_set_errno(sock, err_to_errno(err));
 800ac86:	f7ff fbff 	bl	800a488 <err_to_errno>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d0d0      	beq.n	800ac30 <lwip_recvfrom+0x80>
 800ac8e:	4b02      	ldr	r3, [pc, #8]	@ (800ac98 <lwip_recvfrom+0xe8>)
 800ac90:	6018      	str	r0, [r3, #0]
      return -1;
 800ac92:	e7cd      	b.n	800ac30 <lwip_recvfrom+0x80>
 800ac94:	24009bd8 	.word	0x24009bd8
 800ac98:	240109dc 	.word	0x240109dc

0800ac9c <lwip_recv>:
{
 800ac9c:	b510      	push	{r4, lr}
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800ac9e:	2400      	movs	r4, #0
{
 800aca0:	b082      	sub	sp, #8
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800aca2:	e9cd 4400 	strd	r4, r4, [sp]
 800aca6:	f7ff ff83 	bl	800abb0 <lwip_recvfrom>
}
 800acaa:	b002      	add	sp, #8
 800acac:	bd10      	pop	{r4, pc}
 800acae:	bf00      	nop

0800acb0 <lwip_sendto>:
{
 800acb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800acb4:	2803      	cmp	r0, #3
{
 800acb6:	b085      	sub	sp, #20
 800acb8:	e9dd 7e0c 	ldrd	r7, lr, [sp, #48]	@ 0x30
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800acbc:	d844      	bhi.n	800ad48 <lwip_sendto+0x98>
    if (sock->conn) {
 800acbe:	0104      	lsls	r4, r0, #4
 800acc0:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 800adc0 <lwip_sendto+0x110>
 800acc4:	f858 c004 	ldr.w	ip, [r8, r4]
 800acc8:	f1bc 0f00 	cmp.w	ip, #0
 800accc:	d03c      	beq.n	800ad48 <lwip_sendto+0x98>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800acce:	f89c c000 	ldrb.w	ip, [ip]
 800acd2:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
 800acd6:	f1bc 0f10 	cmp.w	ip, #16
 800acda:	d052      	beq.n	800ad82 <lwip_sendto+0xd2>
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800acdc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ace0:	4615      	mov	r5, r2
 800ace2:	d261      	bcs.n	800ada8 <lwip_sendto+0xf8>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800ace4:	ea5e 0007 	orrs.w	r0, lr, r7
 800ace8:	460e      	mov	r6, r1
  short_size = (u16_t)size;
 800acea:	fa1f f982 	uxth.w	r9, r2
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800acee:	d013      	beq.n	800ad18 <lwip_sendto+0x68>
 800acf0:	f1be 0f10 	cmp.w	lr, #16
 800acf4:	d14a      	bne.n	800ad8c <lwip_sendto+0xdc>
 800acf6:	2f00      	cmp	r7, #0
 800acf8:	d048      	beq.n	800ad8c <lwip_sendto+0xdc>
 800acfa:	787b      	ldrb	r3, [r7, #1]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d145      	bne.n	800ad8c <lwip_sendto+0xdc>
 800ad00:	07bb      	lsls	r3, r7, #30
 800ad02:	d143      	bne.n	800ad8c <lwip_sendto+0xdc>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ad04:	687b      	ldr	r3, [r7, #4]
  buf.p = buf.ptr = NULL;
 800ad06:	2200      	movs	r2, #0
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ad08:	8878      	ldrh	r0, [r7, #2]
 800ad0a:	9302      	str	r3, [sp, #8]
  buf.p = buf.ptr = NULL;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e9cd 2300 	strd	r2, r3, [sp]
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ad12:	f000 faf5 	bl	800b300 <lwip_htons>
 800ad16:	e004      	b.n	800ad22 <lwip_sendto+0x72>
  buf.p = buf.ptr = NULL;
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2300      	movs	r3, #0
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ad1c:	9002      	str	r0, [sp, #8]
  buf.p = buf.ptr = NULL;
 800ad1e:	e9cd 2300 	strd	r2, r3, [sp]
  err = netbuf_ref(&buf, data, short_size);
 800ad22:	4631      	mov	r1, r6
  netbuf_fromport(&buf) = remote_port;
 800ad24:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 800ad28:	464a      	mov	r2, r9
 800ad2a:	4668      	mov	r0, sp
 800ad2c:	f7ff fbe4 	bl	800a4f8 <netbuf_ref>
  if (err == ERR_OK) {
 800ad30:	4606      	mov	r6, r0
 800ad32:	b188      	cbz	r0, 800ad58 <lwip_sendto+0xa8>
  netbuf_free(&buf);
 800ad34:	4668      	mov	r0, sp
 800ad36:	f7ff fbc7 	bl	800a4c8 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff fba4 	bl	800a488 <err_to_errno>
 800ad40:	b128      	cbz	r0, 800ad4e <lwip_sendto+0x9e>
 800ad42:	4b1b      	ldr	r3, [pc, #108]	@ (800adb0 <lwip_sendto+0x100>)
 800ad44:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 800ad46:	e002      	b.n	800ad4e <lwip_sendto+0x9e>
    set_errno(EBADF);
 800ad48:	4b19      	ldr	r3, [pc, #100]	@ (800adb0 <lwip_sendto+0x100>)
 800ad4a:	2209      	movs	r2, #9
 800ad4c:	601a      	str	r2, [r3, #0]
    return -1;
 800ad4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ad52:	b005      	add	sp, #20
 800ad54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = netconn_send(sock->conn, &buf);
 800ad58:	4669      	mov	r1, sp
 800ad5a:	f858 0004 	ldr.w	r0, [r8, r4]
 800ad5e:	f7fe f983 	bl	8009068 <netconn_send>
 800ad62:	4604      	mov	r4, r0
  netbuf_free(&buf);
 800ad64:	4668      	mov	r0, sp
 800ad66:	f7ff fbaf 	bl	800a4c8 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7ff fb8c 	bl	800a488 <err_to_errno>
 800ad70:	b108      	cbz	r0, 800ad76 <lwip_sendto+0xc6>
 800ad72:	4b0f      	ldr	r3, [pc, #60]	@ (800adb0 <lwip_sendto+0x100>)
 800ad74:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 800ad76:	2c00      	cmp	r4, #0
 800ad78:	d1e9      	bne.n	800ad4e <lwip_sendto+0x9e>
 800ad7a:	4628      	mov	r0, r5
}
 800ad7c:	b005      	add	sp, #20
 800ad7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad82:	b005      	add	sp, #20
 800ad84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lwip_send(s, data, size, flags);
 800ad88:	f000 b81c 	b.w	800adc4 <lwip_send>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800ad8c:	4b09      	ldr	r3, [pc, #36]	@ (800adb4 <lwip_sendto+0x104>)
 800ad8e:	f240 6252 	movw	r2, #1618	@ 0x652
 800ad92:	4909      	ldr	r1, [pc, #36]	@ (800adb8 <lwip_sendto+0x108>)
 800ad94:	4809      	ldr	r0, [pc, #36]	@ (800adbc <lwip_sendto+0x10c>)
 800ad96:	f009 fdbd 	bl	8014914 <iprintf>
 800ad9a:	f06f 000f 	mvn.w	r0, #15
 800ad9e:	f7ff fb73 	bl	800a488 <err_to_errno>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0d3      	beq.n	800ad4e <lwip_sendto+0x9e>
 800ada6:	e7cc      	b.n	800ad42 <lwip_sendto+0x92>
    sock_set_errno(sock, EMSGSIZE);
 800ada8:	4b01      	ldr	r3, [pc, #4]	@ (800adb0 <lwip_sendto+0x100>)
 800adaa:	225a      	movs	r2, #90	@ 0x5a
 800adac:	601a      	str	r2, [r3, #0]
    return -1;
 800adae:	e7ce      	b.n	800ad4e <lwip_sendto+0x9e>
 800adb0:	240109dc 	.word	0x240109dc
 800adb4:	080164b8 	.word	0x080164b8
 800adb8:	080165e4 	.word	0x080165e4
 800adbc:	08015bd0 	.word	0x08015bd0
 800adc0:	24009bd8 	.word	0x24009bd8

0800adc4 <lwip_send>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800adc4:	2803      	cmp	r0, #3
 800adc6:	d836      	bhi.n	800ae36 <lwip_send+0x72>
    if (sock->conn) {
 800adc8:	ea4f 1c00 	mov.w	ip, r0, lsl #4
{
 800adcc:	b510      	push	{r4, lr}
    if (sock->conn) {
 800adce:	4c1d      	ldr	r4, [pc, #116]	@ (800ae44 <lwip_send+0x80>)
{
 800add0:	b084      	sub	sp, #16
    if (sock->conn) {
 800add2:	f854 400c 	ldr.w	r4, [r4, ip]
 800add6:	b344      	cbz	r4, 800ae2a <lwip_send+0x66>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800add8:	f894 c000 	ldrb.w	ip, [r4]
 800addc:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
 800ade0:	f1bc 0f10 	cmp.w	ip, #16
 800ade4:	d11a      	bne.n	800ae1c <lwip_send+0x58>
  write_flags = (u8_t)(NETCONN_COPY |
 800ade6:	f013 0f10 	tst.w	r3, #16
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800adea:	ea4f 0363 	mov.w	r3, r3, asr #1
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800adee:	4620      	mov	r0, r4
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800adf0:	f003 0304 	and.w	r3, r3, #4
  write_flags = (u8_t)(NETCONN_COPY |
 800adf4:	bf14      	ite	ne
 800adf6:	2403      	movne	r4, #3
 800adf8:	2401      	moveq	r4, #1
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800adfa:	4323      	orrs	r3, r4
 800adfc:	ac03      	add	r4, sp, #12
 800adfe:	9400      	str	r4, [sp, #0]
  written = 0;
 800ae00:	2400      	movs	r4, #0
 800ae02:	9403      	str	r4, [sp, #12]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800ae04:	f7fe f9cc 	bl	80091a0 <netconn_write_partly>
 800ae08:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 800ae0a:	f7ff fb3d 	bl	800a488 <err_to_errno>
 800ae0e:	b108      	cbz	r0, 800ae14 <lwip_send+0x50>
 800ae10:	4b0d      	ldr	r3, [pc, #52]	@ (800ae48 <lwip_send+0x84>)
 800ae12:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
 800ae14:	b964      	cbnz	r4, 800ae30 <lwip_send+0x6c>
 800ae16:	9803      	ldr	r0, [sp, #12]
}
 800ae18:	b004      	add	sp, #16
 800ae1a:	bd10      	pop	{r4, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800ae1c:	2400      	movs	r4, #0
 800ae1e:	e9cd 4400 	strd	r4, r4, [sp]
 800ae22:	f7ff ff45 	bl	800acb0 <lwip_sendto>
}
 800ae26:	b004      	add	sp, #16
 800ae28:	bd10      	pop	{r4, pc}
    set_errno(EBADF);
 800ae2a:	4b07      	ldr	r3, [pc, #28]	@ (800ae48 <lwip_send+0x84>)
 800ae2c:	2209      	movs	r2, #9
 800ae2e:	601a      	str	r2, [r3, #0]
    return -1;
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	e7f0      	b.n	800ae18 <lwip_send+0x54>
    set_errno(EBADF);
 800ae36:	4b04      	ldr	r3, [pc, #16]	@ (800ae48 <lwip_send+0x84>)
 800ae38:	2209      	movs	r2, #9
    return -1;
 800ae3a:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 800ae3e:	601a      	str	r2, [r3, #0]
}
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	24009bd8 	.word	0x24009bd8
 800ae48:	240109dc 	.word	0x240109dc

0800ae4c <lwip_socket>:
  switch (type) {
 800ae4c:	2902      	cmp	r1, #2
{
 800ae4e:	4613      	mov	r3, r2
 800ae50:	b510      	push	{r4, lr}
  switch (type) {
 800ae52:	d009      	beq.n	800ae68 <lwip_socket+0x1c>
 800ae54:	2903      	cmp	r1, #3
 800ae56:	d021      	beq.n	800ae9c <lwip_socket+0x50>
 800ae58:	2901      	cmp	r1, #1
 800ae5a:	d018      	beq.n	800ae8e <lwip_socket+0x42>
 800ae5c:	2316      	movs	r3, #22
    set_errno(ENOBUFS);
 800ae5e:	4a16      	ldr	r2, [pc, #88]	@ (800aeb8 <lwip_socket+0x6c>)
      return -1;
 800ae60:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(ENOBUFS);
 800ae64:	6013      	str	r3, [r2, #0]
}
 800ae66:	bd10      	pop	{r4, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800ae68:	2a88      	cmp	r2, #136	@ 0x88
 800ae6a:	f04f 0100 	mov.w	r1, #0
 800ae6e:	4a13      	ldr	r2, [pc, #76]	@ (800aebc <lwip_socket+0x70>)
 800ae70:	bf14      	ite	ne
 800ae72:	2020      	movne	r0, #32
 800ae74:	2021      	moveq	r0, #33	@ 0x21
 800ae76:	f7fd ff6b 	bl	8008d50 <netconn_new_with_proto_and_callback>
 800ae7a:	4604      	mov	r4, r0
  if (!conn) {
 800ae7c:	b1ac      	cbz	r4, 800aeaa <lwip_socket+0x5e>
  i = alloc_socket(conn, 0);
 800ae7e:	2100      	movs	r1, #0
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7ff fb67 	bl	800a554 <alloc_socket>
  if (i == -1) {
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	d011      	beq.n	800aeae <lwip_socket+0x62>
  conn->socket = i;
 800ae8a:	61a0      	str	r0, [r4, #24]
}
 800ae8c:	bd10      	pop	{r4, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800ae8e:	4a0b      	ldr	r2, [pc, #44]	@ (800aebc <lwip_socket+0x70>)
 800ae90:	2100      	movs	r1, #0
 800ae92:	2010      	movs	r0, #16
 800ae94:	f7fd ff5c 	bl	8008d50 <netconn_new_with_proto_and_callback>
 800ae98:	4604      	mov	r4, r0
      break;
 800ae9a:	e7ef      	b.n	800ae7c <lwip_socket+0x30>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ae9c:	4a07      	ldr	r2, [pc, #28]	@ (800aebc <lwip_socket+0x70>)
 800ae9e:	b2d9      	uxtb	r1, r3
 800aea0:	2040      	movs	r0, #64	@ 0x40
 800aea2:	f7fd ff55 	bl	8008d50 <netconn_new_with_proto_and_callback>
 800aea6:	4604      	mov	r4, r0
      break;
 800aea8:	e7e8      	b.n	800ae7c <lwip_socket+0x30>
 800aeaa:	2369      	movs	r3, #105	@ 0x69
 800aeac:	e7d7      	b.n	800ae5e <lwip_socket+0x12>
    netconn_delete(conn);
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7fd ffca 	bl	8008e48 <netconn_delete>
    return -1;
 800aeb4:	2317      	movs	r3, #23
 800aeb6:	e7d2      	b.n	800ae5e <lwip_socket+0x12>
 800aeb8:	240109dc 	.word	0x240109dc
 800aebc:	0800a8d9 	.word	0x0800a8d9

0800aec0 <lwip_setsockopt>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800aec0:	2803      	cmp	r0, #3
 800aec2:	d825      	bhi.n	800af10 <lwip_setsockopt+0x50>
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (sock->conn) {
 800aec8:	4e73      	ldr	r6, [pc, #460]	@ (800b098 <lwip_setsockopt+0x1d8>)
 800aeca:	0104      	lsls	r4, r0, #4
 800aecc:	461f      	mov	r7, r3
 800aece:	5933      	ldr	r3, [r6, r4]
 800aed0:	b19b      	cbz	r3, 800aefa <lwip_setsockopt+0x3a>

  if (!sock) {
    return -1;
  }

  if (NULL == optval) {
 800aed2:	2f00      	cmp	r7, #0
 800aed4:	f000 80d4 	beq.w	800b080 <lwip_setsockopt+0x1c0>
    return -1;
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800aed8:	460d      	mov	r5, r1
 800aeda:	4690      	mov	r8, r2
 800aedc:	f7fb f984 	bl	80061e8 <sys_lock_tcpip_core>
    if (sock->conn) {
 800aee0:	5933      	ldr	r3, [r6, r4]
 800aee2:	b18b      	cbz	r3, 800af08 <lwip_setsockopt+0x48>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800aee4:	2d06      	cmp	r5, #6
 800aee6:	d019      	beq.n	800af1c <lwip_setsockopt+0x5c>
 800aee8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800aeec:	4295      	cmp	r5, r2
 800aeee:	d041      	beq.n	800af74 <lwip_setsockopt+0xb4>
 800aef0:	b375      	cbz	r5, 800af50 <lwip_setsockopt+0x90>
  UNLOCK_TCPIP_CORE();
 800aef2:	f7fb f9f7 	bl	80062e4 <sys_unlock_tcpip_core>
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
            done_socket(sock);
            return ENOPROTOOPT;
 800aef6:	235c      	movs	r3, #92	@ 0x5c
 800aef8:	e000      	b.n	800aefc <lwip_setsockopt+0x3c>
 800aefa:	2309      	movs	r3, #9
    sock_set_errno(sock, EFAULT);
 800aefc:	4a67      	ldr	r2, [pc, #412]	@ (800b09c <lwip_setsockopt+0x1dc>)
    return -1;
 800aefe:	f04f 30ff 	mov.w	r0, #4294967295
    sock_set_errno(sock, EFAULT);
 800af02:	6013      	str	r3, [r2, #0]
}
 800af04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UNLOCK_TCPIP_CORE();
 800af08:	f7fb f9ec 	bl	80062e4 <sys_unlock_tcpip_core>
    return EBADF;
 800af0c:	2309      	movs	r3, #9
  return err ? -1 : 0;
 800af0e:	e7f5      	b.n	800aefc <lwip_setsockopt+0x3c>
 800af10:	2309      	movs	r3, #9
    sock_set_errno(sock, EFAULT);
 800af12:	4a62      	ldr	r2, [pc, #392]	@ (800b09c <lwip_setsockopt+0x1dc>)
    return -1;
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
    sock_set_errno(sock, EFAULT);
 800af18:	6013      	str	r3, [r2, #0]
}
 800af1a:	4770      	bx	lr

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800af1c:	9a06      	ldr	r2, [sp, #24]
 800af1e:	2a03      	cmp	r2, #3
 800af20:	d962      	bls.n	800afe8 <lwip_setsockopt+0x128>
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	2a00      	cmp	r2, #0
 800af26:	d05f      	beq.n	800afe8 <lwip_setsockopt+0x128>
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af2e:	2b10      	cmp	r3, #16
 800af30:	d1df      	bne.n	800aef2 <lwip_setsockopt+0x32>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800af32:	7d13      	ldrb	r3, [r2, #20]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d057      	beq.n	800afe8 <lwip_setsockopt+0x128>
        done_socket(sock);
        return EINVAL;
      }
      switch (optname) {
 800af38:	f1b8 0f01 	cmp.w	r8, #1
 800af3c:	d078      	beq.n	800b030 <lwip_setsockopt+0x170>
 800af3e:	f1b8 0f02 	cmp.w	r8, #2
 800af42:	d1d6      	bne.n	800aef2 <lwip_setsockopt+0x32>
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  UNLOCK_TCPIP_CORE();
 800af4a:	f7fb f9cb 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800af4e:	e00f      	b.n	800af70 <lwip_setsockopt+0xb0>
      switch (optname) {
 800af50:	f1b8 0f01 	cmp.w	r8, #1
 800af54:	d04c      	beq.n	800aff0 <lwip_setsockopt+0x130>
 800af56:	f1b8 0f02 	cmp.w	r8, #2
 800af5a:	d1ca      	bne.n	800aef2 <lwip_setsockopt+0x32>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800af5c:	9a06      	ldr	r2, [sp, #24]
 800af5e:	2a03      	cmp	r2, #3
 800af60:	d942      	bls.n	800afe8 <lwip_setsockopt+0x128>
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d03f      	beq.n	800afe8 <lwip_setsockopt+0x128>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	72da      	strb	r2, [r3, #11]
  UNLOCK_TCPIP_CORE();
 800af6c:	f7fb f9ba 	bl	80062e4 <sys_unlock_tcpip_core>
  return err ? -1 : 0;
 800af70:	2000      	movs	r0, #0
 800af72:	e7c7      	b.n	800af04 <lwip_setsockopt+0x44>
      switch (optname) {
 800af74:	f241 020a 	movw	r2, #4106	@ 0x100a
 800af78:	4590      	cmp	r8, r2
 800af7a:	d044      	beq.n	800b006 <lwip_setsockopt+0x146>
 800af7c:	dc19      	bgt.n	800afb2 <lwip_setsockopt+0xf2>
 800af7e:	f1b8 0f08 	cmp.w	r8, #8
 800af82:	d007      	beq.n	800af94 <lwip_setsockopt+0xd4>
 800af84:	f1b8 0f20 	cmp.w	r8, #32
 800af88:	d1b3      	bne.n	800aef2 <lwip_setsockopt+0x32>
          if ((optname == SO_BROADCAST) &&
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800af90:	2a20      	cmp	r2, #32
 800af92:	d1ae      	bne.n	800aef2 <lwip_setsockopt+0x32>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800af94:	9a06      	ldr	r2, [sp, #24]
 800af96:	2a03      	cmp	r2, #3
 800af98:	d926      	bls.n	800afe8 <lwip_setsockopt+0x128>
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	b323      	cbz	r3, 800afe8 <lwip_setsockopt+0x128>
          if (*(const int *)optval) {
 800af9e:	6839      	ldr	r1, [r7, #0]
            ip_set_option(sock->conn->pcb.ip, optname);
 800afa0:	7a5a      	ldrb	r2, [r3, #9]
          if (*(const int *)optval) {
 800afa2:	2900      	cmp	r1, #0
 800afa4:	d05a      	beq.n	800b05c <lwip_setsockopt+0x19c>
            ip_set_option(sock->conn->pcb.ip, optname);
 800afa6:	ea42 0208 	orr.w	r2, r2, r8
 800afaa:	725a      	strb	r2, [r3, #9]
  UNLOCK_TCPIP_CORE();
 800afac:	f7fb f99a 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800afb0:	e7de      	b.n	800af70 <lwip_setsockopt+0xb0>
 800afb2:	f241 020b 	movw	r2, #4107	@ 0x100b
 800afb6:	4590      	cmp	r8, r2
 800afb8:	d19b      	bne.n	800aef2 <lwip_setsockopt+0x32>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800afba:	9a06      	ldr	r2, [sp, #24]
 800afbc:	2a05      	cmp	r2, #5
 800afbe:	d913      	bls.n	800afe8 <lwip_setsockopt+0x128>
          if (iface->ifr_name[0] != 0) {
 800afc0:	7839      	ldrb	r1, [r7, #0]
 800afc2:	2900      	cmp	r1, #0
 800afc4:	d143      	bne.n	800b04e <lwip_setsockopt+0x18e>
          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800afc6:	781a      	ldrb	r2, [r3, #0]
 800afc8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800afcc:	2a10      	cmp	r2, #16
 800afce:	d04b      	beq.n	800b068 <lwip_setsockopt+0x1a8>
 800afd0:	2a20      	cmp	r2, #32
 800afd2:	d04f      	beq.n	800b074 <lwip_setsockopt+0x1b4>
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800afd4:	4b32      	ldr	r3, [pc, #200]	@ (800b0a0 <lwip_setsockopt+0x1e0>)
 800afd6:	f640 527d 	movw	r2, #3453	@ 0xd7d
 800afda:	4932      	ldr	r1, [pc, #200]	@ (800b0a4 <lwip_setsockopt+0x1e4>)
 800afdc:	4832      	ldr	r0, [pc, #200]	@ (800b0a8 <lwip_setsockopt+0x1e8>)
 800afde:	f009 fc99 	bl	8014914 <iprintf>
  UNLOCK_TCPIP_CORE();
 800afe2:	f7fb f97f 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800afe6:	e7c3      	b.n	800af70 <lwip_setsockopt+0xb0>
  UNLOCK_TCPIP_CORE();
 800afe8:	f7fb f97c 	bl	80062e4 <sys_unlock_tcpip_core>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800afec:	2316      	movs	r3, #22
 800afee:	e785      	b.n	800aefc <lwip_setsockopt+0x3c>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800aff0:	9a06      	ldr	r2, [sp, #24]
 800aff2:	2a03      	cmp	r2, #3
 800aff4:	d9f8      	bls.n	800afe8 <lwip_setsockopt+0x128>
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0f5      	beq.n	800afe8 <lwip_setsockopt+0x128>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	729a      	strb	r2, [r3, #10]
  UNLOCK_TCPIP_CORE();
 800b000:	f7fb f970 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b004:	e7b4      	b.n	800af70 <lwip_setsockopt+0xb0>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800b006:	9a06      	ldr	r2, [sp, #24]
 800b008:	2a03      	cmp	r2, #3
 800b00a:	d9ed      	bls.n	800afe8 <lwip_setsockopt+0x128>
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	2a00      	cmp	r2, #0
 800b010:	d0ea      	beq.n	800afe8 <lwip_setsockopt+0x128>
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b018:	2b20      	cmp	r3, #32
 800b01a:	f47f af6a 	bne.w	800aef2 <lwip_setsockopt+0x32>
          if (*(const int *)optval) {
 800b01e:	6839      	ldr	r1, [r7, #0]
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b020:	7c13      	ldrb	r3, [r2, #16]
          if (*(const int *)optval) {
 800b022:	b379      	cbz	r1, 800b084 <lwip_setsockopt+0x1c4>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b024:	f043 0301 	orr.w	r3, r3, #1
 800b028:	7413      	strb	r3, [r2, #16]
  UNLOCK_TCPIP_CORE();
 800b02a:	f7fb f95b 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b02e:	e79f      	b.n	800af70 <lwip_setsockopt+0xb0>
          if (*(const int *)optval) {
 800b030:	6839      	ldr	r1, [r7, #0]
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800b032:	8b53      	ldrh	r3, [r2, #26]
          if (*(const int *)optval) {
 800b034:	b129      	cbz	r1, 800b042 <lwip_setsockopt+0x182>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800b036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b03a:	8353      	strh	r3, [r2, #26]
  UNLOCK_TCPIP_CORE();
 800b03c:	f7fb f952 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b040:	e796      	b.n	800af70 <lwip_setsockopt+0xb0>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800b042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b046:	8353      	strh	r3, [r2, #26]
  UNLOCK_TCPIP_CORE();
 800b048:	f7fb f94c 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b04c:	e790      	b.n	800af70 <lwip_setsockopt+0xb0>
            n = netif_find(iface->ifr_name);
 800b04e:	4638      	mov	r0, r7
 800b050:	f000 ff5a 	bl	800bf08 <netif_find>
            if (n == NULL) {
 800b054:	4601      	mov	r1, r0
 800b056:	b1d8      	cbz	r0, 800b090 <lwip_setsockopt+0x1d0>
          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800b058:	5933      	ldr	r3, [r6, r4]
 800b05a:	e7b4      	b.n	800afc6 <lwip_setsockopt+0x106>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800b05c:	ea22 0208 	bic.w	r2, r2, r8
 800b060:	725a      	strb	r2, [r3, #9]
  UNLOCK_TCPIP_CORE();
 800b062:	f7fb f93f 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b066:	e783      	b.n	800af70 <lwip_setsockopt+0xb0>
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800b068:	6858      	ldr	r0, [r3, #4]
 800b06a:	f001 fc39 	bl	800c8e0 <tcp_bind_netif>
  UNLOCK_TCPIP_CORE();
 800b06e:	f7fb f939 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b072:	e77d      	b.n	800af70 <lwip_setsockopt+0xb0>
              udp_bind_netif(sock->conn->pcb.udp, n);
 800b074:	6858      	ldr	r0, [r3, #4]
 800b076:	f005 ffdf 	bl	8011038 <udp_bind_netif>
  UNLOCK_TCPIP_CORE();
 800b07a:	f7fb f933 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b07e:	e777      	b.n	800af70 <lwip_setsockopt+0xb0>
 800b080:	230e      	movs	r3, #14
 800b082:	e73b      	b.n	800aefc <lwip_setsockopt+0x3c>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b084:	f023 0301 	bic.w	r3, r3, #1
 800b088:	7413      	strb	r3, [r2, #16]
  UNLOCK_TCPIP_CORE();
 800b08a:	f7fb f92b 	bl	80062e4 <sys_unlock_tcpip_core>
  sock_set_errno(sock, err);
 800b08e:	e76f      	b.n	800af70 <lwip_setsockopt+0xb0>
  UNLOCK_TCPIP_CORE();
 800b090:	f7fb f928 	bl	80062e4 <sys_unlock_tcpip_core>
              return ENODEV;
 800b094:	2313      	movs	r3, #19
 800b096:	e731      	b.n	800aefc <lwip_setsockopt+0x3c>
 800b098:	24009bd8 	.word	0x24009bd8
 800b09c:	240109dc 	.word	0x240109dc
 800b0a0:	080164b8 	.word	0x080164b8
 800b0a4:	08016604 	.word	0x08016604
 800b0a8:	08015bd0 	.word	0x08015bd0

0800b0ac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800b0b0:	f7fb f954 	bl	800635c <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 800b0b4:	f7fb f898 	bl	80061e8 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800b0b8:	4b2c      	ldr	r3, [pc, #176]	@ (800b16c <tcpip_thread+0xc0>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	b113      	cbz	r3, 800b0c4 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 800b0be:	4a2c      	ldr	r2, [pc, #176]	@ (800b170 <tcpip_thread+0xc4>)
 800b0c0:	6810      	ldr	r0, [r2, #0]
 800b0c2:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b0c4:	4d2b      	ldr	r5, [pc, #172]	@ (800b174 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b0c6:	4f2c      	ldr	r7, [pc, #176]	@ (800b178 <tcpip_thread+0xcc>)
 800b0c8:	4e2c      	ldr	r6, [pc, #176]	@ (800b17c <tcpip_thread+0xd0>)
 800b0ca:	e00e      	b.n	800b0ea <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 800b0cc:	b158      	cbz	r0, 800b0e6 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 800b0ce:	f7fb f909 	bl	80062e4 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	a901      	add	r1, sp, #4
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f009 f8f2 	bl	80142c0 <sys_arch_mbox_fetch>
 800b0dc:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800b0de:	f7fb f883 	bl	80061e8 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800b0e2:	3401      	adds	r4, #1
 800b0e4:	d111      	bne.n	800b10a <tcpip_thread+0x5e>
    sys_check_timeouts();
 800b0e6:	f005 fc75 	bl	80109d4 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 800b0ea:	f7fb f905 	bl	80062f8 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 800b0ee:	f005 fc9b 	bl	8010a28 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b0f2:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800b0f4:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b0f6:	d1e9      	bne.n	800b0cc <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 800b0f8:	f7fb f8f4 	bl	80062e4 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	a901      	add	r1, sp, #4
 800b100:	4628      	mov	r0, r5
 800b102:	f009 f8dd 	bl	80142c0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b106:	f7fb f86f 	bl	80061e8 <sys_lock_tcpip_core>
    if (msg == NULL) {
 800b10a:	9c01      	ldr	r4, [sp, #4]
 800b10c:	b164      	cbz	r4, 800b128 <tcpip_thread+0x7c>
  switch (msg->type) {
 800b10e:	7823      	ldrb	r3, [r4, #0]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d01e      	beq.n	800b152 <tcpip_thread+0xa6>
 800b114:	2b02      	cmp	r3, #2
 800b116:	d018      	beq.n	800b14a <tcpip_thread+0x9e>
 800b118:	b16b      	cbz	r3, 800b136 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b11a:	463b      	mov	r3, r7
 800b11c:	22cf      	movs	r2, #207	@ 0xcf
 800b11e:	4631      	mov	r1, r6
 800b120:	4817      	ldr	r0, [pc, #92]	@ (800b180 <tcpip_thread+0xd4>)
 800b122:	f009 fbf7 	bl	8014914 <iprintf>
      break;
 800b126:	e7e0      	b.n	800b0ea <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b128:	463b      	mov	r3, r7
 800b12a:	2291      	movs	r2, #145	@ 0x91
 800b12c:	4631      	mov	r1, r6
 800b12e:	4814      	ldr	r0, [pc, #80]	@ (800b180 <tcpip_thread+0xd4>)
 800b130:	f009 fbf0 	bl	8014914 <iprintf>
      continue;
 800b134:	e7d9      	b.n	800b0ea <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b136:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800b13a:	6860      	ldr	r0, [r4, #4]
 800b13c:	4798      	blx	r3
 800b13e:	b980      	cbnz	r0, 800b162 <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b140:	4621      	mov	r1, r4
 800b142:	2009      	movs	r0, #9
 800b144:	f000 fcc2 	bl	800bacc <memp_free>
      break;
 800b148:	e7cf      	b.n	800b0ea <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b14a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b14e:	4798      	blx	r3
      break;
 800b150:	e7cb      	b.n	800b0ea <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b152:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b156:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b158:	4621      	mov	r1, r4
 800b15a:	2008      	movs	r0, #8
 800b15c:	f000 fcb6 	bl	800bacc <memp_free>
      break;
 800b160:	e7c3      	b.n	800b0ea <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b162:	6860      	ldr	r0, [r4, #4]
 800b164:	f000 ffe6 	bl	800c134 <pbuf_free>
 800b168:	e7ea      	b.n	800b140 <tcpip_thread+0x94>
 800b16a:	bf00      	nop
 800b16c:	24009c24 	.word	0x24009c24
 800b170:	24009c20 	.word	0x24009c20
 800b174:	24009c1c 	.word	0x24009c1c
 800b178:	08016630 	.word	0x08016630
 800b17c:	08016660 	.word	0x08016660
 800b180:	08015bd0 	.word	0x08015bd0

0800b184 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b186:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b188:	4811      	ldr	r0, [pc, #68]	@ (800b1d0 <tcpip_inpkt+0x4c>)
{
 800b18a:	460e      	mov	r6, r1
 800b18c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b18e:	f009 f8c1 	bl	8014314 <sys_mbox_valid>
 800b192:	b178      	cbz	r0, 800b1b4 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b194:	2009      	movs	r0, #9
 800b196:	f000 fc53 	bl	800ba40 <memp_malloc>
  if (msg == NULL) {
 800b19a:	4604      	mov	r4, r0
 800b19c:	b1a8      	cbz	r0, 800b1ca <tcpip_inpkt+0x46>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800b19e:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800b1a0:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800b1a2:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b1a4:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 800b1a6:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b1a8:	4809      	ldr	r0, [pc, #36]	@ (800b1d0 <tcpip_inpkt+0x4c>)
  msg->msg.inp.input_fn = input_fn;
 800b1aa:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b1ac:	f009 f878 	bl	80142a0 <sys_mbox_trypost>
 800b1b0:	b938      	cbnz	r0, 800b1c2 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b1b4:	4b07      	ldr	r3, [pc, #28]	@ (800b1d4 <tcpip_inpkt+0x50>)
 800b1b6:	22fc      	movs	r2, #252	@ 0xfc
 800b1b8:	4907      	ldr	r1, [pc, #28]	@ (800b1d8 <tcpip_inpkt+0x54>)
 800b1ba:	4808      	ldr	r0, [pc, #32]	@ (800b1dc <tcpip_inpkt+0x58>)
 800b1bc:	f009 fbaa 	bl	8014914 <iprintf>
 800b1c0:	e7e8      	b.n	800b194 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	2009      	movs	r0, #9
 800b1c6:	f000 fc81 	bl	800bacc <memp_free>
    return ERR_MEM;
 800b1ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d0:	24009c1c 	.word	0x24009c1c
 800b1d4:	08016630 	.word	0x08016630
 800b1d8:	08016680 	.word	0x08016680
 800b1dc:	08015bd0 	.word	0x08015bd0

0800b1e0 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b1e0:	f891 3031 	ldrb.w	r3, [r1, #49]	@ 0x31
 800b1e4:	f013 0f18 	tst.w	r3, #24
 800b1e8:	d002      	beq.n	800b1f0 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b1ea:	4a03      	ldr	r2, [pc, #12]	@ (800b1f8 <tcpip_input+0x18>)
 800b1ec:	f7ff bfca 	b.w	800b184 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b1f0:	4a02      	ldr	r2, [pc, #8]	@ (800b1fc <tcpip_input+0x1c>)
 800b1f2:	f7ff bfc7 	b.w	800b184 <tcpip_inpkt>
 800b1f6:	bf00      	nop
 800b1f8:	08014155 	.word	0x08014155
 800b1fc:	080133dd 	.word	0x080133dd

0800b200 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b204:	4811      	ldr	r0, [pc, #68]	@ (800b24c <tcpip_try_callback+0x4c>)
{
 800b206:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b208:	f009 f884 	bl	8014314 <sys_mbox_valid>
 800b20c:	b170      	cbz	r0, 800b22c <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b20e:	2008      	movs	r0, #8
 800b210:	f000 fc16 	bl	800ba40 <memp_malloc>
  if (msg == NULL) {
 800b214:	4604      	mov	r4, r0
 800b216:	b1a8      	cbz	r0, 800b244 <tcpip_try_callback+0x44>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b218:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b21a:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 800b21c:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b220:	480a      	ldr	r0, [pc, #40]	@ (800b24c <tcpip_try_callback+0x4c>)
  msg->type = TCPIP_MSG_CALLBACK;
 800b222:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b224:	f009 f83c 	bl	80142a0 <sys_mbox_trypost>
 800b228:	b940      	cbnz	r0, 800b23c <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b22c:	4b08      	ldr	r3, [pc, #32]	@ (800b250 <tcpip_try_callback+0x50>)
 800b22e:	f240 125d 	movw	r2, #349	@ 0x15d
 800b232:	4908      	ldr	r1, [pc, #32]	@ (800b254 <tcpip_try_callback+0x54>)
 800b234:	4808      	ldr	r0, [pc, #32]	@ (800b258 <tcpip_try_callback+0x58>)
 800b236:	f009 fb6d 	bl	8014914 <iprintf>
 800b23a:	e7e8      	b.n	800b20e <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b23c:	4621      	mov	r1, r4
 800b23e:	2008      	movs	r0, #8
 800b240:	f000 fc44 	bl	800bacc <memp_free>
    return ERR_MEM;
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	bf00      	nop
 800b24c:	24009c1c 	.word	0x24009c1c
 800b250:	08016630 	.word	0x08016630
 800b254:	08016680 	.word	0x08016680
 800b258:	08015bd0 	.word	0x08015bd0

0800b25c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	460d      	mov	r5, r1
 800b260:	4604      	mov	r4, r0
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b262:	f7fa ffc1 	bl	80061e8 <sys_lock_tcpip_core>
  fn(apimsg);
 800b266:	4628      	mov	r0, r5
 800b268:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800b26a:	f7fb f83b 	bl	80062e4 <sys_unlock_tcpip_core>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b26e:	2000      	movs	r0, #0
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	bf00      	nop

0800b274 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b274:	b530      	push	{r4, r5, lr}
 800b276:	b083      	sub	sp, #12
 800b278:	4605      	mov	r5, r0
 800b27a:	460c      	mov	r4, r1
  lwip_init();
 800b27c:	f000 f8b2 	bl	800b3e4 <lwip_init>

  tcpip_init_done = initfunc;
 800b280:	4a15      	ldr	r2, [pc, #84]	@ (800b2d8 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b282:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800b284:	4b15      	ldr	r3, [pc, #84]	@ (800b2dc <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b286:	4816      	ldr	r0, [pc, #88]	@ (800b2e0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 800b288:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800b28a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b28c:	f008 fff0 	bl	8014270 <sys_mbox_new>
 800b290:	b970      	cbnz	r0, 800b2b0 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b292:	4814      	ldr	r0, [pc, #80]	@ (800b2e4 <tcpip_init+0x70>)
 800b294:	f009 f894 	bl	80143c0 <sys_mutex_new>
 800b298:	b9b0      	cbnz	r0, 800b2c8 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b29a:	2418      	movs	r4, #24
 800b29c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4911      	ldr	r1, [pc, #68]	@ (800b2e8 <tcpip_init+0x74>)
 800b2a4:	9400      	str	r4, [sp, #0]
 800b2a6:	4811      	ldr	r0, [pc, #68]	@ (800b2ec <tcpip_init+0x78>)
 800b2a8:	f009 f8a0 	bl	80143ec <sys_thread_new>
}
 800b2ac:	b003      	add	sp, #12
 800b2ae:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f0 <tcpip_init+0x7c>)
 800b2b2:	f240 2261 	movw	r2, #609	@ 0x261
 800b2b6:	490f      	ldr	r1, [pc, #60]	@ (800b2f4 <tcpip_init+0x80>)
 800b2b8:	480f      	ldr	r0, [pc, #60]	@ (800b2f8 <tcpip_init+0x84>)
 800b2ba:	f009 fb2b 	bl	8014914 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b2be:	4809      	ldr	r0, [pc, #36]	@ (800b2e4 <tcpip_init+0x70>)
 800b2c0:	f009 f87e 	bl	80143c0 <sys_mutex_new>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d0e8      	beq.n	800b29a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b2c8:	4b09      	ldr	r3, [pc, #36]	@ (800b2f0 <tcpip_init+0x7c>)
 800b2ca:	f240 2265 	movw	r2, #613	@ 0x265
 800b2ce:	490b      	ldr	r1, [pc, #44]	@ (800b2fc <tcpip_init+0x88>)
 800b2d0:	4809      	ldr	r0, [pc, #36]	@ (800b2f8 <tcpip_init+0x84>)
 800b2d2:	f009 fb1f 	bl	8014914 <iprintf>
 800b2d6:	e7e0      	b.n	800b29a <tcpip_init+0x26>
 800b2d8:	24009c24 	.word	0x24009c24
 800b2dc:	24009c20 	.word	0x24009c20
 800b2e0:	24009c1c 	.word	0x24009c1c
 800b2e4:	24009c18 	.word	0x24009c18
 800b2e8:	0800b0ad 	.word	0x0800b0ad
 800b2ec:	080166d8 	.word	0x080166d8
 800b2f0:	08016630 	.word	0x08016630
 800b2f4:	08016690 	.word	0x08016690
 800b2f8:	08015bd0 	.word	0x08015bd0
 800b2fc:	080166b4 	.word	0x080166b4

0800b300 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800b300:	ba40      	rev16	r0, r0
}
 800b302:	b280      	uxth	r0, r0
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop

0800b308 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800b308:	ba00      	rev	r0, r0
 800b30a:	4770      	bx	lr

0800b30c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b30c:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800b30e:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 800b312:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b316:	4571      	cmp	r1, lr
 800b318:	dd05      	ble.n	800b326 <lwip_standard_chksum+0x1a>
 800b31a:	b125      	cbz	r5, 800b326 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 800b31c:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 800b320:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 800b322:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800b326:	2901      	cmp	r1, #1
 800b328:	dd27      	ble.n	800b37a <lwip_standard_chksum+0x6e>
 800b32a:	3902      	subs	r1, #2
  u32_t sum = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	084c      	lsrs	r4, r1, #1
 800b330:	f104 0c01 	add.w	ip, r4, #1
 800b334:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 800b338:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 800b33c:	4584      	cmp	ip, r0
    sum += *ps++;
 800b33e:	4413      	add	r3, r2
  while (len > 1) {
 800b340:	d1fa      	bne.n	800b338 <lwip_standard_chksum+0x2c>
    len -= 2;
 800b342:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 800b346:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b34a:	2901      	cmp	r1, #1
 800b34c:	d105      	bne.n	800b35a <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b34e:	f89c 2000 	ldrb.w	r2, [ip]
 800b352:	f362 0e07 	bfi	lr, r2, #0, #8
 800b356:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 800b35a:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b35c:	fa1f f38e 	uxth.w	r3, lr
 800b360:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 800b364:	b298      	uxth	r0, r3
 800b366:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800b36a:	b125      	cbz	r5, 800b376 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b36c:	0203      	lsls	r3, r0, #8
 800b36e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800b372:	b29b      	uxth	r3, r3
 800b374:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800b376:	b280      	uxth	r0, r0
 800b378:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 800b37a:	4684      	mov	ip, r0
  u32_t sum = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	e7e4      	b.n	800b34a <lwip_standard_chksum+0x3e>

0800b380 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b380:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b382:	f7ff ffc3 	bl	800b30c <lwip_standard_chksum>
 800b386:	43c0      	mvns	r0, r0
}
 800b388:	b280      	uxth	r0, r0
 800b38a:	bd08      	pop	{r3, pc}

0800b38c <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 800b38c:	b338      	cbz	r0, 800b3de <inet_chksum_pbuf+0x52>
{
 800b38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 800b390:	2700      	movs	r7, #0
 800b392:	4605      	mov	r5, r0
  acc = 0;
 800b394:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b396:	896e      	ldrh	r6, [r5, #10]
 800b398:	6868      	ldr	r0, [r5, #4]
 800b39a:	4631      	mov	r1, r6
 800b39c:	f7ff ffb6 	bl	800b30c <lwip_standard_chksum>
 800b3a0:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 800b3a2:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 800b3a6:	b2a3      	uxth	r3, r4
 800b3a8:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 800b3ac:	ea4f 2304 	mov.w	r3, r4, lsl #8
 800b3b0:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 800b3b4:	d004      	beq.n	800b3c0 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	f087 0701 	eor.w	r7, r7, #1
 800b3bc:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 800b3c0:	682d      	ldr	r5, [r5, #0]
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	d1e7      	bne.n	800b396 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 800b3c6:	b13f      	cbz	r7, 800b3d8 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b3c8:	0220      	lsls	r0, r4, #8
 800b3ca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b3ce:	b280      	uxth	r0, r0
 800b3d0:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 800b3d2:	43c0      	mvns	r0, r0
 800b3d4:	b280      	uxth	r0, r0
}
 800b3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 800b3d8:	43e4      	mvns	r4, r4
 800b3da:	b2a0      	uxth	r0, r4
}
 800b3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 800b3de:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 800b3e2:	4770      	bx	lr

0800b3e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b3e4:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b3e6:	f008 ffe1 	bl	80143ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b3ea:	f000 f80d 	bl	800b408 <mem_init>
  memp_init();
 800b3ee:	f000 fae5 	bl	800b9bc <memp_init>
  pbuf_init();
  netif_init();
 800b3f2:	f000 fbbf 	bl	800bb74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b3f6:	f005 fb2b 	bl	8010a50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b3fa:	f001 fa47 	bl	800c88c <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800b3fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800b402:	f005 bab9 	b.w	8010978 <sys_timeouts_init>
 800b406:	bf00      	nop

0800b408 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b408:	4b13      	ldr	r3, [pc, #76]	@ (800b458 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800b40a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b40e:	4813      	ldr	r0, [pc, #76]	@ (800b45c <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 800b410:	f647 51e8 	movw	r1, #32232	@ 0x7de8
{
 800b414:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b416:	6003      	str	r3, [r0, #0]
  mem->prev = 0;
  mem->used = 0;
 800b418:	2400      	movs	r4, #0
  mem->next = MEM_SIZE_ALIGNED;
 800b41a:	f8c2 1200 	str.w	r1, [r2, #512]	@ 0x200
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b41e:	4419      	add	r1, r3
 800b420:	4a0f      	ldr	r2, [pc, #60]	@ (800b460 <mem_init+0x58>)
  mem->used = 0;
 800b422:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800b424:	480f      	ldr	r0, [pc, #60]	@ (800b464 <mem_init+0x5c>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b426:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 800b428:	2101      	movs	r1, #1
 800b42a:	4a0f      	ldr	r2, [pc, #60]	@ (800b468 <mem_init+0x60>)
  ram_end->next = MEM_SIZE_ALIGNED;
 800b42c:	4c0f      	ldr	r4, [pc, #60]	@ (800b46c <mem_init+0x64>)
 800b42e:	f8c0 4fe8 	str.w	r4, [r0, #4072]	@ 0xfe8
  ram_end->used = 1;
 800b432:	f882 10ec 	strb.w	r1, [r2, #236]	@ 0xec
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b436:	4a0e      	ldr	r2, [pc, #56]	@ (800b470 <mem_init+0x68>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b438:	480e      	ldr	r0, [pc, #56]	@ (800b474 <mem_init+0x6c>)
  lfree = (struct mem *)(void *)ram;
 800b43a:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b43c:	f008 ffc0 	bl	80143c0 <sys_mutex_new>
 800b440:	b900      	cbnz	r0, 800b444 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b442:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b444:	4b0c      	ldr	r3, [pc, #48]	@ (800b478 <mem_init+0x70>)
 800b446:	f240 221f 	movw	r2, #543	@ 0x21f
 800b44a:	490c      	ldr	r1, [pc, #48]	@ (800b47c <mem_init+0x74>)
 800b44c:	480c      	ldr	r0, [pc, #48]	@ (800b480 <mem_init+0x78>)
}
 800b44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b452:	f009 ba5f 	b.w	8014914 <iprintf>
 800b456:	bf00      	nop
 800b458:	30000200 	.word	0x30000200
 800b45c:	24009c4c 	.word	0x24009c4c
 800b460:	24009c48 	.word	0x24009c48
 800b464:	30007000 	.word	0x30007000
 800b468:	30007f00 	.word	0x30007f00
 800b46c:	7de87de8 	.word	0x7de87de8
 800b470:	24009c40 	.word	0x24009c40
 800b474:	24009c44 	.word	0x24009c44
 800b478:	080166e8 	.word	0x080166e8
 800b47c:	08016718 	.word	0x08016718
 800b480:	08015bd0 	.word	0x08015bd0

0800b484 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b484:	2800      	cmp	r0, #0
 800b486:	f000 8099 	beq.w	800b5bc <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b48a:	0783      	lsls	r3, r0, #30
{
 800b48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b490:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b492:	f040 808e 	bne.w	800b5b2 <mem_free+0x12e>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b496:	4e62      	ldr	r6, [pc, #392]	@ (800b620 <mem_free+0x19c>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b498:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b49c:	6833      	ldr	r3, [r6, #0]
 800b49e:	42ab      	cmp	r3, r5
 800b4a0:	d805      	bhi.n	800b4ae <mem_free+0x2a>
 800b4a2:	4f60      	ldr	r7, [pc, #384]	@ (800b624 <mem_free+0x1a0>)
 800b4a4:	f100 030c 	add.w	r3, r0, #12
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d20c      	bcs.n	800b4c8 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b4ae:	4b5e      	ldr	r3, [pc, #376]	@ (800b628 <mem_free+0x1a4>)
 800b4b0:	f240 227f 	movw	r2, #639	@ 0x27f
 800b4b4:	495d      	ldr	r1, [pc, #372]	@ (800b62c <mem_free+0x1a8>)
 800b4b6:	485e      	ldr	r0, [pc, #376]	@ (800b630 <mem_free+0x1ac>)
 800b4b8:	f009 fa2c 	bl	8014914 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b4bc:	f008 ffac 	bl	8014418 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b4c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800b4c4:	f008 bfb4 	b.w	8014430 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800b4c8:	485a      	ldr	r0, [pc, #360]	@ (800b634 <mem_free+0x1b0>)
 800b4ca:	f008 ff85 	bl	80143d8 <sys_mutex_lock>
  if (!mem->used) {
 800b4ce:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 809e 	beq.w	800b614 <mem_free+0x190>
  pmem = ptr_to_mem(mem->prev);
 800b4d8:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4dc:	f647 50e8 	movw	r0, #32232	@ 0x7de8
  return (mem_size_t)((u8_t *)mem - ram);
 800b4e0:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4e2:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 800b4e4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4e8:	d808      	bhi.n	800b4fc <mem_free+0x78>
 800b4ea:	4283      	cmp	r3, r0
 800b4ec:	d806      	bhi.n	800b4fc <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 800b4ee:	1aa8      	subs	r0, r5, r2
 800b4f0:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4f2:	4288      	cmp	r0, r1
 800b4f4:	d012      	beq.n	800b51c <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b4f6:	5a51      	ldrh	r1, [r2, r1]
 800b4f8:	4281      	cmp	r1, r0
 800b4fa:	d00f      	beq.n	800b51c <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b4fc:	4b4a      	ldr	r3, [pc, #296]	@ (800b628 <mem_free+0x1a4>)
 800b4fe:	f240 2295 	movw	r2, #661	@ 0x295
 800b502:	494d      	ldr	r1, [pc, #308]	@ (800b638 <mem_free+0x1b4>)
 800b504:	484a      	ldr	r0, [pc, #296]	@ (800b630 <mem_free+0x1ac>)
 800b506:	f009 fa05 	bl	8014914 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b50a:	484a      	ldr	r0, [pc, #296]	@ (800b634 <mem_free+0x1b0>)
 800b50c:	f008 ff6a 	bl	80143e4 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800b510:	f008 ff82 	bl	8014418 <sys_arch_protect>
}
 800b514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800b518:	f008 bf8a 	b.w	8014430 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 800b51c:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b51e:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b522:	4561      	cmp	r1, ip
 800b524:	d002      	beq.n	800b52c <mem_free+0xa8>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b526:	8849      	ldrh	r1, [r1, #2]
 800b528:	4281      	cmp	r1, r0
 800b52a:	d1e7      	bne.n	800b4fc <mem_free+0x78>
  if (mem < lfree) {
 800b52c:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800b654 <mem_free+0x1d0>
  mem->used = 0;
 800b530:	2100      	movs	r1, #0
 800b532:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 800b536:	f8d8 1000 	ldr.w	r1, [r8]
 800b53a:	42a9      	cmp	r1, r5
    lfree = mem;
 800b53c:	bf88      	it	hi
 800b53e:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b542:	4295      	cmp	r5, r2
 800b544:	d33b      	bcc.n	800b5be <mem_free+0x13a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b546:	4565      	cmp	r5, ip
 800b548:	d243      	bcs.n	800b5d2 <mem_free+0x14e>
  return (struct mem *)(void *)&ram[ptr];
 800b54a:	6832      	ldr	r2, [r6, #0]
 800b54c:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b54e:	429d      	cmp	r5, r3
 800b550:	d014      	beq.n	800b57c <mem_free+0xf8>
 800b552:	7919      	ldrb	r1, [r3, #4]
 800b554:	b991      	cbnz	r1, 800b57c <mem_free+0xf8>
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	428b      	cmp	r3, r1
 800b55a:	d00f      	beq.n	800b57c <mem_free+0xf8>
    if (lfree == nmem) {
 800b55c:	f8d8 1000 	ldr.w	r1, [r8]
 800b560:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800b562:	881b      	ldrh	r3, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b564:	f647 51e8 	movw	r1, #32232	@ 0x7de8
      lfree = mem;
 800b568:	bf08      	it	eq
 800b56a:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b56e:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800b570:	f824 3c08 	strh.w	r3, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b574:	d002      	beq.n	800b57c <mem_free+0xf8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b576:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800b578:	1aa9      	subs	r1, r5, r2
 800b57a:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 800b57c:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800b580:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 800b582:	429d      	cmp	r5, r3
 800b584:	d010      	beq.n	800b5a8 <mem_free+0x124>
 800b586:	7918      	ldrb	r0, [r3, #4]
 800b588:	b970      	cbnz	r0, 800b5a8 <mem_free+0x124>
    if (lfree == mem) {
 800b58a:	f8d8 0000 	ldr.w	r0, [r8]
 800b58e:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b590:	f647 50e8 	movw	r0, #32232	@ 0x7de8
      lfree = pmem;
 800b594:	bf08      	it	eq
 800b596:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800b59a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b59e:	4283      	cmp	r3, r0
    pmem->next = mem->next;
 800b5a0:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b5a2:	d001      	beq.n	800b5a8 <mem_free+0x124>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b5a4:	441a      	add	r2, r3
 800b5a6:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800b5a8:	4822      	ldr	r0, [pc, #136]	@ (800b634 <mem_free+0x1b0>)
}
 800b5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800b5ae:	f008 bf19 	b.w	80143e4 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b628 <mem_free+0x1a4>)
 800b5b4:	f240 2273 	movw	r2, #627	@ 0x273
 800b5b8:	4920      	ldr	r1, [pc, #128]	@ (800b63c <mem_free+0x1b8>)
 800b5ba:	e77c      	b.n	800b4b6 <mem_free+0x32>
 800b5bc:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b5be:	4b1a      	ldr	r3, [pc, #104]	@ (800b628 <mem_free+0x1a4>)
 800b5c0:	f240 12df 	movw	r2, #479	@ 0x1df
 800b5c4:	491e      	ldr	r1, [pc, #120]	@ (800b640 <mem_free+0x1bc>)
 800b5c6:	481a      	ldr	r0, [pc, #104]	@ (800b630 <mem_free+0x1ac>)
 800b5c8:	f009 f9a4 	bl	8014914 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	429d      	cmp	r5, r3
 800b5d0:	d306      	bcc.n	800b5e0 <mem_free+0x15c>
 800b5d2:	4b15      	ldr	r3, [pc, #84]	@ (800b628 <mem_free+0x1a4>)
 800b5d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b5d8:	491a      	ldr	r1, [pc, #104]	@ (800b644 <mem_free+0x1c0>)
 800b5da:	4815      	ldr	r0, [pc, #84]	@ (800b630 <mem_free+0x1ac>)
 800b5dc:	f009 f99a 	bl	8014914 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b5e0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800b5e4:	b133      	cbz	r3, 800b5f4 <mem_free+0x170>
 800b5e6:	4b10      	ldr	r3, [pc, #64]	@ (800b628 <mem_free+0x1a4>)
 800b5e8:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b5ec:	4916      	ldr	r1, [pc, #88]	@ (800b648 <mem_free+0x1c4>)
 800b5ee:	4810      	ldr	r0, [pc, #64]	@ (800b630 <mem_free+0x1ac>)
 800b5f0:	f009 f990 	bl	8014914 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b5f4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800b5f8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d9a4      	bls.n	800b54a <mem_free+0xc6>
 800b600:	4b09      	ldr	r3, [pc, #36]	@ (800b628 <mem_free+0x1a4>)
 800b602:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b606:	4911      	ldr	r1, [pc, #68]	@ (800b64c <mem_free+0x1c8>)
 800b608:	4809      	ldr	r0, [pc, #36]	@ (800b630 <mem_free+0x1ac>)
 800b60a:	f009 f983 	bl	8014914 <iprintf>
  nmem = ptr_to_mem(mem->next);
 800b60e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800b612:	e79a      	b.n	800b54a <mem_free+0xc6>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b614:	4b04      	ldr	r3, [pc, #16]	@ (800b628 <mem_free+0x1a4>)
 800b616:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b61a:	490d      	ldr	r1, [pc, #52]	@ (800b650 <mem_free+0x1cc>)
 800b61c:	e772      	b.n	800b504 <mem_free+0x80>
 800b61e:	bf00      	nop
 800b620:	24009c4c 	.word	0x24009c4c
 800b624:	24009c48 	.word	0x24009c48
 800b628:	080166e8 	.word	0x080166e8
 800b62c:	08016758 	.word	0x08016758
 800b630:	08015bd0 	.word	0x08015bd0
 800b634:	24009c44 	.word	0x24009c44
 800b638:	0801679c 	.word	0x0801679c
 800b63c:	08016734 	.word	0x08016734
 800b640:	080167d0 	.word	0x080167d0
 800b644:	080167e8 	.word	0x080167e8
 800b648:	08016804 	.word	0x08016804
 800b64c:	08016820 	.word	0x08016820
 800b650:	08016774 	.word	0x08016774
 800b654:	24009c40 	.word	0x24009c40

0800b658 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b65c:	1ccb      	adds	r3, r1, #3
 800b65e:	f023 0303 	bic.w	r3, r3, #3
 800b662:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 800b664:	2b0c      	cmp	r3, #12
 800b666:	461d      	mov	r5, r3
 800b668:	bf38      	it	cc
 800b66a:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b66c:	428d      	cmp	r5, r1
 800b66e:	f0c0 8087 	bcc.w	800b780 <mem_trim+0x128>
 800b672:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800b676:	4293      	cmp	r3, r2
 800b678:	f200 8082 	bhi.w	800b780 <mem_trim+0x128>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b67c:	4f4c      	ldr	r7, [pc, #304]	@ (800b7b0 <mem_trim+0x158>)
 800b67e:	4604      	mov	r4, r0
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	4283      	cmp	r3, r0
 800b684:	d841      	bhi.n	800b70a <mem_trim+0xb2>
 800b686:	4a4b      	ldr	r2, [pc, #300]	@ (800b7b4 <mem_trim+0x15c>)
 800b688:	6812      	ldr	r2, [r2, #0]
 800b68a:	4282      	cmp	r2, r0
 800b68c:	d93d      	bls.n	800b70a <mem_trim+0xb2>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b68e:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b692:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800b696:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b69a:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800b69c:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b6a0:	eba6 0608 	sub.w	r6, r6, r8
 800b6a4:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b6a6:	42b5      	cmp	r5, r6
 800b6a8:	d863      	bhi.n	800b772 <mem_trim+0x11a>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800b6aa:	d02c      	beq.n	800b706 <mem_trim+0xae>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b6ac:	4842      	ldr	r0, [pc, #264]	@ (800b7b8 <mem_trim+0x160>)
 800b6ae:	f008 fe93 	bl	80143d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b6b2:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 800b6bc:	f899 1004 	ldrb.w	r1, [r9, #4]
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	d136      	bne.n	800b732 <mem_trim+0xda>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b6c4:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 800b6c8:	428a      	cmp	r2, r1
 800b6ca:	d067      	beq.n	800b79c <mem_trim+0x144>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b6cc:	3508      	adds	r5, #8
    if (lfree == mem2) {
 800b6ce:	493b      	ldr	r1, [pc, #236]	@ (800b7bc <mem_trim+0x164>)
    next = mem2->next;
 800b6d0:	f8b9 6000 	ldrh.w	r6, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b6d4:	4445      	add	r5, r8
    if (lfree == mem2) {
 800b6d6:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b6d8:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800b6da:	4548      	cmp	r0, r9
  return (struct mem *)(void *)&ram[ptr];
 800b6dc:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 800b6e0:	bf08      	it	eq
 800b6e2:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 800b6e4:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 800b6e6:	8016      	strh	r6, [r2, #0]
    mem2->used = 0;
 800b6e8:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6ea:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    mem2->prev = ptr;
 800b6ee:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem->next = ptr2;
 800b6f2:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6f6:	8812      	ldrh	r2, [r2, #0]
 800b6f8:	428a      	cmp	r2, r1
 800b6fa:	d001      	beq.n	800b700 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b6fc:	441a      	add	r2, r3
 800b6fe:	8055      	strh	r5, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b700:	482d      	ldr	r0, [pc, #180]	@ (800b7b8 <mem_trim+0x160>)
 800b702:	f008 fe6f 	bl	80143e4 <sys_mutex_unlock>
    return NULL;
 800b706:	4620      	mov	r0, r4
 800b708:	e03b      	b.n	800b782 <mem_trim+0x12a>
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b70a:	4b2d      	ldr	r3, [pc, #180]	@ (800b7c0 <mem_trim+0x168>)
 800b70c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b710:	492c      	ldr	r1, [pc, #176]	@ (800b7c4 <mem_trim+0x16c>)
 800b712:	482d      	ldr	r0, [pc, #180]	@ (800b7c8 <mem_trim+0x170>)
 800b714:	f009 f8fe 	bl	8014914 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	d803      	bhi.n	800b726 <mem_trim+0xce>
 800b71e:	4a25      	ldr	r2, [pc, #148]	@ (800b7b4 <mem_trim+0x15c>)
 800b720:	6812      	ldr	r2, [r2, #0]
 800b722:	42a2      	cmp	r2, r4
 800b724:	d8b3      	bhi.n	800b68e <mem_trim+0x36>
    MEM_STATS_INC_LOCKED(illegal);
 800b726:	f008 fe77 	bl	8014418 <sys_arch_protect>
 800b72a:	f008 fe81 	bl	8014430 <sys_arch_unprotect>
    return NULL;
 800b72e:	4620      	mov	r0, r4
 800b730:	e027      	b.n	800b782 <mem_trim+0x12a>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b732:	f105 0114 	add.w	r1, r5, #20
 800b736:	42b1      	cmp	r1, r6
 800b738:	d8e2      	bhi.n	800b700 <mem_trim+0xa8>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b73a:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b73c:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b740:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b742:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b744:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b746:	d01e      	beq.n	800b786 <mem_trim+0x12e>
    if (mem2 < lfree) {
 800b748:	481c      	ldr	r0, [pc, #112]	@ (800b7bc <mem_trim+0x164>)
  return (struct mem *)(void *)&ram[ptr];
 800b74a:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800b74c:	6806      	ldr	r6, [r0, #0]
    mem2->next = mem->next;
 800b74e:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 800b750:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 800b752:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 800b754:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 800b758:	710a      	strb	r2, [r1, #4]
      lfree = mem2;
 800b75a:	bf88      	it	hi
 800b75c:	6001      	strhi	r1, [r0, #0]
    mem->next = ptr2;
 800b75e:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b762:	880a      	ldrh	r2, [r1, #0]
 800b764:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 800b768:	428a      	cmp	r2, r1
 800b76a:	d0c9      	beq.n	800b700 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b76c:	4413      	add	r3, r2
 800b76e:	805d      	strh	r5, [r3, #2]
 800b770:	e7c6      	b.n	800b700 <mem_trim+0xa8>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b772:	4b13      	ldr	r3, [pc, #76]	@ (800b7c0 <mem_trim+0x168>)
 800b774:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b778:	4914      	ldr	r1, [pc, #80]	@ (800b7cc <mem_trim+0x174>)
 800b77a:	4813      	ldr	r0, [pc, #76]	@ (800b7c8 <mem_trim+0x170>)
 800b77c:	f009 f8ca 	bl	8014914 <iprintf>
    return NULL;
 800b780:	2000      	movs	r0, #0
  return rmem;
}
 800b782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b786:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c0 <mem_trim+0x168>)
 800b788:	f240 3216 	movw	r2, #790	@ 0x316
 800b78c:	4910      	ldr	r1, [pc, #64]	@ (800b7d0 <mem_trim+0x178>)
 800b78e:	480e      	ldr	r0, [pc, #56]	@ (800b7c8 <mem_trim+0x170>)
 800b790:	f009 f8c0 	bl	8014914 <iprintf>
    mem2->next = mem->next;
 800b794:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	e7d5      	b.n	800b748 <mem_trim+0xf0>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b79c:	4b08      	ldr	r3, [pc, #32]	@ (800b7c0 <mem_trim+0x168>)
 800b79e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b7a2:	490b      	ldr	r1, [pc, #44]	@ (800b7d0 <mem_trim+0x178>)
 800b7a4:	4808      	ldr	r0, [pc, #32]	@ (800b7c8 <mem_trim+0x170>)
 800b7a6:	f009 f8b5 	bl	8014914 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	e78e      	b.n	800b6cc <mem_trim+0x74>
 800b7ae:	bf00      	nop
 800b7b0:	24009c4c 	.word	0x24009c4c
 800b7b4:	24009c48 	.word	0x24009c48
 800b7b8:	24009c44 	.word	0x24009c44
 800b7bc:	24009c40 	.word	0x24009c40
 800b7c0:	080166e8 	.word	0x080166e8
 800b7c4:	0801684c 	.word	0x0801684c
 800b7c8:	08015bd0 	.word	0x08015bd0
 800b7cc:	08016864 	.word	0x08016864
 800b7d0:	08016884 	.word	0x08016884

0800b7d4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d06c      	beq.n	800b8b2 <mem_malloc+0xde>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b7d8:	1cc3      	adds	r3, r0, #3
 800b7da:	f023 0303 	bic.w	r3, r3, #3
 800b7de:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 800b7e0:	2b0c      	cmp	r3, #12
{
 800b7e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (size < MIN_SIZE_ALIGNED) {
 800b7e6:	4698      	mov	r8, r3
 800b7e8:	bf38      	it	cc
 800b7ea:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b7ee:	4580      	cmp	r8, r0
 800b7f0:	d327      	bcc.n	800b842 <mem_malloc+0x6e>
 800b7f2:	f647 54e8 	movw	r4, #32232	@ 0x7de8
 800b7f6:	42a3      	cmp	r3, r4
 800b7f8:	d823      	bhi.n	800b842 <mem_malloc+0x6e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b7fa:	4f47      	ldr	r7, [pc, #284]	@ (800b918 <mem_malloc+0x144>)
  return (mem_size_t)((u8_t *)mem - ram);
 800b7fc:	f8df a13c 	ldr.w	sl, [pc, #316]	@ 800b93c <mem_malloc+0x168>
  sys_mutex_lock(&mem_mutex);
 800b800:	4846      	ldr	r0, [pc, #280]	@ (800b91c <mem_malloc+0x148>)
 800b802:	f008 fde9 	bl	80143d8 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b806:	f8d7 c000 	ldr.w	ip, [r7]
  return (mem_size_t)((u8_t *)mem - ram);
 800b80a:	f8da 0000 	ldr.w	r0, [sl]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b80e:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 800b812:	ebac 0300 	sub.w	r3, ip, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b816:	b299      	uxth	r1, r3
 800b818:	4571      	cmp	r1, lr
  return (mem_size_t)((u8_t *)mem - ram);
 800b81a:	460b      	mov	r3, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b81c:	d20e      	bcs.n	800b83c <mem_malloc+0x68>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b81e:	f06f 0907 	mvn.w	r9, #7
  return (struct mem *)(void *)&ram[ptr];
 800b822:	1844      	adds	r4, r0, r1
      if ((!mem->used) &&
 800b824:	461d      	mov	r5, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b826:	5a43      	ldrh	r3, [r0, r1]
 800b828:	eba9 0201 	sub.w	r2, r9, r1
      if ((!mem->used) &&
 800b82c:	7926      	ldrb	r6, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b82e:	4619      	mov	r1, r3
      if ((!mem->used) &&
 800b830:	b916      	cbnz	r6, 800b838 <mem_malloc+0x64>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b832:	441a      	add	r2, r3
      if ((!mem->used) &&
 800b834:	4542      	cmp	r2, r8
 800b836:	d207      	bcs.n	800b848 <mem_malloc+0x74>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b838:	459e      	cmp	lr, r3
 800b83a:	d8f2      	bhi.n	800b822 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b83c:	4837      	ldr	r0, [pc, #220]	@ (800b91c <mem_malloc+0x148>)
 800b83e:	f008 fdd1 	bl	80143e4 <sys_mutex_unlock>
    return NULL;
 800b842:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 800b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b848:	f108 0114 	add.w	r1, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b84c:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b850:	428a      	cmp	r2, r1
 800b852:	d32b      	bcc.n	800b8ac <mem_malloc+0xd8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b854:	eb05 0908 	add.w	r9, r5, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b858:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b85c:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b860:	4591      	cmp	r9, r2
 800b862:	d04c      	beq.n	800b8fe <mem_malloc+0x12a>
  return (struct mem *)(void *)&ram[ptr];
 800b864:	eb00 0209 	add.w	r2, r0, r9
          mem2->used = 0;
 800b868:	2100      	movs	r1, #0
 800b86a:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800b86c:	f820 3009 	strh.w	r3, [r0, r9]
          mem->used = 1;
 800b870:	2301      	movs	r3, #1
          mem2->prev = ptr;
 800b872:	8055      	strh	r5, [r2, #2]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b874:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          mem->next = ptr2;
 800b878:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 800b87c:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b87e:	f830 3009 	ldrh.w	r3, [r0, r9]
 800b882:	4293      	cmp	r3, r2
 800b884:	d002      	beq.n	800b88c <mem_malloc+0xb8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b886:	4418      	add	r0, r3
 800b888:	f8a0 9002 	strh.w	r9, [r0, #2]
        if (mem == lfree) {
 800b88c:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 800b88e:	4d24      	ldr	r5, [pc, #144]	@ (800b920 <mem_malloc+0x14c>)
        if (mem == lfree) {
 800b890:	d028      	beq.n	800b8e4 <mem_malloc+0x110>
        sys_mutex_unlock(&mem_mutex);
 800b892:	4822      	ldr	r0, [pc, #136]	@ (800b91c <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b894:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 800b896:	f008 fda5 	bl	80143e4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b89a:	682b      	ldr	r3, [r5, #0]
 800b89c:	4543      	cmp	r3, r8
 800b89e:	d319      	bcc.n	800b8d4 <mem_malloc+0x100>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b8a0:	07a3      	lsls	r3, r4, #30
 800b8a2:	d108      	bne.n	800b8b6 <mem_malloc+0xe2>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b8a4:	f104 0008 	add.w	r0, r4, #8
}
 800b8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          mem->used = 1;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	7123      	strb	r3, [r4, #4]
 800b8b0:	e7ec      	b.n	800b88c <mem_malloc+0xb8>
    return NULL;
 800b8b2:	2000      	movs	r0, #0
}
 800b8b4:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b8b6:	4b1b      	ldr	r3, [pc, #108]	@ (800b924 <mem_malloc+0x150>)
 800b8b8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b8bc:	491a      	ldr	r1, [pc, #104]	@ (800b928 <mem_malloc+0x154>)
 800b8be:	481b      	ldr	r0, [pc, #108]	@ (800b92c <mem_malloc+0x158>)
 800b8c0:	f009 f828 	bl	8014914 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b8c4:	4b17      	ldr	r3, [pc, #92]	@ (800b924 <mem_malloc+0x150>)
 800b8c6:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b8ca:	4919      	ldr	r1, [pc, #100]	@ (800b930 <mem_malloc+0x15c>)
 800b8cc:	4817      	ldr	r0, [pc, #92]	@ (800b92c <mem_malloc+0x158>)
 800b8ce:	f009 f821 	bl	8014914 <iprintf>
 800b8d2:	e7e7      	b.n	800b8a4 <mem_malloc+0xd0>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b8d4:	4b13      	ldr	r3, [pc, #76]	@ (800b924 <mem_malloc+0x150>)
 800b8d6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b8da:	4916      	ldr	r1, [pc, #88]	@ (800b934 <mem_malloc+0x160>)
 800b8dc:	4813      	ldr	r0, [pc, #76]	@ (800b92c <mem_malloc+0x158>)
 800b8de:	f009 f819 	bl	8014914 <iprintf>
 800b8e2:	e7dd      	b.n	800b8a0 <mem_malloc+0xcc>
  return (struct mem *)(void *)&ram[ptr];
 800b8e4:	f8da 0000 	ldr.w	r0, [sl]
 800b8e8:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800b8ea:	6829      	ldr	r1, [r5, #0]
 800b8ec:	e003      	b.n	800b8f6 <mem_malloc+0x122>
  return (struct mem *)(void *)&ram[ptr];
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 800b8f2:	791a      	ldrb	r2, [r3, #4]
 800b8f4:	b10a      	cbz	r2, 800b8fa <mem_malloc+0x126>
 800b8f6:	4299      	cmp	r1, r3
 800b8f8:	d1f9      	bne.n	800b8ee <mem_malloc+0x11a>
          lfree = cur;
 800b8fa:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b8fc:	e7c9      	b.n	800b892 <mem_malloc+0xbe>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b8fe:	4b09      	ldr	r3, [pc, #36]	@ (800b924 <mem_malloc+0x150>)
 800b900:	f240 3287 	movw	r2, #903	@ 0x387
 800b904:	490c      	ldr	r1, [pc, #48]	@ (800b938 <mem_malloc+0x164>)
 800b906:	4809      	ldr	r0, [pc, #36]	@ (800b92c <mem_malloc+0x158>)
 800b908:	f009 f804 	bl	8014914 <iprintf>
          mem2->next = mem->next;
 800b90c:	8823      	ldrh	r3, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 800b90e:	f8da 0000 	ldr.w	r0, [sl]
        if (mem == lfree) {
 800b912:	f8d7 c000 	ldr.w	ip, [r7]
 800b916:	e7a5      	b.n	800b864 <mem_malloc+0x90>
 800b918:	24009c40 	.word	0x24009c40
 800b91c:	24009c44 	.word	0x24009c44
 800b920:	24009c48 	.word	0x24009c48
 800b924:	080166e8 	.word	0x080166e8
 800b928:	080168c8 	.word	0x080168c8
 800b92c:	08015bd0 	.word	0x08015bd0
 800b930:	080168f8 	.word	0x080168f8
 800b934:	08016898 	.word	0x08016898
 800b938:	08016884 	.word	0x08016884
 800b93c:	24009c4c 	.word	0x24009c4c

0800b940 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b944:	f008 fd68 	bl	8014418 <sys_arch_protect>

  memp = *desc->tab;
 800b948:	68a3      	ldr	r3, [r4, #8]
 800b94a:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b94c:	b18c      	cbz	r4, 800b972 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b94e:	6822      	ldr	r2, [r4, #0]
 800b950:	4605      	mov	r5, r0
 800b952:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b954:	07a3      	lsls	r3, r4, #30
 800b956:	d104      	bne.n	800b962 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b958:	4628      	mov	r0, r5
 800b95a:	f008 fd69 	bl	8014430 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800b95e:	4620      	mov	r0, r4
 800b960:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b962:	4b06      	ldr	r3, [pc, #24]	@ (800b97c <do_memp_malloc_pool+0x3c>)
 800b964:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b968:	4905      	ldr	r1, [pc, #20]	@ (800b980 <do_memp_malloc_pool+0x40>)
 800b96a:	4806      	ldr	r0, [pc, #24]	@ (800b984 <do_memp_malloc_pool+0x44>)
 800b96c:	f008 ffd2 	bl	8014914 <iprintf>
 800b970:	e7f2      	b.n	800b958 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 800b972:	f008 fd5d 	bl	8014430 <sys_arch_unprotect>
}
 800b976:	4620      	mov	r0, r4
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	0801691c 	.word	0x0801691c
 800b980:	0801694c 	.word	0x0801694c
 800b984:	08015bd0 	.word	0x08015bd0

0800b988 <memp_init_pool>:
{
 800b988:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 800b98a:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800b98c:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800b98e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800b992:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 800b994:	b17c      	cbz	r4, 800b9b6 <memp_init_pool+0x2e>
 800b996:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b998:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 800b99c:	460a      	mov	r2, r1
 800b99e:	f023 0303 	bic.w	r3, r3, #3
 800b9a2:	e000      	b.n	800b9a6 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b9a4:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800b9a6:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800b9a8:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b9aa:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	42a2      	cmp	r2, r4
 800b9b2:	d1f7      	bne.n	800b9a4 <memp_init_pool+0x1c>
 800b9b4:	602b      	str	r3, [r5, #0]
}
 800b9b6:	bc30      	pop	{r4, r5}
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop

0800b9bc <memp_init>:
{
 800b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9be:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800ba14 <memp_init+0x58>
 800b9c2:	2404      	movs	r4, #4
 800b9c4:	4b11      	ldr	r3, [pc, #68]	@ (800ba0c <memp_init+0x50>)
  *desc->tab = NULL;
 800b9c6:	2600      	movs	r6, #0
{
 800b9c8:	4d11      	ldr	r5, [pc, #68]	@ (800ba10 <memp_init+0x54>)
 800b9ca:	f10e 0734 	add.w	r7, lr, #52	@ 0x34
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b9ce:	3303      	adds	r3, #3
    memp_init_pool(memp_pools[i]);
 800b9d0:	f85e 2b04 	ldr.w	r2, [lr], #4
  *desc->tab = NULL;
 800b9d4:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b9d6:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800b9da:	b16c      	cbz	r4, 800b9f8 <memp_init+0x3c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b9dc:	2100      	movs	r1, #0
 800b9de:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800b9e2:	460a      	mov	r2, r1
 800b9e4:	e000      	b.n	800b9e8 <memp_init+0x2c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b9e6:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800b9e8:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800b9ea:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b9ec:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	42a2      	cmp	r2, r4
 800b9f4:	d1f7      	bne.n	800b9e6 <memp_init+0x2a>
 800b9f6:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b9f8:	4577      	cmp	r7, lr
 800b9fa:	d005      	beq.n	800ba08 <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
 800b9fc:	f8de 2000 	ldr.w	r2, [lr]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ba00:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800ba04:	8854      	ldrh	r4, [r2, #2]
 800ba06:	e7e2      	b.n	800b9ce <memp_init+0x12>
}
 800ba08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	24010678 	.word	0x24010678
 800ba10:	24010674 	.word	0x24010674
 800ba14:	080169e0 	.word	0x080169e0

0800ba18 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ba18:	b108      	cbz	r0, 800ba1e <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ba1a:	f7ff bf91 	b.w	800b940 <do_memp_malloc_pool>
{
 800ba1e:	b510      	push	{r4, lr}
 800ba20:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ba22:	4b04      	ldr	r3, [pc, #16]	@ (800ba34 <memp_malloc_pool+0x1c>)
 800ba24:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ba28:	4903      	ldr	r1, [pc, #12]	@ (800ba38 <memp_malloc_pool+0x20>)
 800ba2a:	4804      	ldr	r0, [pc, #16]	@ (800ba3c <memp_malloc_pool+0x24>)
 800ba2c:	f008 ff72 	bl	8014914 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ba30:	4620      	mov	r0, r4
 800ba32:	bd10      	pop	{r4, pc}
 800ba34:	0801691c 	.word	0x0801691c
 800ba38:	08016970 	.word	0x08016970
 800ba3c:	08015bd0 	.word	0x08015bd0

0800ba40 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ba40:	280c      	cmp	r0, #12
{
 800ba42:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ba44:	d806      	bhi.n	800ba54 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ba46:	4b08      	ldr	r3, [pc, #32]	@ (800ba68 <memp_malloc+0x28>)
 800ba48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 800ba4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ba50:	f7ff bf76 	b.w	800b940 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ba54:	4b05      	ldr	r3, [pc, #20]	@ (800ba6c <memp_malloc+0x2c>)
 800ba56:	f240 1257 	movw	r2, #343	@ 0x157
 800ba5a:	4905      	ldr	r1, [pc, #20]	@ (800ba70 <memp_malloc+0x30>)
 800ba5c:	4805      	ldr	r0, [pc, #20]	@ (800ba74 <memp_malloc+0x34>)
 800ba5e:	f008 ff59 	bl	8014914 <iprintf>
}
 800ba62:	2000      	movs	r0, #0
 800ba64:	bd08      	pop	{r3, pc}
 800ba66:	bf00      	nop
 800ba68:	080169e0 	.word	0x080169e0
 800ba6c:	0801691c 	.word	0x0801691c
 800ba70:	08016984 	.word	0x08016984
 800ba74:	08015bd0 	.word	0x08015bd0

0800ba78 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ba78:	b1c0      	cbz	r0, 800baac <memp_free_pool+0x34>
{
 800ba7a:	b570      	push	{r4, r5, r6, lr}
 800ba7c:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800ba7e:	b161      	cbz	r1, 800ba9a <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ba80:	078b      	lsls	r3, r1, #30
 800ba82:	4605      	mov	r5, r0
 800ba84:	d10a      	bne.n	800ba9c <memp_free_pool+0x24>
  SYS_ARCH_PROTECT(old_level);
 800ba86:	f008 fcc7 	bl	8014418 <sys_arch_protect>
  memp->next = *desc->tab;
 800ba8a:	68ab      	ldr	r3, [r5, #8]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800ba90:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800ba92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800ba96:	f008 bccb 	b.w	8014430 <sys_arch_unprotect>
}
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ba9c:	4b07      	ldr	r3, [pc, #28]	@ (800babc <memp_free_pool+0x44>)
 800ba9e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800baa2:	4907      	ldr	r1, [pc, #28]	@ (800bac0 <memp_free_pool+0x48>)
 800baa4:	4807      	ldr	r0, [pc, #28]	@ (800bac4 <memp_free_pool+0x4c>)
 800baa6:	f008 ff35 	bl	8014914 <iprintf>
 800baaa:	e7ec      	b.n	800ba86 <memp_free_pool+0xe>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800baac:	4b03      	ldr	r3, [pc, #12]	@ (800babc <memp_free_pool+0x44>)
 800baae:	f240 1295 	movw	r2, #405	@ 0x195
 800bab2:	4905      	ldr	r1, [pc, #20]	@ (800bac8 <memp_free_pool+0x50>)
 800bab4:	4803      	ldr	r0, [pc, #12]	@ (800bac4 <memp_free_pool+0x4c>)
 800bab6:	f008 bf2d 	b.w	8014914 <iprintf>
 800baba:	bf00      	nop
 800babc:	0801691c 	.word	0x0801691c
 800bac0:	080169a4 	.word	0x080169a4
 800bac4:	08015bd0 	.word	0x08015bd0
 800bac8:	08016970 	.word	0x08016970

0800bacc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bacc:	280c      	cmp	r0, #12
 800bace:	d812      	bhi.n	800baf6 <memp_free+0x2a>
{
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	460c      	mov	r4, r1

  if (mem == NULL) {
 800bad4:	b171      	cbz	r1, 800baf4 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bad6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb14 <memp_free+0x48>)
 800bad8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 800badc:	078b      	lsls	r3, r1, #30
 800bade:	d111      	bne.n	800bb04 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 800bae0:	f008 fc9a 	bl	8014418 <sys_arch_protect>
  memp->next = *desc->tab;
 800bae4:	68ab      	ldr	r3, [r5, #8]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800baea:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800baec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800baf0:	f008 bc9e 	b.w	8014430 <sys_arch_unprotect>
}
 800baf4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800baf6:	4b08      	ldr	r3, [pc, #32]	@ (800bb18 <memp_free+0x4c>)
 800baf8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bafc:	4907      	ldr	r1, [pc, #28]	@ (800bb1c <memp_free+0x50>)
 800bafe:	4808      	ldr	r0, [pc, #32]	@ (800bb20 <memp_free+0x54>)
 800bb00:	f008 bf08 	b.w	8014914 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800bb04:	4b04      	ldr	r3, [pc, #16]	@ (800bb18 <memp_free+0x4c>)
 800bb06:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800bb0a:	4906      	ldr	r1, [pc, #24]	@ (800bb24 <memp_free+0x58>)
 800bb0c:	4804      	ldr	r0, [pc, #16]	@ (800bb20 <memp_free+0x54>)
 800bb0e:	f008 ff01 	bl	8014914 <iprintf>
 800bb12:	e7e5      	b.n	800bae0 <memp_free+0x14>
 800bb14:	080169e0 	.word	0x080169e0
 800bb18:	0801691c 	.word	0x0801691c
 800bb1c:	080169c4 	.word	0x080169c4
 800bb20:	08015bd0 	.word	0x08015bd0
 800bb24:	080169a4 	.word	0x080169a4

0800bb28 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800bb28:	f06f 000b 	mvn.w	r0, #11
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop

0800bb30 <netif_issue_reports>:
{
 800bb30:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bb32:	4604      	mov	r4, r0
 800bb34:	b150      	cbz	r0, 800bb4c <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bb36:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 800bb3a:	f003 0205 	and.w	r2, r3, #5
 800bb3e:	2a05      	cmp	r2, #5
 800bb40:	d103      	bne.n	800bb4a <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb42:	6862      	ldr	r2, [r4, #4]
 800bb44:	b10a      	cbz	r2, 800bb4a <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bb46:	071b      	lsls	r3, r3, #28
 800bb48:	d408      	bmi.n	800bb5c <netif_issue_reports+0x2c>
}
 800bb4a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bb4c:	4b06      	ldr	r3, [pc, #24]	@ (800bb68 <netif_issue_reports+0x38>)
 800bb4e:	f240 326d 	movw	r2, #877	@ 0x36d
 800bb52:	4906      	ldr	r1, [pc, #24]	@ (800bb6c <netif_issue_reports+0x3c>)
 800bb54:	4806      	ldr	r0, [pc, #24]	@ (800bb70 <netif_issue_reports+0x40>)
 800bb56:	f008 fedd 	bl	8014914 <iprintf>
 800bb5a:	e7ec      	b.n	800bb36 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 800bb5c:	1d21      	adds	r1, r4, #4
 800bb5e:	4620      	mov	r0, r4
}
 800bb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800bb64:	f007 baf0 	b.w	8013148 <etharp_request>
 800bb68:	08016ab0 	.word	0x08016ab0
 800bb6c:	08016ae4 	.word	0x08016ae4
 800bb70:	08015bd0 	.word	0x08015bd0

0800bb74 <netif_init>:
}
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop

0800bb78 <netif_set_addr>:
{
 800bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	4604      	mov	r4, r0
 800bb80:	4617      	mov	r7, r2
 800bb82:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 800bb84:	f7fa fbb8 	bl	80062f8 <sys_check_core_locking>
  if (ipaddr == NULL) {
 800bb88:	b1e5      	cbz	r5, 800bbc4 <netif_set_addr+0x4c>
  if (netmask == NULL) {
 800bb8a:	b187      	cbz	r7, 800bbae <netif_set_addr+0x36>
  if (gw == NULL) {
 800bb8c:	b196      	cbz	r6, 800bbb4 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 800bb8e:	682b      	ldr	r3, [r5, #0]
 800bb90:	b1a3      	cbz	r3, 800bbbc <netif_set_addr+0x44>
 800bb92:	2100      	movs	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	68a2      	ldr	r2, [r4, #8]
 800bb98:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bb9a:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bb9c:	bf18      	it	ne
 800bb9e:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bba0:	6833      	ldr	r3, [r6, #0]
 800bba2:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bba4:	bf18      	it	ne
 800bba6:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800bba8:	b181      	cbz	r1, 800bbcc <netif_set_addr+0x54>
}
 800bbaa:	b003      	add	sp, #12
 800bbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 800bbae:	4f1b      	ldr	r7, [pc, #108]	@ (800bc1c <netif_set_addr+0xa4>)
  if (gw == NULL) {
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	d1ec      	bne.n	800bb8e <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 800bbb4:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 800bbb6:	4e19      	ldr	r6, [pc, #100]	@ (800bc1c <netif_set_addr+0xa4>)
  remove = ip4_addr_isany(ipaddr);
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1ea      	bne.n	800bb92 <netif_set_addr+0x1a>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bbbc:	6862      	ldr	r2, [r4, #4]
 800bbbe:	b9da      	cbnz	r2, 800bbf8 <netif_set_addr+0x80>
  remove = ip4_addr_isany(ipaddr);
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	e7e7      	b.n	800bb94 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 800bbc4:	4d15      	ldr	r5, [pc, #84]	@ (800bc1c <netif_set_addr+0xa4>)
  if (netmask == NULL) {
 800bbc6:	2f00      	cmp	r7, #0
 800bbc8:	d1e0      	bne.n	800bb8c <netif_set_addr+0x14>
 800bbca:	e7f0      	b.n	800bbae <netif_set_addr+0x36>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bbcc:	6863      	ldr	r3, [r4, #4]
 800bbce:	682a      	ldr	r2, [r5, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d0ea      	beq.n	800bbaa <netif_set_addr+0x32>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bbd4:	a901      	add	r1, sp, #4
 800bbd6:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bbd8:	e9cd 3200 	strd	r3, r2, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bbdc:	f001 ffec 	bl	800dbb8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bbe0:	a901      	add	r1, sp, #4
 800bbe2:	4668      	mov	r0, sp
 800bbe4:	f005 fb02 	bl	80111ec <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bbe8:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bbea:	2101      	movs	r1, #1
 800bbec:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bbee:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bbf0:	f7ff ff9e 	bl	800bb30 <netif_issue_reports>
}
 800bbf4:	b003      	add	sp, #12
 800bbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bbf8:	a901      	add	r1, sp, #4
 800bbfa:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bbfc:	e9cd 2300 	strd	r2, r3, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bc00:	f001 ffda 	bl	800dbb8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bc04:	a901      	add	r1, sp, #4
 800bc06:	4668      	mov	r0, sp
 800bc08:	f005 faf0 	bl	80111ec <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bc0c:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bc0e:	2101      	movs	r1, #1
 800bc10:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bc12:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bc14:	f7ff ff8c 	bl	800bb30 <netif_issue_reports>
    return 1; /* address changed */
 800bc18:	e7d2      	b.n	800bbc0 <netif_set_addr+0x48>
 800bc1a:	bf00      	nop
 800bc1c:	080189c0 	.word	0x080189c0

0800bc20 <netif_add>:
{
 800bc20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	4606      	mov	r6, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	4615      	mov	r5, r2
 800bc2a:	461f      	mov	r7, r3
 800bc2c:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 800bc30:	f7fa fb62 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bc34:	2e00      	cmp	r6, #0
 800bc36:	f000 8081 	beq.w	800bd3c <netif_add+0x11c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bc3a:	f1b8 0f00 	cmp.w	r8, #0
 800bc3e:	f000 8086 	beq.w	800bd4e <netif_add+0x12e>
  if (ipaddr == NULL) {
 800bc42:	2c00      	cmp	r4, #0
 800bc44:	d071      	beq.n	800bd2a <netif_add+0x10a>
  if (netmask == NULL) {
 800bc46:	2d00      	cmp	r5, #0
 800bc48:	d06a      	beq.n	800bd20 <netif_add+0x100>
  if (gw == NULL) {
 800bc4a:	2f00      	cmp	r7, #0
 800bc4c:	d06b      	beq.n	800bd26 <netif_add+0x106>
  netif->state = state;
 800bc4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bc50:	463b      	mov	r3, r7
  netif->num = netif_num;
 800bc52:	f8df b128 	ldr.w	fp, [pc, #296]	@ 800bd7c <netif_add+0x15c>
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bc56:	462a      	mov	r2, r5
  netif->state = state;
 800bc58:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bc5a:	4621      	mov	r1, r4
  netif->input = input;
 800bc5c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800bc5e:	6130      	str	r0, [r6, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bc60:	2000      	movs	r0, #0
 800bc62:	e9c6 0001 	strd	r0, r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 800bc66:	60f0      	str	r0, [r6, #12]
  netif->mtu = 0;
 800bc68:	8530      	strh	r0, [r6, #40]	@ 0x28
  netif->flags = 0;
 800bc6a:	f886 0031 	strb.w	r0, [r6, #49]	@ 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800bc6e:	6270      	str	r0, [r6, #36]	@ 0x24
  netif->link_callback = NULL;
 800bc70:	61f0      	str	r0, [r6, #28]
  netif->num = netif_num;
 800bc72:	f89b 0000 	ldrb.w	r0, [fp]
 800bc76:	f886 0034 	strb.w	r0, [r6, #52]	@ 0x34
  netif->output = netif_null_output_ip4;
 800bc7a:	4839      	ldr	r0, [pc, #228]	@ (800bd60 <netif_add+0x140>)
 800bc7c:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7ff ff7a 	bl	800bb78 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800bc84:	4630      	mov	r0, r6
 800bc86:	47c0      	blx	r8
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d15e      	bne.n	800bd4a <netif_add+0x12a>
      if (netif->num == 255) {
 800bc8c:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 800bc90:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800bd80 <netif_add+0x160>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bc94:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800bd70 <netif_add+0x150>
 800bc98:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 800bd84 <netif_add+0x164>
 800bc9c:	4f31      	ldr	r7, [pc, #196]	@ (800bd64 <netif_add+0x144>)
      if (netif->num == 255) {
 800bc9e:	2bff      	cmp	r3, #255	@ 0xff
 800bca0:	d102      	bne.n	800bca8 <netif_add+0x88>
        netif->num = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bca8:	f8d9 4000 	ldr.w	r4, [r9]
 800bcac:	2c00      	cmp	r4, #0
 800bcae:	d042      	beq.n	800bd36 <netif_add+0x116>
      num_netifs = 0;
 800bcb0:	2500      	movs	r5, #0
 800bcb2:	e007      	b.n	800bcc4 <netif_add+0xa4>
        if (netif2->num == netif->num) {
 800bcb4:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800bcb8:	f896 2034 	ldrb.w	r2, [r6, #52]	@ 0x34
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d014      	beq.n	800bcea <netif_add+0xca>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bcc0:	6824      	ldr	r4, [r4, #0]
 800bcc2:	b1fc      	cbz	r4, 800bd04 <netif_add+0xe4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bcc4:	42a6      	cmp	r6, r4
        num_netifs++;
 800bcc6:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bcca:	d013      	beq.n	800bcf4 <netif_add+0xd4>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bccc:	2dff      	cmp	r5, #255	@ 0xff
 800bcce:	ddf1      	ble.n	800bcb4 <netif_add+0x94>
 800bcd0:	4643      	mov	r3, r8
 800bcd2:	f240 128d 	movw	r2, #397	@ 0x18d
 800bcd6:	4924      	ldr	r1, [pc, #144]	@ (800bd68 <netif_add+0x148>)
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f008 fe1b 	bl	8014914 <iprintf>
        if (netif2->num == netif->num) {
 800bcde:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800bce2:	f896 2034 	ldrb.w	r2, [r6, #52]	@ 0x34
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d1ea      	bne.n	800bcc0 <netif_add+0xa0>
          netif->num++;
 800bcea:	3301      	adds	r3, #1
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
    } while (netif2 != NULL);
 800bcf2:	e7d4      	b.n	800bc9e <netif_add+0x7e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bcf4:	4643      	mov	r3, r8
 800bcf6:	f240 128b 	movw	r2, #395	@ 0x18b
 800bcfa:	4651      	mov	r1, sl
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f008 fe09 	bl	8014914 <iprintf>
 800bd02:	e7e3      	b.n	800bccc <netif_add+0xac>
  netif->next = netif_list;
 800bd04:	f8d9 4000 	ldr.w	r4, [r9]
  if (netif->num == 254) {
 800bd08:	2afe      	cmp	r2, #254	@ 0xfe
 800bd0a:	d012      	beq.n	800bd32 <netif_add+0x112>
    netif_num = (u8_t)(netif->num + 1);
 800bd0c:	1c53      	adds	r3, r2, #1
 800bd0e:	b2db      	uxtb	r3, r3
  return netif;
 800bd10:	4630      	mov	r0, r6
  netif->next = netif_list;
 800bd12:	6034      	str	r4, [r6, #0]
 800bd14:	f88b 3000 	strb.w	r3, [fp]
  netif_list = netif;
 800bd18:	f8c9 6000 	str.w	r6, [r9]
}
 800bd1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bd20:	4d12      	ldr	r5, [pc, #72]	@ (800bd6c <netif_add+0x14c>)
  if (gw == NULL) {
 800bd22:	2f00      	cmp	r7, #0
 800bd24:	d193      	bne.n	800bc4e <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bd26:	4f11      	ldr	r7, [pc, #68]	@ (800bd6c <netif_add+0x14c>)
 800bd28:	e791      	b.n	800bc4e <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bd2a:	4c10      	ldr	r4, [pc, #64]	@ (800bd6c <netif_add+0x14c>)
  if (netmask == NULL) {
 800bd2c:	2d00      	cmp	r5, #0
 800bd2e:	d18c      	bne.n	800bc4a <netif_add+0x2a>
 800bd30:	e7f6      	b.n	800bd20 <netif_add+0x100>
    netif_num = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e7ec      	b.n	800bd10 <netif_add+0xf0>
  if (netif->num == 254) {
 800bd36:	f896 2034 	ldrb.w	r2, [r6, #52]	@ 0x34
 800bd3a:	e7e5      	b.n	800bd08 <netif_add+0xe8>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bd3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd70 <netif_add+0x150>)
 800bd3e:	f240 1227 	movw	r2, #295	@ 0x127
 800bd42:	490c      	ldr	r1, [pc, #48]	@ (800bd74 <netif_add+0x154>)
 800bd44:	4807      	ldr	r0, [pc, #28]	@ (800bd64 <netif_add+0x144>)
 800bd46:	f008 fde5 	bl	8014914 <iprintf>
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	e7e6      	b.n	800bd1c <netif_add+0xfc>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bd4e:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <netif_add+0x150>)
 800bd50:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800bd54:	4908      	ldr	r1, [pc, #32]	@ (800bd78 <netif_add+0x158>)
 800bd56:	4803      	ldr	r0, [pc, #12]	@ (800bd64 <netif_add+0x144>)
 800bd58:	f008 fddc 	bl	8014914 <iprintf>
 800bd5c:	e7f5      	b.n	800bd4a <netif_add+0x12a>
 800bd5e:	bf00      	nop
 800bd60:	0800bb29 	.word	0x0800bb29
 800bd64:	08015bd0 	.word	0x08015bd0
 800bd68:	08016b5c 	.word	0x08016b5c
 800bd6c:	080189c0 	.word	0x080189c0
 800bd70:	08016ab0 	.word	0x08016ab0
 800bd74:	08016b08 	.word	0x08016b08
 800bd78:	08016b24 	.word	0x08016b24
 800bd7c:	240106fb 	.word	0x240106fb
 800bd80:	24010700 	.word	0x24010700
 800bd84:	08016b48 	.word	0x08016b48

0800bd88 <netif_set_default>:
{
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800bd8c:	f7fa fab4 	bl	80062f8 <sys_check_core_locking>
  netif_default = netif;
 800bd90:	4b01      	ldr	r3, [pc, #4]	@ (800bd98 <netif_set_default+0x10>)
 800bd92:	601c      	str	r4, [r3, #0]
}
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	bf00      	nop
 800bd98:	240106fc 	.word	0x240106fc

0800bd9c <netif_set_up>:
{
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800bda0:	f7fa faaa 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bda4:	b174      	cbz	r4, 800bdc4 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bda6:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 800bdaa:	07da      	lsls	r2, r3, #31
 800bdac:	d500      	bpl.n	800bdb0 <netif_set_up+0x14>
}
 800bdae:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bdb0:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bdb8:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 800bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bdc0:	f7ff beb6 	b.w	800bb30 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bdc4:	4b04      	ldr	r3, [pc, #16]	@ (800bdd8 <netif_set_up+0x3c>)
 800bdc6:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800bdca:	4904      	ldr	r1, [pc, #16]	@ (800bddc <netif_set_up+0x40>)
 800bdcc:	4804      	ldr	r0, [pc, #16]	@ (800bde0 <netif_set_up+0x44>)
}
 800bdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bdd2:	f008 bd9f 	b.w	8014914 <iprintf>
 800bdd6:	bf00      	nop
 800bdd8:	08016ab0 	.word	0x08016ab0
 800bddc:	08016b8c 	.word	0x08016b8c
 800bde0:	08015bd0 	.word	0x08015bd0

0800bde4 <netif_set_down>:
{
 800bde4:	b510      	push	{r4, lr}
 800bde6:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800bde8:	f7fa fa86 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bdec:	b17c      	cbz	r4, 800be0e <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 800bdee:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 800bdf2:	07da      	lsls	r2, r3, #31
 800bdf4:	d505      	bpl.n	800be02 <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bdf6:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bdfa:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bdfc:	f884 2031 	strb.w	r2, [r4, #49]	@ 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800be00:	d400      	bmi.n	800be04 <netif_set_down+0x20>
}
 800be02:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 800be04:	4620      	mov	r0, r4
}
 800be06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 800be0a:	f006 bf59 	b.w	8012cc0 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800be0e:	4b04      	ldr	r3, [pc, #16]	@ (800be20 <netif_set_down+0x3c>)
 800be10:	f240 329b 	movw	r2, #923	@ 0x39b
 800be14:	4903      	ldr	r1, [pc, #12]	@ (800be24 <netif_set_down+0x40>)
 800be16:	4804      	ldr	r0, [pc, #16]	@ (800be28 <netif_set_down+0x44>)
}
 800be18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800be1c:	f008 bd7a 	b.w	8014914 <iprintf>
 800be20:	08016ab0 	.word	0x08016ab0
 800be24:	08016ba8 	.word	0x08016ba8
 800be28:	08015bd0 	.word	0x08015bd0

0800be2c <netif_set_link_up>:
{
 800be2c:	b510      	push	{r4, lr}
 800be2e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800be30:	f7fa fa62 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800be34:	b1b4      	cbz	r4, 800be64 <netif_set_link_up+0x38>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800be36:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 800be3a:	075a      	lsls	r2, r3, #29
 800be3c:	d500      	bpl.n	800be40 <netif_set_link_up+0x14>
}
 800be3e:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800be40:	f043 0304 	orr.w	r3, r3, #4
    dhcp_network_changed(netif);
 800be44:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800be46:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
    dhcp_network_changed(netif);
 800be4a:	f006 f9a5 	bl	8012198 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800be4e:	2103      	movs	r1, #3
 800be50:	4620      	mov	r0, r4
 800be52:	f7ff fe6d 	bl	800bb30 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800be56:	69e3      	ldr	r3, [r4, #28]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d0f0      	beq.n	800be3e <netif_set_link_up+0x12>
 800be5c:	4620      	mov	r0, r4
}
 800be5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800be62:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800be64:	4b04      	ldr	r3, [pc, #16]	@ (800be78 <netif_set_link_up+0x4c>)
 800be66:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800be6a:	4904      	ldr	r1, [pc, #16]	@ (800be7c <netif_set_link_up+0x50>)
 800be6c:	4804      	ldr	r0, [pc, #16]	@ (800be80 <netif_set_link_up+0x54>)
}
 800be6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800be72:	f008 bd4f 	b.w	8014914 <iprintf>
 800be76:	bf00      	nop
 800be78:	08016ab0 	.word	0x08016ab0
 800be7c:	08016bc8 	.word	0x08016bc8
 800be80:	08015bd0 	.word	0x08015bd0

0800be84 <netif_set_link_down>:
{
 800be84:	b510      	push	{r4, lr}
 800be86:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800be88:	f7fa fa36 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800be8c:	b174      	cbz	r4, 800beac <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800be8e:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 800be92:	075a      	lsls	r2, r3, #29
 800be94:	d509      	bpl.n	800beaa <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800be96:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800be9a:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800be9c:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800bea0:	b11a      	cbz	r2, 800beaa <netif_set_link_down+0x26>
 800bea2:	4620      	mov	r0, r4
}
 800bea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800bea8:	4710      	bx	r2
}
 800beaa:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800beac:	4b04      	ldr	r3, [pc, #16]	@ (800bec0 <netif_set_link_down+0x3c>)
 800beae:	f240 4206 	movw	r2, #1030	@ 0x406
 800beb2:	4904      	ldr	r1, [pc, #16]	@ (800bec4 <netif_set_link_down+0x40>)
 800beb4:	4804      	ldr	r0, [pc, #16]	@ (800bec8 <netif_set_link_down+0x44>)
}
 800beb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800beba:	f008 bd2b 	b.w	8014914 <iprintf>
 800bebe:	bf00      	nop
 800bec0:	08016ab0 	.word	0x08016ab0
 800bec4:	08016bec 	.word	0x08016bec
 800bec8:	08015bd0 	.word	0x08015bd0

0800becc <netif_set_link_callback>:
{
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4604      	mov	r4, r0
 800bed0:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800bed2:	f7fa fa11 	bl	80062f8 <sys_check_core_locking>
  if (netif) {
 800bed6:	b104      	cbz	r4, 800beda <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800bed8:	61e5      	str	r5, [r4, #28]
}
 800beda:	bd38      	pop	{r3, r4, r5, pc}

0800bedc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bedc:	b510      	push	{r4, lr}
 800bede:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800bee0:	f7fa fa0a 	bl	80062f8 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800bee4:	b164      	cbz	r4, 800bf00 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800bee6:	4b07      	ldr	r3, [pc, #28]	@ (800bf04 <netif_get_by_index+0x28>)
 800bee8:	6818      	ldr	r0, [r3, #0]
 800beea:	b910      	cbnz	r0, 800bef2 <netif_get_by_index+0x16>
 800beec:	e007      	b.n	800befe <netif_get_by_index+0x22>
 800beee:	6800      	ldr	r0, [r0, #0]
 800bef0:	b128      	cbz	r0, 800befe <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 800bef2:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800bef6:	3301      	adds	r3, #1
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	42a3      	cmp	r3, r4
 800befc:	d1f7      	bne.n	800beee <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 800befe:	bd10      	pop	{r4, pc}
  return NULL;
 800bf00:	4620      	mov	r0, r4
}
 800bf02:	bd10      	pop	{r4, pc}
 800bf04:	24010700 	.word	0x24010700

0800bf08 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	4604      	mov	r4, r0
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();
 800bf0c:	f7fa f9f4 	bl	80062f8 <sys_check_core_locking>

  if (name == NULL) {
 800bf10:	b1c4      	cbz	r4, 800bf44 <netif_find+0x3c>
    return NULL;
  }

  num = (u8_t)atoi(&name[2]);
 800bf12:	1ca0      	adds	r0, r4, #2
 800bf14:	f008 fa92 	bl	801443c <atoi>

  NETIF_FOREACH(netif) {
 800bf18:	4b0b      	ldr	r3, [pc, #44]	@ (800bf48 <netif_find+0x40>)
  num = (u8_t)atoi(&name[2]);
 800bf1a:	b2c2      	uxtb	r2, r0
  NETIF_FOREACH(netif) {
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	b910      	cbnz	r0, 800bf26 <netif_find+0x1e>
 800bf20:	e010      	b.n	800bf44 <netif_find+0x3c>
 800bf22:	6800      	ldr	r0, [r0, #0]
 800bf24:	b170      	cbz	r0, 800bf44 <netif_find+0x3c>
    if (num == netif->num &&
 800bf26:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d1f9      	bne.n	800bf22 <netif_find+0x1a>
 800bf2e:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 800bf32:	7821      	ldrb	r1, [r4, #0]
 800bf34:	4299      	cmp	r1, r3
 800bf36:	d1f4      	bne.n	800bf22 <netif_find+0x1a>
        name[0] == netif->name[0] &&
 800bf38:	f890 3033 	ldrb.w	r3, [r0, #51]	@ 0x33
 800bf3c:	7861      	ldrb	r1, [r4, #1]
 800bf3e:	4299      	cmp	r1, r3
 800bf40:	d1ef      	bne.n	800bf22 <netif_find+0x1a>
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
}
 800bf42:	bd10      	pop	{r4, pc}
    return NULL;
 800bf44:	2000      	movs	r0, #0
}
 800bf46:	bd10      	pop	{r4, pc}
 800bf48:	24010700 	.word	0x24010700

0800bf4c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bf4c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bf4e:	f008 fa63 	bl	8014418 <sys_arch_protect>
 800bf52:	4b09      	ldr	r3, [pc, #36]	@ (800bf78 <pbuf_free_ooseq_callback+0x2c>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
 800bf58:	f008 fa6a 	bl	8014430 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bf5c:	4b07      	ldr	r3, [pc, #28]	@ (800bf7c <pbuf_free_ooseq_callback+0x30>)
 800bf5e:	6818      	ldr	r0, [r3, #0]
 800bf60:	b910      	cbnz	r0, 800bf68 <pbuf_free_ooseq_callback+0x1c>
 800bf62:	e008      	b.n	800bf76 <pbuf_free_ooseq_callback+0x2a>
 800bf64:	68c0      	ldr	r0, [r0, #12]
 800bf66:	b130      	cbz	r0, 800bf76 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 800bf68:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d0fa      	beq.n	800bf64 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800bf6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 800bf72:	f001 be4b 	b.w	800dc0c <tcp_free_ooseq>
}
 800bf76:	bd08      	pop	{r3, pc}
 800bf78:	24010704 	.word	0x24010704
 800bf7c:	2401070c 	.word	0x2401070c

0800bf80 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bf80:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bf82:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800bf86:	2500      	movs	r5, #0
{
 800bf88:	4614      	mov	r4, r2
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	f361 050f 	bfi	r5, r1, #0, #16
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	f361 451f 	bfi	r5, r1, #16, #16
 800bf96:	d10c      	bne.n	800bfb2 <pbuf_alloc_reference+0x32>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bf98:	200b      	movs	r0, #11
 800bf9a:	f7ff fd51 	bl	800ba40 <memp_malloc>
  if (p == NULL) {
 800bf9e:	b138      	cbz	r0, 800bfb0 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 800bfa0:	2300      	movs	r3, #0
  p->ref = 1;
 800bfa2:	2201      	movs	r2, #1
  p->payload = payload;
 800bfa4:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800bfa6:	6085      	str	r5, [r0, #8]
  p->next = NULL;
 800bfa8:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800bfaa:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800bfac:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800bfae:	81c2      	strh	r2, [r0, #14]
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
  return p;
}
 800bfb0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bfb2:	4b04      	ldr	r3, [pc, #16]	@ (800bfc4 <pbuf_alloc_reference+0x44>)
 800bfb4:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bfb8:	4903      	ldr	r1, [pc, #12]	@ (800bfc8 <pbuf_alloc_reference+0x48>)
 800bfba:	4804      	ldr	r0, [pc, #16]	@ (800bfcc <pbuf_alloc_reference+0x4c>)
 800bfbc:	f008 fcaa 	bl	8014914 <iprintf>
 800bfc0:	e7ea      	b.n	800bf98 <pbuf_alloc_reference+0x18>
 800bfc2:	bf00      	nop
 800bfc4:	08016c10 	.word	0x08016c10
 800bfc8:	08016c40 	.word	0x08016c40
 800bfcc:	08015bd0 	.word	0x08015bd0

0800bfd0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bfd0:	b430      	push	{r4, r5}
  u16_t offset = (u16_t)l;
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bfd2:	3003      	adds	r0, #3
 800bfd4:	2400      	movs	r4, #0
{
 800bfd6:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800bfda:	f361 040f 	bfi	r4, r1, #0, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bfde:	f020 0003 	bic.w	r0, r0, #3
{
 800bfe2:	9d02      	ldr	r5, [sp, #8]
 800bfe4:	f361 441f 	bfi	r4, r1, #16, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bfe8:	4401      	add	r1, r0
 800bfea:	4561      	cmp	r1, ip
 800bfec:	d80d      	bhi.n	800c00a <pbuf_alloced_custom+0x3a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  if (payload_mem != NULL) {
 800bfee:	b105      	cbz	r5, 800bff2 <pbuf_alloced_custom+0x22>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bff0:	4405      	add	r5, r0
  } else {
    payload = NULL;
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bff2:	4618      	mov	r0, r3
  p->next = NULL;
 800bff4:	2300      	movs	r3, #0
  p->flags = flags;
 800bff6:	2102      	movs	r1, #2
  p->next = NULL;
 800bff8:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800bffa:	2301      	movs	r3, #1
  p->payload = payload;
 800bffc:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 800bffe:	6084      	str	r4, [r0, #8]
  p->type_internal = (u8_t)type;
 800c000:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800c002:	7341      	strb	r1, [r0, #13]
  p->ref = 1;
 800c004:	81c3      	strh	r3, [r0, #14]
  return &p->pbuf;
}
 800c006:	bc30      	pop	{r4, r5}
 800c008:	4770      	bx	lr
    return NULL;
 800c00a:	2000      	movs	r0, #0
}
 800c00c:	bc30      	pop	{r4, r5}
 800c00e:	4770      	bx	lr

0800c010 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c010:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c012:	b1f0      	cbz	r0, 800c052 <pbuf_add_header+0x42>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c014:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c018:	d20b      	bcs.n	800c032 <pbuf_add_header+0x22>
  if (header_size_increment == 0) {
 800c01a:	b1c1      	cbz	r1, 800c04e <pbuf_add_header+0x3e>
  increment_magnitude = (u16_t)header_size_increment;
 800c01c:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c01e:	8903      	ldrh	r3, [r0, #8]
 800c020:	4413      	add	r3, r2
 800c022:	b29b      	uxth	r3, r3
 800c024:	429a      	cmp	r2, r3
 800c026:	d804      	bhi.n	800c032 <pbuf_add_header+0x22>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c028:	f990 c00c 	ldrsb.w	ip, [r0, #12]
 800c02c:	f1bc 0f00 	cmp.w	ip, #0
 800c030:	db01      	blt.n	800c036 <pbuf_add_header+0x26>
    return 1;
 800c032:	2001      	movs	r0, #1
  return pbuf_add_header_impl(p, header_size_increment, 0);
}
 800c034:	bd10      	pop	{r4, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800c036:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c038:	f100 0c10 	add.w	ip, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 800c03c:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c03e:	4561      	cmp	r1, ip
 800c040:	d3f7      	bcc.n	800c032 <pbuf_add_header+0x22>
  p->len = (u16_t)(p->len + increment_magnitude);
 800c042:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  p->payload = payload;
 800c046:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c048:	4462      	add	r2, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c04a:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c04c:	8142      	strh	r2, [r0, #10]
    return 0;
 800c04e:	2000      	movs	r0, #0
}
 800c050:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c052:	4b04      	ldr	r3, [pc, #16]	@ (800c064 <pbuf_add_header+0x54>)
 800c054:	f240 12df 	movw	r2, #479	@ 0x1df
 800c058:	4903      	ldr	r1, [pc, #12]	@ (800c068 <pbuf_add_header+0x58>)
 800c05a:	4804      	ldr	r0, [pc, #16]	@ (800c06c <pbuf_add_header+0x5c>)
 800c05c:	f008 fc5a 	bl	8014914 <iprintf>
    return 1;
 800c060:	2001      	movs	r0, #1
 800c062:	e7e7      	b.n	800c034 <pbuf_add_header+0x24>
 800c064:	08016c10 	.word	0x08016c10
 800c068:	08018490 	.word	0x08018490
 800c06c:	08015bd0 	.word	0x08015bd0

0800c070 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c070:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c072:	b188      	cbz	r0, 800c098 <pbuf_remove_header+0x28>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c074:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c078:	d215      	bcs.n	800c0a6 <pbuf_remove_header+0x36>
    return 1;
  }
  if (header_size_decrement == 0) {
 800c07a:	b159      	cbz	r1, 800c094 <pbuf_remove_header+0x24>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c07c:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c07e:	8943      	ldrh	r3, [r0, #10]
 800c080:	4293      	cmp	r3, r2
 800c082:	d312      	bcc.n	800c0aa <pbuf_remove_header+0x3a>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c084:	6844      	ldr	r4, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c086:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c088:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c08a:	8901      	ldrh	r1, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800c08c:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c08e:	1a8b      	subs	r3, r1, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c090:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c092:	8103      	strh	r3, [r0, #8]
    return 0;
 800c094:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 800c096:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c098:	4b08      	ldr	r3, [pc, #32]	@ (800c0bc <pbuf_remove_header+0x4c>)
 800c09a:	f240 224b 	movw	r2, #587	@ 0x24b
 800c09e:	4908      	ldr	r1, [pc, #32]	@ (800c0c0 <pbuf_remove_header+0x50>)
 800c0a0:	4808      	ldr	r0, [pc, #32]	@ (800c0c4 <pbuf_remove_header+0x54>)
 800c0a2:	f008 fc37 	bl	8014914 <iprintf>
    return 1;
 800c0a6:	2001      	movs	r0, #1
}
 800c0a8:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c0aa:	4b04      	ldr	r3, [pc, #16]	@ (800c0bc <pbuf_remove_header+0x4c>)
 800c0ac:	f240 2255 	movw	r2, #597	@ 0x255
 800c0b0:	4905      	ldr	r1, [pc, #20]	@ (800c0c8 <pbuf_remove_header+0x58>)
 800c0b2:	4804      	ldr	r0, [pc, #16]	@ (800c0c4 <pbuf_remove_header+0x54>)
 800c0b4:	f008 fc2e 	bl	8014914 <iprintf>
 800c0b8:	e7f5      	b.n	800c0a6 <pbuf_remove_header+0x36>
 800c0ba:	bf00      	nop
 800c0bc:	08016c10 	.word	0x08016c10
 800c0c0:	08018490 	.word	0x08018490
 800c0c4:	08015bd0 	.word	0x08015bd0
 800c0c8:	08016c54 	.word	0x08016c54

0800c0cc <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800c0cc:	2900      	cmp	r1, #0
 800c0ce:	db19      	blt.n	800c104 <pbuf_header_force+0x38>
  LWIP_ASSERT("p != NULL", p != NULL);
 800c0d0:	4603      	mov	r3, r0
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c0d2:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c0d4:	b1c8      	cbz	r0, 800c10a <pbuf_header_force+0x3e>
  if (header_size_increment == 0) {
 800c0d6:	b199      	cbz	r1, 800c100 <pbuf_header_force+0x34>
  increment_magnitude = (u16_t)header_size_increment;
 800c0d8:	b288      	uxth	r0, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c0da:	891a      	ldrh	r2, [r3, #8]
 800c0dc:	4402      	add	r2, r0
 800c0de:	b292      	uxth	r2, r2
 800c0e0:	4290      	cmp	r0, r2
 800c0e2:	d819      	bhi.n	800c118 <pbuf_header_force+0x4c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0e4:	f993 c00c 	ldrsb.w	ip, [r3, #12]
    payload = (u8_t *)p->payload - header_size_increment;
 800c0e8:	685c      	ldr	r4, [r3, #4]
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0ea:	f1bc 0f00 	cmp.w	ip, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800c0ee:	eba4 0101 	sub.w	r1, r4, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0f2:	db13      	blt.n	800c11c <pbuf_header_force+0x50>
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0f4:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
  p->payload = payload;
 800c0f8:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0fa:	4460      	add	r0, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c0fc:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0fe:	8158      	strh	r0, [r3, #10]
    return 0;
 800c100:	2000      	movs	r0, #0
  return pbuf_header_impl(p, header_size_increment, 1);
}
 800c102:	bd10      	pop	{r4, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c104:	4249      	negs	r1, r1
 800c106:	f7ff bfb3 	b.w	800c070 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800c10a:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <pbuf_header_force+0x5c>)
 800c10c:	f240 12df 	movw	r2, #479	@ 0x1df
 800c110:	4906      	ldr	r1, [pc, #24]	@ (800c12c <pbuf_header_force+0x60>)
 800c112:	4807      	ldr	r0, [pc, #28]	@ (800c130 <pbuf_header_force+0x64>)
 800c114:	f008 fbfe 	bl	8014914 <iprintf>
    return 1;
 800c118:	2001      	movs	r0, #1
}
 800c11a:	bd10      	pop	{r4, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c11c:	f103 0c10 	add.w	ip, r3, #16
 800c120:	4561      	cmp	r1, ip
 800c122:	d2e7      	bcs.n	800c0f4 <pbuf_header_force+0x28>
 800c124:	e7f8      	b.n	800c118 <pbuf_header_force+0x4c>
 800c126:	bf00      	nop
 800c128:	08016c10 	.word	0x08016c10
 800c12c:	08018490 	.word	0x08018490
 800c130:	08015bd0 	.word	0x08015bd0

0800c134 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c138:	4605      	mov	r5, r0
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d055      	beq.n	800c1ea <pbuf_free+0xb6>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c13e:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c140:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c204 <pbuf_free+0xd0>
 800c144:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800c210 <pbuf_free+0xdc>
 800c148:	4f2c      	ldr	r7, [pc, #176]	@ (800c1fc <pbuf_free+0xc8>)
 800c14a:	e008      	b.n	800c15e <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c14c:	692b      	ldr	r3, [r5, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d03d      	beq.n	800c1ce <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800c152:	4628      	mov	r0, r5
 800c154:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 800c156:	3601      	adds	r6, #1
 800c158:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800c15a:	b1fc      	cbz	r4, 800c19c <pbuf_free+0x68>
      /* proceed to next pbuf */
      p = q;
 800c15c:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800c15e:	f008 f95b 	bl	8014418 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c162:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800c164:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c166:	b1e3      	cbz	r3, 800c1a2 <pbuf_free+0x6e>
    ref = --(p->ref);
 800c168:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800c16a:	4620      	mov	r0, r4
    ref = --(p->ref);
 800c16c:	b2dc      	uxtb	r4, r3
 800c16e:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800c170:	f008 f95e 	bl	8014430 <sys_arch_unprotect>
    if (ref == 0) {
 800c174:	b994      	cbnz	r4, 800c19c <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c176:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800c178:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c17a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800c17c:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c17e:	d4e5      	bmi.n	800c14c <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800c180:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c184:	2b02      	cmp	r3, #2
 800c186:	d01d      	beq.n	800c1c4 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d029      	beq.n	800c1e0 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c18c:	b993      	cbnz	r3, 800c1b4 <pbuf_free+0x80>
      count++;
 800c18e:	3601      	adds	r6, #1
          mem_free(p);
 800c190:	4628      	mov	r0, r5
 800c192:	f7ff f977 	bl	800b484 <mem_free>
      count++;
 800c196:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800c198:	2c00      	cmp	r4, #0
 800c19a:	d1df      	bne.n	800c15c <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800c19c:	4630      	mov	r0, r6
 800c19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c1a2:	4643      	mov	r3, r8
 800c1a4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	f008 fbb2 	bl	8014914 <iprintf>
    ref = --(p->ref);
 800c1b0:	7bab      	ldrb	r3, [r5, #14]
 800c1b2:	e7d9      	b.n	800c168 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800c1b4:	4643      	mov	r3, r8
 800c1b6:	f240 320f 	movw	r2, #783	@ 0x30f
 800c1ba:	4911      	ldr	r1, [pc, #68]	@ (800c200 <pbuf_free+0xcc>)
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f008 fba9 	bl	8014914 <iprintf>
 800c1c2:	e7c8      	b.n	800c156 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	200c      	movs	r0, #12
 800c1c8:	f7ff fc80 	bl	800bacc <memp_free>
 800c1cc:	e7c3      	b.n	800c156 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c204 <pbuf_free+0xd0>)
 800c1d0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c1d4:	490c      	ldr	r1, [pc, #48]	@ (800c208 <pbuf_free+0xd4>)
 800c1d6:	4809      	ldr	r0, [pc, #36]	@ (800c1fc <pbuf_free+0xc8>)
 800c1d8:	f008 fb9c 	bl	8014914 <iprintf>
        pc->custom_free_function(p);
 800c1dc:	692b      	ldr	r3, [r5, #16]
 800c1de:	e7b8      	b.n	800c152 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	200b      	movs	r0, #11
 800c1e4:	f7ff fc72 	bl	800bacc <memp_free>
 800c1e8:	e7b5      	b.n	800c156 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c1ea:	4b06      	ldr	r3, [pc, #24]	@ (800c204 <pbuf_free+0xd0>)
 800c1ec:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c1f0:	4906      	ldr	r1, [pc, #24]	@ (800c20c <pbuf_free+0xd8>)
    return 0;
 800c1f2:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800c1f4:	4801      	ldr	r0, [pc, #4]	@ (800c1fc <pbuf_free+0xc8>)
 800c1f6:	f008 fb8d 	bl	8014914 <iprintf>
    return 0;
 800c1fa:	e7cf      	b.n	800c19c <pbuf_free+0x68>
 800c1fc:	08015bd0 	.word	0x08015bd0
 800c200:	08016cb0 	.word	0x08016cb0
 800c204:	08016c10 	.word	0x08016c10
 800c208:	08016c8c 	.word	0x08016c8c
 800c20c:	08018490 	.word	0x08018490
 800c210:	08016c74 	.word	0x08016c74

0800c214 <pbuf_alloc>:
  switch (type) {
 800c214:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 800c218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c21c:	4688      	mov	r8, r1
 800c21e:	b083      	sub	sp, #12
  switch (type) {
 800c220:	d041      	beq.n	800c2a6 <pbuf_alloc+0x92>
 800c222:	d80f      	bhi.n	800c244 <pbuf_alloc+0x30>
 800c224:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d036      	beq.n	800c29a <pbuf_alloc+0x86>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c22c:	4b46      	ldr	r3, [pc, #280]	@ (800c348 <pbuf_alloc+0x134>)
 800c22e:	f240 1227 	movw	r2, #295	@ 0x127
 800c232:	4946      	ldr	r1, [pc, #280]	@ (800c34c <pbuf_alloc+0x138>)
 800c234:	4846      	ldr	r0, [pc, #280]	@ (800c350 <pbuf_alloc+0x13c>)
 800c236:	f008 fb6d 	bl	8014914 <iprintf>
          return NULL;
 800c23a:	2400      	movs	r4, #0
}
 800c23c:	4620      	mov	r0, r4
 800c23e:	b003      	add	sp, #12
 800c240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800c244:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800c248:	d1f0      	bne.n	800c22c <pbuf_alloc+0x18>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c24a:	1cc3      	adds	r3, r0, #3
 800c24c:	1cca      	adds	r2, r1, #3
 800c24e:	4605      	mov	r5, r0
 800c250:	f022 0203 	bic.w	r2, r2, #3
 800c254:	f023 0303 	bic.w	r3, r3, #3
 800c258:	4413      	add	r3, r2
 800c25a:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c25c:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c260:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c262:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c264:	d3e9      	bcc.n	800c23a <pbuf_alloc+0x26>
 800c266:	4282      	cmp	r2, r0
 800c268:	d8e7      	bhi.n	800c23a <pbuf_alloc+0x26>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c26a:	f7ff fab3 	bl	800b7d4 <mem_malloc>
      if (p == NULL) {
 800c26e:	4604      	mov	r4, r0
 800c270:	2800      	cmp	r0, #0
 800c272:	d0e3      	beq.n	800c23c <pbuf_alloc+0x28>
  p->next = NULL;
 800c274:	2100      	movs	r1, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c276:	1943      	adds	r3, r0, r5
  p->type_internal = (u8_t)type;
 800c278:	4836      	ldr	r0, [pc, #216]	@ (800c354 <pbuf_alloc+0x140>)
  p->tot_len = tot_len;
 800c27a:	460a      	mov	r2, r1
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c27c:	3313      	adds	r3, #19
  p->type_internal = (u8_t)type;
 800c27e:	60e0      	str	r0, [r4, #12]
}
 800c280:	4620      	mov	r0, r4
  p->tot_len = tot_len;
 800c282:	f368 020f 	bfi	r2, r8, #0, #16
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c286:	f023 0303 	bic.w	r3, r3, #3
  p->tot_len = tot_len;
 800c28a:	f368 421f 	bfi	r2, r8, #16, #16
  p->payload = payload;
 800c28e:	e9c4 1300 	strd	r1, r3, [r4]
  p->tot_len = tot_len;
 800c292:	60a2      	str	r2, [r4, #8]
}
 800c294:	b003      	add	sp, #12
 800c296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800c29a:	2000      	movs	r0, #0
}
 800c29c:	b003      	add	sp, #12
 800c29e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800c2a2:	f7ff be6d 	b.w	800bf80 <pbuf_alloc_reference>
  switch (type) {
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	4681      	mov	r9, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2aa:	f240 56ec 	movw	r6, #1516	@ 0x5ec
  p->type_internal = (u8_t)type;
 800c2ae:	4d2a      	ldr	r5, [pc, #168]	@ (800c358 <pbuf_alloc+0x144>)
  switch (type) {
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	e009      	b.n	800c2c8 <pbuf_alloc+0xb4>
          last->next = q;
 800c2b4:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800c2b6:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 800c2ba:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800c2be:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 800c2c2:	f1b8 0f00 	cmp.w	r8, #0
 800c2c6:	d0b9      	beq.n	800c23c <pbuf_alloc+0x28>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c2c8:	200c      	movs	r0, #12
 800c2ca:	460f      	mov	r7, r1
 800c2cc:	f7ff fbb8 	bl	800ba40 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2d0:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 800c2d4:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 800c2d8:	4601      	mov	r1, r0
 800c2da:	b1b0      	cbz	r0, 800c30a <pbuf_alloc+0xf6>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2dc:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c2e0:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800c2e4:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2e8:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c2ea:	3213      	adds	r2, #19
  p->next = NULL;
 800c2ec:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2f0:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c2f2:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800c2f6:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2f8:	4543      	cmp	r3, r8
  p->payload = payload;
 800c2fa:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2fc:	bf28      	it	cs
 800c2fe:	4643      	movcs	r3, r8
  p->len = len;
 800c300:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800c302:	2c00      	cmp	r4, #0
 800c304:	d1d6      	bne.n	800c2b4 <pbuf_alloc+0xa0>
 800c306:	4604      	mov	r4, r0
 800c308:	e7d5      	b.n	800c2b6 <pbuf_alloc+0xa2>
  queued = pbuf_free_ooseq_pending;
 800c30a:	4e14      	ldr	r6, [pc, #80]	@ (800c35c <pbuf_alloc+0x148>)
 800c30c:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800c30e:	f008 f883 	bl	8014418 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800c312:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800c314:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800c316:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800c318:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c31a:	f008 f889 	bl	8014430 <sys_arch_unprotect>
  if (!queued) {
 800c31e:	9901      	ldr	r1, [sp, #4]
 800c320:	b12d      	cbz	r5, 800c32e <pbuf_alloc+0x11a>
          if (p) {
 800c322:	2c00      	cmp	r4, #0
 800c324:	d089      	beq.n	800c23a <pbuf_alloc+0x26>
            pbuf_free(p);
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff ff04 	bl	800c134 <pbuf_free>
 800c32c:	e785      	b.n	800c23a <pbuf_alloc+0x26>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c32e:	480c      	ldr	r0, [pc, #48]	@ (800c360 <pbuf_alloc+0x14c>)
 800c330:	f7fe ff66 	bl	800b200 <tcpip_try_callback>
 800c334:	2800      	cmp	r0, #0
 800c336:	d0f4      	beq.n	800c322 <pbuf_alloc+0x10e>
 800c338:	f008 f86e 	bl	8014418 <sys_arch_protect>
 800c33c:	9901      	ldr	r1, [sp, #4]
 800c33e:	7031      	strb	r1, [r6, #0]
 800c340:	f008 f876 	bl	8014430 <sys_arch_unprotect>
 800c344:	e7ed      	b.n	800c322 <pbuf_alloc+0x10e>
 800c346:	bf00      	nop
 800c348:	08016c10 	.word	0x08016c10
 800c34c:	08016cc4 	.word	0x08016cc4
 800c350:	08015bd0 	.word	0x08015bd0
 800c354:	00010080 	.word	0x00010080
 800c358:	00010082 	.word	0x00010082
 800c35c:	24010704 	.word	0x24010704
 800c360:	0800bf4d 	.word	0x0800bf4d

0800c364 <pbuf_realloc>:
{
 800c364:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c366:	4604      	mov	r4, r0
{
 800c368:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d03b      	beq.n	800c3e6 <pbuf_realloc+0x82>
  if (new_len >= p->tot_len) {
 800c36e:	8922      	ldrh	r2, [r4, #8]
 800c370:	42aa      	cmp	r2, r5
 800c372:	d91f      	bls.n	800c3b4 <pbuf_realloc+0x50>
  while (rem_len > q->len) {
 800c374:	8963      	ldrh	r3, [r4, #10]
 800c376:	429d      	cmp	r5, r3
 800c378:	d90d      	bls.n	800c396 <pbuf_realloc+0x32>
 800c37a:	1aa9      	subs	r1, r5, r2
 800c37c:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c37e:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800c380:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c382:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800c384:	b29d      	uxth	r5, r3
    q = q->next;
 800c386:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c388:	2c00      	cmp	r4, #0
 800c38a:	d034      	beq.n	800c3f6 <pbuf_realloc+0x92>
  while (rem_len > q->len) {
 800c38c:	8963      	ldrh	r3, [r4, #10]
 800c38e:	42ab      	cmp	r3, r5
 800c390:	d201      	bcs.n	800c396 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c392:	8922      	ldrh	r2, [r4, #8]
 800c394:	e7f3      	b.n	800c37e <pbuf_realloc+0x1a>
 800c396:	2600      	movs	r6, #0
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c398:	7b22      	ldrb	r2, [r4, #12]
 800c39a:	f365 060f 	bfi	r6, r5, #0, #16
 800c39e:	0712      	lsls	r2, r2, #28
 800c3a0:	f365 461f 	bfi	r6, r5, #16, #16
 800c3a4:	d007      	beq.n	800c3b6 <pbuf_realloc+0x52>
  if (q->next != NULL) {
 800c3a6:	6820      	ldr	r0, [r4, #0]
  q->tot_len = q->len;
 800c3a8:	60a6      	str	r6, [r4, #8]
  if (q->next != NULL) {
 800c3aa:	b108      	cbz	r0, 800c3b0 <pbuf_realloc+0x4c>
    pbuf_free(q->next);
 800c3ac:	f7ff fec2 	bl	800c134 <pbuf_free>
  q->next = NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	6023      	str	r3, [r4, #0]
}
 800c3b4:	bd70      	pop	{r4, r5, r6, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c3b6:	42ab      	cmp	r3, r5
 800c3b8:	d0f5      	beq.n	800c3a6 <pbuf_realloc+0x42>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c3ba:	7b63      	ldrb	r3, [r4, #13]
 800c3bc:	079b      	lsls	r3, r3, #30
 800c3be:	d4f2      	bmi.n	800c3a6 <pbuf_realloc+0x42>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c3c0:	6863      	ldr	r3, [r4, #4]
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	1b1b      	subs	r3, r3, r4
 800c3c6:	18e9      	adds	r1, r5, r3
 800c3c8:	b289      	uxth	r1, r1
 800c3ca:	f7ff f945 	bl	800b658 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1e8      	bne.n	800c3a6 <pbuf_realloc+0x42>
 800c3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c408 <pbuf_realloc+0xa4>)
 800c3d6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c3da:	490c      	ldr	r1, [pc, #48]	@ (800c40c <pbuf_realloc+0xa8>)
 800c3dc:	480c      	ldr	r0, [pc, #48]	@ (800c410 <pbuf_realloc+0xac>)
 800c3de:	f008 fa99 	bl	8014914 <iprintf>
  q->len = rem_len;
 800c3e2:	8164      	strh	r4, [r4, #10]
 800c3e4:	deff      	udf	#255	@ 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c3e6:	4b08      	ldr	r3, [pc, #32]	@ (800c408 <pbuf_realloc+0xa4>)
 800c3e8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c3ec:	4909      	ldr	r1, [pc, #36]	@ (800c414 <pbuf_realloc+0xb0>)
 800c3ee:	4808      	ldr	r0, [pc, #32]	@ (800c410 <pbuf_realloc+0xac>)
 800c3f0:	f008 fa90 	bl	8014914 <iprintf>
 800c3f4:	e7bb      	b.n	800c36e <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c3f6:	4b04      	ldr	r3, [pc, #16]	@ (800c408 <pbuf_realloc+0xa4>)
 800c3f8:	f240 12af 	movw	r2, #431	@ 0x1af
 800c3fc:	4906      	ldr	r1, [pc, #24]	@ (800c418 <pbuf_realloc+0xb4>)
 800c3fe:	4804      	ldr	r0, [pc, #16]	@ (800c410 <pbuf_realloc+0xac>)
 800c400:	f008 fa88 	bl	8014914 <iprintf>
  while (rem_len > q->len) {
 800c404:	8963      	ldrh	r3, [r4, #10]
 800c406:	deff      	udf	#255	@ 0xff
 800c408:	08016c10 	.word	0x08016c10
 800c40c:	08016d10 	.word	0x08016d10
 800c410:	08015bd0 	.word	0x08015bd0
 800c414:	08016ce0 	.word	0x08016ce0
 800c418:	08016cf8 	.word	0x08016cf8

0800c41c <pbuf_free_header>:
{
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	4604      	mov	r4, r0
  while (free_left && p) {
 800c420:	b1b9      	cbz	r1, 800c452 <pbuf_free_header+0x36>
 800c422:	b1b0      	cbz	r0, 800c452 <pbuf_free_header+0x36>
 800c424:	460d      	mov	r5, r1
      f->next = 0;
 800c426:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 800c428:	8963      	ldrh	r3, [r4, #10]
      pbuf_free(f);
 800c42a:	4620      	mov	r0, r4
    if (free_left >= p->len) {
 800c42c:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 800c42e:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 800c432:	d80b      	bhi.n	800c44c <pbuf_free_header+0x30>
      p = p->next;
 800c434:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 800c436:	b295      	uxth	r5, r2
      f->next = 0;
 800c438:	6027      	str	r7, [r4, #0]
      p = p->next;
 800c43a:	4634      	mov	r4, r6
      pbuf_free(f);
 800c43c:	f7ff fe7a 	bl	800c134 <pbuf_free>
  while (free_left && p) {
 800c440:	b10d      	cbz	r5, 800c446 <pbuf_free_header+0x2a>
 800c442:	2e00      	cmp	r6, #0
 800c444:	d1f0      	bne.n	800c428 <pbuf_free_header+0xc>
      p = p->next;
 800c446:	4634      	mov	r4, r6
}
 800c448:	4620      	mov	r0, r4
 800c44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pbuf_remove_header(p, free_left);
 800c44c:	4629      	mov	r1, r5
 800c44e:	f7ff fe0f 	bl	800c070 <pbuf_remove_header>
}
 800c452:	4620      	mov	r0, r4
 800c454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c456:	bf00      	nop

0800c458 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800c458:	4603      	mov	r3, r0
 800c45a:	b130      	cbz	r0, 800c46a <pbuf_clen+0x12>
  len = 0;
 800c45c:	2000      	movs	r0, #0
    ++len;
 800c45e:	3001      	adds	r0, #1
    p = p->next;
 800c460:	681b      	ldr	r3, [r3, #0]
    ++len;
 800c462:	b280      	uxth	r0, r0
  while (p != NULL) {
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1fa      	bne.n	800c45e <pbuf_clen+0x6>
 800c468:	4770      	bx	lr
  }
  return len;
}
 800c46a:	4770      	bx	lr

0800c46c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800c46c:	b158      	cbz	r0, 800c486 <pbuf_ref+0x1a>
{
 800c46e:	b510      	push	{r4, lr}
 800c470:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c472:	f007 ffd1 	bl	8014418 <sys_arch_protect>
 800c476:	7ba3      	ldrb	r3, [r4, #14]
 800c478:	3301      	adds	r3, #1
 800c47a:	73a3      	strb	r3, [r4, #14]
 800c47c:	f007 ffd8 	bl	8014430 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c480:	7ba3      	ldrb	r3, [r4, #14]
 800c482:	b10b      	cbz	r3, 800c488 <pbuf_ref+0x1c>
  }
}
 800c484:	bd10      	pop	{r4, pc}
 800c486:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c488:	4b04      	ldr	r3, [pc, #16]	@ (800c49c <pbuf_ref+0x30>)
 800c48a:	f240 3242 	movw	r2, #834	@ 0x342
 800c48e:	4904      	ldr	r1, [pc, #16]	@ (800c4a0 <pbuf_ref+0x34>)
 800c490:	4804      	ldr	r0, [pc, #16]	@ (800c4a4 <pbuf_ref+0x38>)
}
 800c492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c496:	f008 ba3d 	b.w	8014914 <iprintf>
 800c49a:	bf00      	nop
 800c49c:	08016c10 	.word	0x08016c10
 800c4a0:	08016d2c 	.word	0x08016d2c
 800c4a4:	08015bd0 	.word	0x08015bd0

0800c4a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c4a8:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d02d      	beq.n	800c50a <pbuf_cat+0x62>
 800c4ae:	460d      	mov	r5, r1
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	d02a      	beq.n	800c50a <pbuf_cat+0x62>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c4b4:	6803      	ldr	r3, [r0, #0]
 800c4b6:	4604      	mov	r4, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c4b8:	8902      	ldrh	r2, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c4ba:	b18b      	cbz	r3, 800c4e0 <pbuf_cat+0x38>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c4bc:	8922      	ldrh	r2, [r4, #8]
 800c4be:	8928      	ldrh	r0, [r5, #8]
 800c4c0:	4402      	add	r2, r0
 800c4c2:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c4c4:	461c      	mov	r4, r3
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1f7      	bne.n	800c4bc <pbuf_cat+0x14>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c4cc:	8922      	ldrh	r2, [r4, #8]
 800c4ce:	8963      	ldrh	r3, [r4, #10]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d108      	bne.n	800c4e6 <pbuf_cat+0x3e>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c4d4:	8922      	ldrh	r2, [r4, #8]
 800c4d6:	892b      	ldrh	r3, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c4d8:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c4da:	441a      	add	r2, r3
 800c4dc:	8122      	strh	r2, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c4e0:	8943      	ldrh	r3, [r0, #10]
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d0f7      	beq.n	800c4d6 <pbuf_cat+0x2e>
 800c4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c51c <pbuf_cat+0x74>)
 800c4e8:	f240 3262 	movw	r2, #866	@ 0x362
 800c4ec:	490c      	ldr	r1, [pc, #48]	@ (800c520 <pbuf_cat+0x78>)
 800c4ee:	480d      	ldr	r0, [pc, #52]	@ (800c524 <pbuf_cat+0x7c>)
 800c4f0:	f008 fa10 	bl	8014914 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0ec      	beq.n	800c4d4 <pbuf_cat+0x2c>
 800c4fa:	4b08      	ldr	r3, [pc, #32]	@ (800c51c <pbuf_cat+0x74>)
 800c4fc:	f240 3263 	movw	r2, #867	@ 0x363
 800c500:	4909      	ldr	r1, [pc, #36]	@ (800c528 <pbuf_cat+0x80>)
 800c502:	4808      	ldr	r0, [pc, #32]	@ (800c524 <pbuf_cat+0x7c>)
 800c504:	f008 fa06 	bl	8014914 <iprintf>
 800c508:	e7e4      	b.n	800c4d4 <pbuf_cat+0x2c>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c50a:	4b04      	ldr	r3, [pc, #16]	@ (800c51c <pbuf_cat+0x74>)
 800c50c:	f240 3259 	movw	r2, #857	@ 0x359
 800c510:	4906      	ldr	r1, [pc, #24]	@ (800c52c <pbuf_cat+0x84>)
 800c512:	4804      	ldr	r0, [pc, #16]	@ (800c524 <pbuf_cat+0x7c>)
}
 800c514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c518:	f008 b9fc 	b.w	8014914 <iprintf>
 800c51c:	08016c10 	.word	0x08016c10
 800c520:	08016d78 	.word	0x08016d78
 800c524:	08015bd0 	.word	0x08015bd0
 800c528:	08016da8 	.word	0x08016da8
 800c52c:	08016d40 	.word	0x08016d40

0800c530 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c530:	b510      	push	{r4, lr}
 800c532:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800c534:	f7ff ffb8 	bl	800c4a8 <pbuf_cat>
  if (p != NULL) {
 800c538:	b144      	cbz	r4, 800c54c <pbuf_chain+0x1c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c53a:	f007 ff6d 	bl	8014418 <sys_arch_protect>
 800c53e:	7ba3      	ldrb	r3, [r4, #14]
 800c540:	3301      	adds	r3, #1
 800c542:	73a3      	strb	r3, [r4, #14]
 800c544:	f007 ff74 	bl	8014430 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c548:	7ba3      	ldrb	r3, [r4, #14]
 800c54a:	b103      	cbz	r3, 800c54e <pbuf_chain+0x1e>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c54c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c54e:	4b04      	ldr	r3, [pc, #16]	@ (800c560 <pbuf_chain+0x30>)
 800c550:	f240 3242 	movw	r2, #834	@ 0x342
 800c554:	4903      	ldr	r1, [pc, #12]	@ (800c564 <pbuf_chain+0x34>)
 800c556:	4804      	ldr	r0, [pc, #16]	@ (800c568 <pbuf_chain+0x38>)
}
 800c558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c55c:	f008 b9da 	b.w	8014914 <iprintf>
 800c560:	08016c10 	.word	0x08016c10
 800c564:	08016d2c 	.word	0x08016d2c
 800c568:	08015bd0 	.word	0x08015bd0

0800c56c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c56c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c570:	2800      	cmp	r0, #0
 800c572:	f000 80ad 	beq.w	800c6d0 <pbuf_copy+0x164>
 800c576:	fab1 f581 	clz	r5, r1
 800c57a:	460e      	mov	r6, r1
 800c57c:	096d      	lsrs	r5, r5, #5
 800c57e:	2900      	cmp	r1, #0
 800c580:	f000 80a6 	beq.w	800c6d0 <pbuf_copy+0x164>
 800c584:	8902      	ldrh	r2, [r0, #8]
 800c586:	4604      	mov	r4, r0
 800c588:	890b      	ldrh	r3, [r1, #8]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	f0c0 80a0 	bcc.w	800c6d0 <pbuf_copy+0x164>
 800c590:	8942      	ldrh	r2, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 800c592:	462f      	mov	r7, r5
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c594:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 800c6e4 <pbuf_copy+0x178>
 800c598:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 800c6f8 <pbuf_copy+0x18c>
 800c59c:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 800c6ec <pbuf_copy+0x180>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c5a0:	8973      	ldrh	r3, [r6, #10]
 800c5a2:	eba2 0b07 	sub.w	fp, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c5a6:	6860      	ldr	r0, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c5a8:	1b5b      	subs	r3, r3, r5
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c5aa:	6871      	ldr	r1, [r6, #4]
 800c5ac:	4438      	add	r0, r7
 800c5ae:	459b      	cmp	fp, r3
 800c5b0:	4429      	add	r1, r5
 800c5b2:	bf28      	it	cs
 800c5b4:	469b      	movcs	fp, r3
 800c5b6:	465a      	mov	r2, fp
    offset_to += len;
 800c5b8:	445f      	add	r7, fp
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c5ba:	f008 fb40 	bl	8014c3e <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c5be:	8963      	ldrh	r3, [r4, #10]
    offset_from += len;
 800c5c0:	445d      	add	r5, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c5c2:	42bb      	cmp	r3, r7
 800c5c4:	d328      	bcc.n	800c618 <pbuf_copy+0xac>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c5c6:	8973      	ldrh	r3, [r6, #10]
 800c5c8:	42ab      	cmp	r3, r5
 800c5ca:	d31c      	bcc.n	800c606 <pbuf_copy+0x9a>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800c5cc:	8962      	ldrh	r2, [r4, #10]
    if (offset_from >= p_from->len) {
 800c5ce:	42ab      	cmp	r3, r5
    if (offset_to == p_to->len) {
 800c5d0:	4611      	mov	r1, r2
    if (offset_from >= p_from->len) {
 800c5d2:	d90c      	bls.n	800c5ee <pbuf_copy+0x82>
    if (offset_to == p_to->len) {
 800c5d4:	4297      	cmp	r7, r2
 800c5d6:	d027      	beq.n	800c628 <pbuf_copy+0xbc>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c5d8:	8931      	ldrh	r1, [r6, #8]
 800c5da:	4299      	cmp	r1, r3
 800c5dc:	d053      	beq.n	800c686 <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5de:	8923      	ldrh	r3, [r4, #8]
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d1dd      	bne.n	800c5a0 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d137      	bne.n	800c65a <pbuf_copy+0xee>
 800c5ea:	8962      	ldrh	r2, [r4, #10]
 800c5ec:	e7d8      	b.n	800c5a0 <pbuf_copy+0x34>
    if (offset_to == p_to->len) {
 800c5ee:	4297      	cmp	r7, r2
      p_from = p_from->next;
 800c5f0:	6836      	ldr	r6, [r6, #0]
    if (offset_to == p_to->len) {
 800c5f2:	d025      	beq.n	800c640 <pbuf_copy+0xd4>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c5f4:	2e00      	cmp	r6, #0
 800c5f6:	d138      	bne.n	800c66a <pbuf_copy+0xfe>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5f8:	8923      	ldrh	r3, [r4, #8]
 800c5fa:	428b      	cmp	r3, r1
 800c5fc:	d02a      	beq.n	800c654 <pbuf_copy+0xe8>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c5fe:	2400      	movs	r4, #0
}
 800c600:	4620      	mov	r0, r4
 800c602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c606:	464b      	mov	r3, r9
 800c608:	f240 32da 	movw	r2, #986	@ 0x3da
 800c60c:	4934      	ldr	r1, [pc, #208]	@ (800c6e0 <pbuf_copy+0x174>)
 800c60e:	4640      	mov	r0, r8
 800c610:	f008 f980 	bl	8014914 <iprintf>
    if (offset_from >= p_from->len) {
 800c614:	8973      	ldrh	r3, [r6, #10]
 800c616:	e7d9      	b.n	800c5cc <pbuf_copy+0x60>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c618:	464b      	mov	r3, r9
 800c61a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c61e:	4651      	mov	r1, sl
 800c620:	4640      	mov	r0, r8
 800c622:	f008 f977 	bl	8014914 <iprintf>
 800c626:	e7ce      	b.n	800c5c6 <pbuf_copy+0x5a>
      p_to = p_to->next;
 800c628:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	d044      	beq.n	800c6b8 <pbuf_copy+0x14c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c62e:	8932      	ldrh	r2, [r6, #8]
 800c630:	429a      	cmp	r2, r3
 800c632:	d136      	bne.n	800c6a2 <pbuf_copy+0x136>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c634:	6833      	ldr	r3, [r6, #0]
 800c636:	bb43      	cbnz	r3, 800c68a <pbuf_copy+0x11e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c638:	2c00      	cmp	r4, #0
 800c63a:	d132      	bne.n	800c6a2 <pbuf_copy+0x136>
 800c63c:	4627      	mov	r7, r4
 800c63e:	e7d4      	b.n	800c5ea <pbuf_copy+0x7e>
      p_to = p_to->next;
 800c640:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c642:	b9c4      	cbnz	r4, 800c676 <pbuf_copy+0x10a>
 800c644:	2e00      	cmp	r6, #0
 800c646:	d137      	bne.n	800c6b8 <pbuf_copy+0x14c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c648:	2c00      	cmp	r4, #0
 800c64a:	d0d9      	beq.n	800c600 <pbuf_copy+0x94>
 800c64c:	8961      	ldrh	r1, [r4, #10]
 800c64e:	8923      	ldrh	r3, [r4, #8]
 800c650:	428b      	cmp	r3, r1
 800c652:	d1d4      	bne.n	800c5fe <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c654:	6824      	ldr	r4, [r4, #0]
 800c656:	2c00      	cmp	r4, #0
 800c658:	d0d2      	beq.n	800c600 <pbuf_copy+0x94>
 800c65a:	4b22      	ldr	r3, [pc, #136]	@ (800c6e4 <pbuf_copy+0x178>)
 800c65c:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c660:	4921      	ldr	r1, [pc, #132]	@ (800c6e8 <pbuf_copy+0x17c>)
 800c662:	4822      	ldr	r0, [pc, #136]	@ (800c6ec <pbuf_copy+0x180>)
 800c664:	f008 f956 	bl	8014914 <iprintf>
 800c668:	e016      	b.n	800c698 <pbuf_copy+0x12c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c66a:	8971      	ldrh	r1, [r6, #10]
 800c66c:	8933      	ldrh	r3, [r6, #8]
 800c66e:	4299      	cmp	r1, r3
 800c670:	d01e      	beq.n	800c6b0 <pbuf_copy+0x144>
      offset_from = 0;
 800c672:	2500      	movs	r5, #0
 800c674:	e7b3      	b.n	800c5de <pbuf_copy+0x72>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c676:	2e00      	cmp	r6, #0
 800c678:	d0e6      	beq.n	800c648 <pbuf_copy+0xdc>
 800c67a:	8932      	ldrh	r2, [r6, #8]
      offset_from = 0;
 800c67c:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c67e:	8973      	ldrh	r3, [r6, #10]
 800c680:	429a      	cmp	r2, r3
 800c682:	d1d9      	bne.n	800c638 <pbuf_copy+0xcc>
 800c684:	e7d6      	b.n	800c634 <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c686:	6833      	ldr	r3, [r6, #0]
 800c688:	b163      	cbz	r3, 800c6a4 <pbuf_copy+0x138>
 800c68a:	4b16      	ldr	r3, [pc, #88]	@ (800c6e4 <pbuf_copy+0x178>)
 800c68c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c690:	4915      	ldr	r1, [pc, #84]	@ (800c6e8 <pbuf_copy+0x17c>)
 800c692:	4816      	ldr	r0, [pc, #88]	@ (800c6ec <pbuf_copy+0x180>)
 800c694:	f008 f93e 	bl	8014914 <iprintf>
 800c698:	f06f 0405 	mvn.w	r4, #5
}
 800c69c:	4620      	mov	r0, r4
 800c69e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a2:	2700      	movs	r7, #0
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c6a4:	8923      	ldrh	r3, [r4, #8]
 800c6a6:	8962      	ldrh	r2, [r4, #10]
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	f47f af79 	bne.w	800c5a0 <pbuf_copy+0x34>
 800c6ae:	e799      	b.n	800c5e4 <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c6b0:	6835      	ldr	r5, [r6, #0]
 800c6b2:	2d00      	cmp	r5, #0
 800c6b4:	d093      	beq.n	800c5de <pbuf_copy+0x72>
 800c6b6:	e7e8      	b.n	800c68a <pbuf_copy+0x11e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e4 <pbuf_copy+0x178>)
 800c6ba:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c6be:	490c      	ldr	r1, [pc, #48]	@ (800c6f0 <pbuf_copy+0x184>)
 800c6c0:	480a      	ldr	r0, [pc, #40]	@ (800c6ec <pbuf_copy+0x180>)
 800c6c2:	f008 f927 	bl	8014914 <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c6c6:	f06f 040f 	mvn.w	r4, #15
}
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c6d0:	4b04      	ldr	r3, [pc, #16]	@ (800c6e4 <pbuf_copy+0x178>)
 800c6d2:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c6d6:	4907      	ldr	r1, [pc, #28]	@ (800c6f4 <pbuf_copy+0x188>)
 800c6d8:	4804      	ldr	r0, [pc, #16]	@ (800c6ec <pbuf_copy+0x180>)
 800c6da:	f008 f91b 	bl	8014914 <iprintf>
 800c6de:	e7f2      	b.n	800c6c6 <pbuf_copy+0x15a>
 800c6e0:	08016e00 	.word	0x08016e00
 800c6e4:	08016c10 	.word	0x08016c10
 800c6e8:	08016e2c 	.word	0x08016e2c
 800c6ec:	08015bd0 	.word	0x08015bd0
 800c6f0:	08016e1c 	.word	0x08016e1c
 800c6f4:	08016db8 	.word	0x08016db8
 800c6f8:	08016de8 	.word	0x08016de8

0800c6fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c700:	b378      	cbz	r0, 800c762 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c702:	460f      	mov	r7, r1
 800c704:	2900      	cmp	r1, #0
 800c706:	d035      	beq.n	800c774 <pbuf_copy_partial+0x78>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c708:	4690      	mov	r8, r2
 800c70a:	b38a      	cbz	r2, 800c770 <pbuf_copy_partial+0x74>
 800c70c:	4605      	mov	r5, r0
 800c70e:	4619      	mov	r1, r3
  u16_t left = 0;
 800c710:	2600      	movs	r6, #0
 800c712:	e005      	b.n	800c720 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c714:	b299      	uxth	r1, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c716:	682d      	ldr	r5, [r5, #0]
 800c718:	f1b8 0f00 	cmp.w	r8, #0
 800c71c:	d01e      	beq.n	800c75c <pbuf_copy_partial+0x60>
 800c71e:	b1ed      	cbz	r5, 800c75c <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c720:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800c722:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800c726:	b119      	cbz	r1, 800c730 <pbuf_copy_partial+0x34>
 800c728:	4561      	cmp	r1, ip
      offset = (u16_t)(offset - p->len);
 800c72a:	eba1 030c 	sub.w	r3, r1, ip
    if ((offset != 0) && (offset >= p->len)) {
 800c72e:	d2f1      	bcs.n	800c714 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 800c730:	ebac 0401 	sub.w	r4, ip, r1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c734:	686a      	ldr	r2, [r5, #4]
 800c736:	b2a4      	uxth	r4, r4
 800c738:	4411      	add	r1, r2
 800c73a:	4544      	cmp	r4, r8
 800c73c:	bf28      	it	cs
 800c73e:	4644      	movcs	r4, r8
 800c740:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c742:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800c744:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c748:	f008 fa79 	bl	8014c3e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c74c:	b2b6      	uxth	r6, r6
      offset = 0;
 800c74e:	2100      	movs	r1, #0
      len = (u16_t)(len - buf_copy_len);
 800c750:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c754:	682d      	ldr	r5, [r5, #0]
 800c756:	f1b8 0f00 	cmp.w	r8, #0
 800c75a:	d1e0      	bne.n	800c71e <pbuf_copy_partial+0x22>
    }
  }
  return copied_total;
}
 800c75c:	4630      	mov	r0, r6
 800c75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c762:	4b08      	ldr	r3, [pc, #32]	@ (800c784 <pbuf_copy_partial+0x88>)
 800c764:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c768:	4907      	ldr	r1, [pc, #28]	@ (800c788 <pbuf_copy_partial+0x8c>)
 800c76a:	4808      	ldr	r0, [pc, #32]	@ (800c78c <pbuf_copy_partial+0x90>)
 800c76c:	f008 f8d2 	bl	8014914 <iprintf>
 800c770:	2600      	movs	r6, #0
 800c772:	e7f3      	b.n	800c75c <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c774:	4b03      	ldr	r3, [pc, #12]	@ (800c784 <pbuf_copy_partial+0x88>)
 800c776:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c77a:	4905      	ldr	r1, [pc, #20]	@ (800c790 <pbuf_copy_partial+0x94>)
 800c77c:	4803      	ldr	r0, [pc, #12]	@ (800c78c <pbuf_copy_partial+0x90>)
 800c77e:	f008 f8c9 	bl	8014914 <iprintf>
 800c782:	e7f5      	b.n	800c770 <pbuf_copy_partial+0x74>
 800c784:	08016c10 	.word	0x08016c10
 800c788:	08016e58 	.word	0x08016e58
 800c78c:	08015bd0 	.word	0x08015bd0
 800c790:	08016e78 	.word	0x08016e78

0800c794 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	4615      	mov	r5, r2
 800c798:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c79a:	8929      	ldrh	r1, [r5, #8]
 800c79c:	f7ff fd3a 	bl	800c214 <pbuf_alloc>
  if (q == NULL) {
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	b118      	cbz	r0, 800c7ac <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	f7ff fee1 	bl	800c56c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c7aa:	b908      	cbnz	r0, 800c7b0 <pbuf_clone+0x1c>
  return q;
}
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c7b0:	4b04      	ldr	r3, [pc, #16]	@ (800c7c4 <pbuf_clone+0x30>)
 800c7b2:	f240 5224 	movw	r2, #1316	@ 0x524
 800c7b6:	4904      	ldr	r1, [pc, #16]	@ (800c7c8 <pbuf_clone+0x34>)
 800c7b8:	4804      	ldr	r0, [pc, #16]	@ (800c7cc <pbuf_clone+0x38>)
 800c7ba:	f008 f8ab 	bl	8014914 <iprintf>
}
 800c7be:	4620      	mov	r0, r4
 800c7c0:	bd38      	pop	{r3, r4, r5, pc}
 800c7c2:	bf00      	nop
 800c7c4:	08016c10 	.word	0x08016c10
 800c7c8:	08016e9c 	.word	0x08016e9c
 800c7cc:	08015bd0 	.word	0x08015bd0

0800c7d0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c7d0:	b470      	push	{r4, r5, r6}
 800c7d2:	4e12      	ldr	r6, [pc, #72]	@ (800c81c <tcp_new_port+0x4c>)
 800c7d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c7d8:	4d11      	ldr	r5, [pc, #68]	@ (800c820 <tcp_new_port+0x50>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c7da:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800c7de:	8831      	ldrh	r1, [r6, #0]
  tcp_port++;
 800c7e0:	3101      	adds	r1, #1
 800c7e2:	4c10      	ldr	r4, [pc, #64]	@ (800c824 <tcp_new_port+0x54>)
 800c7e4:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c7e6:	4561      	cmp	r1, ip
 800c7e8:	bf08      	it	eq
 800c7ea:	f44f 4140 	moveq.w	r1, #49152	@ 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	b913      	cbnz	r3, 800c7fa <tcp_new_port+0x2a>
 800c7f4:	e00b      	b.n	800c80e <tcp_new_port+0x3e>
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	b14b      	cbz	r3, 800c80e <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 800c7fa:	8ada      	ldrh	r2, [r3, #22]
 800c7fc:	428a      	cmp	r2, r1
 800c7fe:	d1fa      	bne.n	800c7f6 <tcp_new_port+0x26>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c800:	3801      	subs	r0, #1
 800c802:	b280      	uxth	r0, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	d1eb      	bne.n	800c7e0 <tcp_new_port+0x10>
 800c808:	8031      	strh	r1, [r6, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800c80a:	bc70      	pop	{r4, r5, r6}
 800c80c:	4770      	bx	lr
 800c80e:	3404      	adds	r4, #4
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c810:	42ac      	cmp	r4, r5
 800c812:	d1ec      	bne.n	800c7ee <tcp_new_port+0x1e>
 800c814:	4608      	mov	r0, r1
 800c816:	8031      	strh	r1, [r6, #0]
}
 800c818:	bc70      	pop	{r4, r5, r6}
 800c81a:	4770      	bx	lr
 800c81c:	2400008c 	.word	0x2400008c
 800c820:	080174cc 	.word	0x080174cc
 800c824:	080174bc 	.word	0x080174bc

0800c828 <tcp_close_shutdown_fin>:
{
 800c828:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c82a:	4604      	mov	r4, r0
 800c82c:	b1f8      	cbz	r0, 800c86e <tcp_close_shutdown_fin+0x46>
  switch (pcb->state) {
 800c82e:	7d23      	ldrb	r3, [r4, #20]
 800c830:	2b04      	cmp	r3, #4
 800c832:	d005      	beq.n	800c840 <tcp_close_shutdown_fin+0x18>
 800c834:	2b07      	cmp	r3, #7
 800c836:	d00d      	beq.n	800c854 <tcp_close_shutdown_fin+0x2c>
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d001      	beq.n	800c840 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 800c83c:	2000      	movs	r0, #0
}
 800c83e:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800c840:	4620      	mov	r0, r4
 800c842:	f003 fbe9 	bl	8010018 <tcp_send_fin>
      if (err == ERR_OK) {
 800c846:	b948      	cbnz	r0, 800c85c <tcp_close_shutdown_fin+0x34>
  if (err == ERR_OK) {
 800c848:	2305      	movs	r3, #5
    tcp_output(pcb);
 800c84a:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800c84c:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800c84e:	f003 fd51 	bl	80102f4 <tcp_output>
 800c852:	e7f3      	b.n	800c83c <tcp_close_shutdown_fin+0x14>
      err = tcp_send_fin(pcb);
 800c854:	4620      	mov	r0, r4
 800c856:	f003 fbdf 	bl	8010018 <tcp_send_fin>
      if (err == ERR_OK) {
 800c85a:	b130      	cbz	r0, 800c86a <tcp_close_shutdown_fin+0x42>
  } else if (err == ERR_MEM) {
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d1ee      	bne.n	800c83e <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c860:	8b63      	ldrh	r3, [r4, #26]
 800c862:	f043 0308 	orr.w	r3, r3, #8
 800c866:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800c868:	e7e8      	b.n	800c83c <tcp_close_shutdown_fin+0x14>
 800c86a:	2309      	movs	r3, #9
 800c86c:	e7ed      	b.n	800c84a <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c86e:	4b04      	ldr	r3, [pc, #16]	@ (800c880 <tcp_close_shutdown_fin+0x58>)
 800c870:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c874:	4903      	ldr	r1, [pc, #12]	@ (800c884 <tcp_close_shutdown_fin+0x5c>)
 800c876:	4804      	ldr	r0, [pc, #16]	@ (800c888 <tcp_close_shutdown_fin+0x60>)
 800c878:	f008 f84c 	bl	8014914 <iprintf>
 800c87c:	e7d7      	b.n	800c82e <tcp_close_shutdown_fin+0x6>
 800c87e:	bf00      	nop
 800c880:	08016eb0 	.word	0x08016eb0
 800c884:	08016ee0 	.word	0x08016ee0
 800c888:	08015bd0 	.word	0x08015bd0

0800c88c <tcp_init>:
{
 800c88c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c88e:	f007 fe8f 	bl	80145b0 <rand>
 800c892:	4b02      	ldr	r3, [pc, #8]	@ (800c89c <tcp_init+0x10>)
 800c894:	4a02      	ldr	r2, [pc, #8]	@ (800c8a0 <tcp_init+0x14>)
 800c896:	4303      	orrs	r3, r0
 800c898:	8013      	strh	r3, [r2, #0]
}
 800c89a:	bd08      	pop	{r3, pc}
 800c89c:	ffffc000 	.word	0xffffc000
 800c8a0:	2400008c 	.word	0x2400008c

0800c8a4 <tcp_free>:
{
 800c8a4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c8a6:	7d03      	ldrb	r3, [r0, #20]
{
 800c8a8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d005      	beq.n	800c8ba <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	2001      	movs	r0, #1
}
 800c8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800c8b6:	f7ff b909 	b.w	800bacc <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c8ba:	4906      	ldr	r1, [pc, #24]	@ (800c8d4 <tcp_free+0x30>)
 800c8bc:	22d4      	movs	r2, #212	@ 0xd4
 800c8be:	4b06      	ldr	r3, [pc, #24]	@ (800c8d8 <tcp_free+0x34>)
 800c8c0:	4806      	ldr	r0, [pc, #24]	@ (800c8dc <tcp_free+0x38>)
 800c8c2:	f008 f827 	bl	8014914 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	2001      	movs	r0, #1
}
 800c8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800c8ce:	f7ff b8fd 	b.w	800bacc <memp_free>
 800c8d2:	bf00      	nop
 800c8d4:	08016eec 	.word	0x08016eec
 800c8d8:	08016eb0 	.word	0x08016eb0
 800c8dc:	08015bd0 	.word	0x08015bd0

0800c8e0 <tcp_bind_netif>:
{
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c8e6:	f7f9 fd07 	bl	80062f8 <sys_check_core_locking>
  if (netif != NULL) {
 800c8ea:	b11c      	cbz	r4, 800c8f4 <tcp_bind_netif+0x14>
    pcb->netif_idx = netif_get_index(netif);
 800c8ec:	f894 4034 	ldrb.w	r4, [r4, #52]	@ 0x34
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	b2e4      	uxtb	r4, r4
 800c8f4:	722c      	strb	r4, [r5, #8]
}
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}

0800c8f8 <tcp_update_rcv_ann_wnd>:
{
 800c8f8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	b1c8      	cbz	r0, 800c932 <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c8fe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c900:	f640 3c68 	movw	ip, #2920	@ 0xb68
 800c904:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c906:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c90a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c90c:	1a58      	subs	r0, r3, r1
 800c90e:	45e6      	cmp	lr, ip
 800c910:	4410      	add	r0, r2
 800c912:	bf94      	ite	ls
 800c914:	eba0 050e 	subls.w	r5, r0, lr
 800c918:	eba0 050c 	subhi.w	r5, r0, ip
 800c91c:	2d00      	cmp	r5, #0
 800c91e:	db01      	blt.n	800c924 <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c920:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800c922:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c924:	1a53      	subs	r3, r2, r1
 800c926:	2b00      	cmp	r3, #0
 800c928:	dd0b      	ble.n	800c942 <tcp_update_rcv_ann_wnd+0x4a>
 800c92a:	2300      	movs	r3, #0
    return 0;
 800c92c:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c92e:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800c930:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c932:	4b0c      	ldr	r3, [pc, #48]	@ (800c964 <tcp_update_rcv_ann_wnd+0x6c>)
 800c934:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c938:	490b      	ldr	r1, [pc, #44]	@ (800c968 <tcp_update_rcv_ann_wnd+0x70>)
 800c93a:	480c      	ldr	r0, [pc, #48]	@ (800c96c <tcp_update_rcv_ann_wnd+0x74>)
 800c93c:	f007 ffea 	bl	8014914 <iprintf>
 800c940:	e7dd      	b.n	800c8fe <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c942:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c944:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800c948:	d203      	bcs.n	800c952 <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c94a:	b2ab      	uxth	r3, r5
    return 0;
 800c94c:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c94e:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800c950:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c952:	4b04      	ldr	r3, [pc, #16]	@ (800c964 <tcp_update_rcv_ann_wnd+0x6c>)
 800c954:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c958:	4905      	ldr	r1, [pc, #20]	@ (800c970 <tcp_update_rcv_ann_wnd+0x78>)
 800c95a:	4804      	ldr	r0, [pc, #16]	@ (800c96c <tcp_update_rcv_ann_wnd+0x74>)
 800c95c:	f007 ffda 	bl	8014914 <iprintf>
 800c960:	e7f3      	b.n	800c94a <tcp_update_rcv_ann_wnd+0x52>
 800c962:	bf00      	nop
 800c964:	08016eb0 	.word	0x08016eb0
 800c968:	08016f00 	.word	0x08016f00
 800c96c:	08015bd0 	.word	0x08015bd0
 800c970:	08016f24 	.word	0x08016f24

0800c974 <tcp_recved>:
{
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	4605      	mov	r5, r0
 800c978:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 800c97a:	f7f9 fcbd 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c97e:	b33d      	cbz	r5, 800c9d0 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c980:	7d2b      	ldrb	r3, [r5, #20]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d01c      	beq.n	800c9c0 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c986:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800c988:	1919      	adds	r1, r3, r4
 800c98a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c98c:	428b      	cmp	r3, r1
 800c98e:	d803      	bhi.n	800c998 <tcp_recved+0x24>
 800c990:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 800c994:	4299      	cmp	r1, r3
 800c996:	d901      	bls.n	800c99c <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c998:	f241 61d0 	movw	r1, #5840	@ 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c99c:	4628      	mov	r0, r5
 800c99e:	8529      	strh	r1, [r5, #40]	@ 0x28
 800c9a0:	f7ff ffaa 	bl	800c8f8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c9a4:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 800c9a8:	4298      	cmp	r0, r3
 800c9aa:	d800      	bhi.n	800c9ae <tcp_recved+0x3a>
}
 800c9ac:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800c9ae:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800c9b0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800c9b2:	f043 0302 	orr.w	r3, r3, #2
 800c9b6:	836b      	strh	r3, [r5, #26]
}
 800c9b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800c9bc:	f003 bc9a 	b.w	80102f4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c9c0:	4b08      	ldr	r3, [pc, #32]	@ (800c9e4 <tcp_recved+0x70>)
 800c9c2:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c9c6:	4908      	ldr	r1, [pc, #32]	@ (800c9e8 <tcp_recved+0x74>)
 800c9c8:	4808      	ldr	r0, [pc, #32]	@ (800c9ec <tcp_recved+0x78>)
 800c9ca:	f007 ffa3 	bl	8014914 <iprintf>
 800c9ce:	e7da      	b.n	800c986 <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c9d0:	4b04      	ldr	r3, [pc, #16]	@ (800c9e4 <tcp_recved+0x70>)
 800c9d2:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c9d6:	4906      	ldr	r1, [pc, #24]	@ (800c9f0 <tcp_recved+0x7c>)
 800c9d8:	4804      	ldr	r0, [pc, #16]	@ (800c9ec <tcp_recved+0x78>)
}
 800c9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c9de:	f007 bf99 	b.w	8014914 <iprintf>
 800c9e2:	bf00      	nop
 800c9e4:	08016eb0 	.word	0x08016eb0
 800c9e8:	08016f58 	.word	0x08016f58
 800c9ec:	08015bd0 	.word	0x08015bd0
 800c9f0:	08016f40 	.word	0x08016f40

0800c9f4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	4617      	mov	r7, r2
 800c9fc:	461d      	mov	r5, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800c9fe:	f7f9 fc7b 	bl	80062f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca02:	2c00      	cmp	r4, #0
 800ca04:	f000 808a 	beq.w	800cb1c <tcp_connect+0x128>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ca08:	2e00      	cmp	r6, #0
 800ca0a:	d07d      	beq.n	800cb08 <tcp_connect+0x114>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ca0c:	7d23      	ldrb	r3, [r4, #20]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d16a      	bne.n	800cae8 <tcp_connect+0xf4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ca12:	6833      	ldr	r3, [r6, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ca14:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 800ca16:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ca18:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	d049      	beq.n	800cab2 <tcp_connect+0xbe>
    netif = netif_get_by_index(pcb->netif_idx);
 800ca1e:	f7ff fa5d 	bl	800bedc <netif_get_by_index>
 800ca22:	4607      	mov	r7, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 800ca24:	2f00      	cmp	r7, #0
 800ca26:	d06c      	beq.n	800cb02 <tcp_connect+0x10e>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	b90b      	cbnz	r3, 800ca30 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ca30:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 800ca32:	b926      	cbnz	r6, 800ca3e <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 800ca34:	f7ff fecc 	bl	800c7d0 <tcp_new_port>
 800ca38:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d05e      	beq.n	800cafc <tcp_connect+0x108>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ca3e:	4b3b      	ldr	r3, [pc, #236]	@ (800cb2c <tcp_connect+0x138>)
 800ca40:	4a3b      	ldr	r2, [pc, #236]	@ (800cb30 <tcp_connect+0x13c>)
 800ca42:	6811      	ldr	r1, [r2, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	440a      	add	r2, r1
 800ca48:	601a      	str	r2, [r3, #0]
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ca4a:	4b3a      	ldr	r3, [pc, #232]	@ (800cb34 <tcp_connect+0x140>)
  pcb->snd_nxt = iss;
 800ca4c:	6522      	str	r2, [r4, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800ca4e:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ca50:	62a3      	str	r3, [r4, #40]	@ 0x28
  pcb->snd_wnd = TCP_WND;
 800ca52:	f241 63d0 	movw	r3, #5840	@ 0x16d0
  pcb->lastack = iss - 1;
 800ca56:	6462      	str	r2, [r4, #68]	@ 0x44
  pcb->snd_lbb = iss - 1;
 800ca58:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 800ca5c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
  pcb->snd_wnd = TCP_WND;
 800ca5e:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  pcb->rcv_nxt = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	6263      	str	r3, [r4, #36]	@ 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ca66:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	d037      	beq.n	800cadc <tcp_connect+0xe8>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ca6c:	2a28      	cmp	r2, #40	@ 0x28
 800ca6e:	bf38      	it	cc
 800ca70:	2228      	movcc	r2, #40	@ 0x28
 800ca72:	3a28      	subs	r2, #40	@ 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ca74:	b292      	uxth	r2, r2
 800ca76:	f5b2 7f06 	cmp.w	r2, #536	@ 0x218
 800ca7a:	bf28      	it	cs
 800ca7c:	f44f 7206 	movcs.w	r2, #536	@ 0x218
  pcb->cwnd = 1;
 800ca80:	2301      	movs	r3, #1
  pcb->connected = connected;
 800ca82:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ca86:	2102      	movs	r1, #2
 800ca88:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ca8a:	8662      	strh	r2, [r4, #50]	@ 0x32
  pcb->cwnd = 1;
 800ca8c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ca90:	f003 fa22 	bl	800fed8 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800ca94:	4605      	mov	r5, r0
 800ca96:	b9f8      	cbnz	r0, 800cad8 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 800ca98:	2302      	movs	r3, #2
 800ca9a:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800ca9c:	b186      	cbz	r6, 800cac0 <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca9e:	4a26      	ldr	r2, [pc, #152]	@ (800cb38 <tcp_connect+0x144>)
 800caa0:	6813      	ldr	r3, [r2, #0]
 800caa2:	42a3      	cmp	r3, r4
 800caa4:	d01d      	beq.n	800cae2 <tcp_connect+0xee>
 800caa6:	b15b      	cbz	r3, 800cac0 <tcp_connect+0xcc>
 800caa8:	68da      	ldr	r2, [r3, #12]
 800caaa:	42a2      	cmp	r2, r4
 800caac:	d006      	beq.n	800cabc <tcp_connect+0xc8>
 800caae:	4613      	mov	r3, r2
 800cab0:	e7f9      	b.n	800caa6 <tcp_connect+0xb2>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cab2:	1d20      	adds	r0, r4, #4
 800cab4:	f006 fc5e 	bl	8013374 <ip4_route>
 800cab8:	4607      	mov	r7, r0
 800caba:	e7b3      	b.n	800ca24 <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cabc:	68e2      	ldr	r2, [r4, #12]
 800cabe:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800cac0:	4b1e      	ldr	r3, [pc, #120]	@ (800cb3c <tcp_connect+0x148>)
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	601c      	str	r4, [r3, #0]
 800cac6:	60e2      	str	r2, [r4, #12]
 800cac8:	f003 ff32 	bl	8010930 <tcp_timer_needed>
 800cacc:	4b1c      	ldr	r3, [pc, #112]	@ (800cb40 <tcp_connect+0x14c>)
 800cace:	2201      	movs	r2, #1
    tcp_output(pcb);
 800cad0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 800cad2:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800cad4:	f003 fc0e 	bl	80102f4 <tcp_output>
}
 800cad8:	4628      	mov	r0, r5
 800cada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return sendmss;
 800cadc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cae0:	e7ce      	b.n	800ca80 <tcp_connect+0x8c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cae2:	68e3      	ldr	r3, [r4, #12]
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	e7eb      	b.n	800cac0 <tcp_connect+0xcc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800cae8:	4b16      	ldr	r3, [pc, #88]	@ (800cb44 <tcp_connect+0x150>)
 800caea:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800caee:	4916      	ldr	r1, [pc, #88]	@ (800cb48 <tcp_connect+0x154>)
 800caf0:	f06f 0509 	mvn.w	r5, #9
 800caf4:	4815      	ldr	r0, [pc, #84]	@ (800cb4c <tcp_connect+0x158>)
 800caf6:	f007 ff0d 	bl	8014914 <iprintf>
 800cafa:	e7ed      	b.n	800cad8 <tcp_connect+0xe4>
      return ERR_BUF;
 800cafc:	f06f 0501 	mvn.w	r5, #1
 800cb00:	e7ea      	b.n	800cad8 <tcp_connect+0xe4>
    return ERR_RTE;
 800cb02:	f06f 0503 	mvn.w	r5, #3
 800cb06:	e7e7      	b.n	800cad8 <tcp_connect+0xe4>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cb08:	4b0e      	ldr	r3, [pc, #56]	@ (800cb44 <tcp_connect+0x150>)
 800cb0a:	f240 4236 	movw	r2, #1078	@ 0x436
 800cb0e:	4910      	ldr	r1, [pc, #64]	@ (800cb50 <tcp_connect+0x15c>)
 800cb10:	480e      	ldr	r0, [pc, #56]	@ (800cb4c <tcp_connect+0x158>)
 800cb12:	f007 feff 	bl	8014914 <iprintf>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb16:	f06f 050f 	mvn.w	r5, #15
 800cb1a:	e7dd      	b.n	800cad8 <tcp_connect+0xe4>
 800cb1c:	4b09      	ldr	r3, [pc, #36]	@ (800cb44 <tcp_connect+0x150>)
 800cb1e:	f240 4235 	movw	r2, #1077	@ 0x435
 800cb22:	490c      	ldr	r1, [pc, #48]	@ (800cb54 <tcp_connect+0x160>)
 800cb24:	4809      	ldr	r0, [pc, #36]	@ (800cb4c <tcp_connect+0x158>)
 800cb26:	f007 fef5 	bl	8014914 <iprintf>
 800cb2a:	e7f4      	b.n	800cb16 <tcp_connect+0x122>
 800cb2c:	24000088 	.word	0x24000088
 800cb30:	24010718 	.word	0x24010718
 800cb34:	16d016d0 	.word	0x16d016d0
 800cb38:	24010714 	.word	0x24010714
 800cb3c:	2401070c 	.word	0x2401070c
 800cb40:	24010707 	.word	0x24010707
 800cb44:	08016eb0 	.word	0x08016eb0
 800cb48:	08016fb8 	.word	0x08016fb8
 800cb4c:	08015bd0 	.word	0x08015bd0
 800cb50:	08016f9c 	.word	0x08016f9c
 800cb54:	08016f80 	.word	0x08016f80

0800cb58 <tcp_segs_free>:
  while (seg != NULL) {
 800cb58:	b170      	cbz	r0, 800cb78 <tcp_segs_free+0x20>
{
 800cb5a:	b538      	push	{r3, r4, r5, lr}
 800cb5c:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 800cb5e:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800cb60:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800cb62:	6868      	ldr	r0, [r5, #4]
 800cb64:	b108      	cbz	r0, 800cb6a <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800cb66:	f7ff fae5 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	2003      	movs	r0, #3
 800cb6e:	f7fe ffad 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800cb72:	2c00      	cmp	r4, #0
 800cb74:	d1f3      	bne.n	800cb5e <tcp_segs_free+0x6>
}
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop

0800cb7c <tcp_seg_free>:
  if (seg != NULL) {
 800cb7c:	b158      	cbz	r0, 800cb96 <tcp_seg_free+0x1a>
{
 800cb7e:	b510      	push	{r4, lr}
 800cb80:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800cb82:	6840      	ldr	r0, [r0, #4]
 800cb84:	b108      	cbz	r0, 800cb8a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800cb86:	f7ff fad5 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	2003      	movs	r0, #3
}
 800cb8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800cb92:	f7fe bf9b 	b.w	800bacc <memp_free>
 800cb96:	4770      	bx	lr

0800cb98 <tcp_seg_copy>:
{
 800cb98:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	b188      	cbz	r0, 800cbc2 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cb9e:	2003      	movs	r0, #3
 800cba0:	f7fe ff4e 	bl	800ba40 <memp_malloc>
  if (cseg == NULL) {
 800cba4:	4604      	mov	r4, r0
 800cba6:	b150      	cbz	r0, 800cbbe <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cba8:	6868      	ldr	r0, [r5, #4]
 800cbaa:	6829      	ldr	r1, [r5, #0]
 800cbac:	68aa      	ldr	r2, [r5, #8]
 800cbae:	68eb      	ldr	r3, [r5, #12]
 800cbb0:	6060      	str	r0, [r4, #4]
 800cbb2:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800cbb4:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cbb6:	60a2      	str	r2, [r4, #8]
 800cbb8:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800cbba:	f7ff fc57 	bl	800c46c <pbuf_ref>
}
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cbc2:	4b04      	ldr	r3, [pc, #16]	@ (800cbd4 <tcp_seg_copy+0x3c>)
 800cbc4:	f240 6282 	movw	r2, #1666	@ 0x682
 800cbc8:	4903      	ldr	r1, [pc, #12]	@ (800cbd8 <tcp_seg_copy+0x40>)
 800cbca:	4804      	ldr	r0, [pc, #16]	@ (800cbdc <tcp_seg_copy+0x44>)
 800cbcc:	f007 fea2 	bl	8014914 <iprintf>
 800cbd0:	e7e5      	b.n	800cb9e <tcp_seg_copy+0x6>
 800cbd2:	bf00      	nop
 800cbd4:	08016eb0 	.word	0x08016eb0
 800cbd8:	08016fe8 	.word	0x08016fe8
 800cbdc:	08015bd0 	.word	0x08015bd0

0800cbe0 <tcp_arg>:
{
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800cbe6:	f7f9 fb87 	bl	80062f8 <sys_check_core_locking>
  if (pcb != NULL) {
 800cbea:	b104      	cbz	r4, 800cbee <tcp_arg+0xe>
    pcb->callback_arg = arg;
 800cbec:	6125      	str	r5, [r4, #16]
}
 800cbee:	bd38      	pop	{r3, r4, r5, pc}

0800cbf0 <tcp_recv>:
{
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800cbf6:	f7f9 fb7f 	bl	80062f8 <sys_check_core_locking>
  if (pcb != NULL) {
 800cbfa:	b124      	cbz	r4, 800cc06 <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800cbfc:	7d23      	ldrb	r3, [r4, #20]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d002      	beq.n	800cc08 <tcp_recv+0x18>
    pcb->recv = recv;
 800cc02:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800cc08:	4b03      	ldr	r3, [pc, #12]	@ (800cc18 <tcp_recv+0x28>)
 800cc0a:	f240 72df 	movw	r2, #2015	@ 0x7df
 800cc0e:	4903      	ldr	r1, [pc, #12]	@ (800cc1c <tcp_recv+0x2c>)
 800cc10:	4803      	ldr	r0, [pc, #12]	@ (800cc20 <tcp_recv+0x30>)
 800cc12:	f007 fe7f 	bl	8014914 <iprintf>
 800cc16:	e7f4      	b.n	800cc02 <tcp_recv+0x12>
 800cc18:	08016eb0 	.word	0x08016eb0
 800cc1c:	08017004 	.word	0x08017004
 800cc20:	08015bd0 	.word	0x08015bd0

0800cc24 <tcp_sent>:
{
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4604      	mov	r4, r0
 800cc28:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800cc2a:	f7f9 fb65 	bl	80062f8 <sys_check_core_locking>
  if (pcb != NULL) {
 800cc2e:	b124      	cbz	r4, 800cc3a <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800cc30:	7d23      	ldrb	r3, [r4, #20]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d002      	beq.n	800cc3c <tcp_sent+0x18>
    pcb->sent = sent;
 800cc36:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
}
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800cc3c:	4b03      	ldr	r3, [pc, #12]	@ (800cc4c <tcp_sent+0x28>)
 800cc3e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800cc42:	4903      	ldr	r1, [pc, #12]	@ (800cc50 <tcp_sent+0x2c>)
 800cc44:	4803      	ldr	r0, [pc, #12]	@ (800cc54 <tcp_sent+0x30>)
 800cc46:	f007 fe65 	bl	8014914 <iprintf>
 800cc4a:	e7f4      	b.n	800cc36 <tcp_sent+0x12>
 800cc4c:	08016eb0 	.word	0x08016eb0
 800cc50:	0801702c 	.word	0x0801702c
 800cc54:	08015bd0 	.word	0x08015bd0

0800cc58 <tcp_err>:
{
 800cc58:	b538      	push	{r3, r4, r5, lr}
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800cc5e:	f7f9 fb4b 	bl	80062f8 <sys_check_core_locking>
  if (pcb != NULL) {
 800cc62:	b124      	cbz	r4, 800cc6e <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cc64:	7d23      	ldrb	r3, [r4, #20]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d002      	beq.n	800cc70 <tcp_err+0x18>
    pcb->errf = err;
 800cc6a:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cc70:	4b03      	ldr	r3, [pc, #12]	@ (800cc80 <tcp_err+0x28>)
 800cc72:	f640 020d 	movw	r2, #2061	@ 0x80d
 800cc76:	4903      	ldr	r1, [pc, #12]	@ (800cc84 <tcp_err+0x2c>)
 800cc78:	4803      	ldr	r0, [pc, #12]	@ (800cc88 <tcp_err+0x30>)
 800cc7a:	f007 fe4b 	bl	8014914 <iprintf>
 800cc7e:	e7f4      	b.n	800cc6a <tcp_err+0x12>
 800cc80:	08016eb0 	.word	0x08016eb0
 800cc84:	08017054 	.word	0x08017054
 800cc88:	08015bd0 	.word	0x08015bd0

0800cc8c <tcp_accept>:
{
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4604      	mov	r4, r0
 800cc90:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800cc92:	f7f9 fb31 	bl	80062f8 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800cc96:	b11c      	cbz	r4, 800cca0 <tcp_accept+0x14>
 800cc98:	7d23      	ldrb	r3, [r4, #20]
 800cc9a:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 800cc9c:	bf08      	it	eq
 800cc9e:	61a5      	streq	r5, [r4, #24]
}
 800cca0:	bd38      	pop	{r3, r4, r5, pc}
 800cca2:	bf00      	nop

0800cca4 <tcp_poll>:
{
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	4604      	mov	r4, r0
 800cca8:	460e      	mov	r6, r1
 800ccaa:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800ccac:	f7f9 fb24 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ccb0:	b18c      	cbz	r4, 800ccd6 <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ccb2:	7d23      	ldrb	r3, [r4, #20]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d003      	beq.n	800ccc0 <tcp_poll+0x1c>
  pcb->poll = poll;
 800ccb8:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800ccbc:	7765      	strb	r5, [r4, #29]
}
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ccc0:	4b09      	ldr	r3, [pc, #36]	@ (800cce8 <tcp_poll+0x44>)
 800ccc2:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ccc6:	4909      	ldr	r1, [pc, #36]	@ (800ccec <tcp_poll+0x48>)
 800ccc8:	4809      	ldr	r0, [pc, #36]	@ (800ccf0 <tcp_poll+0x4c>)
 800ccca:	f007 fe23 	bl	8014914 <iprintf>
  pcb->poll = poll;
 800ccce:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800ccd2:	7765      	strb	r5, [r4, #29]
}
 800ccd4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ccd6:	4b04      	ldr	r3, [pc, #16]	@ (800cce8 <tcp_poll+0x44>)
 800ccd8:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ccdc:	4905      	ldr	r1, [pc, #20]	@ (800ccf4 <tcp_poll+0x50>)
 800ccde:	4804      	ldr	r0, [pc, #16]	@ (800ccf0 <tcp_poll+0x4c>)
}
 800cce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800cce4:	f007 be16 	b.w	8014914 <iprintf>
 800cce8:	08016eb0 	.word	0x08016eb0
 800ccec:	08017094 	.word	0x08017094
 800ccf0:	08015bd0 	.word	0x08015bd0
 800ccf4:	0801707c 	.word	0x0801707c

0800ccf8 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d041      	beq.n	800cd80 <tcp_pcb_purge+0x88>
{
 800ccfc:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 800ccfe:	7d03      	ldrb	r3, [r0, #20]
 800cd00:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800cd02:	2b0a      	cmp	r3, #10
 800cd04:	d001      	beq.n	800cd0a <tcp_pcb_purge+0x12>
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d800      	bhi.n	800cd0c <tcp_pcb_purge+0x14>
}
 800cd0a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800cd0c:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800cd0e:	b118      	cbz	r0, 800cd18 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800cd10:	f7ff fa10 	bl	800c134 <pbuf_free>
      pcb->refused_data = NULL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	67ab      	str	r3, [r5, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 800cd18:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800cd1a:	b164      	cbz	r4, 800cd36 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800cd1c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800cd1e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800cd20:	6870      	ldr	r0, [r6, #4]
 800cd22:	b108      	cbz	r0, 800cd28 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800cd24:	f7ff fa06 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800cd28:	4631      	mov	r1, r6
 800cd2a:	2003      	movs	r0, #3
 800cd2c:	f7fe fece 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800cd30:	2c00      	cmp	r4, #0
 800cd32:	d1f3      	bne.n	800cd1c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800cd34:	676c      	str	r4, [r5, #116]	@ 0x74
    pcb->rtime = -1;
 800cd36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 800cd3a:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
    pcb->rtime = -1;
 800cd3c:	862b      	strh	r3, [r5, #48]	@ 0x30
  while (seg != NULL) {
 800cd3e:	b15c      	cbz	r4, 800cd58 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800cd40:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800cd42:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800cd44:	6870      	ldr	r0, [r6, #4]
 800cd46:	b108      	cbz	r0, 800cd4c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800cd48:	f7ff f9f4 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	2003      	movs	r0, #3
 800cd50:	f7fe febc 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800cd54:	2c00      	cmp	r4, #0
 800cd56:	d1f3      	bne.n	800cd40 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800cd58:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
  while (seg != NULL) {
 800cd5a:	b15c      	cbz	r4, 800cd74 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800cd5c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800cd5e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800cd60:	6870      	ldr	r0, [r6, #4]
 800cd62:	b108      	cbz	r0, 800cd68 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800cd64:	f7ff f9e6 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800cd68:	4631      	mov	r1, r6
 800cd6a:	2003      	movs	r0, #3
 800cd6c:	f7fe feae 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800cd70:	2c00      	cmp	r4, #0
 800cd72:	d1f3      	bne.n	800cd5c <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 800cd7a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
}
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cd80:	4b03      	ldr	r3, [pc, #12]	@ (800cd90 <tcp_pcb_purge+0x98>)
 800cd82:	f640 0251 	movw	r2, #2129	@ 0x851
 800cd86:	4903      	ldr	r1, [pc, #12]	@ (800cd94 <tcp_pcb_purge+0x9c>)
 800cd88:	4803      	ldr	r0, [pc, #12]	@ (800cd98 <tcp_pcb_purge+0xa0>)
 800cd8a:	f007 bdc3 	b.w	8014914 <iprintf>
 800cd8e:	bf00      	nop
 800cd90:	08016eb0 	.word	0x08016eb0
 800cd94:	080170b4 	.word	0x080170b4
 800cd98:	08015bd0 	.word	0x08015bd0

0800cd9c <tcp_slowtmr>:
{
 800cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800cda0:	4da7      	ldr	r5, [pc, #668]	@ (800d040 <tcp_slowtmr+0x2a4>)
{
 800cda2:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800cda4:	4ea7      	ldr	r6, [pc, #668]	@ (800d044 <tcp_slowtmr+0x2a8>)
  ++tcp_ticks;
 800cda6:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cda8:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 800d070 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800cdac:	3301      	adds	r3, #1
 800cdae:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800cdb0:	7833      	ldrb	r3, [r6, #0]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	7033      	strb	r3, [r6, #0]
  pcb = tcp_active_pcbs;
 800cdb6:	4ba4      	ldr	r3, [pc, #656]	@ (800d048 <tcp_slowtmr+0x2ac>)
 800cdb8:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800cdba:	2c00      	cmp	r4, #0
 800cdbc:	d05f      	beq.n	800ce7e <tcp_slowtmr+0xe2>
  prev = NULL;
 800cdbe:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cdc0:	46b9      	mov	r9, r7
 800cdc2:	7d23      	ldrb	r3, [r4, #20]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 80e4 	beq.w	800cf92 <tcp_slowtmr+0x1f6>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	f000 80ec 	beq.w	800cfa8 <tcp_slowtmr+0x20c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cdd0:	2b0a      	cmp	r3, #10
 800cdd2:	f000 80f4 	beq.w	800cfbe <tcp_slowtmr+0x222>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cdd6:	7833      	ldrb	r3, [r6, #0]
 800cdd8:	7fa2      	ldrb	r2, [r4, #30]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	f000 80fb 	beq.w	800cfd6 <tcp_slowtmr+0x23a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cde0:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800cde2:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cde4:	2a02      	cmp	r2, #2
 800cde6:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800cdea:	f000 809e 	beq.w	800cf2a <tcp_slowtmr+0x18e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cdee:	2b0b      	cmp	r3, #11
 800cdf0:	f240 80a2 	bls.w	800cf38 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800cdf4:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800cdf8:	2a06      	cmp	r2, #6
 800cdfa:	f000 80bb 	beq.w	800cf74 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cdfe:	7a63      	ldrb	r3, [r4, #9]
 800ce00:	071b      	lsls	r3, r3, #28
 800ce02:	f140 8096 	bpl.w	800cf32 <tcp_slowtmr+0x196>
 800ce06:	2a04      	cmp	r2, #4
 800ce08:	d002      	beq.n	800ce10 <tcp_slowtmr+0x74>
 800ce0a:	2a07      	cmp	r2, #7
 800ce0c:	f040 8091 	bne.w	800cf32 <tcp_slowtmr+0x196>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ce10:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800ce14:	4b8d      	ldr	r3, [pc, #564]	@ (800d04c <tcp_slowtmr+0x2b0>)
 800ce16:	498e      	ldr	r1, [pc, #568]	@ (800d050 <tcp_slowtmr+0x2b4>)
 800ce18:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce1a:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ce1c:	fba1 1303 	umull	r1, r3, r1, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce20:	6a21      	ldr	r1, [r4, #32]
 800ce22:	1a52      	subs	r2, r2, r1
 800ce24:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800ce28:	f240 8189 	bls.w	800d13e <tcp_slowtmr+0x3a2>
        ++pcb_remove;
 800ce2c:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800ce30:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800ce34:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800ce38:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 800ce3a:	b157      	cbz	r7, 800ce52 <tcp_slowtmr+0xb6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ce3c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800ce40:	682a      	ldr	r2, [r5, #0]
 800ce42:	6a21      	ldr	r1, [r4, #32]
 800ce44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce48:	1a52      	subs	r2, r2, r1
    if (pcb->ooseq != NULL &&
 800ce4a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800ce4e:	f080 80e7 	bcs.w	800d020 <tcp_slowtmr+0x284>
    if (pcb->state == SYN_RCVD) {
 800ce52:	7d23      	ldrb	r3, [r4, #20]
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	f000 80c4 	beq.w	800cfe2 <tcp_slowtmr+0x246>
    if (pcb->state == LAST_ACK) {
 800ce5a:	2b09      	cmp	r3, #9
 800ce5c:	d030      	beq.n	800cec0 <tcp_slowtmr+0x124>
    if (pcb_remove) {
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	d132      	bne.n	800ceca <tcp_slowtmr+0x12e>
      ++prev->polltmr;
 800ce64:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ce66:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800ce68:	3301      	adds	r3, #1
      pcb = pcb->next;
 800ce6a:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800ce6c:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800ce6e:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800ce70:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ce72:	f240 80bd 	bls.w	800cff0 <tcp_slowtmr+0x254>
    pcb_reset = 0;
 800ce76:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800ce78:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800ce7a:	2c00      	cmp	r4, #0
 800ce7c:	d1a1      	bne.n	800cdc2 <tcp_slowtmr+0x26>
  pcb = tcp_tw_pcbs;
 800ce7e:	4f75      	ldr	r7, [pc, #468]	@ (800d054 <tcp_slowtmr+0x2b8>)
 800ce80:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800ce82:	b1d4      	cbz	r4, 800ceba <tcp_slowtmr+0x11e>
  prev = NULL;
 800ce84:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce86:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 800d070 <tcp_slowtmr+0x2d4>
 800ce8a:	f8df 91e8 	ldr.w	r9, [pc, #488]	@ 800d074 <tcp_slowtmr+0x2d8>
 800ce8e:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 800d060 <tcp_slowtmr+0x2c4>
 800ce92:	7d23      	ldrb	r3, [r4, #20]
 800ce94:	2b0a      	cmp	r3, #10
 800ce96:	d006      	beq.n	800cea6 <tcp_slowtmr+0x10a>
 800ce98:	4653      	mov	r3, sl
 800ce9a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ce9e:	4649      	mov	r1, r9
 800cea0:	4640      	mov	r0, r8
 800cea2:	f007 fd37 	bl	8014914 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	6a22      	ldr	r2, [r4, #32]
 800ceaa:	1a9b      	subs	r3, r3, r2
 800ceac:	2bf0      	cmp	r3, #240	@ 0xf0
 800ceae:	f200 812b 	bhi.w	800d108 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 800ceb2:	4626      	mov	r6, r4
 800ceb4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800ceb6:	2c00      	cmp	r4, #0
 800ceb8:	d1eb      	bne.n	800ce92 <tcp_slowtmr+0xf6>
}
 800ceba:	b007      	add	sp, #28
 800cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cec0:	682b      	ldr	r3, [r5, #0]
 800cec2:	6a22      	ldr	r2, [r4, #32]
 800cec4:	1a9b      	subs	r3, r3, r2
 800cec6:	2bf0      	cmp	r3, #240	@ 0xf0
 800cec8:	d9c9      	bls.n	800ce5e <tcp_slowtmr+0xc2>
      tcp_pcb_purge(pcb);
 800ceca:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800cecc:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 800ced0:	f7ff ff12 	bl	800ccf8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ced4:	4b5c      	ldr	r3, [pc, #368]	@ (800d048 <tcp_slowtmr+0x2ac>)
 800ced6:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800ced8:	f1b9 0f00 	cmp.w	r9, #0
 800cedc:	f000 8176 	beq.w	800d1cc <tcp_slowtmr+0x430>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cee0:	42a3      	cmp	r3, r4
 800cee2:	f000 819d 	beq.w	800d220 <tcp_slowtmr+0x484>
        prev->next = pcb->next;
 800cee6:	68e3      	ldr	r3, [r4, #12]
 800cee8:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800ceec:	f1ba 0f00 	cmp.w	sl, #0
 800cef0:	f040 813f 	bne.w	800d172 <tcp_slowtmr+0x3d6>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cef4:	7d23      	ldrb	r3, [r4, #20]
 800cef6:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800cef8:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cefc:	f000 814b 	beq.w	800d196 <tcp_slowtmr+0x3fa>
  memp_free(MEMP_TCP_PCB, pcb);
 800cf00:	4621      	mov	r1, r4
 800cf02:	2001      	movs	r0, #1
 800cf04:	f7fe fde2 	bl	800bacc <memp_free>
      tcp_active_pcbs_changed = 0;
 800cf08:	4c53      	ldr	r4, [pc, #332]	@ (800d058 <tcp_slowtmr+0x2bc>)
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cf0e:	b13f      	cbz	r7, 800cf20 <tcp_slowtmr+0x184>
 800cf10:	f06f 010c 	mvn.w	r1, #12
 800cf14:	4640      	mov	r0, r8
 800cf16:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 800cf18:	7823      	ldrb	r3, [r4, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f47f af4b 	bne.w	800cdb6 <tcp_slowtmr+0x1a>
      pcb = pcb->next;
 800cf20:	4654      	mov	r4, sl
  while (pcb != NULL) {
 800cf22:	2c00      	cmp	r4, #0
 800cf24:	f47f af4d 	bne.w	800cdc2 <tcp_slowtmr+0x26>
 800cf28:	e7a9      	b.n	800ce7e <tcp_slowtmr+0xe2>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cf2a:	2b05      	cmp	r3, #5
 800cf2c:	d904      	bls.n	800cf38 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800cf2e:	f04f 0801 	mov.w	r8, #1
    pcb_reset = 0;
 800cf32:	f04f 0a00 	mov.w	sl, #0
 800cf36:	e77f      	b.n	800ce38 <tcp_slowtmr+0x9c>
      if (pcb->persist_backoff > 0) {
 800cf38:	f894 8099 	ldrb.w	r8, [r4, #153]	@ 0x99
 800cf3c:	f1b8 0f00 	cmp.w	r8, #0
 800cf40:	f000 809a 	beq.w	800d078 <tcp_slowtmr+0x2dc>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cf44:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cf46:	b133      	cbz	r3, 800cf56 <tcp_slowtmr+0x1ba>
 800cf48:	465b      	mov	r3, fp
 800cf4a:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800cf4e:	4943      	ldr	r1, [pc, #268]	@ (800d05c <tcp_slowtmr+0x2c0>)
 800cf50:	4843      	ldr	r0, [pc, #268]	@ (800d060 <tcp_slowtmr+0x2c4>)
 800cf52:	f007 fcdf 	bl	8014914 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cf56:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f000 8182 	beq.w	800d262 <tcp_slowtmr+0x4c6>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cf5e:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800cf62:	2b0b      	cmp	r3, #11
 800cf64:	f240 811e 	bls.w	800d1a4 <tcp_slowtmr+0x408>
    if (pcb->state == FIN_WAIT_2) {
 800cf68:	7d22      	ldrb	r2, [r4, #20]
      ++pcb_remove;
 800cf6a:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800cf6e:	2a06      	cmp	r2, #6
 800cf70:	f47f af45 	bne.w	800cdfe <tcp_slowtmr+0x62>
      if (pcb->flags & TF_RXCLOSED) {
 800cf74:	8b63      	ldrh	r3, [r4, #26]
 800cf76:	06da      	lsls	r2, r3, #27
 800cf78:	d5db      	bpl.n	800cf32 <tcp_slowtmr+0x196>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf7a:	682b      	ldr	r3, [r5, #0]
 800cf7c:	6a22      	ldr	r2, [r4, #32]
 800cf7e:	1a9b      	subs	r3, r3, r2
 800cf80:	2b28      	cmp	r3, #40	@ 0x28
 800cf82:	d9d6      	bls.n	800cf32 <tcp_slowtmr+0x196>
          ++pcb_remove;
 800cf84:	f108 0801 	add.w	r8, r8, #1
    pcb_reset = 0;
 800cf88:	f04f 0a00 	mov.w	sl, #0
          ++pcb_remove;
 800cf8c:	fa5f f888 	uxtb.w	r8, r8
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cf90:	e752      	b.n	800ce38 <tcp_slowtmr+0x9c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cf92:	465b      	mov	r3, fp
 800cf94:	f240 42be 	movw	r2, #1214	@ 0x4be
 800cf98:	4932      	ldr	r1, [pc, #200]	@ (800d064 <tcp_slowtmr+0x2c8>)
 800cf9a:	4831      	ldr	r0, [pc, #196]	@ (800d060 <tcp_slowtmr+0x2c4>)
 800cf9c:	f007 fcba 	bl	8014914 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cfa0:	7d23      	ldrb	r3, [r4, #20]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	f47f af14 	bne.w	800cdd0 <tcp_slowtmr+0x34>
 800cfa8:	465b      	mov	r3, fp
 800cfaa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800cfae:	492e      	ldr	r1, [pc, #184]	@ (800d068 <tcp_slowtmr+0x2cc>)
 800cfb0:	482b      	ldr	r0, [pc, #172]	@ (800d060 <tcp_slowtmr+0x2c4>)
 800cfb2:	f007 fcaf 	bl	8014914 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cfb6:	7d23      	ldrb	r3, [r4, #20]
 800cfb8:	2b0a      	cmp	r3, #10
 800cfba:	f47f af0c 	bne.w	800cdd6 <tcp_slowtmr+0x3a>
 800cfbe:	465b      	mov	r3, fp
 800cfc0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800cfc4:	4929      	ldr	r1, [pc, #164]	@ (800d06c <tcp_slowtmr+0x2d0>)
 800cfc6:	4826      	ldr	r0, [pc, #152]	@ (800d060 <tcp_slowtmr+0x2c4>)
 800cfc8:	f007 fca4 	bl	8014914 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cfcc:	7833      	ldrb	r3, [r6, #0]
 800cfce:	7fa2      	ldrb	r2, [r4, #30]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	f47f af05 	bne.w	800cde0 <tcp_slowtmr+0x44>
      continue;
 800cfd6:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800cfd8:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800cfda:	2c00      	cmp	r4, #0
 800cfdc:	f47f aef1 	bne.w	800cdc2 <tcp_slowtmr+0x26>
 800cfe0:	e74d      	b.n	800ce7e <tcp_slowtmr+0xe2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	6a22      	ldr	r2, [r4, #32]
 800cfe6:	1a9b      	subs	r3, r3, r2
 800cfe8:	2b28      	cmp	r3, #40	@ 0x28
 800cfea:	f63f af6e 	bhi.w	800ceca <tcp_slowtmr+0x12e>
 800cfee:	e736      	b.n	800ce5e <tcp_slowtmr+0xc2>
        tcp_active_pcbs_changed = 0;
 800cff0:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800d058 <tcp_slowtmr+0x2bc>
        TCP_EVENT_POLL(prev, err);
 800cff4:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 800cff8:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800cffc:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800d000:	b153      	cbz	r3, 800d018 <tcp_slowtmr+0x27c>
 800d002:	4621      	mov	r1, r4
 800d004:	6920      	ldr	r0, [r4, #16]
 800d006:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800d008:	f899 3000 	ldrb.w	r3, [r9]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f47f aed2 	bne.w	800cdb6 <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 800d012:	2800      	cmp	r0, #0
 800d014:	f47f af2f 	bne.w	800ce76 <tcp_slowtmr+0xda>
          tcp_output(prev);
 800d018:	4620      	mov	r0, r4
 800d01a:	f003 f96b 	bl	80102f4 <tcp_output>
 800d01e:	e72a      	b.n	800ce76 <tcp_slowtmr+0xda>
 800d020:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800d022:	463c      	mov	r4, r7
    struct tcp_seg *next = seg->next;
 800d024:	683f      	ldr	r7, [r7, #0]
    if (seg->p != NULL) {
 800d026:	6860      	ldr	r0, [r4, #4]
 800d028:	b108      	cbz	r0, 800d02e <tcp_slowtmr+0x292>
      pbuf_free(seg->p);
 800d02a:	f7ff f883 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d02e:	4621      	mov	r1, r4
 800d030:	2003      	movs	r0, #3
 800d032:	f7fe fd4b 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800d036:	2f00      	cmp	r7, #0
 800d038:	d1f3      	bne.n	800d022 <tcp_slowtmr+0x286>
    pcb->ooseq = NULL;
 800d03a:	9c05      	ldr	r4, [sp, #20]
 800d03c:	6767      	str	r7, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d03e:	e708      	b.n	800ce52 <tcp_slowtmr+0xb6>
 800d040:	24010718 	.word	0x24010718
 800d044:	24010705 	.word	0x24010705
 800d048:	2401070c 	.word	0x2401070c
 800d04c:	000a4cb8 	.word	0x000a4cb8
 800d050:	10624dd3 	.word	0x10624dd3
 800d054:	24010708 	.word	0x24010708
 800d058:	24010707 	.word	0x24010707
 800d05c:	08017158 	.word	0x08017158
 800d060:	08015bd0 	.word	0x08015bd0
 800d064:	080170d0 	.word	0x080170d0
 800d068:	080170fc 	.word	0x080170fc
 800d06c:	08017128 	.word	0x08017128
 800d070:	08016eb0 	.word	0x08016eb0
 800d074:	0801721c 	.word	0x0801721c
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d078:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800d07c:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 800d080:	b299      	uxth	r1, r3
 800d082:	4281      	cmp	r1, r0
 800d084:	d802      	bhi.n	800d08c <tcp_slowtmr+0x2f0>
          ++pcb->rtime;
 800d086:	3101      	adds	r1, #1
 800d088:	b20b      	sxth	r3, r1
 800d08a:	8623      	strh	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d08c:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	@ 0x40
 800d090:	4299      	cmp	r1, r3
 800d092:	f73f aeb1 	bgt.w	800cdf8 <tcp_slowtmr+0x5c>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d096:	4620      	mov	r0, r4
 800d098:	f002 fff0 	bl	801007c <tcp_rexmit_rto_prepare>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	f040 80e8 	bne.w	800d272 <tcp_slowtmr+0x4d6>
 800d0a2:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d014      	beq.n	800d0d2 <tcp_slowtmr+0x336>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d0a8:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d0ac:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	@ 0x3c
 800d0b0:	2a0c      	cmp	r2, #12
 800d0b2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 800d0b6:	bf28      	it	cs
 800d0b8:	220c      	movcs	r2, #12
 800d0ba:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800d0be:	497a      	ldr	r1, [pc, #488]	@ (800d2a8 <tcp_slowtmr+0x50c>)
 800d0c0:	5c8a      	ldrb	r2, [r1, r2]
 800d0c2:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d0c4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	bfa8      	it	ge
 800d0cc:	4613      	movge	r3, r2
 800d0ce:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d0d2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
            tcp_rexmit_rto_commit(pcb);
 800d0d4:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d0d6:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
            pcb->cwnd = pcb->mss;
 800d0da:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d0de:	005b      	lsls	r3, r3, #1
 800d0e0:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d0e2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800d0e6:	428b      	cmp	r3, r1
 800d0e8:	bf28      	it	cs
 800d0ea:	460b      	movcs	r3, r1
 800d0ec:	085b      	lsrs	r3, r3, #1
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	bf38      	it	cc
 800d0f2:	4613      	movcc	r3, r2
 800d0f4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
            pcb->rtime = 0;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	8623      	strh	r3, [r4, #48]	@ 0x30
            pcb->bytes_acked = 0;
 800d0fc:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d100:	f003 facc 	bl	801069c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d104:	7d22      	ldrb	r2, [r4, #20]
 800d106:	e677      	b.n	800cdf8 <tcp_slowtmr+0x5c>
      tcp_pcb_purge(pcb);
 800d108:	4620      	mov	r0, r4
 800d10a:	f7ff fdf5 	bl	800ccf8 <tcp_pcb_purge>
      if (prev != NULL) {
 800d10e:	2e00      	cmp	r6, #0
 800d110:	f000 808e 	beq.w	800d230 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	42a3      	cmp	r3, r4
 800d118:	f000 80b6 	beq.w	800d288 <tcp_slowtmr+0x4ec>
        prev->next = pcb->next;
 800d11c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800d120:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d124:	7d23      	ldrb	r3, [r4, #20]
 800d126:	2b01      	cmp	r3, #1
 800d128:	f000 8094 	beq.w	800d254 <tcp_slowtmr+0x4b8>
  memp_free(MEMP_TCP_PCB, pcb);
 800d12c:	4621      	mov	r1, r4
      pcb = pcb->next;
 800d12e:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800d130:	2001      	movs	r0, #1
 800d132:	f7fe fccb 	bl	800bacc <memp_free>
  while (pcb != NULL) {
 800d136:	2c00      	cmp	r4, #0
 800d138:	f47f aeab 	bne.w	800ce92 <tcp_slowtmr+0xf6>
 800d13c:	e6bd      	b.n	800ceba <tcp_slowtmr+0x11e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d13e:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 800d142:	495a      	ldr	r1, [pc, #360]	@ (800d2ac <tcp_slowtmr+0x510>)
 800d144:	fb01 0003 	mla	r0, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 800d148:	4b59      	ldr	r3, [pc, #356]	@ (800d2b0 <tcp_slowtmr+0x514>)
 800d14a:	fba3 3000 	umull	r3, r0, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d14e:	ebb2 1f50 	cmp.w	r2, r0, lsr #5
 800d152:	f67f aeee 	bls.w	800cf32 <tcp_slowtmr+0x196>
        err = tcp_keepalive(pcb);
 800d156:	4620      	mov	r0, r4
 800d158:	f003 faec 	bl	8010734 <tcp_keepalive>
        if (err == ERR_OK) {
 800d15c:	2800      	cmp	r0, #0
 800d15e:	f47f aee8 	bne.w	800cf32 <tcp_slowtmr+0x196>
          pcb->keep_cnt_sent++;
 800d162:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
    pcb_reset = 0;
 800d166:	f04f 0a00 	mov.w	sl, #0
          pcb->keep_cnt_sent++;
 800d16a:	3301      	adds	r3, #1
 800d16c:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d170:	e662      	b.n	800ce38 <tcp_slowtmr+0x9c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d172:	8b23      	ldrh	r3, [r4, #24]
 800d174:	4620      	mov	r0, r4
 800d176:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d178:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800d17a:	9302      	str	r3, [sp, #8]
 800d17c:	8ae3      	ldrh	r3, [r4, #22]
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	1d23      	adds	r3, r4, #4
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	4623      	mov	r3, r4
 800d186:	f003 f83b 	bl	8010200 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d18a:	7d23      	ldrb	r3, [r4, #20]
 800d18c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800d18e:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d192:	f47f aeb5 	bne.w	800cf00 <tcp_slowtmr+0x164>
 800d196:	465b      	mov	r3, fp
 800d198:	22d4      	movs	r2, #212	@ 0xd4
 800d19a:	4946      	ldr	r1, [pc, #280]	@ (800d2b4 <tcp_slowtmr+0x518>)
 800d19c:	4846      	ldr	r0, [pc, #280]	@ (800d2b8 <tcp_slowtmr+0x51c>)
 800d19e:	f007 fbb9 	bl	8014914 <iprintf>
 800d1a2:	e6ad      	b.n	800cf00 <tcp_slowtmr+0x164>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d1a4:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800d1a8:	4a44      	ldr	r2, [pc, #272]	@ (800d2bc <tcp_slowtmr+0x520>)
 800d1aa:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800d1ac:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d1b0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d216      	bcs.n	800d1e6 <tcp_slowtmr+0x44a>
            pcb->persist_cnt++;
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800d1bc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800d1be:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d1c2:	d210      	bcs.n	800d1e6 <tcp_slowtmr+0x44a>
    if (pcb->state == FIN_WAIT_2) {
 800d1c4:	7d22      	ldrb	r2, [r4, #20]
    pcb_remove = 0;
 800d1c6:	f04f 0800 	mov.w	r8, #0
 800d1ca:	e615      	b.n	800cdf8 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d1cc:	42a3      	cmp	r3, r4
 800d1ce:	d006      	beq.n	800d1de <tcp_slowtmr+0x442>
 800d1d0:	465b      	mov	r3, fp
 800d1d2:	f240 5271 	movw	r2, #1393	@ 0x571
 800d1d6:	493a      	ldr	r1, [pc, #232]	@ (800d2c0 <tcp_slowtmr+0x524>)
 800d1d8:	4837      	ldr	r0, [pc, #220]	@ (800d2b8 <tcp_slowtmr+0x51c>)
 800d1da:	f007 fb9b 	bl	8014914 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d1de:	68e3      	ldr	r3, [r4, #12]
 800d1e0:	4a38      	ldr	r2, [pc, #224]	@ (800d2c4 <tcp_slowtmr+0x528>)
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	e682      	b.n	800ceec <tcp_slowtmr+0x150>
            if (pcb->snd_wnd == 0) {
 800d1e6:	f8b4 7060 	ldrh.w	r7, [r4, #96]	@ 0x60
 800d1ea:	b937      	cbnz	r7, 800d1fa <tcp_slowtmr+0x45e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f003 fac7 	bl	8010780 <tcp_zero_window_probe>
 800d1f2:	b140      	cbz	r0, 800d206 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800d1f4:	46b8      	mov	r8, r7
    if (pcb->state == FIN_WAIT_2) {
 800d1f6:	7d22      	ldrb	r2, [r4, #20]
 800d1f8:	e5fe      	b.n	800cdf8 <tcp_slowtmr+0x5c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f002 fd91 	bl	800fd24 <tcp_split_unsent_seg>
 800d202:	2800      	cmp	r0, #0
 800d204:	d048      	beq.n	800d298 <tcp_slowtmr+0x4fc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d206:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
              pcb->persist_cnt = 0;
 800d20a:	f04f 0800 	mov.w	r8, #0
    if (pcb->state == FIN_WAIT_2) {
 800d20e:	7d22      	ldrb	r2, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d210:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800d212:	f884 8098 	strb.w	r8, [r4, #152]	@ 0x98
                pcb->persist_backoff++;
 800d216:	bf9c      	itt	ls
 800d218:	3301      	addls	r3, #1
 800d21a:	f884 3099 	strbls.w	r3, [r4, #153]	@ 0x99
 800d21e:	e5eb      	b.n	800cdf8 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d220:	4b29      	ldr	r3, [pc, #164]	@ (800d2c8 <tcp_slowtmr+0x52c>)
 800d222:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d226:	4929      	ldr	r1, [pc, #164]	@ (800d2cc <tcp_slowtmr+0x530>)
 800d228:	4823      	ldr	r0, [pc, #140]	@ (800d2b8 <tcp_slowtmr+0x51c>)
 800d22a:	f007 fb73 	bl	8014914 <iprintf>
 800d22e:	e65a      	b.n	800cee6 <tcp_slowtmr+0x14a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	42a3      	cmp	r3, r4
 800d234:	d006      	beq.n	800d244 <tcp_slowtmr+0x4a8>
 800d236:	4b24      	ldr	r3, [pc, #144]	@ (800d2c8 <tcp_slowtmr+0x52c>)
 800d238:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d23c:	4924      	ldr	r1, [pc, #144]	@ (800d2d0 <tcp_slowtmr+0x534>)
 800d23e:	481e      	ldr	r0, [pc, #120]	@ (800d2b8 <tcp_slowtmr+0x51c>)
 800d240:	f007 fb68 	bl	8014914 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d244:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800d246:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d24a:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800d24c:	f8c7 b000 	str.w	fp, [r7]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d250:	f47f af6c 	bne.w	800d12c <tcp_slowtmr+0x390>
 800d254:	4b1c      	ldr	r3, [pc, #112]	@ (800d2c8 <tcp_slowtmr+0x52c>)
 800d256:	22d4      	movs	r2, #212	@ 0xd4
 800d258:	4916      	ldr	r1, [pc, #88]	@ (800d2b4 <tcp_slowtmr+0x518>)
 800d25a:	4817      	ldr	r0, [pc, #92]	@ (800d2b8 <tcp_slowtmr+0x51c>)
 800d25c:	f007 fb5a 	bl	8014914 <iprintf>
 800d260:	e764      	b.n	800d12c <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d262:	4b19      	ldr	r3, [pc, #100]	@ (800d2c8 <tcp_slowtmr+0x52c>)
 800d264:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d268:	491a      	ldr	r1, [pc, #104]	@ (800d2d4 <tcp_slowtmr+0x538>)
 800d26a:	4813      	ldr	r0, [pc, #76]	@ (800d2b8 <tcp_slowtmr+0x51c>)
 800d26c:	f007 fb52 	bl	8014914 <iprintf>
 800d270:	e675      	b.n	800cf5e <tcp_slowtmr+0x1c2>
            if (pcb->state != SYN_SENT) {
 800d272:	7d22      	ldrb	r2, [r4, #20]
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d274:	6f21      	ldr	r1, [r4, #112]	@ 0x70
            if (pcb->state != SYN_SENT) {
 800d276:	4613      	mov	r3, r2
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d278:	2900      	cmp	r1, #0
 800d27a:	f47f adbd 	bne.w	800cdf8 <tcp_slowtmr+0x5c>
 800d27e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800d280:	2900      	cmp	r1, #0
 800d282:	f47f af0f 	bne.w	800d0a4 <tcp_slowtmr+0x308>
 800d286:	e5b7      	b.n	800cdf8 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d288:	4b0f      	ldr	r3, [pc, #60]	@ (800d2c8 <tcp_slowtmr+0x52c>)
 800d28a:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d28e:	4912      	ldr	r1, [pc, #72]	@ (800d2d8 <tcp_slowtmr+0x53c>)
 800d290:	4809      	ldr	r0, [pc, #36]	@ (800d2b8 <tcp_slowtmr+0x51c>)
 800d292:	f007 fb3f 	bl	8014914 <iprintf>
 800d296:	e741      	b.n	800d11c <tcp_slowtmr+0x380>
                if (tcp_output(pcb) == ERR_OK) {
 800d298:	4620      	mov	r0, r4
 800d29a:	f003 f82b 	bl	80102f4 <tcp_output>
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d1b1      	bne.n	800d206 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800d2a2:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800d2a4:	7d22      	ldrb	r2, [r4, #20]
 800d2a6:	e5a7      	b.n	800cdf8 <tcp_slowtmr+0x5c>
 800d2a8:	080174d4 	.word	0x080174d4
 800d2ac:	000124f8 	.word	0x000124f8
 800d2b0:	10624dd3 	.word	0x10624dd3
 800d2b4:	08016eec 	.word	0x08016eec
 800d2b8:	08015bd0 	.word	0x08015bd0
 800d2bc:	080174cc 	.word	0x080174cc
 800d2c0:	080171f0 	.word	0x080171f0
 800d2c4:	2401070c 	.word	0x2401070c
 800d2c8:	08016eb0 	.word	0x08016eb0
 800d2cc:	080171c4 	.word	0x080171c4
 800d2d0:	08017274 	.word	0x08017274
 800d2d4:	0801718c 	.word	0x0801718c
 800d2d8:	0801724c 	.word	0x0801724c

0800d2dc <tcp_pcb_remove>:
{
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	2900      	cmp	r1, #0
 800d2e4:	d04a      	beq.n	800d37c <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d2e6:	2d00      	cmp	r5, #0
 800d2e8:	d051      	beq.n	800d38e <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800d2ea:	682b      	ldr	r3, [r5, #0]
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	d032      	beq.n	800d356 <tcp_pcb_remove+0x7a>
 800d2f0:	b12b      	cbz	r3, 800d2fe <tcp_pcb_remove+0x22>
 800d2f2:	68da      	ldr	r2, [r3, #12]
 800d2f4:	42a2      	cmp	r2, r4
 800d2f6:	d03e      	beq.n	800d376 <tcp_pcb_remove+0x9a>
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f9      	bne.n	800d2f2 <tcp_pcb_remove+0x16>
 800d2fe:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800d300:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800d302:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800d304:	f7ff fcf8 	bl	800ccf8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800d308:	7d23      	ldrb	r3, [r4, #20]
 800d30a:	2b0a      	cmp	r3, #10
 800d30c:	d02d      	beq.n	800d36a <tcp_pcb_remove+0x8e>
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d01d      	beq.n	800d34e <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800d312:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800d314:	07da      	lsls	r2, r3, #31
 800d316:	d421      	bmi.n	800d35c <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d318:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d31a:	b133      	cbz	r3, 800d32a <tcp_pcb_remove+0x4e>
 800d31c:	4b20      	ldr	r3, [pc, #128]	@ (800d3a0 <tcp_pcb_remove+0xc4>)
 800d31e:	f640 0293 	movw	r2, #2195	@ 0x893
 800d322:	4920      	ldr	r1, [pc, #128]	@ (800d3a4 <tcp_pcb_remove+0xc8>)
 800d324:	4820      	ldr	r0, [pc, #128]	@ (800d3a8 <tcp_pcb_remove+0xcc>)
 800d326:	f007 faf5 	bl	8014914 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d32a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d32c:	b133      	cbz	r3, 800d33c <tcp_pcb_remove+0x60>
 800d32e:	4b1c      	ldr	r3, [pc, #112]	@ (800d3a0 <tcp_pcb_remove+0xc4>)
 800d330:	f640 0294 	movw	r2, #2196	@ 0x894
 800d334:	491d      	ldr	r1, [pc, #116]	@ (800d3ac <tcp_pcb_remove+0xd0>)
 800d336:	481c      	ldr	r0, [pc, #112]	@ (800d3a8 <tcp_pcb_remove+0xcc>)
 800d338:	f007 faec 	bl	8014914 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d33c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d33e:	b133      	cbz	r3, 800d34e <tcp_pcb_remove+0x72>
 800d340:	4b17      	ldr	r3, [pc, #92]	@ (800d3a0 <tcp_pcb_remove+0xc4>)
 800d342:	f640 0296 	movw	r2, #2198	@ 0x896
 800d346:	491a      	ldr	r1, [pc, #104]	@ (800d3b0 <tcp_pcb_remove+0xd4>)
 800d348:	4817      	ldr	r0, [pc, #92]	@ (800d3a8 <tcp_pcb_remove+0xcc>)
 800d34a:	f007 fae3 	bl	8014914 <iprintf>
  pcb->state = CLOSED;
 800d34e:	2300      	movs	r3, #0
 800d350:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800d352:	82e3      	strh	r3, [r4, #22]
}
 800d354:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800d356:	68e3      	ldr	r3, [r4, #12]
 800d358:	602b      	str	r3, [r5, #0]
 800d35a:	e7d0      	b.n	800d2fe <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800d35c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800d360:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800d362:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800d364:	f002 ffc6 	bl	80102f4 <tcp_output>
  if (pcb->state != LISTEN) {
 800d368:	7d23      	ldrb	r3, [r4, #20]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d0ef      	beq.n	800d34e <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d36e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1d3      	bne.n	800d31c <tcp_pcb_remove+0x40>
 800d374:	e7d9      	b.n	800d32a <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800d376:	68e2      	ldr	r2, [r4, #12]
 800d378:	60da      	str	r2, [r3, #12]
 800d37a:	e7c0      	b.n	800d2fe <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d37c:	4b08      	ldr	r3, [pc, #32]	@ (800d3a0 <tcp_pcb_remove+0xc4>)
 800d37e:	f640 0283 	movw	r2, #2179	@ 0x883
 800d382:	490c      	ldr	r1, [pc, #48]	@ (800d3b4 <tcp_pcb_remove+0xd8>)
 800d384:	4808      	ldr	r0, [pc, #32]	@ (800d3a8 <tcp_pcb_remove+0xcc>)
 800d386:	f007 fac5 	bl	8014914 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d38a:	2d00      	cmp	r5, #0
 800d38c:	d1ad      	bne.n	800d2ea <tcp_pcb_remove+0xe>
 800d38e:	4b04      	ldr	r3, [pc, #16]	@ (800d3a0 <tcp_pcb_remove+0xc4>)
 800d390:	f640 0284 	movw	r2, #2180	@ 0x884
 800d394:	4908      	ldr	r1, [pc, #32]	@ (800d3b8 <tcp_pcb_remove+0xdc>)
 800d396:	4804      	ldr	r0, [pc, #16]	@ (800d3a8 <tcp_pcb_remove+0xcc>)
 800d398:	f007 fabc 	bl	8014914 <iprintf>
 800d39c:	e7a5      	b.n	800d2ea <tcp_pcb_remove+0xe>
 800d39e:	bf00      	nop
 800d3a0:	08016eb0 	.word	0x08016eb0
 800d3a4:	080172d8 	.word	0x080172d8
 800d3a8:	08015bd0 	.word	0x08015bd0
 800d3ac:	080172f0 	.word	0x080172f0
 800d3b0:	0801730c 	.word	0x0801730c
 800d3b4:	0801729c 	.word	0x0801729c
 800d3b8:	080172b8 	.word	0x080172b8

0800d3bc <tcp_abandon>:
{
 800d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c0:	4605      	mov	r5, r0
 800d3c2:	b087      	sub	sp, #28
 800d3c4:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800d3c6:	f7f8 ff97 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d3ca:	2d00      	cmp	r5, #0
 800d3cc:	f000 80a9 	beq.w	800d522 <tcp_abandon+0x166>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d3d0:	7d2b      	ldrb	r3, [r5, #20]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	f000 808c 	beq.w	800d4f0 <tcp_abandon+0x134>
  if (pcb->state == TIME_WAIT) {
 800d3d8:	2b0a      	cmp	r3, #10
 800d3da:	f000 8094 	beq.w	800d506 <tcp_abandon+0x14a>
    seqno = pcb->snd_nxt;
 800d3de:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 800d3e0:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
    errf = pcb->errf;
 800d3e4:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 800d3e8:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (pcb->local_port != 0) {
 800d3ec:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    seqno = pcb->snd_nxt;
 800d3f0:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d144      	bne.n	800d480 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 800d3f6:	f1b8 0f00 	cmp.w	r8, #0
 800d3fa:	d149      	bne.n	800d490 <tcp_abandon+0xd4>
    u16_t local_port = 0;
 800d3fc:	f04f 0800 	mov.w	r8, #0
    int send_rst = 0;
 800d400:	4646      	mov	r6, r8
    if (pcb->unacked != NULL) {
 800d402:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
 800d404:	b164      	cbz	r4, 800d420 <tcp_abandon+0x64>
      pbuf_free(seg->p);
 800d406:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800d408:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d40a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d40e:	b108      	cbz	r0, 800d414 <tcp_abandon+0x58>
      pbuf_free(seg->p);
 800d410:	f7fe fe90 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d414:	4651      	mov	r1, sl
 800d416:	2003      	movs	r0, #3
 800d418:	f7fe fb58 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800d41c:	2c00      	cmp	r4, #0
 800d41e:	d1f2      	bne.n	800d406 <tcp_abandon+0x4a>
    if (pcb->unsent != NULL) {
 800d420:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 800d422:	b164      	cbz	r4, 800d43e <tcp_abandon+0x82>
      pbuf_free(seg->p);
 800d424:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800d426:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d428:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d42c:	b108      	cbz	r0, 800d432 <tcp_abandon+0x76>
      pbuf_free(seg->p);
 800d42e:	f7fe fe81 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d432:	4651      	mov	r1, sl
 800d434:	2003      	movs	r0, #3
 800d436:	f7fe fb49 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800d43a:	2c00      	cmp	r4, #0
 800d43c:	d1f2      	bne.n	800d424 <tcp_abandon+0x68>
    if (pcb->ooseq != NULL) {
 800d43e:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800d440:	b164      	cbz	r4, 800d45c <tcp_abandon+0xa0>
      pbuf_free(seg->p);
 800d442:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800d444:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d446:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d44a:	b108      	cbz	r0, 800d450 <tcp_abandon+0x94>
      pbuf_free(seg->p);
 800d44c:	f7fe fe72 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d450:	4651      	mov	r1, sl
 800d452:	2003      	movs	r0, #3
 800d454:	f7fe fb3a 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800d458:	2c00      	cmp	r4, #0
 800d45a:	d1f2      	bne.n	800d442 <tcp_abandon+0x86>
    if (send_rst) {
 800d45c:	bb3e      	cbnz	r6, 800d4ae <tcp_abandon+0xf2>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d45e:	7d2b      	ldrb	r3, [r5, #20]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d033      	beq.n	800d4cc <tcp_abandon+0x110>
  memp_free(MEMP_TCP_PCB, pcb);
 800d464:	4629      	mov	r1, r5
 800d466:	2001      	movs	r0, #1
 800d468:	f7fe fb30 	bl	800bacc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d46c:	2f00      	cmp	r7, #0
 800d46e:	d039      	beq.n	800d4e4 <tcp_abandon+0x128>
 800d470:	f06f 010c 	mvn.w	r1, #12
 800d474:	4648      	mov	r0, r9
 800d476:	463b      	mov	r3, r7
}
 800d478:	b007      	add	sp, #28
 800d47a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d47e:	4718      	bx	r3
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d480:	4629      	mov	r1, r5
 800d482:	4830      	ldr	r0, [pc, #192]	@ (800d544 <tcp_abandon+0x188>)
 800d484:	f7ff ff2a 	bl	800d2dc <tcp_pcb_remove>
 800d488:	4b2f      	ldr	r3, [pc, #188]	@ (800d548 <tcp_abandon+0x18c>)
 800d48a:	2201      	movs	r2, #1
 800d48c:	701a      	strb	r2, [r3, #0]
 800d48e:	e7b8      	b.n	800d402 <tcp_abandon+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d490:	4a2e      	ldr	r2, [pc, #184]	@ (800d54c <tcp_abandon+0x190>)
 800d492:	6813      	ldr	r3, [r2, #0]
 800d494:	42ab      	cmp	r3, r5
 800d496:	d028      	beq.n	800d4ea <tcp_abandon+0x12e>
 800d498:	b133      	cbz	r3, 800d4a8 <tcp_abandon+0xec>
 800d49a:	68da      	ldr	r2, [r3, #12]
 800d49c:	42aa      	cmp	r2, r5
 800d49e:	d001      	beq.n	800d4a4 <tcp_abandon+0xe8>
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	e7f9      	b.n	800d498 <tcp_abandon+0xdc>
 800d4a4:	68ea      	ldr	r2, [r5, #12]
 800d4a6:	60da      	str	r2, [r3, #12]
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60eb      	str	r3, [r5, #12]
 800d4ac:	e7a6      	b.n	800d3fc <tcp_abandon+0x40>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d4ae:	f8cd 8004 	str.w	r8, [sp, #4]
 800d4b2:	465a      	mov	r2, fp
 800d4b4:	8b2b      	ldrh	r3, [r5, #24]
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	9905      	ldr	r1, [sp, #20]
 800d4ba:	9302      	str	r3, [sp, #8]
 800d4bc:	1d2b      	adds	r3, r5, #4
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	462b      	mov	r3, r5
 800d4c2:	f002 fe9d 	bl	8010200 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d4c6:	7d2b      	ldrb	r3, [r5, #20]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d1cb      	bne.n	800d464 <tcp_abandon+0xa8>
 800d4cc:	4920      	ldr	r1, [pc, #128]	@ (800d550 <tcp_abandon+0x194>)
 800d4ce:	22d4      	movs	r2, #212	@ 0xd4
 800d4d0:	4b20      	ldr	r3, [pc, #128]	@ (800d554 <tcp_abandon+0x198>)
 800d4d2:	4821      	ldr	r0, [pc, #132]	@ (800d558 <tcp_abandon+0x19c>)
 800d4d4:	f007 fa1e 	bl	8014914 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800d4d8:	4629      	mov	r1, r5
 800d4da:	2001      	movs	r0, #1
 800d4dc:	f7fe faf6 	bl	800bacc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d4e0:	2f00      	cmp	r7, #0
 800d4e2:	d1c5      	bne.n	800d470 <tcp_abandon+0xb4>
}
 800d4e4:	b007      	add	sp, #28
 800d4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d4ea:	68eb      	ldr	r3, [r5, #12]
 800d4ec:	6013      	str	r3, [r2, #0]
 800d4ee:	e7db      	b.n	800d4a8 <tcp_abandon+0xec>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d4f0:	4b18      	ldr	r3, [pc, #96]	@ (800d554 <tcp_abandon+0x198>)
 800d4f2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d4f6:	4919      	ldr	r1, [pc, #100]	@ (800d55c <tcp_abandon+0x1a0>)
 800d4f8:	4817      	ldr	r0, [pc, #92]	@ (800d558 <tcp_abandon+0x19c>)
 800d4fa:	f007 fa0b 	bl	8014914 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800d4fe:	7d2b      	ldrb	r3, [r5, #20]
 800d500:	2b0a      	cmp	r3, #10
 800d502:	f47f af6c 	bne.w	800d3de <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d506:	4629      	mov	r1, r5
 800d508:	4815      	ldr	r0, [pc, #84]	@ (800d560 <tcp_abandon+0x1a4>)
 800d50a:	f7ff fee7 	bl	800d2dc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d50e:	7d2b      	ldrb	r3, [r5, #20]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d010      	beq.n	800d536 <tcp_abandon+0x17a>
  memp_free(MEMP_TCP_PCB, pcb);
 800d514:	4629      	mov	r1, r5
 800d516:	2001      	movs	r0, #1
}
 800d518:	b007      	add	sp, #28
 800d51a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800d51e:	f7fe bad5 	b.w	800bacc <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d522:	4b0c      	ldr	r3, [pc, #48]	@ (800d554 <tcp_abandon+0x198>)
 800d524:	f240 223d 	movw	r2, #573	@ 0x23d
 800d528:	490e      	ldr	r1, [pc, #56]	@ (800d564 <tcp_abandon+0x1a8>)
 800d52a:	480b      	ldr	r0, [pc, #44]	@ (800d558 <tcp_abandon+0x19c>)
}
 800d52c:	b007      	add	sp, #28
 800d52e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d532:	f007 b9ef 	b.w	8014914 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d536:	4b07      	ldr	r3, [pc, #28]	@ (800d554 <tcp_abandon+0x198>)
 800d538:	22d4      	movs	r2, #212	@ 0xd4
 800d53a:	4905      	ldr	r1, [pc, #20]	@ (800d550 <tcp_abandon+0x194>)
 800d53c:	4806      	ldr	r0, [pc, #24]	@ (800d558 <tcp_abandon+0x19c>)
 800d53e:	f007 f9e9 	bl	8014914 <iprintf>
 800d542:	e7e7      	b.n	800d514 <tcp_abandon+0x158>
 800d544:	2401070c 	.word	0x2401070c
 800d548:	24010707 	.word	0x24010707
 800d54c:	24010714 	.word	0x24010714
 800d550:	08016eec 	.word	0x08016eec
 800d554:	08016eb0 	.word	0x08016eb0
 800d558:	08015bd0 	.word	0x08015bd0
 800d55c:	08017340 	.word	0x08017340
 800d560:	24010708 	.word	0x24010708
 800d564:	08017324 	.word	0x08017324

0800d568 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800d568:	2101      	movs	r1, #1
 800d56a:	f7ff bf27 	b.w	800d3bc <tcp_abandon>
 800d56e:	bf00      	nop

0800d570 <tcp_netif_ip_addr_changed_pcblist>:
{
 800d570:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d572:	4605      	mov	r5, r0
{
 800d574:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d576:	b160      	cbz	r0, 800d592 <tcp_netif_ip_addr_changed_pcblist+0x22>
  while (pcb != NULL) {
 800d578:	b154      	cbz	r4, 800d590 <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d57a:	6822      	ldr	r2, [r4, #0]
 800d57c:	4620      	mov	r0, r4
 800d57e:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800d580:	68e4      	ldr	r4, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d582:	429a      	cmp	r2, r3
 800d584:	d1f8      	bne.n	800d578 <tcp_netif_ip_addr_changed_pcblist+0x8>
  tcp_abandon(pcb, 1);
 800d586:	2101      	movs	r1, #1
 800d588:	f7ff ff18 	bl	800d3bc <tcp_abandon>
  while (pcb != NULL) {
 800d58c:	2c00      	cmp	r4, #0
 800d58e:	d1f4      	bne.n	800d57a <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800d590:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d592:	4b04      	ldr	r3, [pc, #16]	@ (800d5a4 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800d594:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d598:	4903      	ldr	r1, [pc, #12]	@ (800d5a8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800d59a:	4804      	ldr	r0, [pc, #16]	@ (800d5ac <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800d59c:	f007 f9ba 	bl	8014914 <iprintf>
 800d5a0:	e7ea      	b.n	800d578 <tcp_netif_ip_addr_changed_pcblist+0x8>
 800d5a2:	bf00      	nop
 800d5a4:	08016eb0 	.word	0x08016eb0
 800d5a8:	08017374 	.word	0x08017374
 800d5ac:	08015bd0 	.word	0x08015bd0

0800d5b0 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5b0:	4b10      	ldr	r3, [pc, #64]	@ (800d5f4 <tcp_kill_state+0x44>)
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	b1e9      	cbz	r1, 800d5f2 <tcp_kill_state+0x42>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5b6:	4b10      	ldr	r3, [pc, #64]	@ (800d5f8 <tcp_kill_state+0x48>)
  inactivity = 0;
 800d5b8:	f04f 0c00 	mov.w	ip, #0
 800d5bc:	4602      	mov	r2, r0
  inactive = NULL;
 800d5be:	4660      	mov	r0, ip
{
 800d5c0:	b410      	push	{r4}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5c2:	681c      	ldr	r4, [r3, #0]
 800d5c4:	e001      	b.n	800d5ca <tcp_kill_state+0x1a>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5c6:	68c9      	ldr	r1, [r1, #12]
 800d5c8:	b159      	cbz	r1, 800d5e2 <tcp_kill_state+0x32>
    if (pcb->state == state) {
 800d5ca:	7d0b      	ldrb	r3, [r1, #20]
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d1fa      	bne.n	800d5c6 <tcp_kill_state+0x16>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5d0:	6a0b      	ldr	r3, [r1, #32]
 800d5d2:	1ae3      	subs	r3, r4, r3
 800d5d4:	459c      	cmp	ip, r3
 800d5d6:	d8f6      	bhi.n	800d5c6 <tcp_kill_state+0x16>
 800d5d8:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5da:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5dc:	469c      	mov	ip, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5de:	2900      	cmp	r1, #0
 800d5e0:	d1f3      	bne.n	800d5ca <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800d5e2:	b118      	cbz	r0, 800d5ec <tcp_kill_state+0x3c>
}
 800d5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    tcp_abandon(inactive, 0);
 800d5e8:	f7ff bee8 	b.w	800d3bc <tcp_abandon>
}
 800d5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	4770      	bx	lr
 800d5f4:	2401070c 	.word	0x2401070c
 800d5f8:	24010718 	.word	0x24010718

0800d5fc <tcp_alloc>:
{
 800d5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fe:	4606      	mov	r6, r0
  LWIP_ASSERT_CORE_LOCKED();
 800d600:	f7f8 fe7a 	bl	80062f8 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d604:	2001      	movs	r0, #1
 800d606:	f7fe fa1b 	bl	800ba40 <memp_malloc>
  if (pcb == NULL) {
 800d60a:	4604      	mov	r4, r0
 800d60c:	b318      	cbz	r0, 800d656 <tcp_alloc+0x5a>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d60e:	229c      	movs	r2, #156	@ 0x9c
 800d610:	2100      	movs	r1, #0
 800d612:	4620      	mov	r0, r4
 800d614:	f007 fa31 	bl	8014a7a <memset>
    pcb->tmr = tcp_ticks;
 800d618:	4b42      	ldr	r3, [pc, #264]	@ (800d724 <tcp_alloc+0x128>)
    pcb->last_timer = tcp_timer_ctr;
 800d61a:	4943      	ldr	r1, [pc, #268]	@ (800d728 <tcp_alloc+0x12c>)
    pcb->snd_buf = TCP_SND_BUF;
 800d61c:	f241 60d0 	movw	r0, #5840	@ 0x16d0
    pcb->tmr = tcp_ticks;
 800d620:	681a      	ldr	r2, [r3, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d622:	4b42      	ldr	r3, [pc, #264]	@ (800d72c <tcp_alloc+0x130>)
    pcb->last_timer = tcp_timer_ctr;
 800d624:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800d626:	6222      	str	r2, [r4, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d628:	62a3      	str	r3, [r4, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d62a:	23ff      	movs	r3, #255	@ 0xff
    pcb->cwnd = 1;
 800d62c:	4a40      	ldr	r2, [pc, #256]	@ (800d730 <tcp_alloc+0x134>)
    pcb->snd_buf = TCP_SND_BUF;
 800d62e:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
    pcb->last_timer = tcp_timer_ctr;
 800d632:	77a1      	strb	r1, [r4, #30]
    pcb->recv = tcp_recv_null;
 800d634:	483f      	ldr	r0, [pc, #252]	@ (800d734 <tcp_alloc+0x138>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d636:	4940      	ldr	r1, [pc, #256]	@ (800d738 <tcp_alloc+0x13c>)
    pcb->cwnd = 1;
 800d638:	64a2      	str	r2, [r4, #72]	@ 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d63a:	f04f 1206 	mov.w	r2, #393222	@ 0x60006
    pcb->ttl = TCP_TTL;
 800d63e:	72e3      	strb	r3, [r4, #11]
    pcb->rtime = -1;
 800d640:	4b3e      	ldr	r3, [pc, #248]	@ (800d73c <tcp_alloc+0x140>)
    pcb->prio = prio;
 800d642:	7566      	strb	r6, [r4, #21]
    pcb->recv = tcp_recv_null;
 800d644:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d648:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d64c:	f8c4 203e 	str.w	r2, [r4, #62]	@ 0x3e
    pcb->rtime = -1;
 800d650:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800d652:	4620      	mov	r0, r4
 800d654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d656:	4f3a      	ldr	r7, [pc, #232]	@ (800d740 <tcp_alloc+0x144>)
 800d658:	683d      	ldr	r5, [r7, #0]
  while (pcb != NULL) {
 800d65a:	b15d      	cbz	r5, 800d674 <tcp_alloc+0x78>
    struct tcp_pcb *next = pcb->next;
 800d65c:	4628      	mov	r0, r5
 800d65e:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800d660:	8b43      	ldrh	r3, [r0, #26]
 800d662:	071a      	lsls	r2, r3, #28
 800d664:	d5f9      	bpl.n	800d65a <tcp_alloc+0x5e>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d666:	f023 0308 	bic.w	r3, r3, #8
 800d66a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800d66c:	f7ff f8dc 	bl	800c828 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800d670:	2d00      	cmp	r5, #0
 800d672:	d1f3      	bne.n	800d65c <tcp_alloc+0x60>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d674:	4b33      	ldr	r3, [pc, #204]	@ (800d744 <tcp_alloc+0x148>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	b183      	cbz	r3, 800d69c <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d67a:	4a2a      	ldr	r2, [pc, #168]	@ (800d724 <tcp_alloc+0x128>)
  inactivity = 0;
 800d67c:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d67e:	6810      	ldr	r0, [r2, #0]
 800d680:	6a1a      	ldr	r2, [r3, #32]
 800d682:	1a82      	subs	r2, r0, r2
 800d684:	428a      	cmp	r2, r1
 800d686:	d301      	bcc.n	800d68c <tcp_alloc+0x90>
 800d688:	461c      	mov	r4, r3
 800d68a:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1f6      	bne.n	800d680 <tcp_alloc+0x84>
  if (inactive != NULL) {
 800d692:	b11c      	cbz	r4, 800d69c <tcp_alloc+0xa0>
  tcp_abandon(pcb, 1);
 800d694:	2101      	movs	r1, #1
 800d696:	4620      	mov	r0, r4
 800d698:	f7ff fe90 	bl	800d3bc <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d69c:	2001      	movs	r0, #1
 800d69e:	f7fe f9cf 	bl	800ba40 <memp_malloc>
    if (pcb == NULL) {
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d1b2      	bne.n	800d60e <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800d6a8:	2009      	movs	r0, #9
 800d6aa:	f7ff ff81 	bl	800d5b0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6ae:	2001      	movs	r0, #1
 800d6b0:	f7fe f9c6 	bl	800ba40 <memp_malloc>
      if (pcb == NULL) {
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d1a9      	bne.n	800d60e <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800d6ba:	2008      	movs	r0, #8
 800d6bc:	f7ff ff78 	bl	800d5b0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6c0:	2001      	movs	r0, #1
 800d6c2:	f7fe f9bd 	bl	800ba40 <memp_malloc>
        if (pcb == NULL) {
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d1a0      	bne.n	800d60e <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d6cc:	0633      	lsls	r3, r6, #24
 800d6ce:	d426      	bmi.n	800d71e <tcp_alloc+0x122>
  if (mprio == 0) {
 800d6d0:	b1ee      	cbz	r6, 800d70e <tcp_alloc+0x112>
 800d6d2:	4633      	mov	r3, r6
  mprio--;
 800d6d4:	1e5a      	subs	r2, r3, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6d6:	683b      	ldr	r3, [r7, #0]
  mprio--;
 800d6d8:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6da:	b1c3      	cbz	r3, 800d70e <tcp_alloc+0x112>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d6dc:	4911      	ldr	r1, [pc, #68]	@ (800d724 <tcp_alloc+0x128>)
  inactivity = 0;
 800d6de:	2500      	movs	r5, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d6e0:	680f      	ldr	r7, [r1, #0]
 800d6e2:	e005      	b.n	800d6f0 <tcp_alloc+0xf4>
 800d6e4:	6a18      	ldr	r0, [r3, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800d6e6:	1a3d      	subs	r5, r7, r0
    if ((pcb->prio < mprio) ||
 800d6e8:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800d6ea:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	b14b      	cbz	r3, 800d704 <tcp_alloc+0x108>
    if ((pcb->prio < mprio) ||
 800d6f0:	7d59      	ldrb	r1, [r3, #21]
 800d6f2:	428a      	cmp	r2, r1
 800d6f4:	d8f6      	bhi.n	800d6e4 <tcp_alloc+0xe8>
 800d6f6:	d1f9      	bne.n	800d6ec <tcp_alloc+0xf0>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d6f8:	6a18      	ldr	r0, [r3, #32]
 800d6fa:	eba7 0c00 	sub.w	ip, r7, r0
 800d6fe:	45ac      	cmp	ip, r5
 800d700:	d3f4      	bcc.n	800d6ec <tcp_alloc+0xf0>
 800d702:	e7f0      	b.n	800d6e6 <tcp_alloc+0xea>
  if (inactive != NULL) {
 800d704:	b11c      	cbz	r4, 800d70e <tcp_alloc+0x112>
  tcp_abandon(pcb, 1);
 800d706:	2101      	movs	r1, #1
 800d708:	4620      	mov	r0, r4
 800d70a:	f7ff fe57 	bl	800d3bc <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d70e:	2001      	movs	r0, #1
 800d710:	f7fe f996 	bl	800ba40 <memp_malloc>
  if (pcb != NULL) {
 800d714:	4604      	mov	r4, r0
 800d716:	2800      	cmp	r0, #0
 800d718:	f47f af79 	bne.w	800d60e <tcp_alloc+0x12>
 800d71c:	e799      	b.n	800d652 <tcp_alloc+0x56>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d71e:	237f      	movs	r3, #127	@ 0x7f
 800d720:	e7d8      	b.n	800d6d4 <tcp_alloc+0xd8>
 800d722:	bf00      	nop
 800d724:	24010718 	.word	0x24010718
 800d728:	24010705 	.word	0x24010705
 800d72c:	16d016d0 	.word	0x16d016d0
 800d730:	16d00001 	.word	0x16d00001
 800d734:	0800d9ad 	.word	0x0800d9ad
 800d738:	006ddd00 	.word	0x006ddd00
 800d73c:	0218ffff 	.word	0x0218ffff
 800d740:	2401070c 	.word	0x2401070c
 800d744:	24010708 	.word	0x24010708

0800d748 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d748:	2040      	movs	r0, #64	@ 0x40
 800d74a:	f7ff bf57 	b.w	800d5fc <tcp_alloc>
 800d74e:	bf00      	nop

0800d750 <tcp_close_shutdown>:
{
 800d750:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d752:	4604      	mov	r4, r0
{
 800d754:	b085      	sub	sp, #20
 800d756:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d758:	2800      	cmp	r0, #0
 800d75a:	f000 808a 	beq.w	800d872 <tcp_close_shutdown+0x122>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d75e:	7d23      	ldrb	r3, [r4, #20]
 800d760:	b11d      	cbz	r5, 800d76a <tcp_close_shutdown+0x1a>
 800d762:	2b04      	cmp	r3, #4
 800d764:	d01e      	beq.n	800d7a4 <tcp_close_shutdown+0x54>
 800d766:	2b07      	cmp	r3, #7
 800d768:	d01c      	beq.n	800d7a4 <tcp_close_shutdown+0x54>
  switch (pcb->state) {
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d03a      	beq.n	800d7e4 <tcp_close_shutdown+0x94>
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d007      	beq.n	800d782 <tcp_close_shutdown+0x32>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d055      	beq.n	800d822 <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 800d776:	4620      	mov	r0, r4
}
 800d778:	b005      	add	sp, #20
 800d77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800d77e:	f7ff b853 	b.w	800c828 <tcp_close_shutdown_fin>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d782:	4621      	mov	r1, r4
 800d784:	484d      	ldr	r0, [pc, #308]	@ (800d8bc <tcp_close_shutdown+0x16c>)
 800d786:	f7ff fda9 	bl	800d2dc <tcp_pcb_remove>
 800d78a:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d78c:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d78e:	4a4c      	ldr	r2, [pc, #304]	@ (800d8c0 <tcp_close_shutdown+0x170>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d790:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d792:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d794:	d066      	beq.n	800d864 <tcp_close_shutdown+0x114>
  memp_free(MEMP_TCP_PCB, pcb);
 800d796:	4621      	mov	r1, r4
 800d798:	2001      	movs	r0, #1
 800d79a:	f7fe f997 	bl	800bacc <memp_free>
}
 800d79e:	2000      	movs	r0, #0
 800d7a0:	b005      	add	sp, #20
 800d7a2:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d7a4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800d7a6:	2a00      	cmp	r2, #0
 800d7a8:	d048      	beq.n	800d83c <tcp_close_shutdown+0xec>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d7aa:	8b63      	ldrh	r3, [r4, #26]
 800d7ac:	06db      	lsls	r3, r3, #27
 800d7ae:	d570      	bpl.n	800d892 <tcp_close_shutdown+0x142>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d7b0:	8b21      	ldrh	r1, [r4, #24]
 800d7b2:	1d20      	adds	r0, r4, #4
 800d7b4:	8ae2      	ldrh	r2, [r4, #22]
 800d7b6:	4623      	mov	r3, r4
 800d7b8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d7bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d7be:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800d7c0:	9000      	str	r0, [sp, #0]
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f002 fd1c 	bl	8010200 <tcp_rst>
      tcp_pcb_purge(pcb);
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f7ff fa95 	bl	800ccf8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d7ce:	4a3b      	ldr	r2, [pc, #236]	@ (800d8bc <tcp_close_shutdown+0x16c>)
 800d7d0:	6813      	ldr	r3, [r2, #0]
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	d038      	beq.n	800d848 <tcp_close_shutdown+0xf8>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d038      	beq.n	800d84c <tcp_close_shutdown+0xfc>
 800d7da:	68da      	ldr	r2, [r3, #12]
 800d7dc:	42a2      	cmp	r2, r4
 800d7de:	d055      	beq.n	800d88c <tcp_close_shutdown+0x13c>
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	e7f8      	b.n	800d7d6 <tcp_close_shutdown+0x86>
 800d7e4:	4937      	ldr	r1, [pc, #220]	@ (800d8c4 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d7ec:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800d7f0:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7f2:	b133      	cbz	r3, 800d802 <tcp_close_shutdown+0xb2>
    if (pcb->listener == lpcb) {
 800d7f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800d7f6:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800d7f8:	bf08      	it	eq
 800d7fa:	67d8      	streq	r0, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1f8      	bne.n	800d7f4 <tcp_close_shutdown+0xa4>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d802:	428d      	cmp	r5, r1
 800d804:	d1f2      	bne.n	800d7ec <tcp_close_shutdown+0x9c>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d806:	4621      	mov	r1, r4
 800d808:	482f      	ldr	r0, [pc, #188]	@ (800d8c8 <tcp_close_shutdown+0x178>)
 800d80a:	f7ff fd67 	bl	800d2dc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d80e:	7d23      	ldrb	r3, [r4, #20]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d049      	beq.n	800d8a8 <tcp_close_shutdown+0x158>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d814:	4621      	mov	r1, r4
 800d816:	2002      	movs	r0, #2
 800d818:	f7fe f958 	bl	800bacc <memp_free>
}
 800d81c:	2000      	movs	r0, #0
 800d81e:	b005      	add	sp, #20
 800d820:	bd30      	pop	{r4, r5, pc}
      if (pcb->local_port != 0) {
 800d822:	8ae3      	ldrh	r3, [r4, #22]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0b6      	beq.n	800d796 <tcp_close_shutdown+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d828:	4a28      	ldr	r2, [pc, #160]	@ (800d8cc <tcp_close_shutdown+0x17c>)
 800d82a:	6813      	ldr	r3, [r2, #0]
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	d042      	beq.n	800d8b6 <tcp_close_shutdown+0x166>
 800d830:	b34b      	cbz	r3, 800d886 <tcp_close_shutdown+0x136>
 800d832:	68da      	ldr	r2, [r3, #12]
 800d834:	42a2      	cmp	r2, r4
 800d836:	d024      	beq.n	800d882 <tcp_close_shutdown+0x132>
 800d838:	4613      	mov	r3, r2
 800d83a:	e7f9      	b.n	800d830 <tcp_close_shutdown+0xe0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d83c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800d83e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d842:	4291      	cmp	r1, r2
 800d844:	d095      	beq.n	800d772 <tcp_close_shutdown+0x22>
 800d846:	e7b0      	b.n	800d7aa <tcp_close_shutdown+0x5a>
      TCP_RMV_ACTIVE(pcb);
 800d848:	68e3      	ldr	r3, [r4, #12]
 800d84a:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800d84c:	4b20      	ldr	r3, [pc, #128]	@ (800d8d0 <tcp_close_shutdown+0x180>)
      TCP_RMV_ACTIVE(pcb);
 800d84e:	2000      	movs	r0, #0
 800d850:	4a1b      	ldr	r2, [pc, #108]	@ (800d8c0 <tcp_close_shutdown+0x170>)
 800d852:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800d854:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800d856:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800d858:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800d85a:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800d85c:	d021      	beq.n	800d8a2 <tcp_close_shutdown+0x152>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d85e:	7d23      	ldrb	r3, [r4, #20]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d198      	bne.n	800d796 <tcp_close_shutdown+0x46>
 800d864:	4b1b      	ldr	r3, [pc, #108]	@ (800d8d4 <tcp_close_shutdown+0x184>)
 800d866:	22d4      	movs	r2, #212	@ 0xd4
 800d868:	491b      	ldr	r1, [pc, #108]	@ (800d8d8 <tcp_close_shutdown+0x188>)
 800d86a:	481c      	ldr	r0, [pc, #112]	@ (800d8dc <tcp_close_shutdown+0x18c>)
 800d86c:	f007 f852 	bl	8014914 <iprintf>
 800d870:	e791      	b.n	800d796 <tcp_close_shutdown+0x46>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d872:	4b18      	ldr	r3, [pc, #96]	@ (800d8d4 <tcp_close_shutdown+0x184>)
 800d874:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d878:	4919      	ldr	r1, [pc, #100]	@ (800d8e0 <tcp_close_shutdown+0x190>)
 800d87a:	4818      	ldr	r0, [pc, #96]	@ (800d8dc <tcp_close_shutdown+0x18c>)
 800d87c:	f007 f84a 	bl	8014914 <iprintf>
 800d880:	e76d      	b.n	800d75e <tcp_close_shutdown+0xe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d882:	68e2      	ldr	r2, [r4, #12]
 800d884:	60da      	str	r2, [r3, #12]
 800d886:	2300      	movs	r3, #0
 800d888:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800d88a:	e784      	b.n	800d796 <tcp_close_shutdown+0x46>
      TCP_RMV_ACTIVE(pcb);
 800d88c:	68e2      	ldr	r2, [r4, #12]
 800d88e:	60da      	str	r2, [r3, #12]
 800d890:	e7dc      	b.n	800d84c <tcp_close_shutdown+0xfc>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d892:	4b10      	ldr	r3, [pc, #64]	@ (800d8d4 <tcp_close_shutdown+0x184>)
 800d894:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d898:	4912      	ldr	r1, [pc, #72]	@ (800d8e4 <tcp_close_shutdown+0x194>)
 800d89a:	4810      	ldr	r0, [pc, #64]	@ (800d8dc <tcp_close_shutdown+0x18c>)
 800d89c:	f007 f83a 	bl	8014914 <iprintf>
 800d8a0:	e786      	b.n	800d7b0 <tcp_close_shutdown+0x60>
        tcp_trigger_input_pcb_close();
 800d8a2:	f001 fdb1 	bl	800f408 <tcp_trigger_input_pcb_close>
 800d8a6:	e77a      	b.n	800d79e <tcp_close_shutdown+0x4e>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d8d4 <tcp_close_shutdown+0x184>)
 800d8aa:	22df      	movs	r2, #223	@ 0xdf
 800d8ac:	490e      	ldr	r1, [pc, #56]	@ (800d8e8 <tcp_close_shutdown+0x198>)
 800d8ae:	480b      	ldr	r0, [pc, #44]	@ (800d8dc <tcp_close_shutdown+0x18c>)
 800d8b0:	f007 f830 	bl	8014914 <iprintf>
 800d8b4:	e7ae      	b.n	800d814 <tcp_close_shutdown+0xc4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d8b6:	68e3      	ldr	r3, [r4, #12]
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	e7e4      	b.n	800d886 <tcp_close_shutdown+0x136>
 800d8bc:	2401070c 	.word	0x2401070c
 800d8c0:	24010707 	.word	0x24010707
 800d8c4:	080174bc 	.word	0x080174bc
 800d8c8:	24010710 	.word	0x24010710
 800d8cc:	24010714 	.word	0x24010714
 800d8d0:	2401071c 	.word	0x2401071c
 800d8d4:	08016eb0 	.word	0x08016eb0
 800d8d8:	08016eec 	.word	0x08016eec
 800d8dc:	08015bd0 	.word	0x08015bd0
 800d8e0:	080173a8 	.word	0x080173a8
 800d8e4:	080173c8 	.word	0x080173c8
 800d8e8:	080173e4 	.word	0x080173e4

0800d8ec <tcp_close>:
{
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800d8f0:	f7f8 fd02 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8f4:	b164      	cbz	r4, 800d910 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800d8f6:	7d23      	ldrb	r3, [r4, #20]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d003      	beq.n	800d904 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d8fc:	8b63      	ldrh	r3, [r4, #26]
 800d8fe:	f043 0310 	orr.w	r3, r3, #16
 800d902:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800d904:	4620      	mov	r0, r4
 800d906:	2101      	movs	r1, #1
}
 800d908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800d90c:	f7ff bf20 	b.w	800d750 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d910:	4b04      	ldr	r3, [pc, #16]	@ (800d924 <tcp_close+0x38>)
 800d912:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d916:	4904      	ldr	r1, [pc, #16]	@ (800d928 <tcp_close+0x3c>)
 800d918:	4804      	ldr	r0, [pc, #16]	@ (800d92c <tcp_close+0x40>)
 800d91a:	f006 fffb 	bl	8014914 <iprintf>
}
 800d91e:	f06f 000f 	mvn.w	r0, #15
 800d922:	bd10      	pop	{r4, pc}
 800d924:	08016eb0 	.word	0x08016eb0
 800d928:	08017400 	.word	0x08017400
 800d92c:	08015bd0 	.word	0x08015bd0

0800d930 <tcp_shutdown>:
{
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	4604      	mov	r4, r0
 800d934:	460e      	mov	r6, r1
 800d936:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800d938:	f7f8 fcde 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d93c:	b334      	cbz	r4, 800d98c <tcp_shutdown+0x5c>
  if (pcb->state == LISTEN) {
 800d93e:	7d23      	ldrb	r3, [r4, #20]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d012      	beq.n	800d96a <tcp_shutdown+0x3a>
  if (shut_rx) {
 800d944:	b15e      	cbz	r6, 800d95e <tcp_shutdown+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d946:	8b63      	ldrh	r3, [r4, #26]
 800d948:	f043 0310 	orr.w	r3, r3, #16
 800d94c:	8363      	strh	r3, [r4, #26]
    if (shut_tx) {
 800d94e:	b9bd      	cbnz	r5, 800d980 <tcp_shutdown+0x50>
    if (pcb->refused_data != NULL) {
 800d950:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800d952:	b110      	cbz	r0, 800d95a <tcp_shutdown+0x2a>
      pbuf_free(pcb->refused_data);
 800d954:	f7fe fbee 	bl	800c134 <pbuf_free>
      pcb->refused_data = NULL;
 800d958:	67a5      	str	r5, [r4, #120]	@ 0x78
  return ERR_OK;
 800d95a:	2000      	movs	r0, #0
}
 800d95c:	bd70      	pop	{r4, r5, r6, pc}
  if (shut_tx) {
 800d95e:	2d00      	cmp	r5, #0
 800d960:	d0fb      	beq.n	800d95a <tcp_shutdown+0x2a>
    switch (pcb->state) {
 800d962:	2b04      	cmp	r3, #4
 800d964:	d804      	bhi.n	800d970 <tcp_shutdown+0x40>
 800d966:	2b02      	cmp	r3, #2
 800d968:	d804      	bhi.n	800d974 <tcp_shutdown+0x44>
 800d96a:	f06f 000a 	mvn.w	r0, #10
}
 800d96e:	bd70      	pop	{r4, r5, r6, pc}
    switch (pcb->state) {
 800d970:	2b07      	cmp	r3, #7
 800d972:	d1fa      	bne.n	800d96a <tcp_shutdown+0x3a>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d974:	4620      	mov	r0, r4
 800d976:	2100      	movs	r1, #0
}
 800d978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d97c:	f7ff bee8 	b.w	800d750 <tcp_close_shutdown>
      return tcp_close_shutdown(pcb, 1);
 800d980:	4620      	mov	r0, r4
 800d982:	2101      	movs	r1, #1
}
 800d984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return tcp_close_shutdown(pcb, 1);
 800d988:	f7ff bee2 	b.w	800d750 <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d98c:	4b04      	ldr	r3, [pc, #16]	@ (800d9a0 <tcp_shutdown+0x70>)
 800d98e:	f240 2207 	movw	r2, #519	@ 0x207
 800d992:	4904      	ldr	r1, [pc, #16]	@ (800d9a4 <tcp_shutdown+0x74>)
 800d994:	4804      	ldr	r0, [pc, #16]	@ (800d9a8 <tcp_shutdown+0x78>)
 800d996:	f006 ffbd 	bl	8014914 <iprintf>
 800d99a:	f06f 000f 	mvn.w	r0, #15
}
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	08016eb0 	.word	0x08016eb0
 800d9a4:	08017418 	.word	0x08017418
 800d9a8:	08015bd0 	.word	0x08015bd0

0800d9ac <tcp_recv_null>:
{
 800d9ac:	b510      	push	{r4, lr}
 800d9ae:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9b0:	b1f1      	cbz	r1, 800d9f0 <tcp_recv_null+0x44>
  if (p != NULL) {
 800d9b2:	4614      	mov	r4, r2
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	b142      	cbz	r2, 800d9ca <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800d9b8:	8911      	ldrh	r1, [r2, #8]
 800d9ba:	f7fe ffdb 	bl	800c974 <tcp_recved>
    pbuf_free(p);
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7fe fbb8 	bl	800c134 <pbuf_free>
  return ERR_OK;
 800d9c4:	2000      	movs	r0, #0
}
 800d9c6:	b002      	add	sp, #8
 800d9c8:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1fa      	bne.n	800d9c4 <tcp_recv_null+0x18>
 800d9ce:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800d9d0:	f7f8 fc92 	bl	80062f8 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800d9d4:	9801      	ldr	r0, [sp, #4]
 800d9d6:	7d03      	ldrb	r3, [r0, #20]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d003      	beq.n	800d9e4 <tcp_recv_null+0x38>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d9dc:	8b43      	ldrh	r3, [r0, #26]
 800d9de:	f043 0310 	orr.w	r3, r3, #16
 800d9e2:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800d9e4:	2101      	movs	r1, #1
}
 800d9e6:	b002      	add	sp, #8
 800d9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800d9ec:	f7ff beb0 	b.w	800d750 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9f0:	4b04      	ldr	r3, [pc, #16]	@ (800da04 <tcp_recv_null+0x58>)
 800d9f2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d9f6:	4904      	ldr	r1, [pc, #16]	@ (800da08 <tcp_recv_null+0x5c>)
 800d9f8:	4804      	ldr	r0, [pc, #16]	@ (800da0c <tcp_recv_null+0x60>)
 800d9fa:	f006 ff8b 	bl	8014914 <iprintf>
 800d9fe:	f06f 000f 	mvn.w	r0, #15
 800da02:	e7e0      	b.n	800d9c6 <tcp_recv_null+0x1a>
 800da04:	08016eb0 	.word	0x08016eb0
 800da08:	08017434 	.word	0x08017434
 800da0c:	08015bd0 	.word	0x08015bd0

0800da10 <tcp_process_refused_data>:
{
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800da12:	b380      	cbz	r0, 800da76 <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800da14:	6f85      	ldr	r5, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 800da16:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800da18:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 800da1c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800da1e:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800da20:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800da22:	b156      	cbz	r6, 800da3a <tcp_process_refused_data+0x2a>
 800da24:	4601      	mov	r1, r0
 800da26:	462a      	mov	r2, r5
 800da28:	6900      	ldr	r0, [r0, #16]
 800da2a:	47b0      	blx	r6
    if (err == ERR_OK) {
 800da2c:	b158      	cbz	r0, 800da46 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800da2e:	300d      	adds	r0, #13
 800da30:	d01e      	beq.n	800da70 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800da32:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800da36:	67a5      	str	r5, [r4, #120]	@ 0x78
}
 800da38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800da3a:	8929      	ldrh	r1, [r5, #8]
 800da3c:	f7fe ff9a 	bl	800c974 <tcp_recved>
    pbuf_free(p);
 800da40:	4628      	mov	r0, r5
 800da42:	f7fe fb77 	bl	800c134 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800da46:	06bb      	lsls	r3, r7, #26
 800da48:	d510      	bpl.n	800da6c <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800da4a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800da4c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800da50:	4293      	cmp	r3, r2
 800da52:	d001      	beq.n	800da58 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800da54:	3301      	adds	r3, #1
 800da56:	8523      	strh	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800da58:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800da5c:	b135      	cbz	r5, 800da6c <tcp_process_refused_data+0x5c>
 800da5e:	2300      	movs	r3, #0
 800da60:	4621      	mov	r1, r4
 800da62:	6920      	ldr	r0, [r4, #16]
 800da64:	461a      	mov	r2, r3
 800da66:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800da68:	300d      	adds	r0, #13
 800da6a:	d001      	beq.n	800da70 <tcp_process_refused_data+0x60>
  return ERR_OK;
 800da6c:	2000      	movs	r0, #0
}
 800da6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800da70:	f06f 000c 	mvn.w	r0, #12
}
 800da74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800da76:	4b05      	ldr	r3, [pc, #20]	@ (800da8c <tcp_process_refused_data+0x7c>)
 800da78:	f240 6209 	movw	r2, #1545	@ 0x609
 800da7c:	4904      	ldr	r1, [pc, #16]	@ (800da90 <tcp_process_refused_data+0x80>)
 800da7e:	4805      	ldr	r0, [pc, #20]	@ (800da94 <tcp_process_refused_data+0x84>)
 800da80:	f006 ff48 	bl	8014914 <iprintf>
 800da84:	f06f 000f 	mvn.w	r0, #15
}
 800da88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da8a:	bf00      	nop
 800da8c:	08016eb0 	.word	0x08016eb0
 800da90:	08017450 	.word	0x08017450
 800da94:	08015bd0 	.word	0x08015bd0

0800da98 <tcp_fasttmr>:
{
 800da98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ++tcp_timer_ctr;
 800da9c:	4d1c      	ldr	r5, [pc, #112]	@ (800db10 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800da9e:	2700      	movs	r7, #0
 800daa0:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800db18 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800daa4:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800daa6:	4e1b      	ldr	r6, [pc, #108]	@ (800db14 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800daa8:	3301      	adds	r3, #1
 800daaa:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800daac:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800dab0:	b1b4      	cbz	r4, 800dae0 <tcp_fasttmr+0x48>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dab2:	7fa3      	ldrb	r3, [r4, #30]
 800dab4:	782a      	ldrb	r2, [r5, #0]
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d014      	beq.n	800dae4 <tcp_fasttmr+0x4c>
      if (pcb->flags & TF_ACK_DELAY) {
 800daba:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800dabc:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800dabe:	07d9      	lsls	r1, r3, #31
 800dac0:	d419      	bmi.n	800daf6 <tcp_fasttmr+0x5e>
      if (pcb->flags & TF_CLOSEPEND) {
 800dac2:	071a      	lsls	r2, r3, #28
 800dac4:	d410      	bmi.n	800dae8 <tcp_fasttmr+0x50>
      if (pcb->refused_data != NULL) {
 800dac6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        tcp_process_refused_data(pcb);
 800dac8:	4620      	mov	r0, r4
      next = pcb->next;
 800daca:	68e4      	ldr	r4, [r4, #12]
      if (pcb->refused_data != NULL) {
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d0ef      	beq.n	800dab0 <tcp_fasttmr+0x18>
        tcp_active_pcbs_changed = 0;
 800dad0:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800dad2:	f7ff ff9d 	bl	800da10 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dad6:	7833      	ldrb	r3, [r6, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1e7      	bne.n	800daac <tcp_fasttmr+0x14>
  while (pcb != NULL) {
 800dadc:	2c00      	cmp	r4, #0
 800dade:	d1e8      	bne.n	800dab2 <tcp_fasttmr+0x1a>
}
 800dae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pcb = pcb->next;
 800dae4:	68e4      	ldr	r4, [r4, #12]
 800dae6:	e7e3      	b.n	800dab0 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dae8:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800daec:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800daee:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800daf0:	f7fe fe9a 	bl	800c828 <tcp_close_shutdown_fin>
 800daf4:	e7e7      	b.n	800dac6 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800daf6:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800dafa:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800dafc:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800dafe:	f002 fbf9 	bl	80102f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db02:	8b63      	ldrh	r3, [r4, #26]
 800db04:	f023 0303 	bic.w	r3, r3, #3
 800db08:	b29b      	uxth	r3, r3
 800db0a:	8363      	strh	r3, [r4, #26]
 800db0c:	e7d9      	b.n	800dac2 <tcp_fasttmr+0x2a>
 800db0e:	bf00      	nop
 800db10:	24010705 	.word	0x24010705
 800db14:	24010707 	.word	0x24010707
 800db18:	2401070c 	.word	0x2401070c

0800db1c <tcp_tmr>:
{
 800db1c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800db1e:	f7ff ffbb 	bl	800da98 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800db22:	4a06      	ldr	r2, [pc, #24]	@ (800db3c <tcp_tmr+0x20>)
 800db24:	7813      	ldrb	r3, [r2, #0]
 800db26:	3301      	adds	r3, #1
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	7013      	strb	r3, [r2, #0]
 800db2c:	07db      	lsls	r3, r3, #31
 800db2e:	d400      	bmi.n	800db32 <tcp_tmr+0x16>
}
 800db30:	bd08      	pop	{r3, pc}
 800db32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800db36:	f7ff b931 	b.w	800cd9c <tcp_slowtmr>
 800db3a:	bf00      	nop
 800db3c:	24010706 	.word	0x24010706

0800db40 <tcp_next_iss>:
{
 800db40:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800db42:	b130      	cbz	r0, 800db52 <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800db44:	4b07      	ldr	r3, [pc, #28]	@ (800db64 <tcp_next_iss+0x24>)
 800db46:	4a08      	ldr	r2, [pc, #32]	@ (800db68 <tcp_next_iss+0x28>)
 800db48:	6818      	ldr	r0, [r3, #0]
 800db4a:	6812      	ldr	r2, [r2, #0]
 800db4c:	4410      	add	r0, r2
 800db4e:	6018      	str	r0, [r3, #0]
}
 800db50:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800db52:	4b06      	ldr	r3, [pc, #24]	@ (800db6c <tcp_next_iss+0x2c>)
 800db54:	f640 02af 	movw	r2, #2223	@ 0x8af
 800db58:	4905      	ldr	r1, [pc, #20]	@ (800db70 <tcp_next_iss+0x30>)
 800db5a:	4806      	ldr	r0, [pc, #24]	@ (800db74 <tcp_next_iss+0x34>)
 800db5c:	f006 feda 	bl	8014914 <iprintf>
 800db60:	e7f0      	b.n	800db44 <tcp_next_iss+0x4>
 800db62:	bf00      	nop
 800db64:	24000088 	.word	0x24000088
 800db68:	24010718 	.word	0x24010718
 800db6c:	08016eb0 	.word	0x08016eb0
 800db70:	08017478 	.word	0x08017478
 800db74:	08015bd0 	.word	0x08015bd0

0800db78 <tcp_eff_send_mss_netif>:
{
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4605      	mov	r5, r0
 800db7c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800db7e:	b162      	cbz	r2, 800db9a <tcp_eff_send_mss_netif+0x22>
    if (outif == NULL) {
 800db80:	b14c      	cbz	r4, 800db96 <tcp_eff_send_mss_netif+0x1e>
    mtu = outif->mtu;
 800db82:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (mtu != 0) {
 800db84:	b13b      	cbz	r3, 800db96 <tcp_eff_send_mss_netif+0x1e>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800db86:	2b28      	cmp	r3, #40	@ 0x28
 800db88:	bf38      	it	cc
 800db8a:	2328      	movcc	r3, #40	@ 0x28
 800db8c:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800db8e:	b29b      	uxth	r3, r3
 800db90:	429d      	cmp	r5, r3
 800db92:	bf28      	it	cs
 800db94:	461d      	movcs	r5, r3
}
 800db96:	4628      	mov	r0, r5
 800db98:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800db9a:	4b04      	ldr	r3, [pc, #16]	@ (800dbac <tcp_eff_send_mss_netif+0x34>)
 800db9c:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800dba0:	4903      	ldr	r1, [pc, #12]	@ (800dbb0 <tcp_eff_send_mss_netif+0x38>)
 800dba2:	4804      	ldr	r0, [pc, #16]	@ (800dbb4 <tcp_eff_send_mss_netif+0x3c>)
 800dba4:	f006 feb6 	bl	8014914 <iprintf>
 800dba8:	e7ea      	b.n	800db80 <tcp_eff_send_mss_netif+0x8>
 800dbaa:	bf00      	nop
 800dbac:	08016eb0 	.word	0x08016eb0
 800dbb0:	08017494 	.word	0x08017494
 800dbb4:	08015bd0 	.word	0x08015bd0

0800dbb8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800dbb8:	b308      	cbz	r0, 800dbfe <tcp_netif_ip_addr_changed+0x46>
{
 800dbba:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800dbbc:	6803      	ldr	r3, [r0, #0]
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	b903      	cbnz	r3, 800dbc4 <tcp_netif_ip_addr_changed+0xc>
}
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dbc4:	4b0e      	ldr	r3, [pc, #56]	@ (800dc00 <tcp_netif_ip_addr_changed+0x48>)
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	6819      	ldr	r1, [r3, #0]
 800dbca:	f7ff fcd1 	bl	800d570 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dbce:	4b0d      	ldr	r3, [pc, #52]	@ (800dc04 <tcp_netif_ip_addr_changed+0x4c>)
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	6819      	ldr	r1, [r3, #0]
 800dbd4:	f7ff fccc 	bl	800d570 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800dbd8:	2d00      	cmp	r5, #0
 800dbda:	d0f2      	beq.n	800dbc2 <tcp_netif_ip_addr_changed+0xa>
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d0ef      	beq.n	800dbc2 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbe2:	4b09      	ldr	r3, [pc, #36]	@ (800dc08 <tcp_netif_ip_addr_changed+0x50>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0eb      	beq.n	800dbc2 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dbea:	6819      	ldr	r1, [r3, #0]
 800dbec:	6822      	ldr	r2, [r4, #0]
 800dbee:	4291      	cmp	r1, r2
 800dbf0:	d101      	bne.n	800dbf6 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dbf2:	682a      	ldr	r2, [r5, #0]
 800dbf4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1f6      	bne.n	800dbea <tcp_netif_ip_addr_changed+0x32>
}
 800dbfc:	bd38      	pop	{r3, r4, r5, pc}
 800dbfe:	4770      	bx	lr
 800dc00:	2401070c 	.word	0x2401070c
 800dc04:	24010714 	.word	0x24010714
 800dc08:	24010710 	.word	0x24010710

0800dc0c <tcp_free_ooseq>:
{
 800dc0c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800dc0e:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 800dc10:	b16c      	cbz	r4, 800dc2e <tcp_free_ooseq+0x22>
 800dc12:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800dc14:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800dc16:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800dc18:	6868      	ldr	r0, [r5, #4]
 800dc1a:	b108      	cbz	r0, 800dc20 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800dc1c:	f7fe fa8a 	bl	800c134 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800dc20:	4629      	mov	r1, r5
 800dc22:	2003      	movs	r0, #3
 800dc24:	f7fd ff52 	bl	800bacc <memp_free>
  while (seg != NULL) {
 800dc28:	2c00      	cmp	r4, #0
 800dc2a:	d1f3      	bne.n	800dc14 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800dc2c:	6774      	str	r4, [r6, #116]	@ 0x74
}
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}

0800dc30 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800dc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800dc32:	4605      	mov	r5, r0
{
 800dc34:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d035      	beq.n	800dca6 <tcp_oos_insert_segment+0x76>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dc3a:	68eb      	ldr	r3, [r5, #12]
 800dc3c:	8998      	ldrh	r0, [r3, #12]
 800dc3e:	f7fd fb5f 	bl	800b300 <lwip_htons>
 800dc42:	07c2      	lsls	r2, r0, #31
 800dc44:	d429      	bmi.n	800dc9a <tcp_oos_insert_segment+0x6a>
 800dc46:	4e1c      	ldr	r6, [pc, #112]	@ (800dcb8 <tcp_oos_insert_segment+0x88>)
 800dc48:	e005      	b.n	800dc56 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800dc4a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f7fe ff95 	bl	800cb7c <tcp_seg_free>
      next = next->next;
 800dc52:	463c      	mov	r4, r7
    while (next &&
 800dc54:	b327      	cbz	r7, 800dca0 <tcp_oos_insert_segment+0x70>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800dc56:	68e1      	ldr	r1, [r4, #12]
 800dc58:	892b      	ldrh	r3, [r5, #8]
 800dc5a:	6837      	ldr	r7, [r6, #0]
 800dc5c:	6848      	ldr	r0, [r1, #4]
 800dc5e:	443b      	add	r3, r7
 800dc60:	8922      	ldrh	r2, [r4, #8]
 800dc62:	1a1b      	subs	r3, r3, r0
 800dc64:	1a9a      	subs	r2, r3, r2
    while (next &&
 800dc66:	2a00      	cmp	r2, #0
 800dc68:	db0d      	blt.n	800dc86 <tcp_oos_insert_segment+0x56>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dc6a:	8988      	ldrh	r0, [r1, #12]
 800dc6c:	f7fd fb48 	bl	800b300 <lwip_htons>
 800dc70:	07c3      	lsls	r3, r0, #31
 800dc72:	d5ea      	bpl.n	800dc4a <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dc74:	68eb      	ldr	r3, [r5, #12]
 800dc76:	2001      	movs	r0, #1
 800dc78:	899f      	ldrh	r7, [r3, #12]
 800dc7a:	f7fd fb41 	bl	800b300 <lwip_htons>
 800dc7e:	68eb      	ldr	r3, [r5, #12]
 800dc80:	4307      	orrs	r7, r0
 800dc82:	819f      	strh	r7, [r3, #12]
 800dc84:	e7e1      	b.n	800dc4a <tcp_oos_insert_segment+0x1a>
    }
    if (next &&
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	dd05      	ble.n	800dc96 <tcp_oos_insert_segment+0x66>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dc8a:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800dc8c:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dc8e:	b289      	uxth	r1, r1
 800dc90:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dc92:	f7fe fb67 	bl	800c364 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dc96:	602c      	str	r4, [r5, #0]
}
 800dc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7fe ff5c 	bl	800cb58 <tcp_segs_free>
    next = NULL;
 800dca0:	2400      	movs	r4, #0
  cseg->next = next;
 800dca2:	602c      	str	r4, [r5, #0]
}
 800dca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800dca6:	4b05      	ldr	r3, [pc, #20]	@ (800dcbc <tcp_oos_insert_segment+0x8c>)
 800dca8:	f240 421f 	movw	r2, #1055	@ 0x41f
 800dcac:	4904      	ldr	r1, [pc, #16]	@ (800dcc0 <tcp_oos_insert_segment+0x90>)
 800dcae:	4805      	ldr	r0, [pc, #20]	@ (800dcc4 <tcp_oos_insert_segment+0x94>)
 800dcb0:	f006 fe30 	bl	8014914 <iprintf>
 800dcb4:	e7c1      	b.n	800dc3a <tcp_oos_insert_segment+0xa>
 800dcb6:	bf00      	nop
 800dcb8:	24010730 	.word	0x24010730
 800dcbc:	080174e4 	.word	0x080174e4
 800dcc0:	08017518 	.word	0x08017518
 800dcc4:	08015bd0 	.word	0x08015bd0

0800dcc8 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800dcc8:	4b0d      	ldr	r3, [pc, #52]	@ (800dd00 <tcp_input_delayed_close+0x38>)
{
 800dcca:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800dccc:	781b      	ldrb	r3, [r3, #0]
{
 800dcce:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800dcd0:	f013 0010 	ands.w	r0, r3, #16
 800dcd4:	d100      	bne.n	800dcd8 <tcp_input_delayed_close+0x10>
}
 800dcd6:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dcd8:	8b63      	ldrh	r3, [r4, #26]
 800dcda:	06db      	lsls	r3, r3, #27
 800dcdc:	d406      	bmi.n	800dcec <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dcde:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800dce2:	b11b      	cbz	r3, 800dcec <tcp_input_delayed_close+0x24>
 800dce4:	f06f 010e 	mvn.w	r1, #14
 800dce8:	6920      	ldr	r0, [r4, #16]
 800dcea:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dcec:	4621      	mov	r1, r4
 800dcee:	4805      	ldr	r0, [pc, #20]	@ (800dd04 <tcp_input_delayed_close+0x3c>)
 800dcf0:	f7ff faf4 	bl	800d2dc <tcp_pcb_remove>
    tcp_free(pcb);
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f7fe fdd5 	bl	800c8a4 <tcp_free>
 800dcfa:	2001      	movs	r0, #1
}
 800dcfc:	bd10      	pop	{r4, pc}
 800dcfe:	bf00      	nop
 800dd00:	24010724 	.word	0x24010724
 800dd04:	2401070c 	.word	0x2401070c

0800dd08 <tcp_free_acked_segments.constprop.0>:
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dd08:	2900      	cmp	r1, #0
 800dd0a:	d054      	beq.n	800ddb6 <tcp_free_acked_segments.constprop.0+0xae>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800dd0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	4682      	mov	sl, r0
 800dd12:	460d      	mov	r5, r1
 800dd14:	4690      	mov	r8, r2
 800dd16:	4e29      	ldr	r6, [pc, #164]	@ (800ddbc <tcp_free_acked_segments.constprop.0+0xb4>)
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd18:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800ddc8 <tcp_free_acked_segments.constprop.0+0xc0>
 800dd1c:	4f28      	ldr	r7, [pc, #160]	@ (800ddc0 <tcp_free_acked_segments.constprop.0+0xb8>)
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dd1e:	68eb      	ldr	r3, [r5, #12]
 800dd20:	6858      	ldr	r0, [r3, #4]
 800dd22:	f7fd faf1 	bl	800b308 <lwip_htonl>
 800dd26:	68eb      	ldr	r3, [r5, #12]
 800dd28:	4604      	mov	r4, r0
 800dd2a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800dd2e:	8998      	ldrh	r0, [r3, #12]
 800dd30:	f7fd fae6 	bl	800b300 <lwip_htons>
 800dd34:	6833      	ldr	r3, [r6, #0]
 800dd36:	f010 0003 	ands.w	r0, r0, #3
 800dd3a:	eba4 0403 	sub.w	r4, r4, r3
 800dd3e:	bf18      	it	ne
 800dd40:	2001      	movne	r0, #1
 800dd42:	445c      	add	r4, fp
 800dd44:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	dc32      	bgt.n	800ddb0 <tcp_free_acked_segments.constprop.0+0xa8>
    seg_list = seg_list->next;
 800dd4a:	e9d5 b000 	ldrd	fp, r0, [r5]
    clen = pbuf_clen(next->p);
 800dd4e:	f7fe fb83 	bl	800c458 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd52:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800dd56:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd58:	4298      	cmp	r0, r3
 800dd5a:	d81f      	bhi.n	800dd9c <tcp_free_acked_segments.constprop.0+0x94>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd5c:	4919      	ldr	r1, [pc, #100]	@ (800ddc4 <tcp_free_acked_segments.constprop.0+0xbc>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dd5e:	1b1b      	subs	r3, r3, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd60:	892a      	ldrh	r2, [r5, #8]
    tcp_seg_free(next);
 800dd62:	4628      	mov	r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd64:	880c      	ldrh	r4, [r1, #0]
 800dd66:	465d      	mov	r5, fp
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dd68:	f8aa 3066 	strh.w	r3, [sl, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd6c:	1913      	adds	r3, r2, r4
 800dd6e:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800dd70:	f7fe ff04 	bl	800cb7c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dd74:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800dd78:	b113      	cbz	r3, 800dd80 <tcp_free_acked_segments.constprop.0+0x78>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dd7a:	ea58 030b 	orrs.w	r3, r8, fp
 800dd7e:	d003      	beq.n	800dd88 <tcp_free_acked_segments.constprop.0+0x80>
  while (seg_list != NULL &&
 800dd80:	f1bb 0f00 	cmp.w	fp, #0
 800dd84:	d1cb      	bne.n	800dd1e <tcp_free_acked_segments.constprop.0+0x16>
 800dd86:	e006      	b.n	800dd96 <tcp_free_acked_segments.constprop.0+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dd88:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc8 <tcp_free_acked_segments.constprop.0+0xc0>)
 800dd8a:	f240 4261 	movw	r2, #1121	@ 0x461
 800dd8e:	490f      	ldr	r1, [pc, #60]	@ (800ddcc <tcp_free_acked_segments.constprop.0+0xc4>)
 800dd90:	480b      	ldr	r0, [pc, #44]	@ (800ddc0 <tcp_free_acked_segments.constprop.0+0xb8>)
 800dd92:	f006 fdbf 	bl	8014914 <iprintf>
  while (seg_list != NULL &&
 800dd96:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800dd98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd9c:	464b      	mov	r3, r9
 800dd9e:	f240 4257 	movw	r2, #1111	@ 0x457
 800dda2:	490b      	ldr	r1, [pc, #44]	@ (800ddd0 <tcp_free_acked_segments.constprop.0+0xc8>)
 800dda4:	4638      	mov	r0, r7
 800dda6:	f006 fdb5 	bl	8014914 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ddaa:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800ddae:	e7d5      	b.n	800dd5c <tcp_free_acked_segments.constprop.0+0x54>
 800ddb0:	4628      	mov	r0, r5
}
 800ddb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	2401072c 	.word	0x2401072c
 800ddc0:	08015bd0 	.word	0x08015bd0
 800ddc4:	24010728 	.word	0x24010728
 800ddc8:	080174e4 	.word	0x080174e4
 800ddcc:	08017568 	.word	0x08017568
 800ddd0:	08017540 	.word	0x08017540

0800ddd4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ddd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ddd8:	7d03      	ldrb	r3, [r0, #20]
{
 800ddda:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800dddc:	2b03      	cmp	r3, #3
 800ddde:	f240 8124 	bls.w	800e02a <tcp_receive+0x256>

  if (flags & TCP_ACK) {
 800dde2:	4bb6      	ldr	r3, [pc, #728]	@ (800e0bc <tcp_receive+0x2e8>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dde4:	4eb6      	ldr	r6, [pc, #728]	@ (800e0c0 <tcp_receive+0x2ec>)
  if (flags & TCP_ACK) {
 800dde6:	781a      	ldrb	r2, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dde8:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 800ddea:	06d0      	lsls	r0, r2, #27
 800ddec:	f100 80a3 	bmi.w	800df36 <tcp_receive+0x162>
 800ddf0:	4fb4      	ldr	r7, [pc, #720]	@ (800e0c4 <tcp_receive+0x2f0>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ddf2:	8839      	ldrh	r1, [r7, #0]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ddf4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ddf6:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ddf8:	2900      	cmp	r1, #0
 800ddfa:	f000 808c 	beq.w	800df16 <tcp_receive+0x142>
 800ddfe:	7d20      	ldrb	r0, [r4, #20]
 800de00:	2806      	cmp	r0, #6
 800de02:	f200 8088 	bhi.w	800df16 <tcp_receive+0x142>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800de06:	eba2 0803 	sub.w	r8, r2, r3
 800de0a:	f1b8 0f01 	cmp.w	r8, #1
 800de0e:	d406      	bmi.n	800de1e <tcp_receive+0x4a>
 800de10:	f1c3 0001 	rsb	r0, r3, #1
 800de14:	1a41      	subs	r1, r0, r1
 800de16:	4411      	add	r1, r2
 800de18:	2900      	cmp	r1, #0
 800de1a:	f340 81d8 	ble.w	800e1ce <tcp_receive+0x3fa>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800de1e:	1a99      	subs	r1, r3, r2
 800de20:	2900      	cmp	r1, #0
 800de22:	f2c0 81cf 	blt.w	800e1c4 <tcp_receive+0x3f0>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de26:	f103 0e01 	add.w	lr, r3, #1
 800de2a:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800de2c:	ebae 0102 	sub.w	r1, lr, r2
 800de30:	1a09      	subs	r1, r1, r0
 800de32:	2900      	cmp	r1, #0
 800de34:	dc43      	bgt.n	800debe <tcp_receive+0xea>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800de36:	429a      	cmp	r2, r3
 800de38:	f000 8454 	beq.w	800e6e4 <tcp_receive+0x910>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800de3c:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800de3e:	2d00      	cmp	r5, #0
 800de40:	f000 8375 	beq.w	800e52e <tcp_receive+0x75a>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 800de44:	68e8      	ldr	r0, [r5, #12]
 800de46:	6842      	ldr	r2, [r0, #4]
 800de48:	429a      	cmp	r2, r3
 800de4a:	f000 8350 	beq.w	800e4ee <tcp_receive+0x71a>
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800de4e:	1a99      	subs	r1, r3, r2
 800de50:	2900      	cmp	r1, #0
 800de52:	f2c0 83b9 	blt.w	800e5c8 <tcp_receive+0x7f4>
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800de56:	f103 3cff 	add.w	ip, r3, #4294967295
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800de5a:	46a8      	mov	r8, r5
 800de5c:	682d      	ldr	r5, [r5, #0]
 800de5e:	2d00      	cmp	r5, #0
 800de60:	f000 814d 	beq.w	800e0fe <tcp_receive+0x32a>
            if (seqno == next->tcphdr->seqno) {
 800de64:	68e8      	ldr	r0, [r5, #12]
 800de66:	6842      	ldr	r2, [r0, #4]
 800de68:	429a      	cmp	r2, r3
 800de6a:	f000 8342 	beq.w	800e4f2 <tcp_receive+0x71e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800de6e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800de72:	6849      	ldr	r1, [r1, #4]
 800de74:	ebac 0101 	sub.w	r1, ip, r1
 800de78:	2900      	cmp	r1, #0
 800de7a:	dbee      	blt.n	800de5a <tcp_receive+0x86>
 800de7c:	ebae 0102 	sub.w	r1, lr, r2
 800de80:	2900      	cmp	r1, #0
 800de82:	dcea      	bgt.n	800de5a <tcp_receive+0x86>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800de84:	4890      	ldr	r0, [pc, #576]	@ (800e0c8 <tcp_receive+0x2f4>)
 800de86:	f7fe fe87 	bl	800cb98 <tcp_seg_copy>
                  if (cseg != NULL) {
 800de8a:	4607      	mov	r7, r0
 800de8c:	b1b8      	cbz	r0, 800debe <tcp_receive+0xea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800de8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de92:	6832      	ldr	r2, [r6, #0]
 800de94:	6859      	ldr	r1, [r3, #4]
 800de96:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800de9a:	440b      	add	r3, r1
 800de9c:	1a9b      	subs	r3, r3, r2
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	dd07      	ble.n	800deb2 <tcp_receive+0xde>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dea2:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800dea4:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dea8:	b291      	uxth	r1, r2
 800deaa:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800deae:	f7fe fa59 	bl	800c364 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800deb2:	4629      	mov	r1, r5
 800deb4:	4638      	mov	r0, r7
                    prev->next = cseg;
 800deb6:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800deba:	f7ff feb9 	bl	800dc30 <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800debe:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 800dec0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800dec4:	f002 b9e4 	b.w	8010290 <tcp_send_empty_ack>
      if (tcplen == 0) {
 800dec8:	4f7e      	ldr	r7, [pc, #504]	@ (800e0c4 <tcp_receive+0x2f0>)
 800deca:	8839      	ldrh	r1, [r7, #0]
 800decc:	2900      	cmp	r1, #0
 800dece:	f040 810b 	bne.w	800e0e8 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ded2:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ded4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ded6:	f8b4 c060 	ldrh.w	ip, [r4, #96]	@ 0x60
 800deda:	4461      	add	r1, ip
 800dedc:	4571      	cmp	r1, lr
 800dede:	f040 8103 	bne.w	800e0e8 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 800dee2:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
            if (pcb->lastack == ackno) {
 800dee4:	0409      	lsls	r1, r1, #16
 800dee6:	f100 80ff 	bmi.w	800e0e8 <tcp_receive+0x314>
 800deea:	4290      	cmp	r0, r2
 800deec:	f040 80fc 	bne.w	800e0e8 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800def0:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 800def4:	29ff      	cmp	r1, #255	@ 0xff
 800def6:	f000 8372 	beq.w	800e5de <tcp_receive+0x80a>
                ++pcb->dupacks;
 800defa:	3101      	adds	r1, #1
 800defc:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800defe:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800df00:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800df04:	f200 836b 	bhi.w	800e5de <tcp_receive+0x80a>
              if (pcb->dupacks >= 3) {
 800df08:	f000 8374 	beq.w	800e5f4 <tcp_receive+0x820>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800df0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df0e:	2900      	cmp	r1, #0
 800df10:	f040 80ae 	bne.w	800e070 <tcp_receive+0x29c>
 800df14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800df16:	1a99      	subs	r1, r3, r2
 800df18:	2900      	cmp	r1, #0
 800df1a:	db06      	blt.n	800df2a <tcp_receive+0x156>
 800df1c:	f1c2 0201 	rsb	r2, r2, #1
 800df20:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800df22:	1a52      	subs	r2, r2, r1
 800df24:	441a      	add	r2, r3
 800df26:	2a00      	cmp	r2, #0
 800df28:	dd03      	ble.n	800df32 <tcp_receive+0x15e>
      tcp_ack_now(pcb);
 800df2a:	8b63      	ldrh	r3, [r4, #26]
 800df2c:	f043 0302 	orr.w	r3, r3, #2
 800df30:	8363      	strh	r3, [r4, #26]
}
 800df32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800df36:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	@ 0x54
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800df3a:	4d64      	ldr	r5, [pc, #400]	@ (800e0cc <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800df3c:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800df3e:	f8b4 e060 	ldrh.w	lr, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800df42:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800df44:	2800      	cmp	r0, #0
 800df46:	db7c      	blt.n	800e042 <tcp_receive+0x26e>
 800df48:	4299      	cmp	r1, r3
 800df4a:	d076      	beq.n	800e03a <tcp_receive+0x266>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800df4c:	4594      	cmp	ip, r2
 800df4e:	f000 80cf 	beq.w	800e0f0 <tcp_receive+0x31c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800df52:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800df54:	1a11      	subs	r1, r2, r0
 800df56:	2900      	cmp	r1, #0
 800df58:	ddb6      	ble.n	800dec8 <tcp_receive+0xf4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df5a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	dc7d      	bgt.n	800e05e <tcp_receive+0x28a>
      if (pcb->flags & TF_INFR) {
 800df62:	8b63      	ldrh	r3, [r4, #26]
 800df64:	0758      	lsls	r0, r3, #29
 800df66:	d509      	bpl.n	800df7c <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800df68:	f023 0304 	bic.w	r3, r3, #4
 800df6c:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800df6e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 800df72:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800df76:	2300      	movs	r3, #0
 800df78:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800df7c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800df80:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800df82:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800df84:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800df88:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800df8a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 800df8e:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800df90:	f04f 0300 	mov.w	r3, #0
 800df94:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 800df98:	d913      	bls.n	800dfc2 <tcp_receive+0x1ee>
        if (pcb->cwnd < pcb->ssthresh) {
 800df9a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800df9e:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800dfa0:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	f200 81af 	bhi.w	800e308 <tcp_receive+0x534>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dfaa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800dfae:	4411      	add	r1, r2
 800dfb0:	b289      	uxth	r1, r1
 800dfb2:	428a      	cmp	r2, r1
 800dfb4:	f200 828b 	bhi.w	800e4ce <tcp_receive+0x6fa>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dfb8:	428b      	cmp	r3, r1
 800dfba:	f240 828a 	bls.w	800e4d2 <tcp_receive+0x6fe>
 800dfbe:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800dfc8:	f7ff fe9e 	bl	800dd08 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dfcc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dfce:	4602      	mov	r2, r0
 800dfd0:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7ff fe98 	bl	800dd08 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800dfd8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dfda:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 800dfdc:	fab2 f382 	clz	r3, r2
 800dfe0:	095b      	lsrs	r3, r3, #5
 800dfe2:	425b      	negs	r3, r3
 800dfe4:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800dfea:	2800      	cmp	r0, #0
 800dfec:	f000 8189 	beq.w	800e302 <tcp_receive+0x52e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800dff0:	4b37      	ldr	r3, [pc, #220]	@ (800e0d0 <tcp_receive+0x2fc>)
 800dff2:	8819      	ldrh	r1, [r3, #0]
 800dff4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800dff8:	440b      	add	r3, r1
 800dffa:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 800dffe:	8b63      	ldrh	r3, [r4, #26]
 800e000:	0519      	lsls	r1, r3, #20
 800e002:	f140 80dd 	bpl.w	800e1c0 <tcp_receive+0x3ec>
        if (pcb->unacked == NULL) {
 800e006:	2a00      	cmp	r2, #0
 800e008:	f000 8195 	beq.w	800e336 <tcp_receive+0x562>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e00c:	68d3      	ldr	r3, [r2, #12]
 800e00e:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800e010:	6858      	ldr	r0, [r3, #4]
 800e012:	f7fd f979 	bl	800b308 <lwip_htonl>
 800e016:	1a3f      	subs	r7, r7, r0
 800e018:	2f00      	cmp	r7, #0
 800e01a:	f300 80d1 	bgt.w	800e1c0 <tcp_receive+0x3ec>
          tcp_clear_flags(pcb, TF_RTO);
 800e01e:	8b63      	ldrh	r3, [r4, #26]
 800e020:	4f28      	ldr	r7, [pc, #160]	@ (800e0c4 <tcp_receive+0x2f0>)
 800e022:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e026:	8363      	strh	r3, [r4, #26]
 800e028:	e01d      	b.n	800e066 <tcp_receive+0x292>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e02a:	4b2a      	ldr	r3, [pc, #168]	@ (800e0d4 <tcp_receive+0x300>)
 800e02c:	f240 427c 	movw	r2, #1148	@ 0x47c
 800e030:	4929      	ldr	r1, [pc, #164]	@ (800e0d8 <tcp_receive+0x304>)
 800e032:	482a      	ldr	r0, [pc, #168]	@ (800e0dc <tcp_receive+0x308>)
 800e034:	f006 fc6e 	bl	8014914 <iprintf>
 800e038:	e6d3      	b.n	800dde2 <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e03a:	ebac 0102 	sub.w	r1, ip, r2
 800e03e:	2900      	cmp	r1, #0
 800e040:	da84      	bge.n	800df4c <tcp_receive+0x178>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e042:	4927      	ldr	r1, [pc, #156]	@ (800e0e0 <tcp_receive+0x30c>)
 800e044:	6809      	ldr	r1, [r1, #0]
 800e046:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e048:	f8b4 0062 	ldrh.w	r0, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e04c:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e050:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 800e052:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e056:	bf38      	it	cc
 800e058:	f8a4 1062 	strhcc.w	r1, [r4, #98]	@ 0x62
      pcb->snd_wl1 = seqno;
 800e05c:	e779      	b.n	800df52 <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 800e05e:	4620      	mov	r0, r4
 800e060:	4f18      	ldr	r7, [pc, #96]	@ (800e0c4 <tcp_receive+0x2f0>)
 800e062:	f002 f915 	bl	8010290 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e066:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e068:	2900      	cmp	r1, #0
 800e06a:	f43f aec2 	beq.w	800ddf2 <tcp_receive+0x1e>
 800e06e:	682a      	ldr	r2, [r5, #0]
 800e070:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e072:	1a9b      	subs	r3, r3, r2
 800e074:	2b00      	cmp	r3, #0
 800e076:	f6bf aebc 	bge.w	800ddf2 <tcp_receive+0x1e>
      m = (s16_t)(m - (pcb->sa >> 3));
 800e07a:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e07e:	b289      	uxth	r1, r1
 800e080:	4b18      	ldr	r3, [pc, #96]	@ (800e0e4 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800e082:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e086:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800e088:	1a2b      	subs	r3, r5, r0
 800e08a:	1a5b      	subs	r3, r3, r1
 800e08c:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800e08e:	441a      	add	r2, r3
      if (m < 0) {
 800e090:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800e094:	b212      	sxth	r2, r2
 800e096:	87a2      	strh	r2, [r4, #60]	@ 0x3c
      if (m < 0) {
 800e098:	d002      	beq.n	800e0a0 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 800e09a:	1b40      	subs	r0, r0, r5
 800e09c:	4401      	add	r1, r0
 800e09e:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800e0a0:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	@ 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e0a4:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800e0a8:	440b      	add	r3, r1
 800e0aa:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e0ac:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800e0b0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rttest = 0;
 800e0b2:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e0b4:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 800e0b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0ba:	e69a      	b.n	800ddf2 <tcp_receive+0x1e>
 800e0bc:	24010725 	.word	0x24010725
 800e0c0:	24010730 	.word	0x24010730
 800e0c4:	24010726 	.word	0x24010726
 800e0c8:	24010744 	.word	0x24010744
 800e0cc:	2401072c 	.word	0x2401072c
 800e0d0:	24010728 	.word	0x24010728
 800e0d4:	080174e4 	.word	0x080174e4
 800e0d8:	08017588 	.word	0x08017588
 800e0dc:	08015bd0 	.word	0x08015bd0
 800e0e0:	24010740 	.word	0x24010740
 800e0e4:	24010718 	.word	0x24010718
        pcb->dupacks = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0ee:	e7ba      	b.n	800e066 <tcp_receive+0x292>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e0f0:	49a2      	ldr	r1, [pc, #648]	@ (800e37c <tcp_receive+0x5a8>)
 800e0f2:	6809      	ldr	r1, [r1, #0]
 800e0f4:	89c9      	ldrh	r1, [r1, #14]
 800e0f6:	458e      	cmp	lr, r1
 800e0f8:	f4bf af2b 	bcs.w	800df52 <tcp_receive+0x17e>
 800e0fc:	e7a4      	b.n	800e048 <tcp_receive+0x274>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e0fe:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800e100:	2a00      	cmp	r2, #0
 800e102:	f77f aedc 	ble.w	800debe <tcp_receive+0xea>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e106:	8980      	ldrh	r0, [r0, #12]
 800e108:	f7fd f8fa 	bl	800b300 <lwip_htons>
 800e10c:	07c1      	lsls	r1, r0, #31
 800e10e:	f53f aed6 	bmi.w	800debe <tcp_receive+0xea>
                next->next = tcp_seg_copy(&inseg);
 800e112:	489b      	ldr	r0, [pc, #620]	@ (800e380 <tcp_receive+0x5ac>)
 800e114:	f7fe fd40 	bl	800cb98 <tcp_seg_copy>
 800e118:	f8c8 0000 	str.w	r0, [r8]
                if (next->next != NULL) {
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f43f aece 	beq.w	800debe <tcp_receive+0xea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e122:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e126:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800e12a:	6859      	ldr	r1, [r3, #4]
 800e12c:	6833      	ldr	r3, [r6, #0]
 800e12e:	440a      	add	r2, r1
 800e130:	1ad2      	subs	r2, r2, r3
 800e132:	2a00      	cmp	r2, #0
 800e134:	dd07      	ble.n	800e146 <tcp_receive+0x372>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e136:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800e138:	f8d8 0004 	ldr.w	r0, [r8, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e13c:	b299      	uxth	r1, r3
 800e13e:	f8a8 1008 	strh.w	r1, [r8, #8]
                    pbuf_realloc(next->p, next->len);
 800e142:	f7fe f90f 	bl	800c364 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e146:	6832      	ldr	r2, [r6, #0]
 800e148:	883b      	ldrh	r3, [r7, #0]
 800e14a:	4413      	add	r3, r2
 800e14c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e14e:	1a9b      	subs	r3, r3, r2
 800e150:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	2b00      	cmp	r3, #0
 800e156:	f77f aeb2 	ble.w	800debe <tcp_receive+0xea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e15a:	f8d8 3000 	ldr.w	r3, [r8]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	8998      	ldrh	r0, [r3, #12]
 800e162:	f7fd f8cd 	bl	800b300 <lwip_htons>
 800e166:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e168:	f8d8 3000 	ldr.w	r3, [r8]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e16c:	f100 82a8 	bmi.w	800e6c0 <tcp_receive+0x8ec>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e170:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800e172:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800e174:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e176:	1a89      	subs	r1, r1, r2
 800e178:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e17a:	4411      	add	r1, r2
 800e17c:	b289      	uxth	r1, r1
 800e17e:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e180:	f7fe f8f0 	bl	800c364 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e184:	f8d8 3000 	ldr.w	r3, [r8]
 800e188:	891d      	ldrh	r5, [r3, #8]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	8998      	ldrh	r0, [r3, #12]
 800e18e:	f7fd f8b7 	bl	800b300 <lwip_htons>
 800e192:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e196:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800e198:	bf18      	it	ne
 800e19a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e19c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800e19e:	442b      	add	r3, r5
 800e1a0:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e1a2:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800e1a4:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e1a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e1a8:	4413      	add	r3, r2
 800e1aa:	4299      	cmp	r1, r3
 800e1ac:	f43f ae87 	beq.w	800debe <tcp_receive+0xea>
 800e1b0:	4b74      	ldr	r3, [pc, #464]	@ (800e384 <tcp_receive+0x5b0>)
 800e1b2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800e1b6:	4974      	ldr	r1, [pc, #464]	@ (800e388 <tcp_receive+0x5b4>)
 800e1b8:	4874      	ldr	r0, [pc, #464]	@ (800e38c <tcp_receive+0x5b8>)
 800e1ba:	f006 fbab 	bl	8014914 <iprintf>
 800e1be:	e67e      	b.n	800debe <tcp_receive+0xea>
 800e1c0:	4f73      	ldr	r7, [pc, #460]	@ (800e390 <tcp_receive+0x5bc>)
 800e1c2:	e750      	b.n	800e066 <tcp_receive+0x292>
        tcp_ack_now(pcb);
 800e1c4:	8b63      	ldrh	r3, [r4, #26]
 800e1c6:	f043 0302 	orr.w	r3, r3, #2
 800e1ca:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e1cc:	e677      	b.n	800debe <tcp_receive+0xea>
      struct pbuf *p = inseg.p;
 800e1ce:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 800e380 <tcp_receive+0x5ac>
 800e1d2:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e1d6:	2d00      	cmp	r5, #0
 800e1d8:	f000 8171 	beq.w	800e4be <tcp_receive+0x6ea>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e1dc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800e1e0:	4598      	cmp	r8, r3
 800e1e2:	f200 80c3 	bhi.w	800e36c <tcp_receive+0x598>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e1e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800e1ea:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e1ee:	891a      	ldrh	r2, [r3, #8]
 800e1f0:	4542      	cmp	r2, r8
 800e1f2:	f0c0 80b0 	bcc.w	800e356 <tcp_receive+0x582>
      inseg.len -= off;
 800e1f6:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e1fa:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800e1fe:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e202:	b292      	uxth	r2, r2
      inseg.len -= off;
 800e204:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800e208:	896b      	ldrh	r3, [r5, #10]
 800e20a:	4598      	cmp	r8, r3
 800e20c:	d90a      	bls.n	800e224 <tcp_receive+0x450>
        p->len = 0;
 800e20e:	2100      	movs	r1, #0
        off -= p->len;
 800e210:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800e214:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800e216:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800e218:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800e21a:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800e21e:	896b      	ldrh	r3, [r5, #10]
 800e220:	4543      	cmp	r3, r8
 800e222:	d3f5      	bcc.n	800e210 <tcp_receive+0x43c>
      pbuf_remove_header(p, off);
 800e224:	4641      	mov	r1, r8
 800e226:	4628      	mov	r0, r5
 800e228:	f7fd ff22 	bl	800c070 <pbuf_remove_header>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e22c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e22e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e230:	f1c3 0301 	rsb	r3, r3, #1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e234:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800e238:	6032      	str	r2, [r6, #0]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e23a:	2b00      	cmp	r3, #0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e23c:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e23e:	f73f ae3e 	bgt.w	800debe <tcp_receive+0xea>
        tcplen = TCP_TCPLEN(&inseg);
 800e242:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e246:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800e24a:	8998      	ldrh	r0, [r3, #12]
 800e24c:	f7fd f858 	bl	800b300 <lwip_htons>
 800e250:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800e254:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800e256:	bf18      	it	ne
 800e258:	2301      	movne	r3, #1
 800e25a:	442b      	add	r3, r5
 800e25c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800e25e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800e260:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800e262:	f0c0 816d 	bcc.w	800e540 <tcp_receive+0x76c>
        if (pcb->ooseq != NULL) {
 800e266:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 809e 	beq.w	800e3aa <tcp_receive+0x5d6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e26e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e272:	8998      	ldrh	r0, [r3, #12]
 800e274:	f7fd f844 	bl	800b300 <lwip_htons>
 800e278:	07c2      	lsls	r2, r0, #31
 800e27a:	f100 8093 	bmi.w	800e3a4 <tcp_receive+0x5d0>
            struct tcp_seg *next = pcb->ooseq;
 800e27e:	6f65      	ldr	r5, [r4, #116]	@ 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800e280:	883a      	ldrh	r2, [r7, #0]
 800e282:	6831      	ldr	r1, [r6, #0]
            while (next &&
 800e284:	b955      	cbnz	r5, 800e29c <tcp_receive+0x4c8>
 800e286:	e1f3      	b.n	800e670 <tcp_receive+0x89c>
              next = next->next;
 800e288:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800e28c:	4628      	mov	r0, r5
 800e28e:	f7fe fc75 	bl	800cb7c <tcp_seg_free>
              next = next->next;
 800e292:	4645      	mov	r5, r8
            while (next &&
 800e294:	f1b8 0f00 	cmp.w	r8, #0
 800e298:	f000 81e8 	beq.w	800e66c <tcp_receive+0x898>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e29c:	68e8      	ldr	r0, [r5, #12]
 800e29e:	883a      	ldrh	r2, [r7, #0]
 800e2a0:	f8d6 e000 	ldr.w	lr, [r6]
 800e2a4:	892b      	ldrh	r3, [r5, #8]
 800e2a6:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800e2aa:	eb02 010e 	add.w	r1, r2, lr
 800e2ae:	4463      	add	r3, ip
 800e2b0:	1acb      	subs	r3, r1, r3
            while (next &&
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f2c0 81a2 	blt.w	800e5fc <tcp_receive+0x828>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e2b8:	8980      	ldrh	r0, [r0, #12]
 800e2ba:	f7fd f821 	bl	800b300 <lwip_htons>
 800e2be:	07c3      	lsls	r3, r0, #31
 800e2c0:	d5e2      	bpl.n	800e288 <tcp_receive+0x4b4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e2c2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e2c6:	8998      	ldrh	r0, [r3, #12]
 800e2c8:	f7fd f81a 	bl	800b300 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e2cc:	0780      	lsls	r0, r0, #30
 800e2ce:	d4db      	bmi.n	800e288 <tcp_receive+0x4b4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e2d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800e2da:	f7fd f811 	bl	800b300 <lwip_htons>
 800e2de:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e2e2:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800e2e6:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e2ea:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e2ec:	b280      	uxth	r0, r0
 800e2ee:	f7fd f807 	bl	800b300 <lwip_htons>
 800e2f2:	f010 0303 	ands.w	r3, r0, #3
 800e2f6:	bf18      	it	ne
 800e2f8:	2301      	movne	r3, #1
 800e2fa:	4498      	add	r8, r3
 800e2fc:	f8a7 8000 	strh.w	r8, [r7]
 800e300:	e7c2      	b.n	800e288 <tcp_receive+0x4b4>
        pcb->unsent_oversize = 0;
 800e302:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 800e306:	e673      	b.n	800dff0 <tcp_receive+0x21c>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e308:	8b62      	ldrh	r2, [r4, #26]
 800e30a:	f412 6f00 	tst.w	r2, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e30e:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e310:	bf0c      	ite	eq
 800e312:	2002      	moveq	r0, #2
 800e314:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e316:	fb12 f200 	smulbb	r2, r2, r0
 800e31a:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800e31c:	428a      	cmp	r2, r1
 800e31e:	bf94      	ite	ls
 800e320:	1898      	addls	r0, r3, r2
 800e322:	1858      	addhi	r0, r3, r1
 800e324:	b282      	uxth	r2, r0
 800e326:	4293      	cmp	r3, r2
 800e328:	f240 80dc 	bls.w	800e4e4 <tcp_receive+0x710>
 800e32c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e330:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800e334:	e645      	b.n	800dfc2 <tcp_receive+0x1ee>
          if ((pcb->unsent == NULL) ||
 800e336:	b148      	cbz	r0, 800e34c <tcp_receive+0x578>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e338:	68c3      	ldr	r3, [r0, #12]
 800e33a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800e33c:	6858      	ldr	r0, [r3, #4]
 800e33e:	f7fc ffe3 	bl	800b308 <lwip_htonl>
 800e342:	1a3f      	subs	r7, r7, r0
          if ((pcb->unsent == NULL) ||
 800e344:	2f00      	cmp	r7, #0
 800e346:	f73f af3b 	bgt.w	800e1c0 <tcp_receive+0x3ec>
            tcp_clear_flags(pcb, TF_RTO);
 800e34a:	8b63      	ldrh	r3, [r4, #26]
 800e34c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e350:	4f0f      	ldr	r7, [pc, #60]	@ (800e390 <tcp_receive+0x5bc>)
 800e352:	8363      	strh	r3, [r4, #26]
 800e354:	e687      	b.n	800e066 <tcp_receive+0x292>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e356:	4b0b      	ldr	r3, [pc, #44]	@ (800e384 <tcp_receive+0x5b0>)
 800e358:	f240 5297 	movw	r2, #1431	@ 0x597
 800e35c:	490d      	ldr	r1, [pc, #52]	@ (800e394 <tcp_receive+0x5c0>)
 800e35e:	480b      	ldr	r0, [pc, #44]	@ (800e38c <tcp_receive+0x5b8>)
 800e360:	f006 fad8 	bl	8014914 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e364:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e368:	891a      	ldrh	r2, [r3, #8]
 800e36a:	e744      	b.n	800e1f6 <tcp_receive+0x422>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e36c:	4b05      	ldr	r3, [pc, #20]	@ (800e384 <tcp_receive+0x5b0>)
 800e36e:	f240 5295 	movw	r2, #1429	@ 0x595
 800e372:	4909      	ldr	r1, [pc, #36]	@ (800e398 <tcp_receive+0x5c4>)
 800e374:	4805      	ldr	r0, [pc, #20]	@ (800e38c <tcp_receive+0x5b8>)
 800e376:	f006 facd 	bl	8014914 <iprintf>
 800e37a:	e734      	b.n	800e1e6 <tcp_receive+0x412>
 800e37c:	24010740 	.word	0x24010740
 800e380:	24010744 	.word	0x24010744
 800e384:	080174e4 	.word	0x080174e4
 800e388:	080175d4 	.word	0x080175d4
 800e38c:	08015bd0 	.word	0x08015bd0
 800e390:	24010726 	.word	0x24010726
 800e394:	080175c4 	.word	0x080175c4
 800e398:	080175b4 	.word	0x080175b4
              pcb->ooseq = pcb->ooseq->next;
 800e39c:	6803      	ldr	r3, [r0, #0]
 800e39e:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800e3a0:	f7fe fbec 	bl	800cb7c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e3a4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d1f8      	bne.n	800e39c <tcp_receive+0x5c8>
        pcb->rcv_nxt = seqno + tcplen;
 800e3aa:	883a      	ldrh	r2, [r7, #0]
 800e3ac:	6831      	ldr	r1, [r6, #0]
 800e3ae:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e3b0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800e3b2:	6261      	str	r1, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	f0c0 80fd 	bcc.w	800e5b4 <tcp_receive+0x7e0>
        pcb->rcv_wnd -= tcplen;
 800e3ba:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800e3bc:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800e3be:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800e3c0:	f7fe fa9a 	bl	800c8f8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800e3c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e3c8:	891a      	ldrh	r2, [r3, #8]
 800e3ca:	b122      	cbz	r2, 800e3d6 <tcp_receive+0x602>
          recv_data = inseg.p;
 800e3cc:	4ab2      	ldr	r2, [pc, #712]	@ (800e698 <tcp_receive+0x8c4>)
 800e3ce:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e3d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e3da:	8998      	ldrh	r0, [r3, #12]
 800e3dc:	f7fc ff90 	bl	800b300 <lwip_htons>
 800e3e0:	07c2      	lsls	r2, r0, #31
 800e3e2:	d504      	bpl.n	800e3ee <tcp_receive+0x61a>
          recv_flags |= TF_GOT_FIN;
 800e3e4:	4aad      	ldr	r2, [pc, #692]	@ (800e69c <tcp_receive+0x8c8>)
 800e3e6:	7813      	ldrb	r3, [r2, #0]
 800e3e8:	f043 0320 	orr.w	r3, r3, #32
 800e3ec:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800e3ee:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800e3f0:	2d00      	cmp	r5, #0
 800e3f2:	f000 8093 	beq.w	800e51c <tcp_receive+0x748>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e3f6:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800e6a4 <tcp_receive+0x8d0>
 800e3fa:	f8df 82c0 	ldr.w	r8, [pc, #704]	@ 800e6bc <tcp_receive+0x8e8>
 800e3fe:	4fa8      	ldr	r7, [pc, #672]	@ (800e6a0 <tcp_receive+0x8cc>)
 800e400:	e033      	b.n	800e46a <tcp_receive+0x696>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e402:	68eb      	ldr	r3, [r5, #12]
 800e404:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800e408:	8998      	ldrh	r0, [r3, #12]
 800e40a:	f7fc ff79 	bl	800b300 <lwip_htons>
 800e40e:	f010 0003 	ands.w	r0, r0, #3
 800e412:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800e414:	bf18      	it	ne
 800e416:	2001      	movne	r0, #1
 800e418:	4450      	add	r0, sl
 800e41a:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800e41c:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e41e:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800e420:	f7fe fa6a 	bl	800c8f8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800e424:	6869      	ldr	r1, [r5, #4]
 800e426:	890b      	ldrh	r3, [r1, #8]
 800e428:	b13b      	cbz	r3, 800e43a <tcp_receive+0x666>
            if (recv_data) {
 800e42a:	4b9b      	ldr	r3, [pc, #620]	@ (800e698 <tcp_receive+0x8c4>)
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	2800      	cmp	r0, #0
 800e430:	d05b      	beq.n	800e4ea <tcp_receive+0x716>
              pbuf_cat(recv_data, cseg->p);
 800e432:	f7fe f839 	bl	800c4a8 <pbuf_cat>
            cseg->p = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e43a:	68eb      	ldr	r3, [r5, #12]
 800e43c:	8998      	ldrh	r0, [r3, #12]
 800e43e:	f7fc ff5f 	bl	800b300 <lwip_htons>
 800e442:	07c3      	lsls	r3, r0, #31
 800e444:	d509      	bpl.n	800e45a <tcp_receive+0x686>
            recv_flags |= TF_GOT_FIN;
 800e446:	4a95      	ldr	r2, [pc, #596]	@ (800e69c <tcp_receive+0x8c8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e448:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800e44a:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e44c:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800e44e:	f043 0320 	orr.w	r3, r3, #32
 800e452:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e454:	d101      	bne.n	800e45a <tcp_receive+0x686>
              pcb->state = CLOSE_WAIT;
 800e456:	2307      	movs	r3, #7
 800e458:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800e45a:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800e45c:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800e45e:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 800e460:	f7fe fb8c 	bl	800cb7c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e464:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800e466:	2d00      	cmp	r5, #0
 800e468:	d058      	beq.n	800e51c <tcp_receive+0x748>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e46a:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800e46c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e46e:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800e470:	428b      	cmp	r3, r1
 800e472:	d153      	bne.n	800e51c <tcp_receive+0x748>
          seqno = pcb->ooseq->tcphdr->seqno;
 800e474:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e476:	8990      	ldrh	r0, [r2, #12]
 800e478:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800e47c:	f7fc ff40 	bl	800b300 <lwip_htons>
 800e480:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e482:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e486:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e48a:	bf18      	it	ne
 800e48c:	2001      	movne	r0, #1
 800e48e:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e490:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e492:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e494:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e498:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e49a:	8998      	ldrh	r0, [r3, #12]
 800e49c:	f7fc ff30 	bl	800b300 <lwip_htons>
 800e4a0:	f010 0003 	ands.w	r0, r0, #3
 800e4a4:	bf18      	it	ne
 800e4a6:	2001      	movne	r0, #1
 800e4a8:	4458      	add	r0, fp
 800e4aa:	4582      	cmp	sl, r0
 800e4ac:	d2a9      	bcs.n	800e402 <tcp_receive+0x62e>
 800e4ae:	464b      	mov	r3, r9
 800e4b0:	f240 622b 	movw	r2, #1579	@ 0x62b
 800e4b4:	4641      	mov	r1, r8
 800e4b6:	4638      	mov	r0, r7
 800e4b8:	f006 fa2c 	bl	8014914 <iprintf>
 800e4bc:	e7a1      	b.n	800e402 <tcp_receive+0x62e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e4be:	4b79      	ldr	r3, [pc, #484]	@ (800e6a4 <tcp_receive+0x8d0>)
 800e4c0:	f240 5294 	movw	r2, #1428	@ 0x594
 800e4c4:	4978      	ldr	r1, [pc, #480]	@ (800e6a8 <tcp_receive+0x8d4>)
 800e4c6:	4876      	ldr	r0, [pc, #472]	@ (800e6a0 <tcp_receive+0x8cc>)
 800e4c8:	f006 fa24 	bl	8014914 <iprintf>
 800e4cc:	e686      	b.n	800e1dc <tcp_receive+0x408>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e4ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e4d2:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e4d4:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e4d6:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e4d8:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e4dc:	b292      	uxth	r2, r2
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	f63f af24 	bhi.w	800e32c <tcp_receive+0x558>
 800e4e4:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 800e4e8:	e56b      	b.n	800dfc2 <tcp_receive+0x1ee>
              recv_data = cseg->p;
 800e4ea:	6019      	str	r1, [r3, #0]
 800e4ec:	e7a3      	b.n	800e436 <tcp_receive+0x662>
          struct tcp_seg *next, *prev = NULL;
 800e4ee:	f04f 0800 	mov.w	r8, #0
              if (inseg.len > next->len) {
 800e4f2:	486e      	ldr	r0, [pc, #440]	@ (800e6ac <tcp_receive+0x8d8>)
 800e4f4:	892b      	ldrh	r3, [r5, #8]
 800e4f6:	8902      	ldrh	r2, [r0, #8]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	f67f ace0 	bls.w	800debe <tcp_receive+0xea>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e4fe:	f7fe fb4b 	bl	800cb98 <tcp_seg_copy>
                if (cseg != NULL) {
 800e502:	2800      	cmp	r0, #0
 800e504:	f43f acdb 	beq.w	800debe <tcp_receive+0xea>
                  if (prev != NULL) {
 800e508:	f1b8 0f00 	cmp.w	r8, #0
 800e50c:	f000 80c2 	beq.w	800e694 <tcp_receive+0x8c0>
                    prev->next = cseg;
 800e510:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800e514:	4629      	mov	r1, r5
 800e516:	f7ff fb8b 	bl	800dc30 <tcp_oos_insert_segment>
 800e51a:	e4d0      	b.n	800debe <tcp_receive+0xea>
        tcp_ack(pcb);
 800e51c:	8b63      	ldrh	r3, [r4, #26]
 800e51e:	07d8      	lsls	r0, r3, #31
 800e520:	d50a      	bpl.n	800e538 <tcp_receive+0x764>
 800e522:	f023 0301 	bic.w	r3, r3, #1
 800e526:	f043 0302 	orr.w	r3, r3, #2
 800e52a:	8363      	strh	r3, [r4, #26]
 800e52c:	e501      	b.n	800df32 <tcp_receive+0x15e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e52e:	485f      	ldr	r0, [pc, #380]	@ (800e6ac <tcp_receive+0x8d8>)
 800e530:	f7fe fb32 	bl	800cb98 <tcp_seg_copy>
 800e534:	6760      	str	r0, [r4, #116]	@ 0x74
 800e536:	e4c2      	b.n	800debe <tcp_receive+0xea>
        tcp_ack(pcb);
 800e538:	f043 0301 	orr.w	r3, r3, #1
 800e53c:	8363      	strh	r3, [r4, #26]
 800e53e:	e4f8      	b.n	800df32 <tcp_receive+0x15e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e540:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e544:	8998      	ldrh	r0, [r3, #12]
 800e546:	f7fc fedb 	bl	800b300 <lwip_htons>
 800e54a:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e54c:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e550:	f100 8090 	bmi.w	800e674 <tcp_receive+0x8a0>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e554:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e556:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800e558:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e55c:	f7fc fed0 	bl	800b300 <lwip_htons>
 800e560:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800e562:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e566:	d503      	bpl.n	800e570 <tcp_receive+0x79c>
            inseg.len -= 1;
 800e568:	3901      	subs	r1, #1
 800e56a:	b289      	uxth	r1, r1
 800e56c:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800e570:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e574:	f7fd fef6 	bl	800c364 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e578:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e57c:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800e580:	8998      	ldrh	r0, [r3, #12]
 800e582:	f7fc febd 	bl	800b300 <lwip_htons>
 800e586:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e58a:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800e58c:	bf18      	it	ne
 800e58e:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e590:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800e592:	442b      	add	r3, r5
 800e594:	b29b      	uxth	r3, r3
 800e596:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e598:	4413      	add	r3, r2
 800e59a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800e59c:	440a      	add	r2, r1
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	f43f ae61 	beq.w	800e266 <tcp_receive+0x492>
 800e5a4:	4b3f      	ldr	r3, [pc, #252]	@ (800e6a4 <tcp_receive+0x8d0>)
 800e5a6:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800e5aa:	4941      	ldr	r1, [pc, #260]	@ (800e6b0 <tcp_receive+0x8dc>)
 800e5ac:	483c      	ldr	r0, [pc, #240]	@ (800e6a0 <tcp_receive+0x8cc>)
 800e5ae:	f006 f9b1 	bl	8014914 <iprintf>
 800e5b2:	e658      	b.n	800e266 <tcp_receive+0x492>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e5b4:	4b3b      	ldr	r3, [pc, #236]	@ (800e6a4 <tcp_receive+0x8d0>)
 800e5b6:	f240 6207 	movw	r2, #1543	@ 0x607
 800e5ba:	493e      	ldr	r1, [pc, #248]	@ (800e6b4 <tcp_receive+0x8e0>)
 800e5bc:	4838      	ldr	r0, [pc, #224]	@ (800e6a0 <tcp_receive+0x8cc>)
 800e5be:	f006 f9a9 	bl	8014914 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e5c2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800e5c4:	883a      	ldrh	r2, [r7, #0]
 800e5c6:	e6f8      	b.n	800e3ba <tcp_receive+0x5e6>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e5c8:	4838      	ldr	r0, [pc, #224]	@ (800e6ac <tcp_receive+0x8d8>)
 800e5ca:	f7fe fae5 	bl	800cb98 <tcp_seg_copy>
                  if (cseg != NULL) {
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	f43f ac75 	beq.w	800debe <tcp_receive+0xea>
                    tcp_oos_insert_segment(cseg, next);
 800e5d4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800e5d6:	6760      	str	r0, [r4, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e5d8:	f7ff fb2a 	bl	800dc30 <tcp_oos_insert_segment>
 800e5dc:	e46f      	b.n	800debe <tcp_receive+0xea>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e5de:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800e5e2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e5e4:	4413      	add	r3, r2
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d901      	bls.n	800e5f0 <tcp_receive+0x81c>
 800e5ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e5f0:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f001 fdc9 	bl	801018c <tcp_rexmit_fast>
      if (!found_dupack) {
 800e5fa:	e534      	b.n	800e066 <tcp_receive+0x292>
                TCP_SEQ_GT(seqno + tcplen,
 800e5fc:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800e600:	2b00      	cmp	r3, #0
 800e602:	dc01      	bgt.n	800e608 <tcp_receive+0x834>
            pcb->ooseq = next;
 800e604:	6765      	str	r5, [r4, #116]	@ 0x74
 800e606:	e6d3      	b.n	800e3b0 <tcp_receive+0x5dc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e608:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e60c:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e610:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e614:	8998      	ldrh	r0, [r3, #12]
 800e616:	f7fc fe73 	bl	800b300 <lwip_htons>
 800e61a:	0781      	lsls	r1, r0, #30
 800e61c:	d504      	bpl.n	800e628 <tcp_receive+0x854>
                inseg.len -= 1;
 800e61e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800e622:	3b01      	subs	r3, #1
 800e624:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800e628:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800e62c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e630:	f7fd fe98 	bl	800c364 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e634:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e638:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800e63c:	8998      	ldrh	r0, [r3, #12]
 800e63e:	f7fc fe5f 	bl	800b300 <lwip_htons>
 800e642:	f010 0303 	ands.w	r3, r0, #3
 800e646:	bf18      	it	ne
 800e648:	2301      	movne	r3, #1
 800e64a:	eb08 0203 	add.w	r2, r8, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e64e:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800e650:	b292      	uxth	r2, r2
 800e652:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e654:	6859      	ldr	r1, [r3, #4]
 800e656:	6833      	ldr	r3, [r6, #0]
 800e658:	4413      	add	r3, r2
 800e65a:	428b      	cmp	r3, r1
 800e65c:	d0d2      	beq.n	800e604 <tcp_receive+0x830>
 800e65e:	4b11      	ldr	r3, [pc, #68]	@ (800e6a4 <tcp_receive+0x8d0>)
 800e660:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800e664:	4914      	ldr	r1, [pc, #80]	@ (800e6b8 <tcp_receive+0x8e4>)
 800e666:	480e      	ldr	r0, [pc, #56]	@ (800e6a0 <tcp_receive+0x8cc>)
 800e668:	f006 f954 	bl	8014914 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800e66c:	883a      	ldrh	r2, [r7, #0]
 800e66e:	6831      	ldr	r1, [r6, #0]
 800e670:	4411      	add	r1, r2
 800e672:	e7c7      	b.n	800e604 <tcp_receive+0x830>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e674:	899d      	ldrh	r5, [r3, #12]
 800e676:	4628      	mov	r0, r5
 800e678:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800e67c:	f7fc fe40 	bl	800b300 <lwip_htons>
 800e680:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800e684:	f7fc fe3c 	bl	800b300 <lwip_htons>
 800e688:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e68c:	4328      	orrs	r0, r5
 800e68e:	8198      	strh	r0, [r3, #12]
 800e690:	b280      	uxth	r0, r0
 800e692:	e760      	b.n	800e556 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800e694:	6760      	str	r0, [r4, #116]	@ 0x74
 800e696:	e73d      	b.n	800e514 <tcp_receive+0x740>
 800e698:	24010720 	.word	0x24010720
 800e69c:	24010724 	.word	0x24010724
 800e6a0:	08015bd0 	.word	0x08015bd0
 800e6a4:	080174e4 	.word	0x080174e4
 800e6a8:	080175a4 	.word	0x080175a4
 800e6ac:	24010744 	.word	0x24010744
 800e6b0:	080175d4 	.word	0x080175d4
 800e6b4:	08017648 	.word	0x08017648
 800e6b8:	0801760c 	.word	0x0801760c
 800e6bc:	08017668 	.word	0x08017668
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	899d      	ldrh	r5, [r3, #12]
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800e6ca:	f7fc fe19 	bl	800b300 <lwip_htons>
 800e6ce:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800e6d2:	f7fc fe15 	bl	800b300 <lwip_htons>
 800e6d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e6da:	ea40 0205 	orr.w	r2, r0, r5
 800e6de:	68d9      	ldr	r1, [r3, #12]
 800e6e0:	818a      	strh	r2, [r1, #12]
 800e6e2:	e545      	b.n	800e170 <tcp_receive+0x39c>
 800e6e4:	f8df 9004 	ldr.w	r9, [pc, #4]	@ 800e6ec <tcp_receive+0x918>
 800e6e8:	e5ab      	b.n	800e242 <tcp_receive+0x46e>
 800e6ea:	bf00      	nop
 800e6ec:	24010744 	.word	0x24010744

0800e6f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f000 808b 	beq.w	800e812 <tcp_parseopt+0x122>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e6fc:	4b52      	ldr	r3, [pc, #328]	@ (800e848 <tcp_parseopt+0x158>)
 800e6fe:	881d      	ldrh	r5, [r3, #0]
 800e700:	2d00      	cmp	r5, #0
 800e702:	d036      	beq.n	800e772 <tcp_parseopt+0x82>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e704:	4a51      	ldr	r2, [pc, #324]	@ (800e84c <tcp_parseopt+0x15c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e706:	2300      	movs	r3, #0
 800e708:	4e51      	ldr	r6, [pc, #324]	@ (800e850 <tcp_parseopt+0x160>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e70a:	6810      	ldr	r0, [r2, #0]
 800e70c:	4619      	mov	r1, r3
 800e70e:	4a51      	ldr	r2, [pc, #324]	@ (800e854 <tcp_parseopt+0x164>)
    return opts[optidx];
 800e710:	4f51      	ldr	r7, [pc, #324]	@ (800e858 <tcp_parseopt+0x168>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e712:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e716:	8033      	strh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 800e718:	468e      	mov	lr, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e71a:	428d      	cmp	r5, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e71c:	fa1f f88e 	uxth.w	r8, lr
  u16_t optidx = tcp_optidx++;
 800e720:	f101 0201 	add.w	r2, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e724:	f240 8087 	bls.w	800e836 <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 800e728:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e72a:	b1c0      	cbz	r0, 800e75e <tcp_parseopt+0x6e>
 800e72c:	45c4      	cmp	ip, r8
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e72e:	eba2 030c 	sub.w	r3, r2, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e732:	d814      	bhi.n	800e75e <tcp_parseopt+0x6e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e734:	3b01      	subs	r3, #1
    return tcphdr_opt2[idx];
 800e736:	b2db      	uxtb	r3, r3
 800e738:	5cc3      	ldrb	r3, [r0, r3]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d014      	beq.n	800e768 <tcp_parseopt+0x78>
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d019      	beq.n	800e776 <tcp_parseopt+0x86>
 800e742:	b1ab      	cbz	r3, 800e770 <tcp_parseopt+0x80>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e744:	b108      	cbz	r0, 800e74a <tcp_parseopt+0x5a>
 800e746:	4562      	cmp	r2, ip
 800e748:	d24e      	bcs.n	800e7e8 <tcp_parseopt+0xf8>
    return opts[optidx];
 800e74a:	4b43      	ldr	r3, [pc, #268]	@ (800e858 <tcp_parseopt+0x168>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4413      	add	r3, r2
 800e750:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800e752:	2b01      	cmp	r3, #1
 800e754:	d975      	bls.n	800e842 <tcp_parseopt+0x152>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e756:	440b      	add	r3, r1
 800e758:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e7dc      	b.n	800e718 <tcp_parseopt+0x28>
    return opts[optidx];
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	4473      	add	r3, lr
 800e762:	7d1b      	ldrb	r3, [r3, #20]
      switch (opt) {
 800e764:	2b01      	cmp	r3, #1
 800e766:	d1ea      	bne.n	800e73e <tcp_parseopt+0x4e>
 800e768:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 800e76c:	4611      	mov	r1, r2
 800e76e:	e7d4      	b.n	800e71a <tcp_parseopt+0x2a>
 800e770:	8032      	strh	r2, [r6, #0]
      }
    }
  }
}
 800e772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 800e776:	1c8b      	adds	r3, r1, #2
 800e778:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e77a:	b108      	cbz	r0, 800e780 <tcp_parseopt+0x90>
 800e77c:	4562      	cmp	r2, ip
 800e77e:	d22e      	bcs.n	800e7de <tcp_parseopt+0xee>
    return opts[optidx];
 800e780:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 800e858 <tcp_parseopt+0x168>
 800e784:	f8de e000 	ldr.w	lr, [lr]
 800e788:	4472      	add	r2, lr
 800e78a:	7d12      	ldrb	r2, [r2, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e78c:	2a04      	cmp	r2, #4
 800e78e:	d156      	bne.n	800e83e <tcp_parseopt+0x14e>
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	42aa      	cmp	r2, r5
 800e794:	da53      	bge.n	800e83e <tcp_parseopt+0x14e>
  u16_t optidx = tcp_optidx++;
 800e796:	1cca      	adds	r2, r1, #3
 800e798:	3104      	adds	r1, #4
 800e79a:	b292      	uxth	r2, r2
 800e79c:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d03f      	beq.n	800e822 <tcp_parseopt+0x132>
 800e7a2:	459c      	cmp	ip, r3
 800e7a4:	d825      	bhi.n	800e7f2 <tcp_parseopt+0x102>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e7a6:	eba3 030c 	sub.w	r3, r3, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e7aa:	4594      	cmp	ip, r2
    return tcphdr_opt2[idx];
 800e7ac:	b2db      	uxtb	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e7ae:	f810 e003 	ldrb.w	lr, [r0, r3]
 800e7b2:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e7b6:	d927      	bls.n	800e808 <tcp_parseopt+0x118>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e7b8:	4b27      	ldr	r3, [pc, #156]	@ (800e858 <tcp_parseopt+0x168>)
 800e7ba:	f8d3 8000 	ldr.w	r8, [r3]
    return opts[optidx];
 800e7be:	4490      	add	r8, r2
 800e7c0:	f898 3014 	ldrb.w	r3, [r8, #20]
          mss |= tcp_get_next_optbyte();
 800e7c4:	ea43 030e 	orr.w	r3, r3, lr
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e7c8:	f240 58b3 	movw	r8, #1459	@ 0x5b3
 800e7cc:	f240 5eb4 	movw	lr, #1460	@ 0x5b4
 800e7d0:	1e5a      	subs	r2, r3, #1
 800e7d2:	b292      	uxth	r2, r2
 800e7d4:	4542      	cmp	r2, r8
 800e7d6:	bf88      	it	hi
 800e7d8:	4673      	movhi	r3, lr
 800e7da:	8663      	strh	r3, [r4, #50]	@ 0x32
          break;
 800e7dc:	e7bd      	b.n	800e75a <tcp_parseopt+0x6a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e7de:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800e7e2:	b2d2      	uxtb	r2, r2
 800e7e4:	5c82      	ldrb	r2, [r0, r2]
 800e7e6:	e7d1      	b.n	800e78c <tcp_parseopt+0x9c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e7e8:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800e7ec:	b2d2      	uxtb	r2, r2
 800e7ee:	5c83      	ldrb	r3, [r0, r2]
 800e7f0:	e7af      	b.n	800e752 <tcp_parseopt+0x62>
    return opts[optidx];
 800e7f2:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800e858 <tcp_parseopt+0x168>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e7f6:	4594      	cmp	ip, r2
    return opts[optidx];
 800e7f8:	f8de e000 	ldr.w	lr, [lr]
 800e7fc:	4473      	add	r3, lr
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e7fe:	f893 e014 	ldrb.w	lr, [r3, #20]
 800e802:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e806:	d8d7      	bhi.n	800e7b8 <tcp_parseopt+0xc8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e808:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800e80c:	b2d2      	uxtb	r2, r2
 800e80e:	5c83      	ldrb	r3, [r0, r2]
 800e810:	e7d8      	b.n	800e7c4 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e812:	4b12      	ldr	r3, [pc, #72]	@ (800e85c <tcp_parseopt+0x16c>)
 800e814:	f240 727d 	movw	r2, #1917	@ 0x77d
 800e818:	4911      	ldr	r1, [pc, #68]	@ (800e860 <tcp_parseopt+0x170>)
 800e81a:	4812      	ldr	r0, [pc, #72]	@ (800e864 <tcp_parseopt+0x174>)
 800e81c:	f006 f87a 	bl	8014914 <iprintf>
 800e820:	e76c      	b.n	800e6fc <tcp_parseopt+0xc>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e822:	f8df e034 	ldr.w	lr, [pc, #52]	@ 800e858 <tcp_parseopt+0x168>
 800e826:	f8de 8000 	ldr.w	r8, [lr]
    return opts[optidx];
 800e82a:	4443      	add	r3, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e82c:	f893 e014 	ldrb.w	lr, [r3, #20]
 800e830:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e834:	e7c3      	b.n	800e7be <tcp_parseopt+0xce>
 800e836:	2b00      	cmp	r3, #0
 800e838:	d09b      	beq.n	800e772 <tcp_parseopt+0x82>
 800e83a:	8031      	strh	r1, [r6, #0]
 800e83c:	e799      	b.n	800e772 <tcp_parseopt+0x82>
 800e83e:	8033      	strh	r3, [r6, #0]
 800e840:	e797      	b.n	800e772 <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 800e842:	3102      	adds	r1, #2
 800e844:	8031      	strh	r1, [r6, #0]
 800e846:	e794      	b.n	800e772 <tcp_parseopt+0x82>
 800e848:	2401073e 	.word	0x2401073e
 800e84c:	24010738 	.word	0x24010738
 800e850:	24010734 	.word	0x24010734
 800e854:	2401073c 	.word	0x2401073c
 800e858:	24010740 	.word	0x24010740
 800e85c:	080174e4 	.word	0x080174e4
 800e860:	08017690 	.word	0x08017690
 800e864:	08015bd0 	.word	0x08015bd0

0800e868 <tcp_input>:
{
 800e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	4604      	mov	r4, r0
 800e86e:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800e870:	f7f7 fd42 	bl	80062f8 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e874:	2c00      	cmp	r4, #0
 800e876:	f000 80d5 	beq.w	800ea24 <tcp_input+0x1bc>
  if (p->len < TCP_HLEN) {
 800e87a:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800e87c:	4e6d      	ldr	r6, [pc, #436]	@ (800ea34 <tcp_input+0x1cc>)
 800e87e:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800e880:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800e882:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800e884:	d805      	bhi.n	800e892 <tcp_input+0x2a>
  pbuf_free(p);
 800e886:	4620      	mov	r0, r4
}
 800e888:	b007      	add	sp, #28
 800e88a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800e88e:	f7fd bc51 	b.w	800c134 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e892:	4f69      	ldr	r7, [pc, #420]	@ (800ea38 <tcp_input+0x1d0>)
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6978      	ldr	r0, [r7, #20]
 800e898:	f004 ff3e 	bl	8013718 <ip4_addr_isbroadcast_u32>
 800e89c:	4605      	mov	r5, r0
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d1f1      	bne.n	800e886 <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e8a8:	2be0      	cmp	r3, #224	@ 0xe0
 800e8aa:	d0ec      	beq.n	800e886 <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e8ac:	6833      	ldr	r3, [r6, #0]
 800e8ae:	8998      	ldrh	r0, [r3, #12]
 800e8b0:	f7fc fd26 	bl	800b300 <lwip_htons>
 800e8b4:	0a81      	lsrs	r1, r0, #10
 800e8b6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e8ba:	2913      	cmp	r1, #19
 800e8bc:	d9e3      	bls.n	800e886 <tcp_input+0x1e>
 800e8be:	8923      	ldrh	r3, [r4, #8]
 800e8c0:	428b      	cmp	r3, r1
 800e8c2:	d3e0      	bcc.n	800e886 <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e8c4:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800e8c8:	8962      	ldrh	r2, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e8ca:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 800ea6c <tcp_input+0x204>
 800e8ce:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800e8d0:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea70 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800e8d4:	428a      	cmp	r2, r1
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e8d6:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800e8da:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800e8de:	f080 819d 	bcs.w	800ec1c <tcp_input+0x3b4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f000 8379 	beq.w	800efdc <tcp_input+0x774>
    pbuf_remove_header(p, TCP_HLEN);
 800e8ea:	2114      	movs	r1, #20
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f7fd fbbf 	bl	800c070 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800e8f2:	8965      	ldrh	r5, [r4, #10]
 800e8f4:	4b51      	ldr	r3, [pc, #324]	@ (800ea3c <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800e8f6:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e8f8:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800e8fc:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800e8fe:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800e900:	f7fd fbb6 	bl	800c070 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e904:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800e908:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e90a:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800e90e:	8943      	ldrh	r3, [r0, #10]
 800e910:	454b      	cmp	r3, r9
 800e912:	d3b8      	bcc.n	800e886 <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e914:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800e916:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e918:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800e91c:	f7fd fba8 	bl	800c070 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e920:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e922:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e924:	442b      	add	r3, r5
 800e926:	eba3 030a 	sub.w	r3, r3, sl
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e92e:	2a00      	cmp	r2, #0
 800e930:	f040 835b 	bne.w	800efea <tcp_input+0x782>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e934:	6822      	ldr	r2, [r4, #0]
 800e936:	8912      	ldrh	r2, [r2, #8]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d005      	beq.n	800e948 <tcp_input+0xe0>
 800e93c:	4b40      	ldr	r3, [pc, #256]	@ (800ea40 <tcp_input+0x1d8>)
 800e93e:	22e0      	movs	r2, #224	@ 0xe0
 800e940:	4940      	ldr	r1, [pc, #256]	@ (800ea44 <tcp_input+0x1dc>)
 800e942:	4841      	ldr	r0, [pc, #260]	@ (800ea48 <tcp_input+0x1e0>)
 800e944:	f005 ffe6 	bl	8014914 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e948:	6835      	ldr	r5, [r6, #0]
 800e94a:	8828      	ldrh	r0, [r5, #0]
 800e94c:	f7fc fcd8 	bl	800b300 <lwip_htons>
 800e950:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e952:	6835      	ldr	r5, [r6, #0]
 800e954:	8868      	ldrh	r0, [r5, #2]
 800e956:	f7fc fcd3 	bl	800b300 <lwip_htons>
 800e95a:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e95c:	6835      	ldr	r5, [r6, #0]
 800e95e:	6868      	ldr	r0, [r5, #4]
 800e960:	f7fc fcd2 	bl	800b308 <lwip_htonl>
 800e964:	4b39      	ldr	r3, [pc, #228]	@ (800ea4c <tcp_input+0x1e4>)
 800e966:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e968:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e96a:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e96c:	68a8      	ldr	r0, [r5, #8]
 800e96e:	f7fc fccb 	bl	800b308 <lwip_htonl>
 800e972:	4b37      	ldr	r3, [pc, #220]	@ (800ea50 <tcp_input+0x1e8>)
 800e974:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e976:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e978:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e97a:	89e8      	ldrh	r0, [r5, #14]
 800e97c:	f7fc fcc0 	bl	800b300 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800e980:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e982:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800e984:	8998      	ldrh	r0, [r3, #12]
 800e986:	f7fc fcbb 	bl	800b300 <lwip_htons>
 800e98a:	4932      	ldr	r1, [pc, #200]	@ (800ea54 <tcp_input+0x1ec>)
 800e98c:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  tcplen = p->tot_len;
 800e990:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800e992:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e994:	0781      	lsls	r1, r0, #30
 800e996:	f040 8147 	bne.w	800ec28 <tcp_input+0x3c0>
  tcplen = p->tot_len;
 800e99a:	4b2f      	ldr	r3, [pc, #188]	@ (800ea58 <tcp_input+0x1f0>)
 800e99c:	9305      	str	r3, [sp, #20]
 800e99e:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9a0:	4b2e      	ldr	r3, [pc, #184]	@ (800ea5c <tcp_input+0x1f4>)
 800e9a2:	681d      	ldr	r5, [r3, #0]
 800e9a4:	2d00      	cmp	r5, #0
 800e9a6:	f000 80e8 	beq.w	800eb7a <tcp_input+0x312>
  prev = NULL;
 800e9aa:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e9ae:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800ea40 <tcp_input+0x1d8>
 800e9b2:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800ea74 <tcp_input+0x20c>
 800e9b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ea48 <tcp_input+0x1e0>
 800e9ba:	e017      	b.n	800e9ec <tcp_input+0x184>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e9bc:	2b0a      	cmp	r3, #10
 800e9be:	d021      	beq.n	800ea04 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d028      	beq.n	800ea16 <tcp_input+0x1ae>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9c4:	7a2a      	ldrb	r2, [r5, #8]
 800e9c6:	b132      	cbz	r2, 800e9d6 <tcp_input+0x16e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e9ce:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d104      	bne.n	800e9e0 <tcp_input+0x178>
    if (pcb->remote_port == tcphdr->src &&
 800e9d6:	6833      	ldr	r3, [r6, #0]
 800e9d8:	8b29      	ldrh	r1, [r5, #24]
 800e9da:	881a      	ldrh	r2, [r3, #0]
 800e9dc:	4291      	cmp	r1, r2
 800e9de:	d04b      	beq.n	800ea78 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9e0:	68eb      	ldr	r3, [r5, #12]
 800e9e2:	46a8      	mov	r8, r5
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 80c8 	beq.w	800eb7a <tcp_input+0x312>
 800e9ea:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e9ec:	7d2b      	ldrb	r3, [r5, #20]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1e4      	bne.n	800e9bc <tcp_input+0x154>
 800e9f2:	4653      	mov	r3, sl
 800e9f4:	22fb      	movs	r2, #251	@ 0xfb
 800e9f6:	4659      	mov	r1, fp
 800e9f8:	4648      	mov	r0, r9
 800e9fa:	f005 ff8b 	bl	8014914 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e9fe:	7d2b      	ldrb	r3, [r5, #20]
 800ea00:	2b0a      	cmp	r3, #10
 800ea02:	d1dd      	bne.n	800e9c0 <tcp_input+0x158>
 800ea04:	4653      	mov	r3, sl
 800ea06:	22fc      	movs	r2, #252	@ 0xfc
 800ea08:	4915      	ldr	r1, [pc, #84]	@ (800ea60 <tcp_input+0x1f8>)
 800ea0a:	4648      	mov	r0, r9
 800ea0c:	f005 ff82 	bl	8014914 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ea10:	7d2b      	ldrb	r3, [r5, #20]
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d1d6      	bne.n	800e9c4 <tcp_input+0x15c>
 800ea16:	4653      	mov	r3, sl
 800ea18:	22fd      	movs	r2, #253	@ 0xfd
 800ea1a:	4912      	ldr	r1, [pc, #72]	@ (800ea64 <tcp_input+0x1fc>)
 800ea1c:	4648      	mov	r0, r9
 800ea1e:	f005 ff79 	bl	8014914 <iprintf>
 800ea22:	e7cf      	b.n	800e9c4 <tcp_input+0x15c>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ea24:	4b06      	ldr	r3, [pc, #24]	@ (800ea40 <tcp_input+0x1d8>)
 800ea26:	2283      	movs	r2, #131	@ 0x83
 800ea28:	490f      	ldr	r1, [pc, #60]	@ (800ea68 <tcp_input+0x200>)
 800ea2a:	4807      	ldr	r0, [pc, #28]	@ (800ea48 <tcp_input+0x1e0>)
 800ea2c:	f005 ff72 	bl	8014914 <iprintf>
 800ea30:	e723      	b.n	800e87a <tcp_input+0x12>
 800ea32:	bf00      	nop
 800ea34:	24010740 	.word	0x24010740
 800ea38:	24009c28 	.word	0x24009c28
 800ea3c:	2401073c 	.word	0x2401073c
 800ea40:	080174e4 	.word	0x080174e4
 800ea44:	080176e0 	.word	0x080176e0
 800ea48:	08015bd0 	.word	0x08015bd0
 800ea4c:	24010730 	.word	0x24010730
 800ea50:	2401072c 	.word	0x2401072c
 800ea54:	24010725 	.word	0x24010725
 800ea58:	24010726 	.word	0x24010726
 800ea5c:	2401070c 	.word	0x2401070c
 800ea60:	08017728 	.word	0x08017728
 800ea64:	08017754 	.word	0x08017754
 800ea68:	080176ac 	.word	0x080176ac
 800ea6c:	2401073e 	.word	0x2401073e
 800ea70:	24010738 	.word	0x24010738
 800ea74:	08017700 	.word	0x08017700
    if (pcb->remote_port == tcphdr->src &&
 800ea78:	885b      	ldrh	r3, [r3, #2]
 800ea7a:	8aea      	ldrh	r2, [r5, #22]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d1af      	bne.n	800e9e0 <tcp_input+0x178>
        pcb->local_port == tcphdr->dest &&
 800ea80:	686a      	ldr	r2, [r5, #4]
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d1ab      	bne.n	800e9e0 <tcp_input+0x178>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea88:	682a      	ldr	r2, [r5, #0]
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d1a7      	bne.n	800e9e0 <tcp_input+0x178>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ea90:	68eb      	ldr	r3, [r5, #12]
 800ea92:	42ab      	cmp	r3, r5
 800ea94:	f000 843d 	beq.w	800f312 <tcp_input+0xaaa>
      if (prev != NULL) {
 800ea98:	f1b8 0f00 	cmp.w	r8, #0
 800ea9c:	d009      	beq.n	800eab2 <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800ea9e:	4a6f      	ldr	r2, [pc, #444]	@ (800ec5c <tcp_input+0x3f4>)
        prev->next = pcb->next;
 800eaa0:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800eaa4:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800eaa6:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800eaa8:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eaaa:	68eb      	ldr	r3, [r5, #12]
 800eaac:	42ab      	cmp	r3, r5
 800eaae:	f000 843e 	beq.w	800f32e <tcp_input+0xac6>
    inseg.next = NULL;
 800eab2:	2300      	movs	r3, #0
 800eab4:	4f6a      	ldr	r7, [pc, #424]	@ (800ec60 <tcp_input+0x3f8>)
    recv_data = NULL;
 800eab6:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800ec7c <tcp_input+0x414>
    recv_flags = 0;
 800eaba:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800ec80 <tcp_input+0x418>
    recv_acked = 0;
 800eabe:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 800ec84 <tcp_input+0x41c>
    inseg.next = NULL;
 800eac2:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800eac4:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800eac8:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800eacc:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 800ead0:	4b64      	ldr	r3, [pc, #400]	@ (800ec64 <tcp_input+0x3fc>)
    inseg.len = p->tot_len;
 800ead2:	8922      	ldrh	r2, [r4, #8]
    if (flags & TCP_PSH) {
 800ead4:	781b      	ldrb	r3, [r3, #0]
    inseg.len = p->tot_len;
 800ead6:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800ead8:	0719      	lsls	r1, r3, #28
    inseg.tcphdr = tcphdr;
 800eada:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800eadc:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800eade:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800eae0:	d503      	bpl.n	800eaea <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800eae2:	7b62      	ldrb	r2, [r4, #13]
 800eae4:	f042 0201 	orr.w	r2, r2, #1
 800eae8:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800eaea:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	f000 826c 	beq.w	800efca <tcp_input+0x762>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f7fe ff8c 	bl	800da10 <tcp_process_refused_data>
 800eaf8:	300d      	adds	r0, #13
 800eafa:	f000 8269 	beq.w	800efd0 <tcp_input+0x768>
 800eafe:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800eb00:	b123      	cbz	r3, 800eb0c <tcp_input+0x2a4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eb02:	9b05      	ldr	r3, [sp, #20]
 800eb04:	881b      	ldrh	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f040 8262 	bne.w	800efd0 <tcp_input+0x768>
  if (flags & TCP_RST) {
 800eb0c:	4b55      	ldr	r3, [pc, #340]	@ (800ec64 <tcp_input+0x3fc>)
    tcp_input_pcb = pcb;
 800eb0e:	4c56      	ldr	r4, [pc, #344]	@ (800ec68 <tcp_input+0x400>)
  if (flags & TCP_RST) {
 800eb10:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800eb12:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800eb14:	075a      	lsls	r2, r3, #29
 800eb16:	f140 814d 	bpl.w	800edb4 <tcp_input+0x54c>
    if (pcb->state == SYN_SENT) {
 800eb1a:	7d29      	ldrb	r1, [r5, #20]
 800eb1c:	2902      	cmp	r1, #2
 800eb1e:	f000 82d7 	beq.w	800f0d0 <tcp_input+0x868>
      if (seqno == pcb->rcv_nxt) {
 800eb22:	4b52      	ldr	r3, [pc, #328]	@ (800ec6c <tcp_input+0x404>)
 800eb24:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	f000 8409 	beq.w	800f340 <tcp_input+0xad8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eb2e:	1a9b      	subs	r3, r3, r2
 800eb30:	d404      	bmi.n	800eb3c <tcp_input+0x2d4>
 800eb32:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800eb34:	1a9b      	subs	r3, r3, r2
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f340 833e 	ble.w	800f1b8 <tcp_input+0x950>
      if (recv_flags & TF_RESET) {
 800eb3c:	f899 3000 	ldrb.w	r3, [r9]
 800eb40:	071a      	lsls	r2, r3, #28
 800eb42:	f140 825a 	bpl.w	800effa <tcp_input+0x792>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb46:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800eb4a:	b11b      	cbz	r3, 800eb54 <tcp_input+0x2ec>
 800eb4c:	f06f 010d 	mvn.w	r1, #13
 800eb50:	6928      	ldr	r0, [r5, #16]
 800eb52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb54:	4841      	ldr	r0, [pc, #260]	@ (800ec5c <tcp_input+0x3f4>)
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7fe fbc0 	bl	800d2dc <tcp_pcb_remove>
        tcp_free(pcb);
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f7fd fea1 	bl	800c8a4 <tcp_free>
    tcp_input_pcb = NULL;
 800eb62:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800eb64:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800eb66:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800eb68:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800eb6c:	b110      	cbz	r0, 800eb74 <tcp_input+0x30c>
      pbuf_free(inseg.p);
 800eb6e:	f7fd fae1 	bl	800c134 <pbuf_free>
      inseg.p = NULL;
 800eb72:	607d      	str	r5, [r7, #4]
}
 800eb74:	b007      	add	sp, #28
 800eb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb7a:	4b3d      	ldr	r3, [pc, #244]	@ (800ec70 <tcp_input+0x408>)
 800eb7c:	681d      	ldr	r5, [r3, #0]
 800eb7e:	2d00      	cmp	r5, #0
 800eb80:	d05b      	beq.n	800ec3a <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eb82:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800ec88 <tcp_input+0x420>
 800eb86:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800ec8c <tcp_input+0x424>
 800eb8a:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800ec90 <tcp_input+0x428>
 800eb8e:	e002      	b.n	800eb96 <tcp_input+0x32e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb90:	68ed      	ldr	r5, [r5, #12]
 800eb92:	2d00      	cmp	r5, #0
 800eb94:	d051      	beq.n	800ec3a <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eb96:	7d2b      	ldrb	r3, [r5, #20]
 800eb98:	2b0a      	cmp	r3, #10
 800eb9a:	4643      	mov	r3, r8
 800eb9c:	d005      	beq.n	800ebaa <tcp_input+0x342>
 800eb9e:	f240 121f 	movw	r2, #287	@ 0x11f
 800eba2:	4651      	mov	r1, sl
 800eba4:	4648      	mov	r0, r9
 800eba6:	f005 feb5 	bl	8014914 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebaa:	7a2a      	ldrb	r2, [r5, #8]
 800ebac:	b132      	cbz	r2, 800ebbc <tcp_input+0x354>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ebb4:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d1e9      	bne.n	800eb90 <tcp_input+0x328>
      if (pcb->remote_port == tcphdr->src &&
 800ebbc:	6833      	ldr	r3, [r6, #0]
 800ebbe:	8b29      	ldrh	r1, [r5, #24]
 800ebc0:	881a      	ldrh	r2, [r3, #0]
 800ebc2:	4291      	cmp	r1, r2
 800ebc4:	d1e4      	bne.n	800eb90 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800ebc6:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ebc8:	8aeb      	ldrh	r3, [r5, #22]
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d1e0      	bne.n	800eb90 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800ebce:	6868      	ldr	r0, [r5, #4]
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	4290      	cmp	r0, r2
 800ebd4:	d1dc      	bne.n	800eb90 <tcp_input+0x328>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ebd6:	6828      	ldr	r0, [r5, #0]
 800ebd8:	697a      	ldr	r2, [r7, #20]
 800ebda:	4290      	cmp	r0, r2
 800ebdc:	d1d8      	bne.n	800eb90 <tcp_input+0x328>
  if (flags & TCP_RST) {
 800ebde:	4a21      	ldr	r2, [pc, #132]	@ (800ec64 <tcp_input+0x3fc>)
 800ebe0:	7810      	ldrb	r0, [r2, #0]
 800ebe2:	0742      	lsls	r2, r0, #29
 800ebe4:	f53f ae4f 	bmi.w	800e886 <tcp_input+0x1e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebe8:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 800ebea:	0787      	lsls	r7, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebec:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800ebee:	f140 83b2 	bpl.w	800f356 <tcp_input+0xaee>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ebf2:	4a1e      	ldr	r2, [pc, #120]	@ (800ec6c <tcp_input+0x404>)
 800ebf4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800ebf6:	6812      	ldr	r2, [r2, #0]
 800ebf8:	1a10      	subs	r0, r2, r0
 800ebfa:	d404      	bmi.n	800ec06 <tcp_input+0x39e>
 800ebfc:	8d2f      	ldrh	r7, [r5, #40]	@ 0x28
 800ebfe:	1bc0      	subs	r0, r0, r7
 800ec00:	2800      	cmp	r0, #0
 800ec02:	f340 83c7 	ble.w	800f394 <tcp_input+0xb2c>
  if ((tcplen > 0)) {
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	f43f ae3d 	beq.w	800e886 <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800ec0c:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800ec0e:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800ec10:	f043 0302 	orr.w	r3, r3, #2
 800ec14:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800ec16:	f001 fb6d 	bl	80102f4 <tcp_output>
        pbuf_free(p);
 800ec1a:	e634      	b.n	800e886 <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800ec1c:	4a15      	ldr	r2, [pc, #84]	@ (800ec74 <tcp_input+0x40c>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ec1e:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800ec20:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ec22:	f7fd fa25 	bl	800c070 <pbuf_remove_header>
 800ec26:	e68f      	b.n	800e948 <tcp_input+0xe0>
    tcplen++;
 800ec28:	1c53      	adds	r3, r2, #1
 800ec2a:	4913      	ldr	r1, [pc, #76]	@ (800ec78 <tcp_input+0x410>)
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800ec30:	429a      	cmp	r2, r3
    tcplen++;
 800ec32:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800ec34:	f67f aeb4 	bls.w	800e9a0 <tcp_input+0x138>
 800ec38:	e625      	b.n	800e886 <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec3a:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800ec94 <tcp_input+0x42c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ec3e:	f8d6 c000 	ldr.w	ip, [r6]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec42:	f8d8 2000 	ldr.w	r2, [r8]
 800ec46:	2a00      	cmp	r2, #0
 800ec48:	f000 8227 	beq.w	800f09a <tcp_input+0x832>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ec4c:	6878      	ldr	r0, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec4e:	4615      	mov	r5, r2
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ec50:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 800ec54:	2100      	movs	r1, #0
 800ec56:	4692      	mov	sl, r2
 800ec58:	e024      	b.n	800eca4 <tcp_input+0x43c>
 800ec5a:	bf00      	nop
 800ec5c:	2401070c 	.word	0x2401070c
 800ec60:	24010744 	.word	0x24010744
 800ec64:	24010725 	.word	0x24010725
 800ec68:	2401071c 	.word	0x2401071c
 800ec6c:	24010730 	.word	0x24010730
 800ec70:	24010708 	.word	0x24010708
 800ec74:	2401073c 	.word	0x2401073c
 800ec78:	24010726 	.word	0x24010726
 800ec7c:	24010720 	.word	0x24010720
 800ec80:	24010724 	.word	0x24010724
 800ec84:	24010728 	.word	0x24010728
 800ec88:	080174e4 	.word	0x080174e4
 800ec8c:	080177d4 	.word	0x080177d4
 800ec90:	08015bd0 	.word	0x08015bd0
 800ec94:	24010710 	.word	0x24010710
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec98:	68eb      	ldr	r3, [r5, #12]
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	461d      	mov	r5, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 81fb 	beq.w	800f09a <tcp_input+0x832>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eca4:	7a2a      	ldrb	r2, [r5, #8]
 800eca6:	b12a      	cbz	r2, 800ecb4 <tcp_input+0x44c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eca8:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800ecac:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d1f1      	bne.n	800ec98 <tcp_input+0x430>
      if (lpcb->local_port == tcphdr->dest) {
 800ecb4:	f8b5 9016 	ldrh.w	r9, [r5, #22]
 800ecb8:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800ecbc:	4599      	cmp	r9, r3
 800ecbe:	d1eb      	bne.n	800ec98 <tcp_input+0x430>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ecc0:	682b      	ldr	r3, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ecc2:	b10b      	cbz	r3, 800ecc8 <tcp_input+0x460>
 800ecc4:	4573      	cmp	r3, lr
 800ecc6:	d1e7      	bne.n	800ec98 <tcp_input+0x430>
      if (prev != NULL) {
 800ecc8:	4652      	mov	r2, sl
 800ecca:	b121      	cbz	r1, 800ecd6 <tcp_input+0x46e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800eccc:	68eb      	ldr	r3, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ecce:	f8c8 5000 	str.w	r5, [r8]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ecd2:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ecd4:	60ea      	str	r2, [r5, #12]
  if (flags & TCP_RST) {
 800ecd6:	4ba8      	ldr	r3, [pc, #672]	@ (800ef78 <tcp_input+0x710>)
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	075a      	lsls	r2, r3, #29
 800ecdc:	f53f add3 	bmi.w	800e886 <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800ece0:	f013 0810 	ands.w	r8, r3, #16
 800ece4:	f040 826d 	bne.w	800f1c2 <tcp_input+0x95a>
  } else if (flags & TCP_SYN) {
 800ece8:	0798      	lsls	r0, r3, #30
 800ecea:	f57f adcc 	bpl.w	800e886 <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800ecee:	7d68      	ldrb	r0, [r5, #21]
 800ecf0:	f7fe fc84 	bl	800d5fc <tcp_alloc>
    if (npcb == NULL) {
 800ecf4:	4681      	mov	r9, r0
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f000 82ca 	beq.w	800f290 <tcp_input+0xa28>
    npcb->remote_port = tcphdr->src;
 800ecfc:	6831      	ldr	r1, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ecfe:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
    npcb->rcv_nxt = seqno + 1;
 800ed02:	4f9e      	ldr	r7, [pc, #632]	@ (800ef7c <tcp_input+0x714>)
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ed04:	e9c0 2300 	strd	r2, r3, [r0]
    npcb->rcv_nxt = seqno + 1;
 800ed08:	683b      	ldr	r3, [r7, #0]
    npcb->remote_port = tcphdr->src;
 800ed0a:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800ed0c:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800ed0e:	7849      	ldrb	r1, [r1, #1]
 800ed10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800ed14:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800ed16:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ed18:	62c3      	str	r3, [r0, #44]	@ 0x2c
    npcb->state = SYN_RCVD;
 800ed1a:	2303      	movs	r3, #3
    npcb->local_port = pcb->local_port;
 800ed1c:	82c1      	strh	r1, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800ed1e:	8302      	strh	r2, [r0, #24]
    npcb->state = SYN_RCVD;
 800ed20:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800ed22:	f7fe ff0d 	bl	800db40 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed26:	683a      	ldr	r2, [r7, #0]
    npcb->callback_arg = pcb->callback_arg;
 800ed28:	692b      	ldr	r3, [r5, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed2a:	3a01      	subs	r2, #1
    npcb->snd_nxt = iss;
 800ed2c:	f8c9 0050 	str.w	r0, [r9, #80]	@ 0x50
    npcb->lastack = iss;
 800ed30:	f8c9 0044 	str.w	r0, [r9, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ed34:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
    npcb->listener = pcb;
 800ed38:	f8c9 507c 	str.w	r5, [r9, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800ed3c:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->snd_wl2 = iss;
 800ed40:	e9c9 2015 	strd	r2, r0, [r9, #84]	@ 0x54
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed44:	7a6b      	ldrb	r3, [r5, #9]
    TCP_REG_ACTIVE(npcb);
 800ed46:	4a8e      	ldr	r2, [pc, #568]	@ (800ef80 <tcp_input+0x718>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed48:	f003 030c 	and.w	r3, r3, #12
 800ed4c:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ed50:	7a2b      	ldrb	r3, [r5, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ed52:	f109 0504 	add.w	r5, r9, #4
    npcb->netif_idx = pcb->netif_idx;
 800ed56:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800ed5a:	6813      	ldr	r3, [r2, #0]
 800ed5c:	f8c2 9000 	str.w	r9, [r2]
 800ed60:	f8c9 300c 	str.w	r3, [r9, #12]
 800ed64:	f001 fde4 	bl	8010930 <tcp_timer_needed>
 800ed68:	4b86      	ldr	r3, [pc, #536]	@ (800ef84 <tcp_input+0x71c>)
 800ed6a:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800ed6c:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800ed6e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ed70:	f7ff fcbe 	bl	800e6f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ed74:	6832      	ldr	r2, [r6, #0]
 800ed76:	4643      	mov	r3, r8
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ed78:	f8b9 6032 	ldrh.w	r6, [r9, #50]	@ 0x32
 800ed7c:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 800ed7e:	89d2      	ldrh	r2, [r2, #14]
 800ed80:	f362 030f 	bfi	r3, r2, #0, #16
 800ed84:	f362 431f 	bfi	r3, r2, #16, #16
 800ed88:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ed8c:	f004 faf2 	bl	8013374 <ip4_route>
 800ed90:	462a      	mov	r2, r5
 800ed92:	4601      	mov	r1, r0
 800ed94:	4630      	mov	r0, r6
 800ed96:	f7fe feef 	bl	800db78 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ed9a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ed9c:	f8a9 0032 	strh.w	r0, [r9, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eda0:	4648      	mov	r0, r9
 800eda2:	f001 f899 	bl	800fed8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800eda6:	2800      	cmp	r0, #0
 800eda8:	f040 827d 	bne.w	800f2a6 <tcp_input+0xa3e>
    tcp_output(npcb);
 800edac:	4648      	mov	r0, r9
 800edae:	f001 faa1 	bl	80102f4 <tcp_output>
 800edb2:	e568      	b.n	800e886 <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800edb4:	079b      	lsls	r3, r3, #30
        tcp_ack_now(pcb);
 800edb6:	8b6a      	ldrh	r2, [r5, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800edb8:	d504      	bpl.n	800edc4 <tcp_input+0x55c>
 800edba:	7d2b      	ldrb	r3, [r5, #20]
 800edbc:	3b02      	subs	r3, #2
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	f200 819c 	bhi.w	800f0fc <tcp_input+0x894>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800edc4:	06d0      	lsls	r0, r2, #27
 800edc6:	d402      	bmi.n	800edce <tcp_input+0x566>
    pcb->tmr = tcp_ticks;
 800edc8:	4b6f      	ldr	r3, [pc, #444]	@ (800ef88 <tcp_input+0x720>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800edce:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800edd0:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800edd2:	f8a5 309a 	strh.w	r3, [r5, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800edd6:	f7ff fc8b 	bl	800e6f0 <tcp_parseopt>
  switch (pcb->state) {
 800edda:	7d2b      	ldrb	r3, [r5, #20]
 800eddc:	3b02      	subs	r3, #2
 800edde:	2b07      	cmp	r3, #7
 800ede0:	f63f aeac 	bhi.w	800eb3c <tcp_input+0x2d4>
 800ede4:	e8df f003 	tbb	[pc, r3]
 800ede8:	8f041334 	.word	0x8f041334
 800edec:	5ba80474 	.word	0x5ba80474
      tcp_receive(pcb);
 800edf0:	4628      	mov	r0, r5
 800edf2:	f7fe ffef 	bl	800ddd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800edf6:	f899 3000 	ldrb.w	r3, [r9]
 800edfa:	0699      	lsls	r1, r3, #26
 800edfc:	f57f ae9e 	bpl.w	800eb3c <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800ee00:	8b6b      	ldrh	r3, [r5, #26]
 800ee02:	f043 0302 	orr.w	r3, r3, #2
 800ee06:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800ee08:	2307      	movs	r3, #7
 800ee0a:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800ee0c:	e696      	b.n	800eb3c <tcp_input+0x2d4>
      if (flags & TCP_ACK) {
 800ee0e:	4b5a      	ldr	r3, [pc, #360]	@ (800ef78 <tcp_input+0x710>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	06da      	lsls	r2, r3, #27
 800ee14:	f140 8210 	bpl.w	800f238 <tcp_input+0x9d0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee18:	4b5c      	ldr	r3, [pc, #368]	@ (800ef8c <tcp_input+0x724>)
 800ee1a:	6819      	ldr	r1, [r3, #0]
 800ee1c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800ee1e:	43db      	mvns	r3, r3
 800ee20:	42cb      	cmn	r3, r1
 800ee22:	d404      	bmi.n	800ee2e <tcp_input+0x5c6>
 800ee24:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ee26:	1acb      	subs	r3, r1, r3
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f340 8242 	ble.w	800f2b2 <tcp_input+0xa4a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee2e:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee30:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee32:	8810      	ldrh	r0, [r2, #0]
 800ee34:	4a51      	ldr	r2, [pc, #324]	@ (800ef7c <tcp_input+0x714>)
 800ee36:	6812      	ldr	r2, [r2, #0]
 800ee38:	4402      	add	r2, r0
 800ee3a:	8818      	ldrh	r0, [r3, #0]
 800ee3c:	9002      	str	r0, [sp, #8]
 800ee3e:	4628      	mov	r0, r5
 800ee40:	885b      	ldrh	r3, [r3, #2]
 800ee42:	9301      	str	r3, [sp, #4]
 800ee44:	4b52      	ldr	r3, [pc, #328]	@ (800ef90 <tcp_input+0x728>)
 800ee46:	9300      	str	r3, [sp, #0]
 800ee48:	3304      	adds	r3, #4
 800ee4a:	f001 f9d9 	bl	8010200 <tcp_rst>
    if (err != ERR_ABRT) {
 800ee4e:	e675      	b.n	800eb3c <tcp_input+0x2d4>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ee50:	4b49      	ldr	r3, [pc, #292]	@ (800ef78 <tcp_input+0x710>)
 800ee52:	781a      	ldrb	r2, [r3, #0]
 800ee54:	f002 0312 	and.w	r3, r2, #18
 800ee58:	2b12      	cmp	r3, #18
 800ee5a:	f000 8153 	beq.w	800f104 <tcp_input+0x89c>
      else if (flags & TCP_ACK) {
 800ee5e:	06d1      	lsls	r1, r2, #27
 800ee60:	f57f ae6c 	bpl.w	800eb3c <tcp_input+0x2d4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee64:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee66:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee68:	8811      	ldrh	r1, [r2, #0]
 800ee6a:	4a44      	ldr	r2, [pc, #272]	@ (800ef7c <tcp_input+0x714>)
 800ee6c:	8818      	ldrh	r0, [r3, #0]
 800ee6e:	6812      	ldr	r2, [r2, #0]
 800ee70:	440a      	add	r2, r1
 800ee72:	4946      	ldr	r1, [pc, #280]	@ (800ef8c <tcp_input+0x724>)
 800ee74:	6809      	ldr	r1, [r1, #0]
 800ee76:	9002      	str	r0, [sp, #8]
 800ee78:	4628      	mov	r0, r5
 800ee7a:	885b      	ldrh	r3, [r3, #2]
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	4b44      	ldr	r3, [pc, #272]	@ (800ef90 <tcp_input+0x728>)
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	3304      	adds	r3, #4
 800ee84:	f001 f9bc 	bl	8010200 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ee88:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800ee8c:	2b05      	cmp	r3, #5
 800ee8e:	f63f ae55 	bhi.w	800eb3c <tcp_input+0x2d4>
          pcb->rtime = 0;
 800ee92:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800ee94:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800ee96:	862b      	strh	r3, [r5, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800ee98:	f001 fc1e 	bl	80106d8 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800ee9c:	e64e      	b.n	800eb3c <tcp_input+0x2d4>
      tcp_receive(pcb);
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7fe ff98 	bl	800ddd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eea4:	4b34      	ldr	r3, [pc, #208]	@ (800ef78 <tcp_input+0x710>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	06d9      	lsls	r1, r3, #27
 800eeaa:	f57f ae47 	bpl.w	800eb3c <tcp_input+0x2d4>
 800eeae:	4b37      	ldr	r3, [pc, #220]	@ (800ef8c <tcp_input+0x724>)
 800eeb0:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800eeb2:	681a      	ldr	r2, [r3, #0]
        recv_flags |= TF_CLOSED;
 800eeb4:	f899 3000 	ldrb.w	r3, [r9]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eeb8:	4291      	cmp	r1, r2
 800eeba:	f47f ae3f 	bne.w	800eb3c <tcp_input+0x2d4>
 800eebe:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800eec0:	2a00      	cmp	r2, #0
 800eec2:	f47f ae3b 	bne.w	800eb3c <tcp_input+0x2d4>
        recv_flags |= TF_CLOSED;
 800eec6:	f043 0310 	orr.w	r3, r3, #16
 800eeca:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800eece:	e635      	b.n	800eb3c <tcp_input+0x2d4>
      tcp_receive(pcb);
 800eed0:	4628      	mov	r0, r5
 800eed2:	f7fe ff7f 	bl	800ddd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eed6:	f899 3000 	ldrb.w	r3, [r9]
 800eeda:	069e      	lsls	r6, r3, #26
 800eedc:	f57f ae2e 	bpl.w	800eb3c <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800eee0:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800eee2:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800eee4:	f043 0302 	orr.w	r3, r3, #2
 800eee8:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800eeea:	f7fd ff05 	bl	800ccf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eeee:	4b24      	ldr	r3, [pc, #144]	@ (800ef80 <tcp_input+0x718>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	42ab      	cmp	r3, r5
 800eef4:	d05a      	beq.n	800efac <tcp_input+0x744>
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d05b      	beq.n	800efb2 <tcp_input+0x74a>
 800eefa:	68da      	ldr	r2, [r3, #12]
 800eefc:	42aa      	cmp	r2, r5
 800eefe:	f000 8205 	beq.w	800f30c <tcp_input+0xaa4>
 800ef02:	4613      	mov	r3, r2
 800ef04:	e7f7      	b.n	800eef6 <tcp_input+0x68e>
      tcp_receive(pcb);
 800ef06:	4628      	mov	r0, r5
 800ef08:	f7fe ff64 	bl	800ddd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef0c:	f899 3000 	ldrb.w	r3, [r9]
 800ef10:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef14:	4b18      	ldr	r3, [pc, #96]	@ (800ef78 <tcp_input+0x710>)
      if (recv_flags & TF_GOT_FIN) {
 800ef16:	f000 817e 	beq.w	800f216 <tcp_input+0x9ae>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef1a:	781a      	ldrb	r2, [r3, #0]
          tcp_ack_now(pcb);
 800ef1c:	8b6b      	ldrh	r3, [r5, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef1e:	06d2      	lsls	r2, r2, #27
          tcp_ack_now(pcb);
 800ef20:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef24:	d504      	bpl.n	800ef30 <tcp_input+0x6c8>
 800ef26:	4a19      	ldr	r2, [pc, #100]	@ (800ef8c <tcp_input+0x724>)
 800ef28:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800ef2a:	6812      	ldr	r2, [r2, #0]
 800ef2c:	4291      	cmp	r1, r2
 800ef2e:	d031      	beq.n	800ef94 <tcp_input+0x72c>
          tcp_ack_now(pcb);
 800ef30:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800ef32:	2308      	movs	r3, #8
 800ef34:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800ef36:	e601      	b.n	800eb3c <tcp_input+0x2d4>
      tcp_receive(pcb);
 800ef38:	4628      	mov	r0, r5
 800ef3a:	f7fe ff4b 	bl	800ddd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ef3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ef78 <tcp_input+0x710>)
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	06d8      	lsls	r0, r3, #27
 800ef44:	f57f adfa 	bpl.w	800eb3c <tcp_input+0x2d4>
 800ef48:	4b10      	ldr	r3, [pc, #64]	@ (800ef8c <tcp_input+0x724>)
 800ef4a:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	f47f adf4 	bne.w	800eb3c <tcp_input+0x2d4>
 800ef54:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f47f adf0 	bne.w	800eb3c <tcp_input+0x2d4>
        tcp_pcb_purge(pcb);
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	f7fd fecb 	bl	800ccf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef62:	4b07      	ldr	r3, [pc, #28]	@ (800ef80 <tcp_input+0x718>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	42ab      	cmp	r3, r5
 800ef68:	d020      	beq.n	800efac <tcp_input+0x744>
 800ef6a:	b313      	cbz	r3, 800efb2 <tcp_input+0x74a>
 800ef6c:	68da      	ldr	r2, [r3, #12]
 800ef6e:	42aa      	cmp	r2, r5
 800ef70:	f000 81cc 	beq.w	800f30c <tcp_input+0xaa4>
 800ef74:	4613      	mov	r3, r2
 800ef76:	e7f8      	b.n	800ef6a <tcp_input+0x702>
 800ef78:	24010725 	.word	0x24010725
 800ef7c:	24010730 	.word	0x24010730
 800ef80:	2401070c 	.word	0x2401070c
 800ef84:	24010707 	.word	0x24010707
 800ef88:	24010718 	.word	0x24010718
 800ef8c:	2401072c 	.word	0x2401072c
 800ef90:	24009c38 	.word	0x24009c38
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef94:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800ef96:	2a00      	cmp	r2, #0
 800ef98:	d1ca      	bne.n	800ef30 <tcp_input+0x6c8>
          tcp_ack_now(pcb);
 800ef9a:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f7fd feab 	bl	800ccf8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800efa2:	4bac      	ldr	r3, [pc, #688]	@ (800f254 <tcp_input+0x9ec>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	42ab      	cmp	r3, r5
 800efa8:	f040 81e0 	bne.w	800f36c <tcp_input+0xb04>
        TCP_RMV_ACTIVE(pcb);
 800efac:	68eb      	ldr	r3, [r5, #12]
 800efae:	4aa9      	ldr	r2, [pc, #676]	@ (800f254 <tcp_input+0x9ec>)
 800efb0:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efb2:	4ba9      	ldr	r3, [pc, #676]	@ (800f258 <tcp_input+0x9f0>)
        pcb->state = TIME_WAIT;
 800efb4:	220a      	movs	r2, #10
 800efb6:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	601d      	str	r5, [r3, #0]
 800efbc:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800efbe:	2201      	movs	r2, #1
 800efc0:	4ba6      	ldr	r3, [pc, #664]	@ (800f25c <tcp_input+0x9f4>)
 800efc2:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efc4:	f001 fcb4 	bl	8010930 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800efc8:	e5b8      	b.n	800eb3c <tcp_input+0x2d4>
    tcp_input_pcb = pcb;
 800efca:	4ca5      	ldr	r4, [pc, #660]	@ (800f260 <tcp_input+0x9f8>)
 800efcc:	6025      	str	r5, [r4, #0]
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800efce:	e5a1      	b.n	800eb14 <tcp_input+0x2ac>
        if (pcb->rcv_ann_wnd == 0) {
 800efd0:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f000 808d 	beq.w	800f0f2 <tcp_input+0x88a>
 800efd8:	4ca1      	ldr	r4, [pc, #644]	@ (800f260 <tcp_input+0x9f8>)
 800efda:	e5c2      	b.n	800eb62 <tcp_input+0x2fa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800efdc:	4ba1      	ldr	r3, [pc, #644]	@ (800f264 <tcp_input+0x9fc>)
 800efde:	22c2      	movs	r2, #194	@ 0xc2
 800efe0:	49a1      	ldr	r1, [pc, #644]	@ (800f268 <tcp_input+0xa00>)
 800efe2:	48a2      	ldr	r0, [pc, #648]	@ (800f26c <tcp_input+0xa04>)
 800efe4:	f005 fc96 	bl	8014914 <iprintf>
 800efe8:	e47f      	b.n	800e8ea <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800efea:	4b9e      	ldr	r3, [pc, #632]	@ (800f264 <tcp_input+0x9fc>)
 800efec:	22df      	movs	r2, #223	@ 0xdf
 800efee:	49a0      	ldr	r1, [pc, #640]	@ (800f270 <tcp_input+0xa08>)
 800eff0:	489e      	ldr	r0, [pc, #632]	@ (800f26c <tcp_input+0xa04>)
 800eff2:	f005 fc8f 	bl	8014914 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800eff6:	8923      	ldrh	r3, [r4, #8]
 800eff8:	e49c      	b.n	800e934 <tcp_input+0xcc>
        if (recv_acked > 0) {
 800effa:	f8ba 2000 	ldrh.w	r2, [sl]
 800effe:	b15a      	cbz	r2, 800f018 <tcp_input+0x7b0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f000:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800f004:	b12b      	cbz	r3, 800f012 <tcp_input+0x7aa>
 800f006:	4629      	mov	r1, r5
 800f008:	6928      	ldr	r0, [r5, #16]
 800f00a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800f00c:	300d      	adds	r0, #13
 800f00e:	f43f ada8 	beq.w	800eb62 <tcp_input+0x2fa>
          recv_acked = 0;
 800f012:	2300      	movs	r3, #0
 800f014:	f8aa 3000 	strh.w	r3, [sl]
        if (tcp_input_delayed_close(pcb)) {
 800f018:	4628      	mov	r0, r5
 800f01a:	f7fe fe55 	bl	800dcc8 <tcp_input_delayed_close>
 800f01e:	2800      	cmp	r0, #0
 800f020:	f47f ad9f 	bne.w	800eb62 <tcp_input+0x2fa>
        if (recv_data != NULL) {
 800f024:	f8d8 2000 	ldr.w	r2, [r8]
 800f028:	b1fa      	cbz	r2, 800f06a <tcp_input+0x802>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f02a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800f02c:	b143      	cbz	r3, 800f040 <tcp_input+0x7d8>
 800f02e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f032:	4b8c      	ldr	r3, [pc, #560]	@ (800f264 <tcp_input+0x9fc>)
 800f034:	498f      	ldr	r1, [pc, #572]	@ (800f274 <tcp_input+0xa0c>)
 800f036:	488d      	ldr	r0, [pc, #564]	@ (800f26c <tcp_input+0xa04>)
 800f038:	f005 fc6c 	bl	8014914 <iprintf>
            pbuf_free(recv_data);
 800f03c:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800f040:	8b6b      	ldrh	r3, [r5, #26]
 800f042:	f013 0310 	ands.w	r3, r3, #16
 800f046:	f040 80df 	bne.w	800f208 <tcp_input+0x9a0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f04a:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800f04e:	2e00      	cmp	r6, #0
 800f050:	f000 8118 	beq.w	800f284 <tcp_input+0xa1c>
 800f054:	4629      	mov	r1, r5
 800f056:	6928      	ldr	r0, [r5, #16]
 800f058:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800f05a:	f110 0f0d 	cmn.w	r0, #13
 800f05e:	f43f ad80 	beq.w	800eb62 <tcp_input+0x2fa>
          if (err != ERR_OK) {
 800f062:	b110      	cbz	r0, 800f06a <tcp_input+0x802>
            pcb->refused_data = recv_data;
 800f064:	f8d8 3000 	ldr.w	r3, [r8]
 800f068:	67ab      	str	r3, [r5, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800f06a:	f899 3000 	ldrb.w	r3, [r9]
 800f06e:	069b      	lsls	r3, r3, #26
 800f070:	d507      	bpl.n	800f082 <tcp_input+0x81a>
          if (pcb->refused_data != NULL) {
 800f072:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 80b2 	beq.w	800f1de <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f07a:	7b5a      	ldrb	r2, [r3, #13]
 800f07c:	f042 0220 	orr.w	r2, r2, #32
 800f080:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800f082:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800f084:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800f086:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f088:	f7fe fe1e 	bl	800dcc8 <tcp_input_delayed_close>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	f47f ad68 	bne.w	800eb62 <tcp_input+0x2fa>
        tcp_output(pcb);
 800f092:	4628      	mov	r0, r5
 800f094:	f001 f92e 	bl	80102f4 <tcp_output>
 800f098:	e563      	b.n	800eb62 <tcp_input+0x2fa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f09a:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800f09e:	f7fc f92f 	bl	800b300 <lwip_htons>
 800f0a2:	f010 0004 	ands.w	r0, r0, #4
 800f0a6:	f47f abee 	bne.w	800e886 <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0aa:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0ac:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0ae:	8811      	ldrh	r1, [r2, #0]
 800f0b0:	4a71      	ldr	r2, [pc, #452]	@ (800f278 <tcp_input+0xa10>)
 800f0b2:	881d      	ldrh	r5, [r3, #0]
 800f0b4:	6812      	ldr	r2, [r2, #0]
 800f0b6:	440a      	add	r2, r1
 800f0b8:	4970      	ldr	r1, [pc, #448]	@ (800f27c <tcp_input+0xa14>)
 800f0ba:	6809      	ldr	r1, [r1, #0]
 800f0bc:	9502      	str	r5, [sp, #8]
 800f0be:	885b      	ldrh	r3, [r3, #2]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0c0:	9301      	str	r3, [sp, #4]
 800f0c2:	4b6f      	ldr	r3, [pc, #444]	@ (800f280 <tcp_input+0xa18>)
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	3304      	adds	r3, #4
 800f0c8:	f001 f89a 	bl	8010200 <tcp_rst>
 800f0cc:	f7ff bbdb 	b.w	800e886 <tcp_input+0x1e>
      if (ackno == pcb->snd_nxt) {
 800f0d0:	4b6a      	ldr	r3, [pc, #424]	@ (800f27c <tcp_input+0xa14>)
 800f0d2:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	f47f ad30 	bne.w	800eb3c <tcp_input+0x2d4>
      recv_flags |= TF_RESET;
 800f0dc:	f899 3000 	ldrb.w	r3, [r9]
 800f0e0:	f043 0308 	orr.w	r3, r3, #8
 800f0e4:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f0e8:	8b6b      	ldrh	r3, [r5, #26]
 800f0ea:	f023 0301 	bic.w	r3, r3, #1
 800f0ee:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800f0f0:	e524      	b.n	800eb3c <tcp_input+0x2d4>
          tcp_send_empty_ack(pcb);
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	4c5a      	ldr	r4, [pc, #360]	@ (800f260 <tcp_input+0x9f8>)
 800f0f6:	f001 f8cb 	bl	8010290 <tcp_send_empty_ack>
 800f0fa:	e532      	b.n	800eb62 <tcp_input+0x2fa>
    tcp_ack_now(pcb);
 800f0fc:	f042 0202 	orr.w	r2, r2, #2
 800f100:	836a      	strh	r2, [r5, #26]
    if (err != ERR_ABRT) {
 800f102:	e51b      	b.n	800eb3c <tcp_input+0x2d4>
          && (ackno == pcb->lastack + 1)) {
 800f104:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800f106:	495d      	ldr	r1, [pc, #372]	@ (800f27c <tcp_input+0xa14>)
 800f108:	3301      	adds	r3, #1
 800f10a:	6809      	ldr	r1, [r1, #0]
 800f10c:	428b      	cmp	r3, r1
 800f10e:	f47f aea6 	bne.w	800ee5e <tcp_input+0x5f6>
        pcb->lastack = ackno;
 800f112:	646b      	str	r3, [r5, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f114:	2200      	movs	r2, #0
        pcb->rcv_nxt = seqno + 1;
 800f116:	4b58      	ldr	r3, [pc, #352]	@ (800f278 <tcp_input+0xa10>)
        pcb->snd_wnd = tcphdr->wnd;
 800f118:	6830      	ldr	r0, [r6, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f11a:	1d2e      	adds	r6, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800f11c:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f11e:	f8b5 b032 	ldrh.w	fp, [r5, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800f122:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f124:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800f126:	6269      	str	r1, [r5, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f128:	62e9      	str	r1, [r5, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800f12a:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f12c:	4630      	mov	r0, r6
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f12e:	656b      	str	r3, [r5, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f130:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800f132:	f361 020f 	bfi	r2, r1, #0, #16
        pcb->state = ESTABLISHED;
 800f136:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd = tcphdr->wnd;
 800f138:	f361 421f 	bfi	r2, r1, #16, #16
 800f13c:	662a      	str	r2, [r5, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f13e:	f004 f919 	bl	8013374 <ip4_route>
 800f142:	4632      	mov	r2, r6
 800f144:	4601      	mov	r1, r0
 800f146:	4658      	mov	r0, fp
 800f148:	f7fe fd16 	bl	800db78 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f14c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f150:	0041      	lsls	r1, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f152:	4602      	mov	r2, r0
 800f154:	8668      	strh	r0, [r5, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f156:	0080      	lsls	r0, r0, #2
 800f158:	4299      	cmp	r1, r3
 800f15a:	460e      	mov	r6, r1
 800f15c:	bf38      	it	cc
 800f15e:	461e      	movcc	r6, r3
 800f160:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 800f164:	f240 8130 	bls.w	800f3c8 <tcp_input+0xb60>
 800f168:	b283      	uxth	r3, r0
 800f16a:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f16e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 8120 	beq.w	800f3b8 <tcp_input+0xb50>
        --pcb->snd_queuelen;
 800f178:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
        rseg = pcb->unacked;
 800f17c:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
        --pcb->snd_queuelen;
 800f17e:	3b01      	subs	r3, #1
 800f180:	f8a5 3066 	strh.w	r3, [r5, #102]	@ 0x66
        if (rseg == NULL) {
 800f184:	2e00      	cmp	r6, #0
 800f186:	f000 8112 	beq.w	800f3ae <tcp_input+0xb46>
          pcb->unacked = rseg->next;
 800f18a:	6833      	ldr	r3, [r6, #0]
 800f18c:	672b      	str	r3, [r5, #112]	@ 0x70
        tcp_seg_free(rseg);
 800f18e:	4630      	mov	r0, r6
 800f190:	f7fd fcf4 	bl	800cb7c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800f194:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f196:	2b00      	cmp	r3, #0
 800f198:	f000 8106 	beq.w	800f3a8 <tcp_input+0xb40>
          pcb->nrtx = 0;
 800f19c:	2300      	movs	r3, #0
 800f19e:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800f1a2:	862b      	strh	r3, [r5, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f1a4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800f1a8:	b133      	cbz	r3, 800f1b8 <tcp_input+0x950>
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	6928      	ldr	r0, [r5, #16]
 800f1b0:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800f1b2:	300d      	adds	r0, #13
 800f1b4:	f43f acd5 	beq.w	800eb62 <tcp_input+0x2fa>
        tcp_ack_now(pcb);
 800f1b8:	8b6b      	ldrh	r3, [r5, #26]
 800f1ba:	f043 0302 	orr.w	r3, r3, #2
 800f1be:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800f1c0:	e4bc      	b.n	800eb3c <tcp_input+0x2d4>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f1c2:	9b05      	ldr	r3, [sp, #20]
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	881a      	ldrh	r2, [r3, #0]
 800f1c8:	4b2b      	ldr	r3, [pc, #172]	@ (800f278 <tcp_input+0xa10>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	441a      	add	r2, r3
 800f1ce:	4b2b      	ldr	r3, [pc, #172]	@ (800f27c <tcp_input+0xa14>)
 800f1d0:	6819      	ldr	r1, [r3, #0]
 800f1d2:	f8bc 3000 	ldrh.w	r3, [ip]
 800f1d6:	9302      	str	r3, [sp, #8]
 800f1d8:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800f1dc:	e770      	b.n	800f0c0 <tcp_input+0x858>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f1de:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800f1e0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d001      	beq.n	800f1ec <tcp_input+0x984>
              pcb->rcv_wnd++;
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	852b      	strh	r3, [r5, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800f1ec:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800f1f0:	2e00      	cmp	r6, #0
 800f1f2:	f43f af46 	beq.w	800f082 <tcp_input+0x81a>
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	6928      	ldr	r0, [r5, #16]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800f200:	300d      	adds	r0, #13
 800f202:	f47f af3e 	bne.w	800f082 <tcp_input+0x81a>
 800f206:	e4ac      	b.n	800eb62 <tcp_input+0x2fa>
            pbuf_free(recv_data);
 800f208:	4610      	mov	r0, r2
 800f20a:	f7fc ff93 	bl	800c134 <pbuf_free>
            tcp_abort(pcb);
 800f20e:	4628      	mov	r0, r5
 800f210:	f7fe f9aa 	bl	800d568 <tcp_abort>
            goto aborted;
 800f214:	e4a5      	b.n	800eb62 <tcp_input+0x2fa>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	06db      	lsls	r3, r3, #27
 800f21a:	f57f ac8f 	bpl.w	800eb3c <tcp_input+0x2d4>
 800f21e:	4b17      	ldr	r3, [pc, #92]	@ (800f27c <tcp_input+0xa14>)
 800f220:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	429a      	cmp	r2, r3
 800f226:	f47f ac89 	bne.w	800eb3c <tcp_input+0x2d4>
 800f22a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f47f ac85 	bne.w	800eb3c <tcp_input+0x2d4>
        pcb->state = FIN_WAIT_2;
 800f232:	2306      	movs	r3, #6
 800f234:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800f236:	e481      	b.n	800eb3c <tcp_input+0x2d4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f238:	0798      	lsls	r0, r3, #30
 800f23a:	f57f ac7f 	bpl.w	800eb3c <tcp_input+0x2d4>
 800f23e:	4b0e      	ldr	r3, [pc, #56]	@ (800f278 <tcp_input+0xa10>)
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800f244:	3b01      	subs	r3, #1
 800f246:	4293      	cmp	r3, r2
 800f248:	f47f ac78 	bne.w	800eb3c <tcp_input+0x2d4>
        tcp_rexmit(pcb);
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 ff59 	bl	8010104 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800f252:	e473      	b.n	800eb3c <tcp_input+0x2d4>
 800f254:	2401070c 	.word	0x2401070c
 800f258:	24010708 	.word	0x24010708
 800f25c:	24010707 	.word	0x24010707
 800f260:	2401071c 	.word	0x2401071c
 800f264:	080174e4 	.word	0x080174e4
 800f268:	080176c4 	.word	0x080176c4
 800f26c:	08015bd0 	.word	0x08015bd0
 800f270:	080176d4 	.word	0x080176d4
 800f274:	08017870 	.word	0x08017870
 800f278:	24010730 	.word	0x24010730
 800f27c:	2401072c 	.word	0x2401072c
 800f280:	24009c38 	.word	0x24009c38
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f284:	4633      	mov	r3, r6
 800f286:	4630      	mov	r0, r6
 800f288:	4629      	mov	r1, r5
 800f28a:	f7fe fb8f 	bl	800d9ac <tcp_recv_null>
 800f28e:	e6e4      	b.n	800f05a <tcp_input+0x7f2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f290:	69ab      	ldr	r3, [r5, #24]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f43f aaf7 	beq.w	800e886 <tcp_input+0x1e>
 800f298:	4601      	mov	r1, r0
 800f29a:	f04f 32ff 	mov.w	r2, #4294967295
 800f29e:	6928      	ldr	r0, [r5, #16]
 800f2a0:	4798      	blx	r3
 800f2a2:	f7ff baf0 	b.w	800e886 <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800f2a6:	4641      	mov	r1, r8
 800f2a8:	4648      	mov	r0, r9
 800f2aa:	f7fe f887 	bl	800d3bc <tcp_abandon>
      return;
 800f2ae:	f7ff baea 	b.w	800e886 <tcp_input+0x1e>
          pcb->state = ESTABLISHED;
 800f2b2:	2304      	movs	r3, #4
 800f2b4:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800f2b6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d0a8      	beq.n	800f20e <tcp_input+0x9a6>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d05c      	beq.n	800f37c <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	6928      	ldr	r0, [r5, #16]
 800f2c8:	4798      	blx	r3
          if (err != ERR_OK) {
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d167      	bne.n	800f3a0 <tcp_input+0xb38>
          tcp_receive(pcb);
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f7fe fd7f 	bl	800ddd4 <tcp_receive>
          if (recv_acked != 0) {
 800f2d6:	f8ba 3000 	ldrh.w	r3, [sl]
 800f2da:	b113      	cbz	r3, 800f2e2 <tcp_input+0xa7a>
            recv_acked--;
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	f8aa 3000 	strh.w	r3, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f2e2:	8e69      	ldrh	r1, [r5, #50]	@ 0x32
 800f2e4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f2e8:	004a      	lsls	r2, r1, #1
 800f2ea:	0088      	lsls	r0, r1, #2
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	4616      	mov	r6, r2
 800f2f0:	bf38      	it	cc
 800f2f2:	461e      	movcc	r6, r3
 800f2f4:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800f2f8:	d934      	bls.n	800f364 <tcp_input+0xafc>
 800f2fa:	b283      	uxth	r3, r0
 800f2fc:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 800f300:	f899 3000 	ldrb.w	r3, [r9]
 800f304:	069e      	lsls	r6, r3, #26
 800f306:	f57f ac19 	bpl.w	800eb3c <tcp_input+0x2d4>
 800f30a:	e579      	b.n	800ee00 <tcp_input+0x598>
        TCP_RMV_ACTIVE(pcb);
 800f30c:	68ea      	ldr	r2, [r5, #12]
 800f30e:	60da      	str	r2, [r3, #12]
 800f310:	e64f      	b.n	800efb2 <tcp_input+0x74a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f312:	4b33      	ldr	r3, [pc, #204]	@ (800f3e0 <tcp_input+0xb78>)
 800f314:	f240 120d 	movw	r2, #269	@ 0x10d
 800f318:	4932      	ldr	r1, [pc, #200]	@ (800f3e4 <tcp_input+0xb7c>)
 800f31a:	4833      	ldr	r0, [pc, #204]	@ (800f3e8 <tcp_input+0xb80>)
 800f31c:	f005 fafa 	bl	8014914 <iprintf>
      if (prev != NULL) {
 800f320:	f1b8 0f00 	cmp.w	r8, #0
 800f324:	f43f abc1 	beq.w	800eaaa <tcp_input+0x242>
 800f328:	68eb      	ldr	r3, [r5, #12]
 800f32a:	f7ff bbb8 	b.w	800ea9e <tcp_input+0x236>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f32e:	4b2c      	ldr	r3, [pc, #176]	@ (800f3e0 <tcp_input+0xb78>)
 800f330:	f240 1215 	movw	r2, #277	@ 0x115
 800f334:	492d      	ldr	r1, [pc, #180]	@ (800f3ec <tcp_input+0xb84>)
 800f336:	482c      	ldr	r0, [pc, #176]	@ (800f3e8 <tcp_input+0xb80>)
 800f338:	f005 faec 	bl	8014914 <iprintf>
  if (pcb == NULL) {
 800f33c:	f7ff bbb9 	b.w	800eab2 <tcp_input+0x24a>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f340:	2900      	cmp	r1, #0
 800f342:	f47f aecb 	bne.w	800f0dc <tcp_input+0x874>
 800f346:	4b26      	ldr	r3, [pc, #152]	@ (800f3e0 <tcp_input+0xb78>)
 800f348:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f34c:	4928      	ldr	r1, [pc, #160]	@ (800f3f0 <tcp_input+0xb88>)
 800f34e:	4826      	ldr	r0, [pc, #152]	@ (800f3e8 <tcp_input+0xb80>)
 800f350:	f005 fae0 	bl	8014914 <iprintf>
 800f354:	e6c2      	b.n	800f0dc <tcp_input+0x874>
  } else if (flags & TCP_FIN) {
 800f356:	07c1      	lsls	r1, r0, #31
 800f358:	f57f ac55 	bpl.w	800ec06 <tcp_input+0x39e>
    pcb->tmr = tcp_ticks;
 800f35c:	4b25      	ldr	r3, [pc, #148]	@ (800f3f4 <tcp_input+0xb8c>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	622b      	str	r3, [r5, #32]
 800f362:	e450      	b.n	800ec06 <tcp_input+0x39e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f364:	429a      	cmp	r2, r3
 800f366:	bf88      	it	hi
 800f368:	b293      	uxthhi	r3, r2
 800f36a:	e7c7      	b.n	800f2fc <tcp_input+0xa94>
          TCP_RMV_ACTIVE(pcb);
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f43f ae20 	beq.w	800efb2 <tcp_input+0x74a>
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	42aa      	cmp	r2, r5
 800f376:	d0c9      	beq.n	800f30c <tcp_input+0xaa4>
 800f378:	4613      	mov	r3, r2
 800f37a:	e7f7      	b.n	800f36c <tcp_input+0xb04>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f37c:	4b18      	ldr	r3, [pc, #96]	@ (800f3e0 <tcp_input+0xb78>)
 800f37e:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f382:	491d      	ldr	r1, [pc, #116]	@ (800f3f8 <tcp_input+0xb90>)
 800f384:	4818      	ldr	r0, [pc, #96]	@ (800f3e8 <tcp_input+0xb80>)
 800f386:	f005 fac5 	bl	8014914 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f38a:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800f38c:	699b      	ldr	r3, [r3, #24]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d197      	bne.n	800f2c2 <tcp_input+0xa5a>
 800f392:	e73c      	b.n	800f20e <tcp_input+0x9a6>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f394:	9102      	str	r1, [sp, #8]
 800f396:	4432      	add	r2, r6
 800f398:	4918      	ldr	r1, [pc, #96]	@ (800f3fc <tcp_input+0xb94>)
 800f39a:	4628      	mov	r0, r5
 800f39c:	6809      	ldr	r1, [r1, #0]
 800f39e:	e68f      	b.n	800f0c0 <tcp_input+0x858>
            if (err != ERR_ABRT) {
 800f3a0:	330d      	adds	r3, #13
 800f3a2:	f43f abde 	beq.w	800eb62 <tcp_input+0x2fa>
 800f3a6:	e732      	b.n	800f20e <tcp_input+0x9a6>
          pcb->rtime = -1;
 800f3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ac:	e6f9      	b.n	800f1a2 <tcp_input+0x93a>
          rseg = pcb->unsent;
 800f3ae:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f3b0:	b176      	cbz	r6, 800f3d0 <tcp_input+0xb68>
          pcb->unsent = rseg->next;
 800f3b2:	6833      	ldr	r3, [r6, #0]
 800f3b4:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800f3b6:	e6ea      	b.n	800f18e <tcp_input+0x926>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f3b8:	4b09      	ldr	r3, [pc, #36]	@ (800f3e0 <tcp_input+0xb78>)
 800f3ba:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f3be:	4910      	ldr	r1, [pc, #64]	@ (800f400 <tcp_input+0xb98>)
 800f3c0:	4809      	ldr	r0, [pc, #36]	@ (800f3e8 <tcp_input+0xb80>)
 800f3c2:	f005 faa7 	bl	8014914 <iprintf>
 800f3c6:	e6d7      	b.n	800f178 <tcp_input+0x910>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3c8:	4299      	cmp	r1, r3
 800f3ca:	bf88      	it	hi
 800f3cc:	b28b      	uxthhi	r3, r1
 800f3ce:	e6cc      	b.n	800f16a <tcp_input+0x902>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f3d0:	4b03      	ldr	r3, [pc, #12]	@ (800f3e0 <tcp_input+0xb78>)
 800f3d2:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f3d6:	490b      	ldr	r1, [pc, #44]	@ (800f404 <tcp_input+0xb9c>)
 800f3d8:	4803      	ldr	r0, [pc, #12]	@ (800f3e8 <tcp_input+0xb80>)
 800f3da:	f005 fa9b 	bl	8014914 <iprintf>
 800f3de:	e7e8      	b.n	800f3b2 <tcp_input+0xb4a>
 800f3e0:	080174e4 	.word	0x080174e4
 800f3e4:	0801777c 	.word	0x0801777c
 800f3e8:	08015bd0 	.word	0x08015bd0
 800f3ec:	080177a8 	.word	0x080177a8
 800f3f0:	08017804 	.word	0x08017804
 800f3f4:	24010718 	.word	0x24010718
 800f3f8:	08017850 	.word	0x08017850
 800f3fc:	2401072c 	.word	0x2401072c
 800f400:	08017824 	.word	0x08017824
 800f404:	0801783c 	.word	0x0801783c

0800f408 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800f408:	4a02      	ldr	r2, [pc, #8]	@ (800f414 <tcp_trigger_input_pcb_close+0xc>)
 800f40a:	7813      	ldrb	r3, [r2, #0]
 800f40c:	f043 0310 	orr.w	r3, r3, #16
 800f410:	7013      	strb	r3, [r2, #0]
}
 800f412:	4770      	bx	lr
 800f414:	24010724 	.word	0x24010724

0800f418 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	2600      	movs	r6, #0
 800f41e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800f420:	460c      	mov	r4, r1
 800f422:	4681      	mov	r9, r0
 800f424:	f361 060f 	bfi	r6, r1, #0, #16
 800f428:	4615      	mov	r5, r2
 800f42a:	4698      	mov	r8, r3
 800f42c:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 800f430:	f361 461f 	bfi	r6, r1, #16, #16
 800f434:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f438:	2f00      	cmp	r7, #0
 800f43a:	d033      	beq.n	800f4a4 <tcp_pbuf_prealloc+0x8c>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f43c:	42ac      	cmp	r4, r5
 800f43e:	d20e      	bcs.n	800f45e <tcp_pbuf_prealloc+0x46>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f440:	f01a 0f02 	tst.w	sl, #2
 800f444:	d008      	beq.n	800f458 <tcp_pbuf_prealloc+0x40>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f446:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 800f44a:	f021 0103 	bic.w	r1, r1, #3
 800f44e:	42a9      	cmp	r1, r5
 800f450:	bf28      	it	cs
 800f452:	4629      	movcs	r1, r5
 800f454:	b289      	uxth	r1, r1
 800f456:	e003      	b.n	800f460 <tcp_pbuf_prealloc+0x48>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f458:	8b7b      	ldrh	r3, [r7, #26]
 800f45a:	065b      	lsls	r3, r3, #25
 800f45c:	d518      	bpl.n	800f490 <tcp_pbuf_prealloc+0x78>
 800f45e:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f460:	4648      	mov	r0, r9
 800f462:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f466:	f7fc fed5 	bl	800c214 <pbuf_alloc>
  if (p == NULL) {
 800f46a:	4605      	mov	r5, r0
 800f46c:	b168      	cbz	r0, 800f48a <tcp_pbuf_prealloc+0x72>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f46e:	6803      	ldr	r3, [r0, #0]
 800f470:	b133      	cbz	r3, 800f480 <tcp_pbuf_prealloc+0x68>
 800f472:	4b10      	ldr	r3, [pc, #64]	@ (800f4b4 <tcp_pbuf_prealloc+0x9c>)
 800f474:	f240 120b 	movw	r2, #267	@ 0x10b
 800f478:	490f      	ldr	r1, [pc, #60]	@ (800f4b8 <tcp_pbuf_prealloc+0xa0>)
 800f47a:	4810      	ldr	r0, [pc, #64]	@ (800f4bc <tcp_pbuf_prealloc+0xa4>)
 800f47c:	f005 fa4a 	bl	8014914 <iprintf>
  *oversize = p->len - length;
 800f480:	896b      	ldrh	r3, [r5, #10]
 800f482:	1b1b      	subs	r3, r3, r4
 800f484:	f8a8 3000 	strh.w	r3, [r8]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f488:	60ae      	str	r6, [r5, #8]
  return p;
}
 800f48a:	4628      	mov	r0, r5
 800f48c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800f490:	f1bb 0f00 	cmp.w	fp, #0
 800f494:	d0d7      	beq.n	800f446 <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
 800f496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d1d4      	bne.n	800f446 <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
 800f49c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1d1      	bne.n	800f446 <tcp_pbuf_prealloc+0x2e>
 800f4a2:	e7dc      	b.n	800f45e <tcp_pbuf_prealloc+0x46>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f4a4:	4b03      	ldr	r3, [pc, #12]	@ (800f4b4 <tcp_pbuf_prealloc+0x9c>)
 800f4a6:	22e9      	movs	r2, #233	@ 0xe9
 800f4a8:	4905      	ldr	r1, [pc, #20]	@ (800f4c0 <tcp_pbuf_prealloc+0xa8>)
 800f4aa:	4804      	ldr	r0, [pc, #16]	@ (800f4bc <tcp_pbuf_prealloc+0xa4>)
 800f4ac:	f005 fa32 	bl	8014914 <iprintf>
 800f4b0:	e7c4      	b.n	800f43c <tcp_pbuf_prealloc+0x24>
 800f4b2:	bf00      	nop
 800f4b4:	0801788c 	.word	0x0801788c
 800f4b8:	080178e0 	.word	0x080178e0
 800f4bc:	08015bd0 	.word	0x08015bd0
 800f4c0:	080178c0 	.word	0x080178c0

0800f4c4 <tcp_create_segment>:
{
 800f4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c8:	460e      	mov	r6, r1
 800f4ca:	f89d a020 	ldrb.w	sl, [sp, #32]
 800f4ce:	4690      	mov	r8, r2
 800f4d0:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f4d2:	4607      	mov	r7, r0
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d047      	beq.n	800f568 <tcp_create_segment+0xa4>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f4d8:	2e00      	cmp	r6, #0
 800f4da:	d04d      	beq.n	800f578 <tcp_create_segment+0xb4>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f4dc:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f4e0:	2003      	movs	r0, #3
 800f4e2:	f7fc faad 	bl	800ba40 <memp_malloc>
 800f4e6:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f4e8:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d051      	beq.n	800f594 <tcp_create_segment+0xd0>
  seg->flags = optflags;
 800f4f0:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800f4f4:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f4f6:	8932      	ldrh	r2, [r6, #8]
  seg->p = p;
 800f4f8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f4fa:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800f4fc:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f4fe:	d32b      	bcc.n	800f558 <tcp_create_segment+0x94>
  seg->len = p->tot_len - optlen;
 800f500:	1b52      	subs	r2, r2, r5
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f502:	4630      	mov	r0, r6
 800f504:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800f506:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f508:	f7fc fd82 	bl	800c010 <pbuf_add_header>
 800f50c:	4606      	mov	r6, r0
 800f50e:	2800      	cmp	r0, #0
 800f510:	d139      	bne.n	800f586 <tcp_create_segment+0xc2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f512:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f514:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f516:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f518:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f51c:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f520:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f524:	f7fb feec 	bl	800b300 <lwip_htons>
 800f528:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f52c:	8b38      	ldrh	r0, [r7, #24]
 800f52e:	68e7      	ldr	r7, [r4, #12]
 800f530:	f7fb fee6 	bl	800b300 <lwip_htons>
 800f534:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f536:	4648      	mov	r0, r9
 800f538:	68e7      	ldr	r7, [r4, #12]
 800f53a:	f7fb fee5 	bl	800b308 <lwip_htonl>
 800f53e:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f540:	ea48 0005 	orr.w	r0, r8, r5
 800f544:	68e7      	ldr	r7, [r4, #12]
 800f546:	f7fb fedb 	bl	800b300 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800f54a:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f54c:	81b8      	strh	r0, [r7, #12]
}
 800f54e:	4620      	mov	r0, r4
  seg->tcphdr->urgp = 0;
 800f550:	749e      	strb	r6, [r3, #18]
 800f552:	74de      	strb	r6, [r3, #19]
}
 800f554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f558:	22b0      	movs	r2, #176	@ 0xb0
 800f55a:	4b10      	ldr	r3, [pc, #64]	@ (800f59c <tcp_create_segment+0xd8>)
 800f55c:	4910      	ldr	r1, [pc, #64]	@ (800f5a0 <tcp_create_segment+0xdc>)
 800f55e:	4811      	ldr	r0, [pc, #68]	@ (800f5a4 <tcp_create_segment+0xe0>)
 800f560:	f005 f9d8 	bl	8014914 <iprintf>
  seg->len = p->tot_len - optlen;
 800f564:	8932      	ldrh	r2, [r6, #8]
 800f566:	e7cb      	b.n	800f500 <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f568:	4b0c      	ldr	r3, [pc, #48]	@ (800f59c <tcp_create_segment+0xd8>)
 800f56a:	22a3      	movs	r2, #163	@ 0xa3
 800f56c:	490e      	ldr	r1, [pc, #56]	@ (800f5a8 <tcp_create_segment+0xe4>)
 800f56e:	480d      	ldr	r0, [pc, #52]	@ (800f5a4 <tcp_create_segment+0xe0>)
 800f570:	f005 f9d0 	bl	8014914 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f574:	2e00      	cmp	r6, #0
 800f576:	d1b1      	bne.n	800f4dc <tcp_create_segment+0x18>
 800f578:	4b08      	ldr	r3, [pc, #32]	@ (800f59c <tcp_create_segment+0xd8>)
 800f57a:	22a4      	movs	r2, #164	@ 0xa4
 800f57c:	490b      	ldr	r1, [pc, #44]	@ (800f5ac <tcp_create_segment+0xe8>)
 800f57e:	4809      	ldr	r0, [pc, #36]	@ (800f5a4 <tcp_create_segment+0xe0>)
 800f580:	f005 f9c8 	bl	8014914 <iprintf>
 800f584:	e7aa      	b.n	800f4dc <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800f586:	4620      	mov	r0, r4
 800f588:	f7fd faf8 	bl	800cb7c <tcp_seg_free>
    return NULL;
 800f58c:	2400      	movs	r4, #0
}
 800f58e:	4620      	mov	r0, r4
 800f590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800f594:	4630      	mov	r0, r6
 800f596:	f7fc fdcd 	bl	800c134 <pbuf_free>
    return NULL;
 800f59a:	e7f7      	b.n	800f58c <tcp_create_segment+0xc8>
 800f59c:	0801788c 	.word	0x0801788c
 800f5a0:	08017938 	.word	0x08017938
 800f5a4:	08015bd0 	.word	0x08015bd0
 800f5a8:	080178f4 	.word	0x080178f4
 800f5ac:	08017914 	.word	0x08017914

0800f5b0 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f5b0:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800f5b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f5b6:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800f5b8:	4606      	mov	r6, r0
 800f5ba:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f5bc:	2022      	movs	r0, #34	@ 0x22
 800f5be:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800f5c2:	461c      	mov	r4, r3
 800f5c4:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800f5c8:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f5cc:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f5d0:	f7fc fe20 	bl	800c214 <pbuf_alloc>
  if (p != NULL) {
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	b300      	cbz	r0, 800f61a <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f5d8:	8943      	ldrh	r3, [r0, #10]
 800f5da:	2b13      	cmp	r3, #19
 800f5dc:	d920      	bls.n	800f620 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800f5de:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800f5e0:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800f5e2:	f7fb fe8d 	bl	800b300 <lwip_htons>
 800f5e6:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f5e8:	4650      	mov	r0, sl
 800f5ea:	f7fb fe89 	bl	800b300 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800f5ee:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800f5f0:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7fb fe88 	bl	800b308 <lwip_htonl>
 800f5f8:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f5fa:	f449 40a0 	orr.w	r0, r9, #20480	@ 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800f5fe:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f600:	f7fb fe7e 	bl	800b300 <lwip_htons>
 800f604:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800f606:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f608:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f60a:	f7fb fe79 	bl	800b300 <lwip_htons>
    tcphdr->chksum = 0;
 800f60e:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800f610:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800f612:	7423      	strb	r3, [r4, #16]
 800f614:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800f616:	74a3      	strb	r3, [r4, #18]
 800f618:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800f61a:	4628      	mov	r0, r5
 800f61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f620:	4b03      	ldr	r3, [pc, #12]	@ (800f630 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800f622:	f240 7223 	movw	r2, #1827	@ 0x723
 800f626:	4903      	ldr	r1, [pc, #12]	@ (800f634 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800f628:	4803      	ldr	r0, [pc, #12]	@ (800f638 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800f62a:	f005 f973 	bl	8014914 <iprintf>
 800f62e:	e7d6      	b.n	800f5de <tcp_output_alloc_header_common.constprop.0+0x2e>
 800f630:	0801788c 	.word	0x0801788c
 800f634:	08017950 	.word	0x08017950
 800f638:	08015bd0 	.word	0x08015bd0

0800f63c <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800f63c:	b570      	push	{r4, r5, r6, lr}
 800f63e:	460d      	mov	r5, r1
 800f640:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f642:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800f644:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f646:	b190      	cbz	r0, 800f66e <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f648:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800f64a:	2210      	movs	r2, #16
 800f64c:	8b21      	ldrh	r1, [r4, #24]
 800f64e:	9302      	str	r3, [sp, #8]
 800f650:	e9cd 1200 	strd	r1, r2, [sp]
 800f654:	4632      	mov	r2, r6
 800f656:	4629      	mov	r1, r5
 800f658:	8ae3      	ldrh	r3, [r4, #22]
 800f65a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f65c:	f7ff ffa8 	bl	800f5b0 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f660:	b118      	cbz	r0, 800f66a <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f662:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800f664:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f666:	4413      	add	r3, r2
 800f668:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800f66a:	b004      	add	sp, #16
 800f66c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f66e:	4b04      	ldr	r3, [pc, #16]	@ (800f680 <tcp_output_alloc_header.constprop.0+0x44>)
 800f670:	f240 7242 	movw	r2, #1858	@ 0x742
 800f674:	4903      	ldr	r1, [pc, #12]	@ (800f684 <tcp_output_alloc_header.constprop.0+0x48>)
 800f676:	4804      	ldr	r0, [pc, #16]	@ (800f688 <tcp_output_alloc_header.constprop.0+0x4c>)
 800f678:	f005 f94c 	bl	8014914 <iprintf>
 800f67c:	e7e4      	b.n	800f648 <tcp_output_alloc_header.constprop.0+0xc>
 800f67e:	bf00      	nop
 800f680:	0801788c 	.word	0x0801788c
 800f684:	08017980 	.word	0x08017980
 800f688:	08015bd0 	.word	0x08015bd0

0800f68c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f68e:	4604      	mov	r4, r0
 800f690:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f692:	460d      	mov	r5, r1
{
 800f694:	4617      	mov	r7, r2
 800f696:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f698:	b1f9      	cbz	r1, 800f6da <tcp_output_control_segment+0x4e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f69a:	b334      	cbz	r4, 800f6ea <tcp_output_control_segment+0x5e>
 800f69c:	7a20      	ldrb	r0, [r4, #8]
 800f69e:	b9a8      	cbnz	r0, 800f6cc <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	f003 fe67 	bl	8013374 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800f6a6:	b1a8      	cbz	r0, 800f6d4 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f6a8:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800f6aa:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f6ac:	9400      	str	r4, [sp, #0]
 800f6ae:	2406      	movs	r4, #6
 800f6b0:	9002      	str	r0, [sp, #8]
 800f6b2:	4632      	mov	r2, r6
 800f6b4:	9401      	str	r4, [sp, #4]
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	f004 f81b 	bl	80136f4 <ip4_output_if>
 800f6be:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	f7fc fd37 	bl	800c134 <pbuf_free>
  return err;
}
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	b005      	add	sp, #20
 800f6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800f6cc:	f7fc fc06 	bl	800bedc <netif_get_by_index>
  if (netif == NULL) {
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d1e9      	bne.n	800f6a8 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800f6d4:	f06f 0403 	mvn.w	r4, #3
 800f6d8:	e7f2      	b.n	800f6c0 <tcp_output_control_segment+0x34>
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f6da:	4b07      	ldr	r3, [pc, #28]	@ (800f6f8 <tcp_output_control_segment+0x6c>)
 800f6dc:	f240 7287 	movw	r2, #1927	@ 0x787
 800f6e0:	4906      	ldr	r1, [pc, #24]	@ (800f6fc <tcp_output_control_segment+0x70>)
 800f6e2:	4807      	ldr	r0, [pc, #28]	@ (800f700 <tcp_output_control_segment+0x74>)
 800f6e4:	f005 f916 	bl	8014914 <iprintf>
 800f6e8:	e7d7      	b.n	800f69a <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f003 fe42 	bl	8013374 <ip4_route>
  if (netif == NULL) {
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d0ef      	beq.n	800f6d4 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800f6f4:	23ff      	movs	r3, #255	@ 0xff
 800f6f6:	e7d9      	b.n	800f6ac <tcp_output_control_segment+0x20>
 800f6f8:	0801788c 	.word	0x0801788c
 800f6fc:	080179a8 	.word	0x080179a8
 800f700:	08015bd0 	.word	0x08015bd0

0800f704 <tcp_write>:
{
 800f704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800f708:	2400      	movs	r4, #0
{
 800f70a:	b091      	sub	sp, #68	@ 0x44
 800f70c:	9107      	str	r1, [sp, #28]
 800f70e:	9309      	str	r3, [sp, #36]	@ 0x24
  u16_t oversize = 0;
 800f710:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f714:	2800      	cmp	r0, #0
 800f716:	f000 82dc 	beq.w	800fcd2 <tcp_write+0x5ce>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f71a:	f8b0 a062 	ldrh.w	sl, [r0, #98]	@ 0x62
 800f71e:	4691      	mov	r9, r2
 800f720:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800f722:	4680      	mov	r8, r0
 800f724:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800f728:	459a      	cmp	sl, r3
 800f72a:	4652      	mov	r2, sl
 800f72c:	bf28      	it	cs
 800f72e:	461a      	movcs	r2, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800f730:	2a00      	cmp	r2, #0
 800f732:	bf08      	it	eq
 800f734:	461a      	moveq	r2, r3
 800f736:	9205      	str	r2, [sp, #20]
  LWIP_ASSERT_CORE_LOCKED();
 800f738:	f7f6 fdde 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f73c:	9b07      	ldr	r3, [sp, #28]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f000 82bd 	beq.w	800fcbe <tcp_write+0x5ba>
  if ((pcb->state != ESTABLISHED) &&
 800f744:	f898 3014 	ldrb.w	r3, [r8, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f748:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800f74a:	2a02      	cmp	r2, #2
 800f74c:	d902      	bls.n	800f754 <tcp_write+0x50>
 800f74e:	2b07      	cmp	r3, #7
 800f750:	f040 824d 	bne.w	800fbee <tcp_write+0x4ea>
  } else if (len == 0) {
 800f754:	f1b9 0f00 	cmp.w	r9, #0
 800f758:	d05b      	beq.n	800f812 <tcp_write+0x10e>
  if (len > pcb->snd_buf) {
 800f75a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800f75e:	454b      	cmp	r3, r9
 800f760:	f0c0 8290 	bcc.w	800fc84 <tcp_write+0x580>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f764:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
 800f768:	2d0f      	cmp	r5, #15
 800f76a:	f200 828b 	bhi.w	800fc84 <tcp_write+0x580>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f76e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800f772:	2d00      	cmp	r5, #0
 800f774:	d043      	beq.n	800f7fe <tcp_write+0xfa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f776:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 81db 	beq.w	800fb36 <tcp_write+0x432>
  if (pcb->unsent != NULL) {
 800f780:	2f00      	cmp	r7, #0
 800f782:	f000 81c6 	beq.w	800fb12 <tcp_write+0x40e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f786:	463b      	mov	r3, r7
 800f788:	683f      	ldr	r7, [r7, #0]
 800f78a:	2f00      	cmp	r7, #0
 800f78c:	d1fb      	bne.n	800f786 <tcp_write+0x82>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f78e:	7a9c      	ldrb	r4, [r3, #10]
 800f790:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f792:	00a4      	lsls	r4, r4, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f794:	891b      	ldrh	r3, [r3, #8]
 800f796:	9905      	ldr	r1, [sp, #20]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f798:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f79c:	191a      	adds	r2, r3, r4
 800f79e:	4291      	cmp	r1, r2
 800f7a0:	f2c0 81eb 	blt.w	800fb7a <tcp_write+0x476>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f7a4:	9a05      	ldr	r2, [sp, #20]
 800f7a6:	eba2 0b04 	sub.w	fp, r2, r4
 800f7aa:	ebab 0b03 	sub.w	fp, fp, r3
    oversize = pcb->unsent_oversize;
 800f7ae:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f7b2:	fa1f fb8b 	uxth.w	fp, fp
    oversize = pcb->unsent_oversize;
 800f7b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7b8:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    if (oversize > 0) {
 800f7bc:	b383      	cbz	r3, 800f820 <tcp_write+0x11c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f7be:	455b      	cmp	r3, fp
 800f7c0:	f200 81cb 	bhi.w	800fb5a <tcp_write+0x456>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7c6:	454b      	cmp	r3, r9
 800f7c8:	461c      	mov	r4, r3
 800f7ca:	bf28      	it	cs
 800f7cc:	464c      	movcs	r4, r9
 800f7ce:	455c      	cmp	r4, fp
 800f7d0:	bf28      	it	cs
 800f7d2:	465c      	movcs	r4, fp
      oversize -= oversize_used;
 800f7d4:	1b1b      	subs	r3, r3, r4
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f7dc:	b143      	cbz	r3, 800f7f0 <tcp_write+0xec>
 800f7de:	45a1      	cmp	r9, r4
 800f7e0:	d006      	beq.n	800f7f0 <tcp_write+0xec>
 800f7e2:	4bae      	ldr	r3, [pc, #696]	@ (800fa9c <tcp_write+0x398>)
 800f7e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f7e8:	49ad      	ldr	r1, [pc, #692]	@ (800faa0 <tcp_write+0x39c>)
 800f7ea:	48ae      	ldr	r0, [pc, #696]	@ (800faa4 <tcp_write+0x3a0>)
 800f7ec:	f005 f892 	bl	8014914 <iprintf>
      space -= oversize_used;
 800f7f0:	ebab 0b04 	sub.w	fp, fp, r4
 800f7f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
      pos += oversize_used;
 800f7f6:	940a      	str	r4, [sp, #40]	@ 0x28
      space -= oversize_used;
 800f7f8:	fa1f fb8b 	uxth.w	fp, fp
 800f7fc:	e011      	b.n	800f822 <tcp_write+0x11e>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f000 8182 	beq.w	800fb08 <tcp_write+0x404>
 800f804:	4ba5      	ldr	r3, [pc, #660]	@ (800fa9c <tcp_write+0x398>)
 800f806:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800f80a:	49a7      	ldr	r1, [pc, #668]	@ (800faa8 <tcp_write+0x3a4>)
 800f80c:	48a5      	ldr	r0, [pc, #660]	@ (800faa4 <tcp_write+0x3a0>)
 800f80e:	f005 f881 	bl	8014914 <iprintf>
  if (pcb->unsent != NULL) {
 800f812:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800f816:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800f81a:	2f00      	cmp	r7, #0
 800f81c:	d1b3      	bne.n	800f786 <tcp_write+0x82>
 800f81e:	e178      	b.n	800fb12 <tcp_write+0x40e>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f820:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f824:	454b      	cmp	r3, r9
 800f826:	d23b      	bcs.n	800f8a0 <tcp_write+0x19c>
 800f828:	f1bb 0f00 	cmp.w	fp, #0
 800f82c:	d038      	beq.n	800f8a0 <tcp_write+0x19c>
 800f82e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f830:	8912      	ldrh	r2, [r2, #8]
 800f832:	920d      	str	r2, [sp, #52]	@ 0x34
 800f834:	2a00      	cmp	r2, #0
 800f836:	f000 817a 	beq.w	800fb2e <tcp_write+0x42a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f83a:	eba9 0603 	sub.w	r6, r9, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f840:	455e      	cmp	r6, fp
 800f842:	bfa8      	it	ge
 800f844:	465e      	movge	r6, fp
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f846:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f848:	b2b4      	uxth	r4, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f84a:	f100 81d3 	bmi.w	800fbf4 <tcp_write+0x4f0>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	4613      	mov	r3, r2
 800f854:	6812      	ldr	r2, [r2, #0]
 800f856:	2a00      	cmp	r2, #0
 800f858:	d1fb      	bne.n	800f852 <tcp_write+0x14e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f85a:	920c      	str	r2, [sp, #48]	@ 0x30
 800f85c:	7b1a      	ldrb	r2, [r3, #12]
 800f85e:	2a3f      	cmp	r2, #63	@ 0x3f
 800f860:	d806      	bhi.n	800f870 <tcp_write+0x16c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f862:	895a      	ldrh	r2, [r3, #10]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f868:	9a07      	ldr	r2, [sp, #28]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	f000 81ba 	beq.w	800fbe4 <tcp_write+0x4e0>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f870:	2201      	movs	r2, #1
 800f872:	4621      	mov	r1, r4
 800f874:	2000      	movs	r0, #0
 800f876:	f7fc fccd 	bl	800c214 <pbuf_alloc>
 800f87a:	900c      	str	r0, [sp, #48]	@ 0x30
 800f87c:	2800      	cmp	r0, #0
 800f87e:	f000 8232 	beq.w	800fce6 <tcp_write+0x5e2>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f882:	9b07      	ldr	r3, [sp, #28]
 800f884:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f886:	440b      	add	r3, r1
 800f888:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800f88a:	f7fc fde5 	bl	800c458 <pbuf_clen>
 800f88e:	1943      	adds	r3, r0, r5
 800f890:	b29d      	uxth	r5, r3
  u16_t extendlen = 0;
 800f892:	2300      	movs	r3, #0
 800f894:	930d      	str	r3, [sp, #52]	@ 0x34
      pos += seglen;
 800f896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f898:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f89a:	1919      	adds	r1, r3, r4
 800f89c:	b28c      	uxth	r4, r1
 800f89e:	e003      	b.n	800f8a8 <tcp_write+0x1a4>
  struct pbuf *concat_p = NULL;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8a4:	930c      	str	r3, [sp, #48]	@ 0x30
  u16_t extendlen = 0;
 800f8a6:	930d      	str	r3, [sp, #52]	@ 0x34
  while (pos < len) {
 800f8a8:	45a1      	cmp	r9, r4
 800f8aa:	f240 8083 	bls.w	800f9b4 <tcp_write+0x2b0>
 800f8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f8b0:	2700      	movs	r7, #0
 800f8b2:	f003 0301 	and.w	r3, r3, #1
 800f8b6:	46bb      	mov	fp, r7
 800f8b8:	9308      	str	r3, [sp, #32]
 800f8ba:	e03f      	b.n	800f93c <tcp_write+0x238>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f8bc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f040 80d2 	bne.w	800fa6a <tcp_write+0x366>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	4651      	mov	r1, sl
 800f8ca:	2036      	movs	r0, #54	@ 0x36
 800f8cc:	f7fc fca2 	bl	800c214 <pbuf_alloc>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	f000 80f1 	beq.w	800fab8 <tcp_write+0x3b4>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f8d6:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f8d8:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f8da:	9006      	str	r0, [sp, #24]
 800f8dc:	4422      	add	r2, r4
 800f8de:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f8e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f8e4:	2036      	movs	r0, #54	@ 0x36
 800f8e6:	f7fc fc95 	bl	800c214 <pbuf_alloc>
 800f8ea:	9b06      	ldr	r3, [sp, #24]
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	f000 814d 	beq.w	800fb8e <tcp_write+0x48a>
      pbuf_cat(p/*header*/, p2/*data*/);
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	f7fc fdd7 	bl	800c4a8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f7fc fdac 	bl	800c458 <pbuf_clen>
 800f900:	4428      	add	r0, r5
 800f902:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f904:	2d10      	cmp	r5, #16
 800f906:	d849      	bhi.n	800f99c <tcp_write+0x298>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f908:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 800f90c:	2200      	movs	r2, #0
 800f90e:	4631      	mov	r1, r6
 800f910:	4640      	mov	r0, r8
 800f912:	4423      	add	r3, r4
 800f914:	9200      	str	r2, [sp, #0]
 800f916:	f7ff fdd5 	bl	800f4c4 <tcp_create_segment>
 800f91a:	4606      	mov	r6, r0
 800f91c:	2800      	cmp	r0, #0
 800f91e:	f000 80cb 	beq.w	800fab8 <tcp_write+0x3b4>
    if (queue == NULL) {
 800f922:	f1bb 0f00 	cmp.w	fp, #0
 800f926:	d03e      	beq.n	800f9a6 <tcp_write+0x2a2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f928:	2f00      	cmp	r7, #0
 800f92a:	f000 80a6 	beq.w	800fa7a <tcp_write+0x376>
    pos += seglen;
 800f92e:	44a2      	add	sl, r4
      prev_seg->next = seg;
 800f930:	603e      	str	r6, [r7, #0]
    pos += seglen;
 800f932:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800f936:	45a1      	cmp	r9, r4
 800f938:	d93b      	bls.n	800f9b2 <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f93a:	4637      	mov	r7, r6
    u16_t left = len - pos;
 800f93c:	eba9 0a04 	sub.w	sl, r9, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800f940:	9b05      	ldr	r3, [sp, #20]
 800f942:	fa1f fa8a 	uxth.w	sl, sl
 800f946:	459a      	cmp	sl, r3
 800f948:	bf28      	it	cs
 800f94a:	469a      	movcs	sl, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f94c:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f94e:	fa1f fa8a 	uxth.w	sl, sl
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f952:	2b00      	cmp	r3, #0
 800f954:	d0b2      	beq.n	800f8bc <tcp_write+0x1b8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f958:	4651      	mov	r1, sl
 800f95a:	9a05      	ldr	r2, [sp, #20]
 800f95c:	2036      	movs	r0, #54	@ 0x36
 800f95e:	e9cd 8300 	strd	r8, r3, [sp]
 800f962:	fabb f38b 	clz	r3, fp
 800f966:	095b      	lsrs	r3, r3, #5
 800f968:	9302      	str	r3, [sp, #8]
 800f96a:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800f96e:	f7ff fd53 	bl	800f418 <tcp_pbuf_prealloc>
 800f972:	4606      	mov	r6, r0
 800f974:	2800      	cmp	r0, #0
 800f976:	f000 809f 	beq.w	800fab8 <tcp_write+0x3b4>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f97a:	8943      	ldrh	r3, [r0, #10]
 800f97c:	4553      	cmp	r3, sl
 800f97e:	f0c0 8084 	bcc.w	800fa8a <tcp_write+0x386>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f982:	9b07      	ldr	r3, [sp, #28]
 800f984:	4652      	mov	r2, sl
 800f986:	6870      	ldr	r0, [r6, #4]
 800f988:	1919      	adds	r1, r3, r4
 800f98a:	f005 f958 	bl	8014c3e <memcpy>
    queuelen += pbuf_clen(p);
 800f98e:	4630      	mov	r0, r6
 800f990:	f7fc fd62 	bl	800c458 <pbuf_clen>
 800f994:	4428      	add	r0, r5
 800f996:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f998:	2d10      	cmp	r5, #16
 800f99a:	d9b5      	bls.n	800f908 <tcp_write+0x204>
      pbuf_free(p);
 800f99c:	4630      	mov	r0, r6
 800f99e:	465f      	mov	r7, fp
 800f9a0:	f7fc fbc8 	bl	800c134 <pbuf_free>
      goto memerr;
 800f9a4:	e089      	b.n	800faba <tcp_write+0x3b6>
    pos += seglen;
 800f9a6:	44a2      	add	sl, r4
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f9a8:	4683      	mov	fp, r0
    pos += seglen;
 800f9aa:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800f9ae:	45a1      	cmp	r9, r4
 800f9b0:	d8c3      	bhi.n	800f93a <tcp_write+0x236>
 800f9b2:	465f      	mov	r7, fp
  if (oversize_used > 0) {
 800f9b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  pcb->unsent_oversize = oversize;
 800f9b6:	f8bd a03e 	ldrh.w	sl, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f000 80ec 	beq.w	800fb98 <tcp_write+0x494>
    for (p = last_unsent->p; p; p = p->next) {
 800f9c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9c2:	685c      	ldr	r4, [r3, #4]
 800f9c4:	b1d4      	cbz	r4, 800f9fc <tcp_write+0x2f8>
      p->tot_len += oversize_used;
 800f9c6:	8923      	ldrh	r3, [r4, #8]
 800f9c8:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
      if (p->next == NULL) {
 800f9cc:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800f9ce:	445b      	add	r3, fp
 800f9d0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800f9d2:	b131      	cbz	r1, 800f9e2 <tcp_write+0x2de>
      pos += seglen;
 800f9d4:	460c      	mov	r4, r1
      p->tot_len += oversize_used;
 800f9d6:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800f9d8:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800f9da:	445b      	add	r3, fp
 800f9dc:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800f9de:	2900      	cmp	r1, #0
 800f9e0:	d1f8      	bne.n	800f9d4 <tcp_write+0x2d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f9e2:	8963      	ldrh	r3, [r4, #10]
 800f9e4:	465a      	mov	r2, fp
 800f9e6:	6860      	ldr	r0, [r4, #4]
 800f9e8:	9907      	ldr	r1, [sp, #28]
 800f9ea:	4418      	add	r0, r3
 800f9ec:	f005 f927 	bl	8014c3e <memcpy>
        p->len += oversize_used;
 800f9f0:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f9f2:	6821      	ldr	r1, [r4, #0]
        p->len += oversize_used;
 800f9f4:	445b      	add	r3, fp
 800f9f6:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f9f8:	2900      	cmp	r1, #0
 800f9fa:	d1eb      	bne.n	800f9d4 <tcp_write+0x2d0>
    last_unsent->len += oversize_used;
 800f9fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f9fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa00:	8913      	ldrh	r3, [r2, #8]
 800fa02:	4419      	add	r1, r3
  if (concat_p != NULL) {
 800fa04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    last_unsent->len += oversize_used;
 800fa06:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800fa08:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f000 810a 	beq.w	800fc26 <tcp_write+0x522>
    pbuf_cat(last_unsent->p, concat_p);
 800fa12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fa14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fa18:	6860      	ldr	r0, [r4, #4]
 800fa1a:	4651      	mov	r1, sl
 800fa1c:	f7fc fd44 	bl	800c4a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fa20:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 800fa24:	8923      	ldrh	r3, [r4, #8]
 800fa26:	4413      	add	r3, r2
 800fa28:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800fa2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa2c:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 800fa2e:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_queuelen = queuelen;
 800fa32:	f8a8 5066 	strh.w	r5, [r8, #102]	@ 0x66
  pcb->snd_lbb += len;
 800fa36:	444b      	add	r3, r9
 800fa38:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800fa3c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800fa40:	eba3 0309 	sub.w	r3, r3, r9
 800fa44:	f8a8 3064 	strh.w	r3, [r8, #100]	@ 0x64
  if (pcb->snd_queuelen != 0) {
 800fa48:	b125      	cbz	r5, 800fa54 <tcp_write+0x350>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fa4a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f000 80bb 	beq.w	800fbca <tcp_write+0x4c6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800fa54:	b12e      	cbz	r6, 800fa62 <tcp_write+0x35e>
 800fa56:	68f3      	ldr	r3, [r6, #12]
 800fa58:	b11b      	cbz	r3, 800fa62 <tcp_write+0x35e>
 800fa5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa5c:	0792      	lsls	r2, r2, #30
 800fa5e:	f140 80ac 	bpl.w	800fbba <tcp_write+0x4b6>
  return ERR_OK;
 800fa62:	2000      	movs	r0, #0
}
 800fa64:	b011      	add	sp, #68	@ 0x44
 800fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fa6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fa9c <tcp_write+0x398>)
 800fa6c:	f240 2271 	movw	r2, #625	@ 0x271
 800fa70:	490e      	ldr	r1, [pc, #56]	@ (800faac <tcp_write+0x3a8>)
 800fa72:	480c      	ldr	r0, [pc, #48]	@ (800faa4 <tcp_write+0x3a0>)
 800fa74:	f004 ff4e 	bl	8014914 <iprintf>
 800fa78:	e725      	b.n	800f8c6 <tcp_write+0x1c2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fa7a:	4b08      	ldr	r3, [pc, #32]	@ (800fa9c <tcp_write+0x398>)
 800fa7c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800fa80:	490b      	ldr	r1, [pc, #44]	@ (800fab0 <tcp_write+0x3ac>)
 800fa82:	4808      	ldr	r0, [pc, #32]	@ (800faa4 <tcp_write+0x3a0>)
 800fa84:	f004 ff46 	bl	8014914 <iprintf>
 800fa88:	e751      	b.n	800f92e <tcp_write+0x22a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fa8a:	4b04      	ldr	r3, [pc, #16]	@ (800fa9c <tcp_write+0x398>)
 800fa8c:	f240 2266 	movw	r2, #614	@ 0x266
 800fa90:	4908      	ldr	r1, [pc, #32]	@ (800fab4 <tcp_write+0x3b0>)
 800fa92:	4804      	ldr	r0, [pc, #16]	@ (800faa4 <tcp_write+0x3a0>)
 800fa94:	f004 ff3e 	bl	8014914 <iprintf>
 800fa98:	e773      	b.n	800f982 <tcp_write+0x27e>
 800fa9a:	bf00      	nop
 800fa9c:	0801788c 	.word	0x0801788c
 800faa0:	08017ac8 	.word	0x08017ac8
 800faa4:	08015bd0 	.word	0x08015bd0
 800faa8:	08017a5c 	.word	0x08017a5c
 800faac:	08017b84 	.word	0x08017b84
 800fab0:	08017b94 	.word	0x08017b94
 800fab4:	08017b44 	.word	0x08017b44
 800fab8:	465f      	mov	r7, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800faba:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800fabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fac2:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800fac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fac8:	b113      	cbz	r3, 800fad0 <tcp_write+0x3cc>
    pbuf_free(concat_p);
 800faca:	4618      	mov	r0, r3
 800facc:	f7fc fb32 	bl	800c134 <pbuf_free>
  if (queue != NULL) {
 800fad0:	b117      	cbz	r7, 800fad8 <tcp_write+0x3d4>
    tcp_segs_free(queue);
 800fad2:	4638      	mov	r0, r7
 800fad4:	f7fd f840 	bl	800cb58 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800fad8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	@ 0x66
 800fadc:	b923      	cbnz	r3, 800fae8 <tcp_write+0x3e4>
  return ERR_MEM;
 800fade:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fae2:	b011      	add	sp, #68	@ 0x44
 800fae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800fae8:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1f6      	bne.n	800fade <tcp_write+0x3da>
 800faf0:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1f2      	bne.n	800fade <tcp_write+0x3da>
 800faf8:	4b7e      	ldr	r3, [pc, #504]	@ (800fcf4 <tcp_write+0x5f0>)
 800fafa:	f240 3227 	movw	r2, #807	@ 0x327
 800fafe:	497e      	ldr	r1, [pc, #504]	@ (800fcf8 <tcp_write+0x5f4>)
 800fb00:	487e      	ldr	r0, [pc, #504]	@ (800fcfc <tcp_write+0x5f8>)
 800fb02:	f004 ff07 	bl	8014914 <iprintf>
 800fb06:	e7ea      	b.n	800fade <tcp_write+0x3da>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fb08:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f47f ae79 	bne.w	800f804 <tcp_write+0x100>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fb12:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 800fb16:	bb43      	cbnz	r3, 800fb6a <tcp_write+0x466>
  while (pos < len) {
 800fb18:	f1b9 0f00 	cmp.w	r9, #0
 800fb1c:	f000 80c8 	beq.w	800fcb0 <tcp_write+0x5ac>
 800fb20:	2300      	movs	r3, #0
 800fb22:	461c      	mov	r4, r3
 800fb24:	930d      	str	r3, [sp, #52]	@ 0x34
 800fb26:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb28:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800fb2c:	e6bf      	b.n	800f8ae <tcp_write+0x1aa>
  struct pbuf *concat_p = NULL;
 800fb2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb30:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fb32:	930c      	str	r3, [sp, #48]	@ 0x30
 800fb34:	e6bb      	b.n	800f8ae <tcp_write+0x1aa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fb36:	2f00      	cmp	r7, #0
 800fb38:	f47f ae25 	bne.w	800f786 <tcp_write+0x82>
 800fb3c:	4b6d      	ldr	r3, [pc, #436]	@ (800fcf4 <tcp_write+0x5f0>)
 800fb3e:	f240 1255 	movw	r2, #341	@ 0x155
 800fb42:	496f      	ldr	r1, [pc, #444]	@ (800fd00 <tcp_write+0x5fc>)
 800fb44:	486d      	ldr	r0, [pc, #436]	@ (800fcfc <tcp_write+0x5f8>)
 800fb46:	f004 fee5 	bl	8014914 <iprintf>
  if (pcb->unsent != NULL) {
 800fb4a:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800fb4e:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800fb52:	2f00      	cmp	r7, #0
 800fb54:	f47f ae17 	bne.w	800f786 <tcp_write+0x82>
 800fb58:	e7db      	b.n	800fb12 <tcp_write+0x40e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800fb5a:	4b66      	ldr	r3, [pc, #408]	@ (800fcf4 <tcp_write+0x5f0>)
 800fb5c:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800fb60:	4968      	ldr	r1, [pc, #416]	@ (800fd04 <tcp_write+0x600>)
 800fb62:	4866      	ldr	r0, [pc, #408]	@ (800fcfc <tcp_write+0x5f8>)
 800fb64:	f004 fed6 	bl	8014914 <iprintf>
 800fb68:	e62c      	b.n	800f7c4 <tcp_write+0xc0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fb6a:	4b62      	ldr	r3, [pc, #392]	@ (800fcf4 <tcp_write+0x5f0>)
 800fb6c:	f240 224a 	movw	r2, #586	@ 0x24a
 800fb70:	4965      	ldr	r1, [pc, #404]	@ (800fd08 <tcp_write+0x604>)
 800fb72:	4862      	ldr	r0, [pc, #392]	@ (800fcfc <tcp_write+0x5f8>)
 800fb74:	f004 fece 	bl	8014914 <iprintf>
 800fb78:	e7ce      	b.n	800fb18 <tcp_write+0x414>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800fb7a:	4b5e      	ldr	r3, [pc, #376]	@ (800fcf4 <tcp_write+0x5f0>)
 800fb7c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fb80:	4962      	ldr	r1, [pc, #392]	@ (800fd0c <tcp_write+0x608>)
 800fb82:	485e      	ldr	r0, [pc, #376]	@ (800fcfc <tcp_write+0x5f8>)
 800fb84:	f004 fec6 	bl	8014914 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800fb88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb8a:	891b      	ldrh	r3, [r3, #8]
 800fb8c:	e60a      	b.n	800f7a4 <tcp_write+0xa0>
        pbuf_free(p2);
 800fb8e:	4618      	mov	r0, r3
 800fb90:	465f      	mov	r7, fp
 800fb92:	f7fc facf 	bl	800c134 <pbuf_free>
        goto memerr;
 800fb96:	e790      	b.n	800faba <tcp_write+0x3b6>
  if (concat_p != NULL) {
 800fb98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  pcb->unsent_oversize = oversize;
 800fb9a:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d061      	beq.n	800fc66 <tcp_write+0x562>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800fba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f47f af34 	bne.w	800fa12 <tcp_write+0x30e>
 800fbaa:	4b52      	ldr	r3, [pc, #328]	@ (800fcf4 <tcp_write+0x5f0>)
 800fbac:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800fbb0:	4957      	ldr	r1, [pc, #348]	@ (800fd10 <tcp_write+0x60c>)
 800fbb2:	4852      	ldr	r0, [pc, #328]	@ (800fcfc <tcp_write+0x5f8>)
 800fbb4:	f004 feae 	bl	8014914 <iprintf>
 800fbb8:	e72b      	b.n	800fa12 <tcp_write+0x30e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800fbba:	899c      	ldrh	r4, [r3, #12]
 800fbbc:	2008      	movs	r0, #8
 800fbbe:	f7fb fb9f 	bl	800b300 <lwip_htons>
 800fbc2:	68f3      	ldr	r3, [r6, #12]
 800fbc4:	4304      	orrs	r4, r0
 800fbc6:	819c      	strh	r4, [r3, #12]
 800fbc8:	e74b      	b.n	800fa62 <tcp_write+0x35e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fbca:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f47f af40 	bne.w	800fa54 <tcp_write+0x350>
 800fbd4:	4b47      	ldr	r3, [pc, #284]	@ (800fcf4 <tcp_write+0x5f0>)
 800fbd6:	f240 3212 	movw	r2, #786	@ 0x312
 800fbda:	4947      	ldr	r1, [pc, #284]	@ (800fcf8 <tcp_write+0x5f4>)
 800fbdc:	4847      	ldr	r0, [pc, #284]	@ (800fcfc <tcp_write+0x5f8>)
 800fbde:	f004 fe99 	bl	8014914 <iprintf>
 800fbe2:	e737      	b.n	800fa54 <tcp_write+0x350>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800fbe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d15a      	bne.n	800fca0 <tcp_write+0x59c>
          extendlen = seglen;
 800fbea:	940d      	str	r4, [sp, #52]	@ 0x34
 800fbec:	e653      	b.n	800f896 <tcp_write+0x192>
    return ERR_CONN;
 800fbee:	f06f 000a 	mvn.w	r0, #10
 800fbf2:	e737      	b.n	800fa64 <tcp_write+0x360>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800fbf4:	e9cd 8300 	strd	r8, r3, [sp]
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	465a      	mov	r2, fp
 800fbfc:	4621      	mov	r1, r4
 800fbfe:	2000      	movs	r0, #0
 800fc00:	9302      	str	r3, [sp, #8]
 800fc02:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800fc06:	f7ff fc07 	bl	800f418 <tcp_pbuf_prealloc>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	900c      	str	r0, [sp, #48]	@ 0x30
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d069      	beq.n	800fce6 <tcp_write+0x5e2>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800fc12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc14:	461e      	mov	r6, r3
 800fc16:	9907      	ldr	r1, [sp, #28]
 800fc18:	4622      	mov	r2, r4
 800fc1a:	4401      	add	r1, r0
 800fc1c:	6858      	ldr	r0, [r3, #4]
 800fc1e:	f005 f80e 	bl	8014c3e <memcpy>
        queuelen += pbuf_clen(concat_p);
 800fc22:	4630      	mov	r0, r6
 800fc24:	e631      	b.n	800f88a <tcp_write+0x186>
  } else if (extendlen > 0) {
 800fc26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	f43f aefe 	beq.w	800fa2a <tcp_write+0x326>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fc2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc30:	6859      	ldr	r1, [r3, #4]
 800fc32:	b1e9      	cbz	r1, 800fc70 <tcp_write+0x56c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc34:	680a      	ldr	r2, [r1, #0]
 800fc36:	2a00      	cmp	r2, #0
 800fc38:	d053      	beq.n	800fce2 <tcp_write+0x5de>
 800fc3a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800fc3c:	e000      	b.n	800fc40 <tcp_write+0x53c>
 800fc3e:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800fc40:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc42:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800fc44:	4423      	add	r3, r4
 800fc46:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc48:	4611      	mov	r1, r2
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d1f7      	bne.n	800fc3e <tcp_write+0x53a>
    p->tot_len += extendlen;
 800fc4e:	8913      	ldrh	r3, [r2, #8]
 800fc50:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fc52:	440b      	add	r3, r1
 800fc54:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800fc56:	8953      	ldrh	r3, [r2, #10]
 800fc58:	440b      	add	r3, r1
 800fc5a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800fc5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc5e:	8913      	ldrh	r3, [r2, #8]
 800fc60:	440b      	add	r3, r1
 800fc62:	8113      	strh	r3, [r2, #8]
  if (last_unsent == NULL) {
 800fc64:	e6e1      	b.n	800fa2a <tcp_write+0x326>
  } else if (extendlen > 0) {
 800fc66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc68:	b19b      	cbz	r3, 800fc92 <tcp_write+0x58e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fc6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1de      	bne.n	800fc2e <tcp_write+0x52a>
 800fc70:	4b20      	ldr	r3, [pc, #128]	@ (800fcf4 <tcp_write+0x5f0>)
 800fc72:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800fc76:	4927      	ldr	r1, [pc, #156]	@ (800fd14 <tcp_write+0x610>)
 800fc78:	4820      	ldr	r0, [pc, #128]	@ (800fcfc <tcp_write+0x5f8>)
 800fc7a:	f004 fe4b 	bl	8014914 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc80:	6859      	ldr	r1, [r3, #4]
 800fc82:	e7d7      	b.n	800fc34 <tcp_write+0x530>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fc84:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800fc88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc8c:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (err != ERR_OK) {
 800fc90:	e725      	b.n	800fade <tcp_write+0x3da>
  if (last_unsent == NULL) {
 800fc92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f47f aec8 	bne.w	800fa2a <tcp_write+0x326>
    pcb->unsent = queue;
 800fc9a:	f8c8 706c 	str.w	r7, [r8, #108]	@ 0x6c
 800fc9e:	e6c6      	b.n	800fa2e <tcp_write+0x32a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800fca0:	4b14      	ldr	r3, [pc, #80]	@ (800fcf4 <tcp_write+0x5f0>)
 800fca2:	f240 2231 	movw	r2, #561	@ 0x231
 800fca6:	491c      	ldr	r1, [pc, #112]	@ (800fd18 <tcp_write+0x614>)
 800fca8:	4814      	ldr	r0, [pc, #80]	@ (800fcfc <tcp_write+0x5f8>)
 800fcaa:	f004 fe33 	bl	8014914 <iprintf>
 800fcae:	e79c      	b.n	800fbea <tcp_write+0x4e6>
  pcb->unsent_oversize = oversize;
 800fcb0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800fcb4:	464f      	mov	r7, r9
 800fcb6:	464e      	mov	r6, r9
 800fcb8:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800fcbc:	e7ed      	b.n	800fc9a <tcp_write+0x596>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800fcbe:	4b0d      	ldr	r3, [pc, #52]	@ (800fcf4 <tcp_write+0x5f0>)
 800fcc0:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800fcc4:	4915      	ldr	r1, [pc, #84]	@ (800fd1c <tcp_write+0x618>)
 800fcc6:	480d      	ldr	r0, [pc, #52]	@ (800fcfc <tcp_write+0x5f8>)
 800fcc8:	f004 fe24 	bl	8014914 <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800fccc:	f06f 000f 	mvn.w	r0, #15
 800fcd0:	e6c8      	b.n	800fa64 <tcp_write+0x360>
 800fcd2:	4b08      	ldr	r3, [pc, #32]	@ (800fcf4 <tcp_write+0x5f0>)
 800fcd4:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800fcd8:	4911      	ldr	r1, [pc, #68]	@ (800fd20 <tcp_write+0x61c>)
 800fcda:	4808      	ldr	r0, [pc, #32]	@ (800fcfc <tcp_write+0x5f8>)
 800fcdc:	f004 fe1a 	bl	8014914 <iprintf>
 800fce0:	e7f4      	b.n	800fccc <tcp_write+0x5c8>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fce2:	460a      	mov	r2, r1
 800fce4:	e7b3      	b.n	800fc4e <tcp_write+0x54a>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fce6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800fcea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcee:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800fcf2:	e6f1      	b.n	800fad8 <tcp_write+0x3d4>
 800fcf4:	0801788c 	.word	0x0801788c
 800fcf8:	08017c18 	.word	0x08017c18
 800fcfc:	08015bd0 	.word	0x08015bd0
 800fd00:	08017a20 	.word	0x08017a20
 800fd04:	08017aa8 	.word	0x08017aa8
 800fd08:	08017b14 	.word	0x08017b14
 800fd0c:	08017a90 	.word	0x08017a90
 800fd10:	08017ba8 	.word	0x08017ba8
 800fd14:	08017be0 	.word	0x08017be0
 800fd18:	08017ae8 	.word	0x08017ae8
 800fd1c:	080179ec 	.word	0x080179ec
 800fd20:	080179d4 	.word	0x080179d4

0800fd24 <tcp_split_unsent_seg>:
{
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fd28:	4606      	mov	r6, r0
{
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	f000 80ad 	beq.w	800fe8e <tcp_split_unsent_seg+0x16a>
  useg = pcb->unsent;
 800fd34:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800fd36:	2d00      	cmp	r5, #0
 800fd38:	f000 80b4 	beq.w	800fea4 <tcp_split_unsent_seg+0x180>
  if (split == 0) {
 800fd3c:	2c00      	cmp	r4, #0
 800fd3e:	f000 80b4 	beq.w	800feaa <tcp_split_unsent_seg+0x186>
  if (useg->len <= split) {
 800fd42:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800fd46:	45a0      	cmp	r8, r4
 800fd48:	d97e      	bls.n	800fe48 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fd4a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	f0c0 8084 	bcc.w	800fe5a <tcp_split_unsent_seg+0x136>
  optflags = useg->flags;
 800fd52:	f895 a00a 	ldrb.w	sl, [r5, #10]
  remainder = useg->len - split;
 800fd56:	eba8 0904 	sub.w	r9, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fd5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd5e:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fd60:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800fd64:	fa1f f989 	uxth.w	r9, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fd68:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fd6c:	eb0b 0109 	add.w	r1, fp, r9
 800fd70:	b289      	uxth	r1, r1
 800fd72:	f7fc fa4f 	bl	800c214 <pbuf_alloc>
  if (p == NULL) {
 800fd76:	4607      	mov	r7, r0
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	f000 8093 	beq.w	800fea4 <tcp_split_unsent_seg+0x180>
  offset = useg->p->tot_len - useg->len + split;
 800fd7e:	6868      	ldr	r0, [r5, #4]
 800fd80:	892a      	ldrh	r2, [r5, #8]
 800fd82:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fd84:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800fd86:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fd88:	464a      	mov	r2, r9
 800fd8a:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800fd8c:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	f7fc fcb4 	bl	800c6fc <pbuf_copy_partial>
 800fd94:	4548      	cmp	r0, r9
 800fd96:	f040 8082 	bne.w	800fe9e <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fd9a:	68eb      	ldr	r3, [r5, #12]
 800fd9c:	8998      	ldrh	r0, [r3, #12]
 800fd9e:	f7fb faaf 	bl	800b300 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800fda2:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fda6:	fa5f f980 	uxtb.w	r9, r0
  if (split_flags & TCP_PSH) {
 800fdaa:	d151      	bne.n	800fe50 <tcp_split_unsent_seg+0x12c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fdac:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
  if (split_flags & TCP_FIN) {
 800fdb0:	f019 0f01 	tst.w	r9, #1
 800fdb4:	d003      	beq.n	800fdbe <tcp_split_unsent_seg+0x9a>
    split_flags &= ~TCP_FIN;
 800fdb6:	f009 09fe 	and.w	r9, r9, #254	@ 0xfe
    remainder_flags |= TCP_FIN;
 800fdba:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fdbe:	68eb      	ldr	r3, [r5, #12]
 800fdc0:	6858      	ldr	r0, [r3, #4]
 800fdc2:	f7fb faa1 	bl	800b308 <lwip_htonl>
 800fdc6:	f8cd a000 	str.w	sl, [sp]
 800fdca:	1823      	adds	r3, r4, r0
 800fdcc:	465a      	mov	r2, fp
 800fdce:	4639      	mov	r1, r7
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f7ff fb77 	bl	800f4c4 <tcp_create_segment>
  if (seg == NULL) {
 800fdd6:	4682      	mov	sl, r0
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d060      	beq.n	800fe9e <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fddc:	6868      	ldr	r0, [r5, #4]
 800fdde:	eba4 0408 	sub.w	r4, r4, r8
 800fde2:	f7fc fb39 	bl	800c458 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fde6:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fde8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800fdec:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fdee:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fdf0:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fdf6:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fdfa:	b289      	uxth	r1, r1
 800fdfc:	f7fc fab2 	bl	800c364 <pbuf_realloc>
  useg->len -= remainder;
 800fe00:	892b      	ldrh	r3, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fe02:	4648      	mov	r0, r9
  useg->len -= remainder;
 800fe04:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fe06:	68eb      	ldr	r3, [r5, #12]
  useg->len -= remainder;
 800fe08:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fe0a:	899c      	ldrh	r4, [r3, #12]
 800fe0c:	f7fb fa78 	bl	800b300 <lwip_htons>
 800fe10:	68eb      	ldr	r3, [r5, #12]
 800fe12:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fe14:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fe16:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fe18:	f7fc fb1e 	bl	800c458 <pbuf_clen>
 800fe1c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800fe20:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe22:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fe26:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe2a:	f7fc fb15 	bl	800c458 <pbuf_clen>
 800fe2e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800fe32:	4418      	add	r0, r3
  seg->next = useg->next;
 800fe34:	682b      	ldr	r3, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe36:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800fe3a:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800fe3e:	f8c5 a000 	str.w	sl, [r5]
  if (seg->next == NULL) {
 800fe42:	f8da 3000 	ldr.w	r3, [sl]
 800fe46:	b1fb      	cbz	r3, 800fe88 <tcp_split_unsent_seg+0x164>
    return ERR_OK;
 800fe48:	2000      	movs	r0, #0
}
 800fe4a:	b003      	add	sp, #12
 800fe4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    split_flags &= ~TCP_PSH;
 800fe50:	f009 0937 	and.w	r9, r9, #55	@ 0x37
    remainder_flags |= TCP_PSH;
 800fe54:	f04f 0b08 	mov.w	fp, #8
 800fe58:	e7aa      	b.n	800fdb0 <tcp_split_unsent_seg+0x8c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fe5a:	4b19      	ldr	r3, [pc, #100]	@ (800fec0 <tcp_split_unsent_seg+0x19c>)
 800fe5c:	f240 325b 	movw	r2, #859	@ 0x35b
 800fe60:	4918      	ldr	r1, [pc, #96]	@ (800fec4 <tcp_split_unsent_seg+0x1a0>)
 800fe62:	4819      	ldr	r0, [pc, #100]	@ (800fec8 <tcp_split_unsent_seg+0x1a4>)
 800fe64:	f004 fd56 	bl	8014914 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fe68:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800fe6c:	f1b8 0f00 	cmp.w	r8, #0
 800fe70:	f47f af6f 	bne.w	800fd52 <tcp_split_unsent_seg+0x2e>
 800fe74:	4b12      	ldr	r3, [pc, #72]	@ (800fec0 <tcp_split_unsent_seg+0x19c>)
 800fe76:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800fe7a:	4914      	ldr	r1, [pc, #80]	@ (800fecc <tcp_split_unsent_seg+0x1a8>)
 800fe7c:	4812      	ldr	r0, [pc, #72]	@ (800fec8 <tcp_split_unsent_seg+0x1a4>)
 800fe7e:	f004 fd49 	bl	8014914 <iprintf>
  remainder = useg->len - split;
 800fe82:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800fe86:	e764      	b.n	800fd52 <tcp_split_unsent_seg+0x2e>
    pcb->unsent_oversize = 0;
 800fe88:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
 800fe8c:	e7dc      	b.n	800fe48 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fe8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fec0 <tcp_split_unsent_seg+0x19c>)
 800fe90:	f240 324b 	movw	r2, #843	@ 0x34b
 800fe94:	490e      	ldr	r1, [pc, #56]	@ (800fed0 <tcp_split_unsent_seg+0x1ac>)
 800fe96:	480c      	ldr	r0, [pc, #48]	@ (800fec8 <tcp_split_unsent_seg+0x1a4>)
 800fe98:	f004 fd3c 	bl	8014914 <iprintf>
 800fe9c:	e74a      	b.n	800fd34 <tcp_split_unsent_seg+0x10>
    pbuf_free(p);
 800fe9e:	4638      	mov	r0, r7
 800fea0:	f7fc f948 	bl	800c134 <pbuf_free>
    return ERR_MEM;
 800fea4:	f04f 30ff 	mov.w	r0, #4294967295
 800fea8:	e7cf      	b.n	800fe4a <tcp_split_unsent_seg+0x126>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800feaa:	4b05      	ldr	r3, [pc, #20]	@ (800fec0 <tcp_split_unsent_seg+0x19c>)
 800feac:	f240 3253 	movw	r2, #851	@ 0x353
 800feb0:	4908      	ldr	r1, [pc, #32]	@ (800fed4 <tcp_split_unsent_seg+0x1b0>)
 800feb2:	4805      	ldr	r0, [pc, #20]	@ (800fec8 <tcp_split_unsent_seg+0x1a4>)
 800feb4:	f004 fd2e 	bl	8014914 <iprintf>
    return ERR_VAL;
 800feb8:	f06f 0005 	mvn.w	r0, #5
 800febc:	e7c5      	b.n	800fe4a <tcp_split_unsent_seg+0x126>
 800febe:	bf00      	nop
 800fec0:	0801788c 	.word	0x0801788c
 800fec4:	08017c80 	.word	0x08017c80
 800fec8:	08015bd0 	.word	0x08015bd0
 800fecc:	08017c90 	.word	0x08017c90
 800fed0:	08017c38 	.word	0x08017c38
 800fed4:	08017c5c 	.word	0x08017c5c

0800fed8 <tcp_enqueue_flags>:
{
 800fed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fedc:	f011 0703 	ands.w	r7, r1, #3
{
 800fee0:	b083      	sub	sp, #12
 800fee2:	460d      	mov	r5, r1
 800fee4:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fee6:	d053      	beq.n	800ff90 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fee8:	2c00      	cmp	r4, #0
 800feea:	d05a      	beq.n	800ffa2 <tcp_enqueue_flags+0xca>
  if (flags & TCP_SYN) {
 800feec:	f3c5 0840 	ubfx	r8, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fef0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fef4:	2036      	movs	r0, #54	@ 0x36
 800fef6:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800fefa:	4649      	mov	r1, r9
 800fefc:	f7fc f98a 	bl	800c214 <pbuf_alloc>
 800ff00:	4606      	mov	r6, r0
 800ff02:	2800      	cmp	r0, #0
 800ff04:	d071      	beq.n	800ffea <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ff06:	8943      	ldrh	r3, [r0, #10]
 800ff08:	454b      	cmp	r3, r9
 800ff0a:	d352      	bcc.n	800ffb2 <tcp_enqueue_flags+0xda>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ff0c:	4631      	mov	r1, r6
 800ff0e:	f8cd 8000 	str.w	r8, [sp]
 800ff12:	462a      	mov	r2, r5
 800ff14:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800ff16:	4620      	mov	r0, r4
 800ff18:	f7ff fad4 	bl	800f4c4 <tcp_create_segment>
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d063      	beq.n	800ffea <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ff22:	68c3      	ldr	r3, [r0, #12]
 800ff24:	079a      	lsls	r2, r3, #30
 800ff26:	d158      	bne.n	800ffda <tcp_enqueue_flags+0x102>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ff28:	8933      	ldrh	r3, [r6, #8]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d149      	bne.n	800ffc2 <tcp_enqueue_flags+0xea>
  if (pcb->unsent == NULL) {
 800ff2e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d050      	beq.n	800ffd6 <tcp_enqueue_flags+0xfe>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ff34:	461a      	mov	r2, r3
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1fb      	bne.n	800ff34 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800ff3c:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ff44:	b117      	cbz	r7, 800ff4c <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800ff46:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800ff48:	3301      	adds	r3, #1
 800ff4a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800ff4c:	07eb      	lsls	r3, r5, #31
 800ff4e:	d503      	bpl.n	800ff58 <tcp_enqueue_flags+0x80>
    tcp_set_flags(pcb, TF_FIN);
 800ff50:	8b63      	ldrh	r3, [r4, #26]
 800ff52:	f043 0320 	orr.w	r3, r3, #32
 800ff56:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ff58:	6870      	ldr	r0, [r6, #4]
 800ff5a:	f7fc fa7d 	bl	800c458 <pbuf_clen>
 800ff5e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800ff62:	4418      	add	r0, r3
 800ff64:	b280      	uxth	r0, r0
 800ff66:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800ff6a:	b918      	cbnz	r0, 800ff74 <tcp_enqueue_flags+0x9c>
  return ERR_OK;
 800ff6c:	2000      	movs	r0, #0
}
 800ff6e:	b003      	add	sp, #12
 800ff70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ff74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1f8      	bne.n	800ff6c <tcp_enqueue_flags+0x94>
 800ff7a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1f5      	bne.n	800ff6c <tcp_enqueue_flags+0x94>
 800ff80:	4b1d      	ldr	r3, [pc, #116]	@ (800fff8 <tcp_enqueue_flags+0x120>)
 800ff82:	f240 4265 	movw	r2, #1125	@ 0x465
 800ff86:	491d      	ldr	r1, [pc, #116]	@ (800fffc <tcp_enqueue_flags+0x124>)
 800ff88:	481d      	ldr	r0, [pc, #116]	@ (8010000 <tcp_enqueue_flags+0x128>)
 800ff8a:	f004 fcc3 	bl	8014914 <iprintf>
 800ff8e:	e7ed      	b.n	800ff6c <tcp_enqueue_flags+0x94>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ff90:	4b19      	ldr	r3, [pc, #100]	@ (800fff8 <tcp_enqueue_flags+0x120>)
 800ff92:	f240 4211 	movw	r2, #1041	@ 0x411
 800ff96:	491b      	ldr	r1, [pc, #108]	@ (8010004 <tcp_enqueue_flags+0x12c>)
 800ff98:	4819      	ldr	r0, [pc, #100]	@ (8010000 <tcp_enqueue_flags+0x128>)
 800ff9a:	f004 fcbb 	bl	8014914 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ff9e:	2c00      	cmp	r4, #0
 800ffa0:	d1a4      	bne.n	800feec <tcp_enqueue_flags+0x14>
 800ffa2:	4b15      	ldr	r3, [pc, #84]	@ (800fff8 <tcp_enqueue_flags+0x120>)
 800ffa4:	f240 4213 	movw	r2, #1043	@ 0x413
 800ffa8:	4917      	ldr	r1, [pc, #92]	@ (8010008 <tcp_enqueue_flags+0x130>)
 800ffaa:	4815      	ldr	r0, [pc, #84]	@ (8010000 <tcp_enqueue_flags+0x128>)
 800ffac:	f004 fcb2 	bl	8014914 <iprintf>
 800ffb0:	e79c      	b.n	800feec <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ffb2:	4b11      	ldr	r3, [pc, #68]	@ (800fff8 <tcp_enqueue_flags+0x120>)
 800ffb4:	f240 4239 	movw	r2, #1081	@ 0x439
 800ffb8:	4914      	ldr	r1, [pc, #80]	@ (801000c <tcp_enqueue_flags+0x134>)
 800ffba:	4811      	ldr	r0, [pc, #68]	@ (8010000 <tcp_enqueue_flags+0x128>)
 800ffbc:	f004 fcaa 	bl	8014914 <iprintf>
 800ffc0:	e7a4      	b.n	800ff0c <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fff8 <tcp_enqueue_flags+0x120>)
 800ffc4:	f240 4243 	movw	r2, #1091	@ 0x443
 800ffc8:	4911      	ldr	r1, [pc, #68]	@ (8010010 <tcp_enqueue_flags+0x138>)
 800ffca:	480d      	ldr	r0, [pc, #52]	@ (8010000 <tcp_enqueue_flags+0x128>)
 800ffcc:	f004 fca2 	bl	8014914 <iprintf>
  if (pcb->unsent == NULL) {
 800ffd0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d1ae      	bne.n	800ff34 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 800ffd6:	66e6      	str	r6, [r4, #108]	@ 0x6c
 800ffd8:	e7b1      	b.n	800ff3e <tcp_enqueue_flags+0x66>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ffda:	4b07      	ldr	r3, [pc, #28]	@ (800fff8 <tcp_enqueue_flags+0x120>)
 800ffdc:	f240 4242 	movw	r2, #1090	@ 0x442
 800ffe0:	490c      	ldr	r1, [pc, #48]	@ (8010014 <tcp_enqueue_flags+0x13c>)
 800ffe2:	4807      	ldr	r0, [pc, #28]	@ (8010000 <tcp_enqueue_flags+0x128>)
 800ffe4:	f004 fc96 	bl	8014914 <iprintf>
 800ffe8:	e79e      	b.n	800ff28 <tcp_enqueue_flags+0x50>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ffea:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800ffec:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fff4:	8363      	strh	r3, [r4, #26]
 800fff6:	e7ba      	b.n	800ff6e <tcp_enqueue_flags+0x96>
 800fff8:	0801788c 	.word	0x0801788c
 800fffc:	08017d98 	.word	0x08017d98
 8010000:	08015bd0 	.word	0x08015bd0
 8010004:	08017ca0 	.word	0x08017ca0
 8010008:	08017cf8 	.word	0x08017cf8
 801000c:	08017d18 	.word	0x08017d18
 8010010:	08017d6c 	.word	0x08017d6c
 8010014:	08017d54 	.word	0x08017d54

08010018 <tcp_send_fin>:
{
 8010018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801001a:	4606      	mov	r6, r0
 801001c:	b188      	cbz	r0, 8010042 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801001e:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
 8010020:	b14c      	cbz	r4, 8010036 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010022:	4625      	mov	r5, r4
 8010024:	6824      	ldr	r4, [r4, #0]
 8010026:	2c00      	cmp	r4, #0
 8010028:	d1fb      	bne.n	8010022 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801002a:	68eb      	ldr	r3, [r5, #12]
 801002c:	8998      	ldrh	r0, [r3, #12]
 801002e:	f7fb f967 	bl	800b300 <lwip_htons>
 8010032:	0743      	lsls	r3, r0, #29
 8010034:	d00d      	beq.n	8010052 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010036:	4630      	mov	r0, r6
 8010038:	2101      	movs	r1, #1
}
 801003a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801003e:	f7ff bf4b 	b.w	800fed8 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010042:	4b0b      	ldr	r3, [pc, #44]	@ (8010070 <tcp_send_fin+0x58>)
 8010044:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010048:	490a      	ldr	r1, [pc, #40]	@ (8010074 <tcp_send_fin+0x5c>)
 801004a:	480b      	ldr	r0, [pc, #44]	@ (8010078 <tcp_send_fin+0x60>)
 801004c:	f004 fc62 	bl	8014914 <iprintf>
 8010050:	e7e5      	b.n	801001e <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010052:	68eb      	ldr	r3, [r5, #12]
 8010054:	2001      	movs	r0, #1
 8010056:	899f      	ldrh	r7, [r3, #12]
 8010058:	f7fb f952 	bl	800b300 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801005c:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801005e:	4307      	orrs	r7, r0
 8010060:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010062:	f043 0320 	orr.w	r3, r3, #32
}
 8010066:	4620      	mov	r0, r4
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010068:	8197      	strh	r7, [r2, #12]
      tcp_set_flags(pcb, TF_FIN);
 801006a:	8373      	strh	r3, [r6, #26]
}
 801006c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801006e:	bf00      	nop
 8010070:	0801788c 	.word	0x0801788c
 8010074:	08017dc0 	.word	0x08017dc0
 8010078:	08015bd0 	.word	0x08015bd0

0801007c <tcp_rexmit_rto_prepare>:
{
 801007c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801007e:	4605      	mov	r5, r0
 8010080:	2800      	cmp	r0, #0
 8010082:	d031      	beq.n	80100e8 <tcp_rexmit_rto_prepare+0x6c>
  if (pcb->unacked == NULL) {
 8010084:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8010086:	b132      	cbz	r2, 8010096 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010088:	6813      	ldr	r3, [r2, #0]
 801008a:	4614      	mov	r4, r2
 801008c:	b153      	cbz	r3, 80100a4 <tcp_rexmit_rto_prepare+0x28>
  if (seg->p->ref != 1) {
 801008e:	6863      	ldr	r3, [r4, #4]
 8010090:	7b9b      	ldrb	r3, [r3, #14]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d002      	beq.n	801009c <tcp_rexmit_rto_prepare+0x20>
    return ERR_VAL;
 8010096:	f06f 0005 	mvn.w	r0, #5
}
 801009a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801009c:	6824      	ldr	r4, [r4, #0]
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d1f4      	bne.n	801008e <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 80100a4:	6863      	ldr	r3, [r4, #4]
 80100a6:	7b9b      	ldrb	r3, [r3, #14]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d1f4      	bne.n	8010096 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 80100ac:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 80100ae:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 80100b0:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 80100b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
  seg->next = pcb->unsent;
 80100b6:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 80100b8:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100ba:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 80100bc:	e9c5 271b 	strd	r2, r7, [r5, #108]	@ 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100c0:	6858      	ldr	r0, [r3, #4]
 80100c2:	f7fb f921 	bl	800b308 <lwip_htonl>
 80100c6:	68e3      	ldr	r3, [r4, #12]
 80100c8:	4606      	mov	r6, r0
 80100ca:	8924      	ldrh	r4, [r4, #8]
 80100cc:	8998      	ldrh	r0, [r3, #12]
 80100ce:	f7fb f917 	bl	800b300 <lwip_htons>
 80100d2:	4603      	mov	r3, r0
 80100d4:	4426      	add	r6, r4
  return ERR_OK;
 80100d6:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100d8:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 80100dc:	636f      	str	r7, [r5, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100de:	bf18      	it	ne
 80100e0:	2301      	movne	r3, #1
 80100e2:	4433      	add	r3, r6
 80100e4:	64eb      	str	r3, [r5, #76]	@ 0x4c
}
 80100e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80100e8:	4b03      	ldr	r3, [pc, #12]	@ (80100f8 <tcp_rexmit_rto_prepare+0x7c>)
 80100ea:	f240 6263 	movw	r2, #1635	@ 0x663
 80100ee:	4903      	ldr	r1, [pc, #12]	@ (80100fc <tcp_rexmit_rto_prepare+0x80>)
 80100f0:	4803      	ldr	r0, [pc, #12]	@ (8010100 <tcp_rexmit_rto_prepare+0x84>)
 80100f2:	f004 fc0f 	bl	8014914 <iprintf>
 80100f6:	e7c5      	b.n	8010084 <tcp_rexmit_rto_prepare+0x8>
 80100f8:	0801788c 	.word	0x0801788c
 80100fc:	08017ddc 	.word	0x08017ddc
 8010100:	08015bd0 	.word	0x08015bd0

08010104 <tcp_rexmit>:
{
 8010104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010106:	4607      	mov	r7, r0
 8010108:	2800      	cmp	r0, #0
 801010a:	d031      	beq.n	8010170 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801010c:	6f3e      	ldr	r6, [r7, #112]	@ 0x70
 801010e:	b34e      	cbz	r6, 8010164 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 8010110:	6873      	ldr	r3, [r6, #4]
 8010112:	7b9b      	ldrb	r3, [r3, #14]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d125      	bne.n	8010164 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 8010118:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801011a:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
  while (*cur_seg &&
 801011e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  pcb->unacked = seg->next;
 8010120:	673a      	str	r2, [r7, #112]	@ 0x70
  while (*cur_seg &&
 8010122:	b91b      	cbnz	r3, 801012c <tcp_rexmit+0x28>
 8010124:	e00f      	b.n	8010146 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 8010126:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b163      	cbz	r3, 8010146 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801012c:	68db      	ldr	r3, [r3, #12]
 801012e:	6858      	ldr	r0, [r3, #4]
 8010130:	f7fb f8ea 	bl	800b308 <lwip_htonl>
 8010134:	68f3      	ldr	r3, [r6, #12]
 8010136:	4604      	mov	r4, r0
 8010138:	6858      	ldr	r0, [r3, #4]
 801013a:	f7fb f8e5 	bl	800b308 <lwip_htonl>
 801013e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8010140:	2c00      	cmp	r4, #0
 8010142:	dbf0      	blt.n	8010126 <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 8010144:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 8010146:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8010148:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801014a:	6833      	ldr	r3, [r6, #0]
 801014c:	b16b      	cbz	r3, 801016a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801014e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8010152:	2bff      	cmp	r3, #255	@ 0xff
 8010154:	d002      	beq.n	801015c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 8010156:	3301      	adds	r3, #1
 8010158:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  pcb->rttest = 0;
 801015c:	2300      	movs	r3, #0
  return ERR_OK;
 801015e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 8010160:	637b      	str	r3, [r7, #52]	@ 0x34
}
 8010162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8010164:	f06f 0005 	mvn.w	r0, #5
}
 8010168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801016a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 801016e:	e7ee      	b.n	801014e <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010170:	4b03      	ldr	r3, [pc, #12]	@ (8010180 <tcp_rexmit+0x7c>)
 8010172:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010176:	4903      	ldr	r1, [pc, #12]	@ (8010184 <tcp_rexmit+0x80>)
 8010178:	4803      	ldr	r0, [pc, #12]	@ (8010188 <tcp_rexmit+0x84>)
 801017a:	f004 fbcb 	bl	8014914 <iprintf>
 801017e:	e7c5      	b.n	801010c <tcp_rexmit+0x8>
 8010180:	0801788c 	.word	0x0801788c
 8010184:	08017e00 	.word	0x08017e00
 8010188:	08015bd0 	.word	0x08015bd0

0801018c <tcp_rexmit_fast>:
{
 801018c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801018e:	4604      	mov	r4, r0
 8010190:	b340      	cbz	r0, 80101e4 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010192:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010194:	b113      	cbz	r3, 801019c <tcp_rexmit_fast+0x10>
 8010196:	8b63      	ldrh	r3, [r4, #26]
 8010198:	075b      	lsls	r3, r3, #29
 801019a:	d500      	bpl.n	801019e <tcp_rexmit_fast+0x12>
}
 801019c:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801019e:	4620      	mov	r0, r4
 80101a0:	f7ff ffb0 	bl	8010104 <tcp_rexmit>
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d1f9      	bne.n	801019c <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80101a8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80101ac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80101b0:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80101b2:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80101b4:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80101b8:	bf28      	it	cs
 80101ba:	4619      	movcs	r1, r3
 80101bc:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80101be:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80101c2:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80101c6:	d902      	bls.n	80101ce <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 80101c8:	b283      	uxth	r3, r0
 80101ca:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      tcp_set_flags(pcb, TF_INFR);
 80101ce:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80101d0:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 80101d2:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80101d6:	4413      	add	r3, r2
      pcb->rtime = 0;
 80101d8:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80101da:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80101de:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 80101e0:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 80101e2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80101e4:	4b03      	ldr	r3, [pc, #12]	@ (80101f4 <tcp_rexmit_fast+0x68>)
 80101e6:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80101ea:	4903      	ldr	r1, [pc, #12]	@ (80101f8 <tcp_rexmit_fast+0x6c>)
 80101ec:	4803      	ldr	r0, [pc, #12]	@ (80101fc <tcp_rexmit_fast+0x70>)
 80101ee:	f004 fb91 	bl	8014914 <iprintf>
 80101f2:	e7ce      	b.n	8010192 <tcp_rexmit_fast+0x6>
 80101f4:	0801788c 	.word	0x0801788c
 80101f8:	08017e18 	.word	0x08017e18
 80101fc:	08015bd0 	.word	0x08015bd0

08010200 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010204:	b084      	sub	sp, #16
 8010206:	4607      	mov	r7, r0
 8010208:	460e      	mov	r6, r1
 801020a:	4615      	mov	r5, r2
 801020c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010210:	461c      	mov	r4, r3
{
 8010212:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8010216:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801021a:	b1fb      	cbz	r3, 801025c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801021c:	f1b8 0f00 	cmp.w	r8, #0
 8010220:	d026      	beq.n	8010270 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010222:	4630      	mov	r0, r6
 8010224:	f7fb f870 	bl	800b308 <lwip_htonl>
 8010228:	2114      	movs	r1, #20
 801022a:	4602      	mov	r2, r0
 801022c:	4628      	mov	r0, r5
 801022e:	f24d 0516 	movw	r5, #53270	@ 0xd016
 8010232:	464b      	mov	r3, r9
 8010234:	f8cd a000 	str.w	sl, [sp]
 8010238:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801023c:	2100      	movs	r1, #0
 801023e:	f7ff f9b7 	bl	800f5b0 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010242:	4601      	mov	r1, r0
 8010244:	b138      	cbz	r0, 8010256 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010246:	4643      	mov	r3, r8
 8010248:	4622      	mov	r2, r4
 801024a:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801024c:	b004      	add	sp, #16
 801024e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010252:	f7ff ba1b 	b.w	800f68c <tcp_output_control_segment>
}
 8010256:	b004      	add	sp, #16
 8010258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801025c:	4b08      	ldr	r3, [pc, #32]	@ (8010280 <tcp_rst+0x80>)
 801025e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010262:	4908      	ldr	r1, [pc, #32]	@ (8010284 <tcp_rst+0x84>)
 8010264:	4808      	ldr	r0, [pc, #32]	@ (8010288 <tcp_rst+0x88>)
 8010266:	f004 fb55 	bl	8014914 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801026a:	f1b8 0f00 	cmp.w	r8, #0
 801026e:	d1d8      	bne.n	8010222 <tcp_rst+0x22>
 8010270:	4b03      	ldr	r3, [pc, #12]	@ (8010280 <tcp_rst+0x80>)
 8010272:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010276:	4905      	ldr	r1, [pc, #20]	@ (801028c <tcp_rst+0x8c>)
 8010278:	4803      	ldr	r0, [pc, #12]	@ (8010288 <tcp_rst+0x88>)
 801027a:	f004 fb4b 	bl	8014914 <iprintf>
 801027e:	e7d0      	b.n	8010222 <tcp_rst+0x22>
 8010280:	0801788c 	.word	0x0801788c
 8010284:	08017e38 	.word	0x08017e38
 8010288:	08015bd0 	.word	0x08015bd0
 801028c:	08017e54 	.word	0x08017e54

08010290 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010290:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010292:	4604      	mov	r4, r0
 8010294:	b1c8      	cbz	r0, 80102ca <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010296:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8010298:	f7fb f836 	bl	800b308 <lwip_htonl>
 801029c:	2100      	movs	r1, #0
 801029e:	4602      	mov	r2, r0
 80102a0:	4620      	mov	r0, r4
 80102a2:	f7ff f9cb 	bl	800f63c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80102a6:	4601      	mov	r1, r0
 80102a8:	b1b8      	cbz	r0, 80102da <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80102aa:	1d23      	adds	r3, r4, #4
 80102ac:	4622      	mov	r2, r4
 80102ae:	4620      	mov	r0, r4
 80102b0:	f7ff f9ec 	bl	800f68c <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102b4:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 80102b6:	b920      	cbnz	r0, 80102c2 <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102b8:	f023 0303 	bic.w	r3, r3, #3
 80102bc:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102be:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 80102c0:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102c2:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102c6:	8363      	strh	r3, [r4, #26]
}
 80102c8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80102ca:	4b07      	ldr	r3, [pc, #28]	@ (80102e8 <tcp_send_empty_ack+0x58>)
 80102cc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80102d0:	4906      	ldr	r1, [pc, #24]	@ (80102ec <tcp_send_empty_ack+0x5c>)
 80102d2:	4807      	ldr	r0, [pc, #28]	@ (80102f0 <tcp_send_empty_ack+0x60>)
 80102d4:	f004 fb1e 	bl	8014914 <iprintf>
 80102d8:	e7dd      	b.n	8010296 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102da:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 80102dc:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102e0:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 80102e4:	e7eb      	b.n	80102be <tcp_send_empty_ack+0x2e>
 80102e6:	bf00      	nop
 80102e8:	0801788c 	.word	0x0801788c
 80102ec:	08017e70 	.word	0x08017e70
 80102f0:	08015bd0 	.word	0x08015bd0

080102f4 <tcp_output>:
{
 80102f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f8:	4604      	mov	r4, r0
 80102fa:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 80102fc:	f7f5 fffc 	bl	80062f8 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010300:	2c00      	cmp	r4, #0
 8010302:	f000 81a5 	beq.w	8010650 <tcp_output+0x35c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010306:	7d23      	ldrb	r3, [r4, #20]
 8010308:	2b01      	cmp	r3, #1
 801030a:	f000 8155 	beq.w	80105b8 <tcp_output+0x2c4>
  if (tcp_input_pcb == pcb) {
 801030e:	4bb1      	ldr	r3, [pc, #708]	@ (80105d4 <tcp_output+0x2e0>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	42a3      	cmp	r3, r4
 8010314:	d031      	beq.n	801037a <tcp_output+0x86>
  seg = pcb->unsent;
 8010316:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010318:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 801031c:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 8010320:	b325      	cbz	r5, 801036c <tcp_output+0x78>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010322:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010324:	f104 0804 	add.w	r8, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010328:	2800      	cmp	r0, #0
 801032a:	f040 8199 	bne.w	8010660 <tcp_output+0x36c>
    return ip_route(src, dst);
 801032e:	4640      	mov	r0, r8
 8010330:	f003 f820 	bl	8013374 <ip4_route>
 8010334:	4683      	mov	fp, r0
  if (netif == NULL) {
 8010336:	f1bb 0f00 	cmp.w	fp, #0
 801033a:	f000 81a5 	beq.w	8010688 <tcp_output+0x394>
  if (ip_addr_isany(&pcb->local_ip)) {
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	b913      	cbnz	r3, 8010348 <tcp_output+0x54>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010342:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010346:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010348:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801034a:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801034c:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801034e:	bf28      	it	cs
 8010350:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010352:	f7fa ffd9 	bl	800b308 <lwip_htonl>
 8010356:	892b      	ldrh	r3, [r5, #8]
 8010358:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801035a:	1a9b      	subs	r3, r3, r2
 801035c:	4403      	add	r3, r0
 801035e:	42bb      	cmp	r3, r7
 8010360:	d90f      	bls.n	8010382 <tcp_output+0x8e>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010362:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 8010366:	42bb      	cmp	r3, r7
 8010368:	f000 8142 	beq.w	80105f0 <tcp_output+0x2fc>
    if (pcb->flags & TF_ACK_NOW) {
 801036c:	8b62      	ldrh	r2, [r4, #26]
 801036e:	0790      	lsls	r0, r2, #30
 8010370:	f100 812a 	bmi.w	80105c8 <tcp_output+0x2d4>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010378:	8362      	strh	r2, [r4, #26]
    return ERR_OK;
 801037a:	2000      	movs	r0, #0
}
 801037c:	b005      	add	sp, #20
 801037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  useg = pcb->unacked;
 8010388:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (useg != NULL) {
 801038a:	2b00      	cmp	r3, #0
 801038c:	f000 8140 	beq.w	8010610 <tcp_output+0x31c>
    for (; useg->next != NULL; useg = useg->next);
 8010390:	4699      	mov	r9, r3
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d1fb      	bne.n	8010390 <tcp_output+0x9c>
    LWIP_ASSERT("RST not expected here!",
 8010398:	465e      	mov	r6, fp
 801039a:	e0a6      	b.n	80104ea <tcp_output+0x1f6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801039c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801039e:	b15b      	cbz	r3, 80103b8 <tcp_output+0xc4>
 80103a0:	8b62      	ldrh	r2, [r4, #26]
 80103a2:	f012 0f44 	tst.w	r2, #68	@ 0x44
 80103a6:	d107      	bne.n	80103b8 <tcp_output+0xc4>
 80103a8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80103aa:	2800      	cmp	r0, #0
 80103ac:	f000 80f2 	beq.w	8010594 <tcp_output+0x2a0>
 80103b0:	6803      	ldr	r3, [r0, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f000 80e9 	beq.w	801058a <tcp_output+0x296>
    if (pcb->state != SYN_SENT) {
 80103b8:	7d23      	ldrb	r3, [r4, #20]
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80103ba:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    if (pcb->state != SYN_SENT) {
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d00a      	beq.n	80103d8 <tcp_output+0xe4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80103c2:	f8ba a00c 	ldrh.w	sl, [sl, #12]
 80103c6:	2010      	movs	r0, #16
 80103c8:	f7fa ff9a 	bl	800b300 <lwip_htons>
 80103cc:	ea4a 0000 	orr.w	r0, sl, r0
 80103d0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80103d4:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 80103d8:	686b      	ldr	r3, [r5, #4]
 80103da:	7b9b      	ldrb	r3, [r3, #14]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d153      	bne.n	8010488 <tcp_output+0x194>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80103e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80103e2:	f7fa ff91 	bl	800b308 <lwip_htonl>
 80103e6:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80103ea:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80103ec:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80103f0:	f7fa ff86 	bl	800b300 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80103f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80103f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80103f8:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80103fc:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80103fe:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010402:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010404:	7aab      	ldrb	r3, [r5, #10]
 8010406:	07da      	lsls	r2, r3, #31
 8010408:	f100 80ae 	bmi.w	8010568 <tcp_output+0x274>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801040c:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 8010410:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8010414:	2b00      	cmp	r3, #0
 8010416:	da01      	bge.n	801041c <tcp_output+0x128>
    pcb->rtime = 0;
 8010418:	2300      	movs	r3, #0
 801041a:	8623      	strh	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 801041c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 8097 	beq.w	8010552 <tcp_output+0x25e>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010424:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 8010426:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010428:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 801042a:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801042c:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 8010430:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010434:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8010436:	1ac9      	subs	r1, r1, r3
 8010438:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 801043a:	8901      	ldrh	r1, [r0, #8]
 801043c:	1acb      	subs	r3, r1, r3
 801043e:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8010440:	f88a 2010 	strb.w	r2, [sl, #16]
 8010444:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010448:	7aab      	ldrb	r3, [r5, #10]
 801044a:	f013 0f01 	tst.w	r3, #1
 801044e:	bf0c      	ite	eq
 8010450:	2314      	moveq	r3, #20
 8010452:	2318      	movne	r3, #24
 8010454:	449a      	add	sl, r3
 8010456:	45d3      	cmp	fp, sl
 8010458:	d007      	beq.n	801046a <tcp_output+0x176>
 801045a:	4b5f      	ldr	r3, [pc, #380]	@ (80105d8 <tcp_output+0x2e4>)
 801045c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8010460:	495e      	ldr	r1, [pc, #376]	@ (80105dc <tcp_output+0x2e8>)
 8010462:	485f      	ldr	r0, [pc, #380]	@ (80105e0 <tcp_output+0x2ec>)
 8010464:	f004 fa56 	bl	8014914 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010468:	6868      	ldr	r0, [r5, #4]
 801046a:	9602      	str	r6, [sp, #8]
 801046c:	4642      	mov	r2, r8
 801046e:	7aa3      	ldrb	r3, [r4, #10]
 8010470:	4621      	mov	r1, r4
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	2306      	movs	r3, #6
 8010476:	9301      	str	r3, [sp, #4]
 8010478:	7ae3      	ldrb	r3, [r4, #11]
 801047a:	f003 f93b 	bl	80136f4 <ip4_output_if>
    if (err != ERR_OK) {
 801047e:	2800      	cmp	r0, #0
 8010480:	f040 80f8 	bne.w	8010674 <tcp_output+0x380>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010484:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 8010488:	682b      	ldr	r3, [r5, #0]
 801048a:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801048c:	7d23      	ldrb	r3, [r4, #20]
 801048e:	2b02      	cmp	r3, #2
 8010490:	d003      	beq.n	801049a <tcp_output+0x1a6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010492:	8b63      	ldrh	r3, [r4, #26]
 8010494:	f023 0303 	bic.w	r3, r3, #3
 8010498:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801049a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801049e:	f7fa ff33 	bl	800b308 <lwip_htonl>
 80104a2:	68eb      	ldr	r3, [r5, #12]
 80104a4:	4682      	mov	sl, r0
 80104a6:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 80104aa:	8998      	ldrh	r0, [r3, #12]
 80104ac:	f7fa ff28 	bl	800b300 <lwip_htons>
 80104b0:	f010 0303 	ands.w	r3, r0, #3
 80104b4:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80104b6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80104b8:	bf18      	it	ne
 80104ba:	2301      	movne	r3, #1
 80104bc:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 80104be:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80104c2:	1ad2      	subs	r2, r2, r3
 80104c4:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 80104c6:	bfb8      	it	lt
 80104c8:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 80104ca:	68eb      	ldr	r3, [r5, #12]
 80104cc:	8998      	ldrh	r0, [r3, #12]
 80104ce:	f7fa ff17 	bl	800b300 <lwip_htons>
 80104d2:	0783      	lsls	r3, r0, #30
 80104d4:	d123      	bne.n	801051e <tcp_output+0x22a>
 80104d6:	f1ba 0f00 	cmp.w	sl, #0
 80104da:	d120      	bne.n	801051e <tcp_output+0x22a>
      tcp_seg_free(seg);
 80104dc:	4628      	mov	r0, r5
 80104de:	f7fc fb4d 	bl	800cb7c <tcp_seg_free>
    seg = pcb->unsent;
 80104e2:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 80104e4:	2d00      	cmp	r5, #0
 80104e6:	f000 80ca 	beq.w	801067e <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80104ea:	68eb      	ldr	r3, [r5, #12]
 80104ec:	6858      	ldr	r0, [r3, #4]
 80104ee:	f7fa ff0b 	bl	800b308 <lwip_htonl>
 80104f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80104f4:	1ac0      	subs	r0, r0, r3
 80104f6:	892b      	ldrh	r3, [r5, #8]
 80104f8:	4418      	add	r0, r3
  while (seg != NULL &&
 80104fa:	42b8      	cmp	r0, r7
 80104fc:	f200 80b4 	bhi.w	8010668 <tcp_output+0x374>
    LWIP_ASSERT("RST not expected here!",
 8010500:	68eb      	ldr	r3, [r5, #12]
 8010502:	8998      	ldrh	r0, [r3, #12]
 8010504:	f7fa fefc 	bl	800b300 <lwip_htons>
 8010508:	0741      	lsls	r1, r0, #29
 801050a:	f57f af47 	bpl.w	801039c <tcp_output+0xa8>
 801050e:	4b32      	ldr	r3, [pc, #200]	@ (80105d8 <tcp_output+0x2e4>)
 8010510:	f240 5236 	movw	r2, #1334	@ 0x536
 8010514:	4933      	ldr	r1, [pc, #204]	@ (80105e4 <tcp_output+0x2f0>)
 8010516:	4832      	ldr	r0, [pc, #200]	@ (80105e0 <tcp_output+0x2ec>)
 8010518:	f004 f9fc 	bl	8014914 <iprintf>
 801051c:	e73e      	b.n	801039c <tcp_output+0xa8>
      seg->next = NULL;
 801051e:	2300      	movs	r3, #0
 8010520:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8010522:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010524:	b193      	cbz	r3, 801054c <tcp_output+0x258>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010526:	68eb      	ldr	r3, [r5, #12]
 8010528:	6858      	ldr	r0, [r3, #4]
 801052a:	f7fa feed 	bl	800b308 <lwip_htonl>
 801052e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010532:	4682      	mov	sl, r0
 8010534:	6858      	ldr	r0, [r3, #4]
 8010536:	f7fa fee7 	bl	800b308 <lwip_htonl>
 801053a:	ebaa 0a00 	sub.w	sl, sl, r0
 801053e:	f1ba 0f00 	cmp.w	sl, #0
 8010542:	db67      	blt.n	8010614 <tcp_output+0x320>
          useg->next = seg;
 8010544:	f8c9 5000 	str.w	r5, [r9]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010548:	46a9      	mov	r9, r5
 801054a:	e7ca      	b.n	80104e2 <tcp_output+0x1ee>
 801054c:	46a9      	mov	r9, r5
        pcb->unacked = seg;
 801054e:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 8010550:	e7c7      	b.n	80104e2 <tcp_output+0x1ee>
    pcb->rttest = tcp_ticks;
 8010552:	4b25      	ldr	r3, [pc, #148]	@ (80105e8 <tcp_output+0x2f4>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	6363      	str	r3, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010558:	f8da 0004 	ldr.w	r0, [sl, #4]
 801055c:	f7fa fed4 	bl	800b308 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010560:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010564:	63a0      	str	r0, [r4, #56]	@ 0x38
 8010566:	e75d      	b.n	8010424 <tcp_output+0x130>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010568:	4642      	mov	r2, r8
 801056a:	4631      	mov	r1, r6
 801056c:	f240 50b4 	movw	r0, #1460	@ 0x5b4
    opts += 1;
 8010570:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010574:	f7fd fb00 	bl	800db78 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010578:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 801057c:	f7fa fec4 	bl	800b308 <lwip_htonl>
 8010580:	f8ca 0014 	str.w	r0, [sl, #20]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010584:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8010588:	e742      	b.n	8010410 <tcp_output+0x11c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801058a:	8901      	ldrh	r1, [r0, #8]
 801058c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801058e:	4299      	cmp	r1, r3
 8010590:	f4bf af12 	bcs.w	80103b8 <tcp_output+0xc4>
 8010594:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8010598:	2b00      	cmp	r3, #0
 801059a:	f43f af0d 	beq.w	80103b8 <tcp_output+0xc4>
 801059e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 80105a2:	2b0f      	cmp	r3, #15
 80105a4:	f63f af08 	bhi.w	80103b8 <tcp_output+0xc4>
 80105a8:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 80105ac:	f47f af04 	bne.w	80103b8 <tcp_output+0xc4>
  if (pcb->unsent == NULL) {
 80105b0:	2800      	cmp	r0, #0
 80105b2:	f47f aedf 	bne.w	8010374 <tcp_output+0x80>
 80105b6:	e063      	b.n	8010680 <tcp_output+0x38c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80105b8:	4b07      	ldr	r3, [pc, #28]	@ (80105d8 <tcp_output+0x2e4>)
 80105ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80105be:	490b      	ldr	r1, [pc, #44]	@ (80105ec <tcp_output+0x2f8>)
 80105c0:	4807      	ldr	r0, [pc, #28]	@ (80105e0 <tcp_output+0x2ec>)
 80105c2:	f004 f9a7 	bl	8014914 <iprintf>
 80105c6:	e6a2      	b.n	801030e <tcp_output+0x1a>
      return tcp_send_empty_ack(pcb);
 80105c8:	4620      	mov	r0, r4
}
 80105ca:	b005      	add	sp, #20
 80105cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 80105d0:	f7ff be5e 	b.w	8010290 <tcp_send_empty_ack>
 80105d4:	2401071c 	.word	0x2401071c
 80105d8:	0801788c 	.word	0x0801788c
 80105dc:	08017ee8 	.word	0x08017ee8
 80105e0:	08015bd0 	.word	0x08015bd0
 80105e4:	08017ed0 	.word	0x08017ed0
 80105e8:	24010718 	.word	0x24010718
 80105ec:	08017ea8 	.word	0x08017ea8
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80105f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f47f aeba 	bne.w	801036c <tcp_output+0x78>
 80105f8:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f47f aeb5 	bne.w	801036c <tcp_output+0x78>
      pcb->persist_cnt = 0;
 8010602:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 8010606:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 801060a:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
      pcb->persist_probe = 0;
 801060e:	e6ad      	b.n	801036c <tcp_output+0x78>
  useg = pcb->unacked;
 8010610:	4699      	mov	r9, r3
 8010612:	e6c1      	b.n	8010398 <tcp_output+0xa4>
          while (*cur_seg &&
 8010614:	6f23      	ldr	r3, [r4, #112]	@ 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010616:	f104 0b70 	add.w	fp, r4, #112	@ 0x70
          while (*cur_seg &&
 801061a:	b92b      	cbnz	r3, 8010628 <tcp_output+0x334>
 801061c:	e014      	b.n	8010648 <tcp_output+0x354>
            cur_seg = &((*cur_seg)->next );
 801061e:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 8010622:	f8db 3000 	ldr.w	r3, [fp]
 8010626:	b17b      	cbz	r3, 8010648 <tcp_output+0x354>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	6858      	ldr	r0, [r3, #4]
 801062c:	f7fa fe6c 	bl	800b308 <lwip_htonl>
 8010630:	68eb      	ldr	r3, [r5, #12]
 8010632:	4682      	mov	sl, r0
 8010634:	6858      	ldr	r0, [r3, #4]
 8010636:	f7fa fe67 	bl	800b308 <lwip_htonl>
 801063a:	ebaa 0a00 	sub.w	sl, sl, r0
          while (*cur_seg &&
 801063e:	f1ba 0f00 	cmp.w	sl, #0
 8010642:	dbec      	blt.n	801061e <tcp_output+0x32a>
            cur_seg = &((*cur_seg)->next );
 8010644:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 8010648:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801064a:	f8cb 5000 	str.w	r5, [fp]
 801064e:	e748      	b.n	80104e2 <tcp_output+0x1ee>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010650:	4b0f      	ldr	r3, [pc, #60]	@ (8010690 <tcp_output+0x39c>)
 8010652:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010656:	490f      	ldr	r1, [pc, #60]	@ (8010694 <tcp_output+0x3a0>)
 8010658:	480f      	ldr	r0, [pc, #60]	@ (8010698 <tcp_output+0x3a4>)
 801065a:	f004 f95b 	bl	8014914 <iprintf>
 801065e:	e652      	b.n	8010306 <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 8010660:	f7fb fc3c 	bl	800bedc <netif_get_by_index>
 8010664:	4683      	mov	fp, r0
 8010666:	e666      	b.n	8010336 <tcp_output+0x42>
  if (pcb->unsent == NULL) {
 8010668:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801066a:	8b62      	ldrh	r2, [r4, #26]
 801066c:	2800      	cmp	r0, #0
 801066e:	f47f ae81 	bne.w	8010374 <tcp_output+0x80>
 8010672:	e005      	b.n	8010680 <tcp_output+0x38c>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010674:	8b63      	ldrh	r3, [r4, #26]
 8010676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801067a:	8363      	strh	r3, [r4, #26]
      return err;
 801067c:	e67e      	b.n	801037c <tcp_output+0x88>
 801067e:	8b62      	ldrh	r2, [r4, #26]
    pcb->unsent_oversize = 0;
 8010680:	2300      	movs	r3, #0
 8010682:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 8010686:	e675      	b.n	8010374 <tcp_output+0x80>
    return ERR_RTE;
 8010688:	f06f 0003 	mvn.w	r0, #3
 801068c:	e676      	b.n	801037c <tcp_output+0x88>
 801068e:	bf00      	nop
 8010690:	0801788c 	.word	0x0801788c
 8010694:	08017e90 	.word	0x08017e90
 8010698:	08015bd0 	.word	0x08015bd0

0801069c <tcp_rexmit_rto_commit>:
{
 801069c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801069e:	4604      	mov	r4, r0
 80106a0:	b158      	cbz	r0, 80106ba <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 80106a2:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80106a6:	2bff      	cmp	r3, #255	@ 0xff
 80106a8:	d002      	beq.n	80106b0 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 80106aa:	3301      	adds	r3, #1
 80106ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 80106b0:	4620      	mov	r0, r4
}
 80106b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 80106b6:	f7ff be1d 	b.w	80102f4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80106ba:	4b04      	ldr	r3, [pc, #16]	@ (80106cc <tcp_rexmit_rto_commit+0x30>)
 80106bc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80106c0:	4903      	ldr	r1, [pc, #12]	@ (80106d0 <tcp_rexmit_rto_commit+0x34>)
 80106c2:	4804      	ldr	r0, [pc, #16]	@ (80106d4 <tcp_rexmit_rto_commit+0x38>)
 80106c4:	f004 f926 	bl	8014914 <iprintf>
 80106c8:	e7eb      	b.n	80106a2 <tcp_rexmit_rto_commit+0x6>
 80106ca:	bf00      	nop
 80106cc:	0801788c 	.word	0x0801788c
 80106d0:	08017efc 	.word	0x08017efc
 80106d4:	08015bd0 	.word	0x08015bd0

080106d8 <tcp_rexmit_rto>:
{
 80106d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80106da:	4604      	mov	r4, r0
 80106dc:	b118      	cbz	r0, 80106e6 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80106de:	f7ff fccd 	bl	801007c <tcp_rexmit_rto_prepare>
 80106e2:	b198      	cbz	r0, 801070c <tcp_rexmit_rto+0x34>
}
 80106e4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80106e6:	4b0f      	ldr	r3, [pc, #60]	@ (8010724 <tcp_rexmit_rto+0x4c>)
 80106e8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80106ec:	490e      	ldr	r1, [pc, #56]	@ (8010728 <tcp_rexmit_rto+0x50>)
 80106ee:	480f      	ldr	r0, [pc, #60]	@ (801072c <tcp_rexmit_rto+0x54>)
 80106f0:	f004 f910 	bl	8014914 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80106f4:	4620      	mov	r0, r4
 80106f6:	f7ff fcc1 	bl	801007c <tcp_rexmit_rto_prepare>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d1f2      	bne.n	80106e4 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80106fe:	4b09      	ldr	r3, [pc, #36]	@ (8010724 <tcp_rexmit_rto+0x4c>)
 8010700:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010704:	490a      	ldr	r1, [pc, #40]	@ (8010730 <tcp_rexmit_rto+0x58>)
 8010706:	4809      	ldr	r0, [pc, #36]	@ (801072c <tcp_rexmit_rto+0x54>)
 8010708:	f004 f904 	bl	8014914 <iprintf>
  if (pcb->nrtx < 0xFF) {
 801070c:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8010710:	2bff      	cmp	r3, #255	@ 0xff
 8010712:	d002      	beq.n	801071a <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8010714:	3301      	adds	r3, #1
 8010716:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 801071a:	4620      	mov	r0, r4
}
 801071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8010720:	f7ff bde8 	b.w	80102f4 <tcp_output>
 8010724:	0801788c 	.word	0x0801788c
 8010728:	08017f20 	.word	0x08017f20
 801072c:	08015bd0 	.word	0x08015bd0
 8010730:	08017efc 	.word	0x08017efc

08010734 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010734:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010736:	4604      	mov	r4, r0
 8010738:	b188      	cbz	r0, 801075e <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801073a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 801073c:	3801      	subs	r0, #1
 801073e:	f7fa fde3 	bl	800b308 <lwip_htonl>
 8010742:	2100      	movs	r1, #0
 8010744:	4602      	mov	r2, r0
 8010746:	4620      	mov	r0, r4
 8010748:	f7fe ff78 	bl	800f63c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801074c:	4601      	mov	r1, r0
 801074e:	b170      	cbz	r0, 801076e <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010750:	1d23      	adds	r3, r4, #4
 8010752:	4622      	mov	r2, r4
 8010754:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8010756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801075a:	f7fe bf97 	b.w	800f68c <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801075e:	4b05      	ldr	r3, [pc, #20]	@ (8010774 <tcp_keepalive+0x40>)
 8010760:	f640 0224 	movw	r2, #2084	@ 0x824
 8010764:	4904      	ldr	r1, [pc, #16]	@ (8010778 <tcp_keepalive+0x44>)
 8010766:	4805      	ldr	r0, [pc, #20]	@ (801077c <tcp_keepalive+0x48>)
 8010768:	f004 f8d4 	bl	8014914 <iprintf>
 801076c:	e7e5      	b.n	801073a <tcp_keepalive+0x6>
}
 801076e:	f04f 30ff 	mov.w	r0, #4294967295
 8010772:	bd10      	pop	{r4, pc}
 8010774:	0801788c 	.word	0x0801788c
 8010778:	08017f3c 	.word	0x08017f3c
 801077c:	08015bd0 	.word	0x08015bd0

08010780 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010784:	4604      	mov	r4, r0
 8010786:	2800      	cmp	r0, #0
 8010788:	d055      	beq.n	8010836 <tcp_zero_window_probe+0xb6>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801078a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  if (seg == NULL) {
 801078c:	2d00      	cmp	r5, #0
 801078e:	d04f      	beq.n	8010830 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010790:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8010794:	2bff      	cmp	r3, #255	@ 0xff
 8010796:	d002      	beq.n	801079e <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8010798:	3301      	adds	r3, #1
 801079a:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801079e:	68eb      	ldr	r3, [r5, #12]
 80107a0:	8998      	ldrh	r0, [r3, #12]
 80107a2:	f7fa fdad 	bl	800b300 <lwip_htons>
 80107a6:	07c3      	lsls	r3, r0, #31
 80107a8:	d427      	bmi.n	80107fa <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80107aa:	68eb      	ldr	r3, [r5, #12]
 80107ac:	2101      	movs	r1, #1
 80107ae:	4620      	mov	r0, r4
 80107b0:	685a      	ldr	r2, [r3, #4]
 80107b2:	f7fe ff43 	bl	800f63c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80107b6:	4606      	mov	r6, r0
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d044      	beq.n	8010846 <tcp_zero_window_probe+0xc6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80107bc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80107c0:	6868      	ldr	r0, [r5, #4]
 80107c2:	f108 0114 	add.w	r1, r8, #20
 80107c6:	892f      	ldrh	r7, [r5, #8]
 80107c8:	2201      	movs	r2, #1
 80107ca:	8903      	ldrh	r3, [r0, #8]
 80107cc:	1bdb      	subs	r3, r3, r7
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	f7fb ff94 	bl	800c6fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80107d4:	68eb      	ldr	r3, [r5, #12]
 80107d6:	6858      	ldr	r0, [r3, #4]
 80107d8:	f7fa fd96 	bl	800b308 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80107dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80107de:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80107e0:	4622      	mov	r2, r4
 80107e2:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80107e4:	1a1b      	subs	r3, r3, r0
 80107e6:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80107e8:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 80107ec:	bfb8      	it	lt
 80107ee:	6520      	strlt	r0, [r4, #80]	@ 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80107f0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80107f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80107f6:	f7fe bf49 	b.w	800f68c <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80107fa:	892f      	ldrh	r7, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80107fc:	4620      	mov	r0, r4
 80107fe:	68eb      	ldr	r3, [r5, #12]
 8010800:	1e39      	subs	r1, r7, #0
 8010802:	685a      	ldr	r2, [r3, #4]
 8010804:	bf18      	it	ne
 8010806:	2101      	movne	r1, #1
 8010808:	f7fe ff18 	bl	800f63c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801080c:	4606      	mov	r6, r0
 801080e:	b1d0      	cbz	r0, 8010846 <tcp_zero_window_probe+0xc6>
  tcphdr = (struct tcp_hdr *)p->payload;
 8010810:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (is_fin) {
 8010814:	2f00      	cmp	r7, #0
 8010816:	d1d3      	bne.n	80107c0 <tcp_zero_window_probe+0x40>
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010818:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 801081c:	2011      	movs	r0, #17
 801081e:	f7fa fd6f 	bl	800b300 <lwip_htons>
 8010822:	f427 577c 	bic.w	r7, r7, #16128	@ 0x3f00
 8010826:	b2bf      	uxth	r7, r7
 8010828:	4338      	orrs	r0, r7
 801082a:	f8a8 000c 	strh.w	r0, [r8, #12]
 801082e:	e7d1      	b.n	80107d4 <tcp_zero_window_probe+0x54>
    return ERR_OK;
 8010830:	4628      	mov	r0, r5
}
 8010832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010836:	4b05      	ldr	r3, [pc, #20]	@ (801084c <tcp_zero_window_probe+0xcc>)
 8010838:	f640 024f 	movw	r2, #2127	@ 0x84f
 801083c:	4904      	ldr	r1, [pc, #16]	@ (8010850 <tcp_zero_window_probe+0xd0>)
 801083e:	4805      	ldr	r0, [pc, #20]	@ (8010854 <tcp_zero_window_probe+0xd4>)
 8010840:	f004 f868 	bl	8014914 <iprintf>
 8010844:	e7a1      	b.n	801078a <tcp_zero_window_probe+0xa>
    return ERR_MEM;
 8010846:	f04f 30ff 	mov.w	r0, #4294967295
 801084a:	e7f2      	b.n	8010832 <tcp_zero_window_probe+0xb2>
 801084c:	0801788c 	.word	0x0801788c
 8010850:	08017f58 	.word	0x08017f58
 8010854:	08015bd0 	.word	0x08015bd0

08010858 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801085c:	200a      	movs	r0, #10
{
 801085e:	460e      	mov	r6, r1
 8010860:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010862:	f7fb f8ed 	bl	800ba40 <memp_malloc>
  if (timeout == NULL) {
 8010866:	b190      	cbz	r0, 801088e <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8010868:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801086a:	490d      	ldr	r1, [pc, #52]	@ (80108a0 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 801086c:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801086e:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8010870:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8010874:	680b      	ldr	r3, [r1, #0]
 8010876:	b91b      	cbnz	r3, 8010880 <sys_timeout_abs+0x28>
 8010878:	e007      	b.n	801088a <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801087a:	4619      	mov	r1, r3
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	b11b      	cbz	r3, 8010888 <sys_timeout_abs+0x30>
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	1aa2      	subs	r2, r4, r2
 8010884:	2a00      	cmp	r2, #0
 8010886:	daf8      	bge.n	801087a <sys_timeout_abs+0x22>
        timeout->next = t->next;
 8010888:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801088a:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801088c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801088e:	4b05      	ldr	r3, [pc, #20]	@ (80108a4 <sys_timeout_abs+0x4c>)
 8010890:	22be      	movs	r2, #190	@ 0xbe
 8010892:	4905      	ldr	r1, [pc, #20]	@ (80108a8 <sys_timeout_abs+0x50>)
 8010894:	4805      	ldr	r0, [pc, #20]	@ (80108ac <sys_timeout_abs+0x54>)
}
 8010896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801089a:	f004 b83b 	b.w	8014914 <iprintf>
 801089e:	bf00      	nop
 80108a0:	2401075c 	.word	0x2401075c
 80108a4:	08017f7c 	.word	0x08017f7c
 80108a8:	08017fb0 	.word	0x08017fb0
 80108ac:	08015bd0 	.word	0x08015bd0

080108b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80108b0:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80108b2:	6843      	ldr	r3, [r0, #4]
{
 80108b4:	4604      	mov	r4, r0
  cyclic->handler();
 80108b6:	4798      	blx	r3

  now = sys_now();
 80108b8:	f7f5 fb96 	bl	8005fe8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80108bc:	4b0a      	ldr	r3, [pc, #40]	@ (80108e8 <lwip_cyclic_timer+0x38>)
 80108be:	6825      	ldr	r5, [r4, #0]
  now = sys_now();
 80108c0:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80108c2:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80108c4:	4622      	mov	r2, r4
 80108c6:	4909      	ldr	r1, [pc, #36]	@ (80108ec <lwip_cyclic_timer+0x3c>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80108c8:	18e8      	adds	r0, r5, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80108ca:	eba0 030c 	sub.w	r3, r0, ip
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	da05      	bge.n	80108de <lwip_cyclic_timer+0x2e>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80108d2:	eb05 000c 	add.w	r0, r5, ip
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80108d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80108da:	f7ff bfbd 	b.w	8010858 <sys_timeout_abs>
}
 80108de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80108e2:	f7ff bfb9 	b.w	8010858 <sys_timeout_abs>
 80108e6:	bf00      	nop
 80108e8:	24010758 	.word	0x24010758
 80108ec:	080108b1 	.word	0x080108b1

080108f0 <tcpip_tcp_timer>:
{
 80108f0:	b508      	push	{r3, lr}
  tcp_tmr();
 80108f2:	f7fd f913 	bl	800db1c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80108f6:	4b0a      	ldr	r3, [pc, #40]	@ (8010920 <tcpip_tcp_timer+0x30>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	b153      	cbz	r3, 8010912 <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 80108fc:	f7f5 fcfc 	bl	80062f8 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010900:	f7f5 fb72 	bl	8005fe8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010904:	2200      	movs	r2, #0
 8010906:	4907      	ldr	r1, [pc, #28]	@ (8010924 <tcpip_tcp_timer+0x34>)
 8010908:	30fa      	adds	r0, #250	@ 0xfa
}
 801090a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801090e:	f7ff bfa3 	b.w	8010858 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010912:	4b05      	ldr	r3, [pc, #20]	@ (8010928 <tcpip_tcp_timer+0x38>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1f0      	bne.n	80108fc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801091a:	4a04      	ldr	r2, [pc, #16]	@ (801092c <tcpip_tcp_timer+0x3c>)
 801091c:	6013      	str	r3, [r2, #0]
}
 801091e:	bd08      	pop	{r3, pc}
 8010920:	2401070c 	.word	0x2401070c
 8010924:	080108f1 	.word	0x080108f1
 8010928:	24010708 	.word	0x24010708
 801092c:	24010754 	.word	0x24010754

08010930 <tcp_timer_needed>:
{
 8010930:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 8010932:	f7f5 fce1 	bl	80062f8 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010936:	4b0c      	ldr	r3, [pc, #48]	@ (8010968 <tcp_timer_needed+0x38>)
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	b99a      	cbnz	r2, 8010964 <tcp_timer_needed+0x34>
 801093c:	4a0b      	ldr	r2, [pc, #44]	@ (801096c <tcp_timer_needed+0x3c>)
 801093e:	6812      	ldr	r2, [r2, #0]
 8010940:	b162      	cbz	r2, 801095c <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 8010942:	2201      	movs	r2, #1
 8010944:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8010946:	f7f5 fcd7 	bl	80062f8 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801094a:	f7f5 fb4d 	bl	8005fe8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801094e:	2200      	movs	r2, #0
 8010950:	4907      	ldr	r1, [pc, #28]	@ (8010970 <tcp_timer_needed+0x40>)
 8010952:	30fa      	adds	r0, #250	@ 0xfa
}
 8010954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010958:	f7ff bf7e 	b.w	8010858 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801095c:	4a05      	ldr	r2, [pc, #20]	@ (8010974 <tcp_timer_needed+0x44>)
 801095e:	6812      	ldr	r2, [r2, #0]
 8010960:	2a00      	cmp	r2, #0
 8010962:	d1ee      	bne.n	8010942 <tcp_timer_needed+0x12>
}
 8010964:	bd08      	pop	{r3, pc}
 8010966:	bf00      	nop
 8010968:	24010754 	.word	0x24010754
 801096c:	2401070c 	.word	0x2401070c
 8010970:	080108f1 	.word	0x080108f1
 8010974:	24010708 	.word	0x24010708

08010978 <sys_timeouts_init>:
{
 8010978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801097c:	4c10      	ldr	r4, [pc, #64]	@ (80109c0 <sys_timeouts_init+0x48>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801097e:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 80109cc <sys_timeouts_init+0x54>
 8010982:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 80109d0 <sys_timeouts_init+0x58>
 8010986:	f104 0620 	add.w	r6, r4, #32
 801098a:	4f0e      	ldr	r7, [pc, #56]	@ (80109c4 <sys_timeouts_init+0x4c>)
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801098c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT_CORE_LOCKED();
 8010990:	f7f5 fcb2 	bl	80062f8 <sys_check_core_locking>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010994:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
 8010998:	d20a      	bcs.n	80109b0 <sys_timeouts_init+0x38>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801099a:	f7f5 fb25 	bl	8005fe8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801099e:	4622      	mov	r2, r4
 80109a0:	4909      	ldr	r1, [pc, #36]	@ (80109c8 <sys_timeouts_init+0x50>)
 80109a2:	4428      	add	r0, r5
 80109a4:	f7ff ff58 	bl	8010858 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80109a8:	42b4      	cmp	r4, r6
 80109aa:	d1ef      	bne.n	801098c <sys_timeouts_init+0x14>
}
 80109ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80109b0:	464b      	mov	r3, r9
 80109b2:	f240 1229 	movw	r2, #297	@ 0x129
 80109b6:	4641      	mov	r1, r8
 80109b8:	4638      	mov	r0, r7
 80109ba:	f003 ffab 	bl	8014914 <iprintf>
 80109be:	e7ec      	b.n	801099a <sys_timeouts_init+0x22>
 80109c0:	08018028 	.word	0x08018028
 80109c4:	08015bd0 	.word	0x08015bd0
 80109c8:	080108b1 	.word	0x080108b1
 80109cc:	08017f7c 	.word	0x08017f7c
 80109d0:	08017ff0 	.word	0x08017ff0

080109d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80109d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 80109d8:	f7f5 fc8e 	bl	80062f8 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80109dc:	4c10      	ldr	r4, [pc, #64]	@ (8010a20 <sys_check_timeouts+0x4c>)
 80109de:	f7f5 fb03 	bl	8005fe8 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 80109e2:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8010a24 <sys_check_timeouts+0x50>
  now = sys_now();
 80109e6:	4607      	mov	r7, r0
 80109e8:	e00f      	b.n	8010a0a <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80109ea:	685a      	ldr	r2, [r3, #4]
 80109ec:	eba7 0c02 	sub.w	ip, r7, r2
 80109f0:	f1bc 0f00 	cmp.w	ip, #0
 80109f4:	db0e      	blt.n	8010a14 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 80109f6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 80109f8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 80109fa:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 80109fe:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 8010a02:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010a04:	f7fb f862 	bl	800bacc <memp_free>
    if (handler != NULL) {
 8010a08:	b935      	cbnz	r5, 8010a18 <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 8010a0a:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010a0c:	200a      	movs	r0, #10
 8010a0e:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1ea      	bne.n	80109ea <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 8010a18:	4648      	mov	r0, r9
 8010a1a:	47a8      	blx	r5
 8010a1c:	e7f5      	b.n	8010a0a <sys_check_timeouts+0x36>
 8010a1e:	bf00      	nop
 8010a20:	2401075c 	.word	0x2401075c
 8010a24:	24010758 	.word	0x24010758

08010a28 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010a28:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010a2a:	4c08      	ldr	r4, [pc, #32]	@ (8010a4c <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 8010a2c:	f7f5 fc64 	bl	80062f8 <sys_check_core_locking>
  if (next_timeout == NULL) {
 8010a30:	6823      	ldr	r3, [r4, #0]
 8010a32:	b13b      	cbz	r3, 8010a44 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8010a34:	f7f5 fad8 	bl	8005fe8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	685b      	ldr	r3, [r3, #4]
    return 0;
 8010a3c:	1a18      	subs	r0, r3, r0
 8010a3e:	bf48      	it	mi
 8010a40:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 8010a42:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010a44:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2401075c 	.word	0x2401075c

08010a50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010a50:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010a52:	f003 fdad 	bl	80145b0 <rand>
 8010a56:	4b02      	ldr	r3, [pc, #8]	@ (8010a60 <udp_init+0x10>)
 8010a58:	4a02      	ldr	r2, [pc, #8]	@ (8010a64 <udp_init+0x14>)
 8010a5a:	4303      	orrs	r3, r0
 8010a5c:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 8010a5e:	bd08      	pop	{r3, pc}
 8010a60:	ffffc000 	.word	0xffffc000
 8010a64:	2400008e 	.word	0x2400008e

08010a68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6c:	4680      	mov	r8, r0
 8010a6e:	b085      	sub	sp, #20
 8010a70:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8010a72:	f7f5 fc41 	bl	80062f8 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010a76:	f1b8 0f00 	cmp.w	r8, #0
 8010a7a:	f000 80c4 	beq.w	8010c06 <udp_input+0x19e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010a7e:	2f00      	cmp	r7, #0
 8010a80:	f000 80ca 	beq.w	8010c18 <udp_input+0x1b0>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010a84:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8010a88:	2b07      	cmp	r3, #7
 8010a8a:	f240 808c 	bls.w	8010ba6 <udp_input+0x13e>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010a8e:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8010c68 <udp_input+0x200>
  udphdr = (struct udp_hdr *)p->payload;
 8010a92:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010a96:	f8d9 1000 	ldr.w	r1, [r9]
 8010a9a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010a9e:	f002 fe3b 	bl	8013718 <ip4_addr_isbroadcast_u32>
 8010aa2:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010aa4:	8820      	ldrh	r0, [r4, #0]
 8010aa6:	f7fa fc2b 	bl	800b300 <lwip_htons>
 8010aaa:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 8010aac:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 8010aae:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8010ab0:	f7fa fc26 	bl	800b300 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ab4:	4b64      	ldr	r3, [pc, #400]	@ (8010c48 <udp_input+0x1e0>)
  dest = lwip_ntohs(udphdr->dest);
 8010ab6:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ab8:	681c      	ldr	r4, [r3, #0]
 8010aba:	2c00      	cmp	r4, #0
 8010abc:	d07c      	beq.n	8010bb8 <udp_input+0x150>
  uncon_pcb = NULL;
 8010abe:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 8010ac2:	465e      	mov	r6, fp
 8010ac4:	e004      	b.n	8010ad0 <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ac6:	68e3      	ldr	r3, [r4, #12]
 8010ac8:	4626      	mov	r6, r4
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d071      	beq.n	8010bb2 <udp_input+0x14a>
 8010ace:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010ad0:	8a63      	ldrh	r3, [r4, #18]
 8010ad2:	42ab      	cmp	r3, r5
 8010ad4:	d1f7      	bne.n	8010ac6 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010ad6:	2f00      	cmp	r7, #0
 8010ad8:	f000 808e 	beq.w	8010bf8 <udp_input+0x190>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010adc:	7a22      	ldrb	r2, [r4, #8]
 8010ade:	b13a      	cbz	r2, 8010af0 <udp_input+0x88>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ae0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010ae4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010ae8:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d1ea      	bne.n	8010ac6 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010af0:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8010af2:	f1ba 0f00 	cmp.w	sl, #0
 8010af6:	d038      	beq.n	8010b6a <udp_input+0x102>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010af8:	b13b      	cbz	r3, 8010b0a <udp_input+0xa2>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010afa:	f8d9 2014 	ldr.w	r2, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010afe:	1c50      	adds	r0, r2, #1
 8010b00:	d003      	beq.n	8010b0a <udp_input+0xa2>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010b02:	405a      	eors	r2, r3
 8010b04:	68b9      	ldr	r1, [r7, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010b06:	420a      	tst	r2, r1
 8010b08:	d1dd      	bne.n	8010ac6 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010b0a:	7c22      	ldrb	r2, [r4, #16]
 8010b0c:	0752      	lsls	r2, r2, #29
 8010b0e:	d408      	bmi.n	8010b22 <udp_input+0xba>
        if (uncon_pcb == NULL) {
 8010b10:	f1bb 0f00 	cmp.w	fp, #0
 8010b14:	f000 8091 	beq.w	8010c3a <udp_input+0x1d2>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010b18:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8010b1c:	3201      	adds	r2, #1
 8010b1e:	f000 8082 	beq.w	8010c26 <udp_input+0x1be>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010b22:	8aa3      	ldrh	r3, [r4, #20]
 8010b24:	9a03      	ldr	r2, [sp, #12]
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d1cd      	bne.n	8010ac6 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010b2a:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8010b2c:	b11b      	cbz	r3, 8010b36 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010b2e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d1c7      	bne.n	8010ac6 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010b36:	b34e      	cbz	r6, 8010b8c <udp_input+0x124>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010b38:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 8010b3a:	46a3      	mov	fp, r4
          pcb->next = udp_pcbs;
 8010b3c:	4a42      	ldr	r2, [pc, #264]	@ (8010c48 <udp_input+0x1e0>)
          prev->next = pcb->next;
 8010b3e:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 8010b40:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 8010b42:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 8010b44:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010b46:	2108      	movs	r1, #8
 8010b48:	4640      	mov	r0, r8
 8010b4a:	f7fb fa91 	bl	800c070 <pbuf_remove_header>
 8010b4e:	bb18      	cbnz	r0, 8010b98 <udp_input+0x130>
 8010b50:	465c      	mov	r4, fp
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010b52:	69a5      	ldr	r5, [r4, #24]
 8010b54:	b33d      	cbz	r5, 8010ba6 <udp_input+0x13e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010b56:	9b03      	ldr	r3, [sp, #12]
 8010b58:	4642      	mov	r2, r8
 8010b5a:	69e0      	ldr	r0, [r4, #28]
 8010b5c:	4621      	mov	r1, r4
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	4b3a      	ldr	r3, [pc, #232]	@ (8010c4c <udp_input+0x1e4>)
 8010b62:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010b64:	b005      	add	sp, #20
 8010b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b6a:	b11b      	cbz	r3, 8010b74 <udp_input+0x10c>
 8010b6c:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d1a8      	bne.n	8010ac6 <udp_input+0x5e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010b74:	7c23      	ldrb	r3, [r4, #16]
 8010b76:	0759      	lsls	r1, r3, #29
 8010b78:	d4d3      	bmi.n	8010b22 <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 8010b7a:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 8010b7c:	f1bb 0f00 	cmp.w	fp, #0
 8010b80:	bf08      	it	eq
 8010b82:	46a3      	moveq	fp, r4
      if ((pcb->remote_port == src) &&
 8010b84:	9a03      	ldr	r2, [sp, #12]
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d19d      	bne.n	8010ac6 <udp_input+0x5e>
 8010b8a:	e7ce      	b.n	8010b2a <udp_input+0xc2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010b8c:	2108      	movs	r1, #8
 8010b8e:	4640      	mov	r0, r8
 8010b90:	f7fb fa6e 	bl	800c070 <pbuf_remove_header>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d0dc      	beq.n	8010b52 <udp_input+0xea>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010b98:	4b2d      	ldr	r3, [pc, #180]	@ (8010c50 <udp_input+0x1e8>)
 8010b9a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010b9e:	492d      	ldr	r1, [pc, #180]	@ (8010c54 <udp_input+0x1ec>)
 8010ba0:	482d      	ldr	r0, [pc, #180]	@ (8010c58 <udp_input+0x1f0>)
 8010ba2:	f003 feb7 	bl	8014914 <iprintf>
      pbuf_free(p);
 8010ba6:	4640      	mov	r0, r8
}
 8010ba8:	b005      	add	sp, #20
 8010baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8010bae:	f7fb bac1 	b.w	800c134 <pbuf_free>
  if (pcb != NULL) {
 8010bb2:	f1bb 0f00 	cmp.w	fp, #0
 8010bb6:	d1c6      	bne.n	8010b46 <udp_input+0xde>
  if (for_us) {
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d1f1      	bne.n	8010ba6 <udp_input+0x13e>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010bc2:	2108      	movs	r1, #8
 8010bc4:	4640      	mov	r0, r8
 8010bc6:	f7fb fa53 	bl	800c070 <pbuf_remove_header>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d1e4      	bne.n	8010b98 <udp_input+0x130>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010bce:	f1ba 0f00 	cmp.w	sl, #0
 8010bd2:	d1e8      	bne.n	8010ba6 <udp_input+0x13e>
 8010bd4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010bdc:	2be0      	cmp	r3, #224	@ 0xe0
 8010bde:	d0e2      	beq.n	8010ba6 <udp_input+0x13e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010be0:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 8010be4:	4640      	mov	r0, r8
 8010be6:	3108      	adds	r1, #8
 8010be8:	b209      	sxth	r1, r1
 8010bea:	f7fb fa6f 	bl	800c0cc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010bee:	2103      	movs	r1, #3
 8010bf0:	4640      	mov	r0, r8
 8010bf2:	f002 fbb7 	bl	8013364 <icmp_dest_unreach>
 8010bf6:	e7d6      	b.n	8010ba6 <udp_input+0x13e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010bf8:	4b15      	ldr	r3, [pc, #84]	@ (8010c50 <udp_input+0x1e8>)
 8010bfa:	2288      	movs	r2, #136	@ 0x88
 8010bfc:	4917      	ldr	r1, [pc, #92]	@ (8010c5c <udp_input+0x1f4>)
 8010bfe:	4816      	ldr	r0, [pc, #88]	@ (8010c58 <udp_input+0x1f0>)
 8010c00:	f003 fe88 	bl	8014914 <iprintf>
 8010c04:	e76a      	b.n	8010adc <udp_input+0x74>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010c06:	4b12      	ldr	r3, [pc, #72]	@ (8010c50 <udp_input+0x1e8>)
 8010c08:	22cf      	movs	r2, #207	@ 0xcf
 8010c0a:	4915      	ldr	r1, [pc, #84]	@ (8010c60 <udp_input+0x1f8>)
 8010c0c:	4812      	ldr	r0, [pc, #72]	@ (8010c58 <udp_input+0x1f0>)
 8010c0e:	f003 fe81 	bl	8014914 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010c12:	2f00      	cmp	r7, #0
 8010c14:	f47f af36 	bne.w	8010a84 <udp_input+0x1c>
 8010c18:	4b0d      	ldr	r3, [pc, #52]	@ (8010c50 <udp_input+0x1e8>)
 8010c1a:	22d0      	movs	r2, #208	@ 0xd0
 8010c1c:	4911      	ldr	r1, [pc, #68]	@ (8010c64 <udp_input+0x1fc>)
 8010c1e:	480e      	ldr	r0, [pc, #56]	@ (8010c58 <udp_input+0x1f0>)
 8010c20:	f003 fe78 	bl	8014914 <iprintf>
 8010c24:	e72e      	b.n	8010a84 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	f8db 1000 	ldr.w	r1, [fp]
 8010c2c:	4291      	cmp	r1, r2
 8010c2e:	f43f af78 	beq.w	8010b22 <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010c32:	429a      	cmp	r2, r3
 8010c34:	bf08      	it	eq
 8010c36:	46a3      	moveq	fp, r4
 8010c38:	e773      	b.n	8010b22 <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 8010c3a:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 8010c3c:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 8010c3e:	9a03      	ldr	r2, [sp, #12]
 8010c40:	4293      	cmp	r3, r2
 8010c42:	f47f af40 	bne.w	8010ac6 <udp_input+0x5e>
 8010c46:	e770      	b.n	8010b2a <udp_input+0xc2>
 8010c48:	24010760 	.word	0x24010760
 8010c4c:	24009c38 	.word	0x24009c38
 8010c50:	08018050 	.word	0x08018050
 8010c54:	080180dc 	.word	0x080180dc
 8010c58:	08015bd0 	.word	0x08015bd0
 8010c5c:	080180b4 	.word	0x080180b4
 8010c60:	08018080 	.word	0x08018080
 8010c64:	08018098 	.word	0x08018098
 8010c68:	24009c28 	.word	0x24009c28

08010c6c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6e:	460f      	mov	r7, r1
 8010c70:	4605      	mov	r5, r0
 8010c72:	4616      	mov	r6, r2
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8010c74:	f7f5 fb40 	bl	80062f8 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010c78:	2f00      	cmp	r7, #0
 8010c7a:	d043      	beq.n	8010d04 <udp_bind+0x98>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c7c:	2d00      	cmp	r5, #0
 8010c7e:	d05c      	beq.n	8010d3a <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c80:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8010d64 <udp_bind+0xf8>
 8010c84:	f8dc 0000 	ldr.w	r0, [ip]
 8010c88:	b1e8      	cbz	r0, 8010cc6 <udp_bind+0x5a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010c8a:	4285      	cmp	r5, r0
 8010c8c:	d03c      	beq.n	8010d08 <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c8e:	4604      	mov	r4, r0
 8010c90:	e001      	b.n	8010c96 <udp_bind+0x2a>
    if (pcb == ipcb) {
 8010c92:	42a5      	cmp	r5, r4
 8010c94:	d038      	beq.n	8010d08 <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c96:	68e4      	ldr	r4, [r4, #12]
 8010c98:	2c00      	cmp	r4, #0
 8010c9a:	d1fa      	bne.n	8010c92 <udp_bind+0x26>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010c9c:	b1ae      	cbz	r6, 8010cca <udp_bind+0x5e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010c9e:	6839      	ldr	r1, [r7, #0]
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	e001      	b.n	8010ca8 <udp_bind+0x3c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	b303      	cbz	r3, 8010cea <udp_bind+0x7e>
      if (pcb != ipcb) {
 8010ca8:	429d      	cmp	r5, r3
 8010caa:	d0fb      	beq.n	8010ca4 <udp_bind+0x38>
          if ((ipcb->local_port == port) &&
 8010cac:	8a5a      	ldrh	r2, [r3, #18]
 8010cae:	42b2      	cmp	r2, r6
 8010cb0:	d1f8      	bne.n	8010ca4 <udp_bind+0x38>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010cb2:	681a      	ldr	r2, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	bf18      	it	ne
 8010cb8:	428a      	cmpne	r2, r1
 8010cba:	d001      	beq.n	8010cc0 <udp_bind+0x54>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	d1f1      	bne.n	8010ca4 <udp_bind+0x38>
      return ERR_USE;
 8010cc0:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8010cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8010cc6:	b9ae      	cbnz	r6, 8010cf4 <udp_bind+0x88>
  rebind = 0;
 8010cc8:	4604      	mov	r4, r0
 8010cca:	f8df e09c 	ldr.w	lr, [pc, #156]	@ 8010d68 <udp_bind+0xfc>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010cd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010cd6:	f8be 6000 	ldrh.w	r6, [lr]
 8010cda:	429e      	cmp	r6, r3
 8010cdc:	d028      	beq.n	8010d30 <udp_bind+0xc4>
 8010cde:	3601      	adds	r6, #1
 8010ce0:	b2b6      	uxth	r6, r6
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ce2:	b9e0      	cbnz	r0, 8010d1e <udp_bind+0xb2>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010ce4:	6839      	ldr	r1, [r7, #0]
 8010ce6:	f8ae 6000 	strh.w	r6, [lr]
 8010cea:	6029      	str	r1, [r5, #0]
  pcb->local_port = port;
 8010cec:	826e      	strh	r6, [r5, #18]
  if (rebind == 0) {
 8010cee:	b124      	cbz	r4, 8010cfa <udp_bind+0x8e>
  return ERR_OK;
 8010cf0:	2000      	movs	r0, #0
}
 8010cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010cf4:	683b      	ldr	r3, [r7, #0]
  pcb->local_port = port;
 8010cf6:	826e      	strh	r6, [r5, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010cf8:	602b      	str	r3, [r5, #0]
    pcb->next = udp_pcbs;
 8010cfa:	60e8      	str	r0, [r5, #12]
  return ERR_OK;
 8010cfc:	2000      	movs	r0, #0
    udp_pcbs = pcb;
 8010cfe:	f8cc 5000 	str.w	r5, [ip]
 8010d02:	e7f6      	b.n	8010cf2 <udp_bind+0x86>
    ipaddr = IP4_ADDR_ANY;
 8010d04:	4f13      	ldr	r7, [pc, #76]	@ (8010d54 <udp_bind+0xe8>)
 8010d06:	e7b9      	b.n	8010c7c <udp_bind+0x10>
      rebind = 1;
 8010d08:	2401      	movs	r4, #1
 8010d0a:	e7c7      	b.n	8010c9c <udp_bind+0x30>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010d0c:	3901      	subs	r1, #1
 8010d0e:	b289      	uxth	r1, r1
 8010d10:	b1e9      	cbz	r1, 8010d4e <udp_bind+0xe2>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010d12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010d16:	429e      	cmp	r6, r3
 8010d18:	d1e1      	bne.n	8010cde <udp_bind+0x72>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010d1a:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d1e:	4603      	mov	r3, r0
 8010d20:	e002      	b.n	8010d28 <udp_bind+0xbc>
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d0dd      	beq.n	8010ce4 <udp_bind+0x78>
    if (pcb->local_port == udp_port) {
 8010d28:	8a5a      	ldrh	r2, [r3, #18]
 8010d2a:	42b2      	cmp	r2, r6
 8010d2c:	d1f9      	bne.n	8010d22 <udp_bind+0xb6>
 8010d2e:	e7ed      	b.n	8010d0c <udp_bind+0xa0>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010d30:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d1f2      	bne.n	8010d1e <udp_bind+0xb2>
 8010d38:	e7d4      	b.n	8010ce4 <udp_bind+0x78>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d3a:	4b07      	ldr	r3, [pc, #28]	@ (8010d58 <udp_bind+0xec>)
 8010d3c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8010d40:	4906      	ldr	r1, [pc, #24]	@ (8010d5c <udp_bind+0xf0>)
 8010d42:	4807      	ldr	r0, [pc, #28]	@ (8010d60 <udp_bind+0xf4>)
 8010d44:	f003 fde6 	bl	8014914 <iprintf>
 8010d48:	f06f 000f 	mvn.w	r0, #15
}
 8010d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d4e:	f8ae 6000 	strh.w	r6, [lr]
    if (port == 0) {
 8010d52:	e7b5      	b.n	8010cc0 <udp_bind+0x54>
 8010d54:	080189c0 	.word	0x080189c0
 8010d58:	08018050 	.word	0x08018050
 8010d5c:	080180f8 	.word	0x080180f8
 8010d60:	08015bd0 	.word	0x08015bd0
 8010d64:	24010760 	.word	0x24010760
 8010d68:	2400008e 	.word	0x2400008e

08010d6c <udp_sendto_if_src>:
{
 8010d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d70:	4604      	mov	r4, r0
 8010d72:	b085      	sub	sp, #20
 8010d74:	460d      	mov	r5, r1
 8010d76:	4690      	mov	r8, r2
 8010d78:	4699      	mov	r9, r3
 8010d7a:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
  LWIP_ASSERT_CORE_LOCKED();
 8010d7e:	f7f5 fabb 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d82:	2c00      	cmp	r4, #0
 8010d84:	f000 8082 	beq.w	8010e8c <udp_sendto_if_src+0x120>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010d88:	2d00      	cmp	r5, #0
 8010d8a:	d077      	beq.n	8010e7c <udp_sendto_if_src+0x110>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010d8c:	f1b8 0f00 	cmp.w	r8, #0
 8010d90:	d06c      	beq.n	8010e6c <udp_sendto_if_src+0x100>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010d92:	f1ba 0f00 	cmp.w	sl, #0
 8010d96:	d05f      	beq.n	8010e58 <udp_sendto_if_src+0xec>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010d98:	f1bb 0f00 	cmp.w	fp, #0
 8010d9c:	d07e      	beq.n	8010e9c <udp_sendto_if_src+0x130>
  if (pcb->local_port == 0) {
 8010d9e:	8a62      	ldrh	r2, [r4, #18]
 8010da0:	2a00      	cmp	r2, #0
 8010da2:	d034      	beq.n	8010e0e <udp_sendto_if_src+0xa2>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010da4:	892a      	ldrh	r2, [r5, #8]
 8010da6:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d851      	bhi.n	8010e52 <udp_sendto_if_src+0xe6>
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010dae:	2108      	movs	r1, #8
 8010db0:	4628      	mov	r0, r5
 8010db2:	f7fb f92d 	bl	800c010 <pbuf_add_header>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d134      	bne.n	8010e24 <udp_sendto_if_src+0xb8>
 8010dba:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010dbc:	8973      	ldrh	r3, [r6, #10]
 8010dbe:	2b07      	cmp	r3, #7
 8010dc0:	d93f      	bls.n	8010e42 <udp_sendto_if_src+0xd6>
  udphdr = (struct udp_hdr *)q->payload;
 8010dc2:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8010dc4:	8a60      	ldrh	r0, [r4, #18]
 8010dc6:	f7fa fa9b 	bl	800b300 <lwip_htons>
 8010dca:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010dcc:	4648      	mov	r0, r9
 8010dce:	f7fa fa97 	bl	800b300 <lwip_htons>
  udphdr->chksum = 0x0000;
 8010dd2:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8010dd4:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 8010dd6:	71bb      	strb	r3, [r7, #6]
 8010dd8:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8010dda:	8930      	ldrh	r0, [r6, #8]
 8010ddc:	f7fa fa90 	bl	800b300 <lwip_htons>
 8010de0:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010de2:	f8cd b008 	str.w	fp, [sp, #8]
 8010de6:	2011      	movs	r0, #17
 8010de8:	7aa3      	ldrb	r3, [r4, #10]
 8010dea:	4642      	mov	r2, r8
 8010dec:	4651      	mov	r1, sl
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	7ae3      	ldrb	r3, [r4, #11]
 8010df2:	9001      	str	r0, [sp, #4]
 8010df4:	4630      	mov	r0, r6
 8010df6:	f002 fbf9 	bl	80135ec <ip4_output_if_src>
  if (q != p) {
 8010dfa:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010dfc:	4607      	mov	r7, r0
  if (q != p) {
 8010dfe:	d002      	beq.n	8010e06 <udp_sendto_if_src+0x9a>
    pbuf_free(q);
 8010e00:	4630      	mov	r0, r6
 8010e02:	f7fb f997 	bl	800c134 <pbuf_free>
}
 8010e06:	4638      	mov	r0, r7
 8010e08:	b005      	add	sp, #20
 8010e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010e0e:	4621      	mov	r1, r4
 8010e10:	4620      	mov	r0, r4
 8010e12:	f7ff ff2b 	bl	8010c6c <udp_bind>
    if (err != ERR_OK) {
 8010e16:	4607      	mov	r7, r0
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d0c3      	beq.n	8010da4 <udp_sendto_if_src+0x38>
}
 8010e1c:	4638      	mov	r0, r7
 8010e1e:	b005      	add	sp, #20
 8010e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010e24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010e28:	2108      	movs	r1, #8
 8010e2a:	2022      	movs	r0, #34	@ 0x22
 8010e2c:	f7fb f9f2 	bl	800c214 <pbuf_alloc>
    if (q == NULL) {
 8010e30:	4606      	mov	r6, r0
 8010e32:	b170      	cbz	r0, 8010e52 <udp_sendto_if_src+0xe6>
    if (p->tot_len != 0) {
 8010e34:	892b      	ldrh	r3, [r5, #8]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d0c0      	beq.n	8010dbc <udp_sendto_if_src+0x50>
      pbuf_chain(q, p);
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	f7fb fb78 	bl	800c530 <pbuf_chain>
 8010e40:	e7bc      	b.n	8010dbc <udp_sendto_if_src+0x50>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010e42:	4b1a      	ldr	r3, [pc, #104]	@ (8010eac <udp_sendto_if_src+0x140>)
 8010e44:	f240 320d 	movw	r2, #781	@ 0x30d
 8010e48:	4919      	ldr	r1, [pc, #100]	@ (8010eb0 <udp_sendto_if_src+0x144>)
 8010e4a:	481a      	ldr	r0, [pc, #104]	@ (8010eb4 <udp_sendto_if_src+0x148>)
 8010e4c:	f003 fd62 	bl	8014914 <iprintf>
 8010e50:	e7b7      	b.n	8010dc2 <udp_sendto_if_src+0x56>
    return ERR_MEM;
 8010e52:	f04f 37ff 	mov.w	r7, #4294967295
 8010e56:	e7d6      	b.n	8010e06 <udp_sendto_if_src+0x9a>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010e58:	4b14      	ldr	r3, [pc, #80]	@ (8010eac <udp_sendto_if_src+0x140>)
 8010e5a:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8010e5e:	4916      	ldr	r1, [pc, #88]	@ (8010eb8 <udp_sendto_if_src+0x14c>)
 8010e60:	4814      	ldr	r0, [pc, #80]	@ (8010eb4 <udp_sendto_if_src+0x148>)
 8010e62:	f003 fd57 	bl	8014914 <iprintf>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e66:	f06f 070f 	mvn.w	r7, #15
 8010e6a:	e7cc      	b.n	8010e06 <udp_sendto_if_src+0x9a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8010eac <udp_sendto_if_src+0x140>)
 8010e6e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8010e72:	4912      	ldr	r1, [pc, #72]	@ (8010ebc <udp_sendto_if_src+0x150>)
 8010e74:	480f      	ldr	r0, [pc, #60]	@ (8010eb4 <udp_sendto_if_src+0x148>)
 8010e76:	f003 fd4d 	bl	8014914 <iprintf>
 8010e7a:	e7f4      	b.n	8010e66 <udp_sendto_if_src+0xfa>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8010eac <udp_sendto_if_src+0x140>)
 8010e7e:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8010e82:	490f      	ldr	r1, [pc, #60]	@ (8010ec0 <udp_sendto_if_src+0x154>)
 8010e84:	480b      	ldr	r0, [pc, #44]	@ (8010eb4 <udp_sendto_if_src+0x148>)
 8010e86:	f003 fd45 	bl	8014914 <iprintf>
 8010e8a:	e7ec      	b.n	8010e66 <udp_sendto_if_src+0xfa>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e8c:	4b07      	ldr	r3, [pc, #28]	@ (8010eac <udp_sendto_if_src+0x140>)
 8010e8e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010e92:	490c      	ldr	r1, [pc, #48]	@ (8010ec4 <udp_sendto_if_src+0x158>)
 8010e94:	4807      	ldr	r0, [pc, #28]	@ (8010eb4 <udp_sendto_if_src+0x148>)
 8010e96:	f003 fd3d 	bl	8014914 <iprintf>
 8010e9a:	e7e4      	b.n	8010e66 <udp_sendto_if_src+0xfa>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010e9c:	4b03      	ldr	r3, [pc, #12]	@ (8010eac <udp_sendto_if_src+0x140>)
 8010e9e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8010ea2:	4909      	ldr	r1, [pc, #36]	@ (8010ec8 <udp_sendto_if_src+0x15c>)
 8010ea4:	4803      	ldr	r0, [pc, #12]	@ (8010eb4 <udp_sendto_if_src+0x148>)
 8010ea6:	f003 fd35 	bl	8014914 <iprintf>
 8010eaa:	e7dc      	b.n	8010e66 <udp_sendto_if_src+0xfa>
 8010eac:	08018050 	.word	0x08018050
 8010eb0:	080181bc 	.word	0x080181bc
 8010eb4:	08015bd0 	.word	0x08015bd0
 8010eb8:	08018174 	.word	0x08018174
 8010ebc:	08018150 	.word	0x08018150
 8010ec0:	08018130 	.word	0x08018130
 8010ec4:	08018110 	.word	0x08018110
 8010ec8:	08018198 	.word	0x08018198

08010ecc <udp_sendto_if>:
{
 8010ecc:	b570      	push	{r4, r5, r6, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ed2:	b390      	cbz	r0, 8010f3a <udp_sendto_if+0x6e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010ed4:	b349      	cbz	r1, 8010f2a <udp_sendto_if+0x5e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010ed6:	b302      	cbz	r2, 8010f1a <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010ed8:	b1ac      	cbz	r4, 8010f06 <udp_sendto_if+0x3a>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010eda:	6805      	ldr	r5, [r0, #0]
 8010edc:	b935      	cbnz	r5, 8010eec <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 8010ede:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010ee0:	e9cd 4500 	strd	r4, r5, [sp]
 8010ee4:	f7ff ff42 	bl	8010d6c <udp_sendto_if_src>
}
 8010ee8:	b002      	add	sp, #8
 8010eea:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010eec:	f005 0cf0 	and.w	ip, r5, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ef0:	f1bc 0fe0 	cmp.w	ip, #224	@ 0xe0
 8010ef4:	d0f3      	beq.n	8010ede <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010ef6:	6866      	ldr	r6, [r4, #4]
 8010ef8:	42b5      	cmp	r5, r6
 8010efa:	d101      	bne.n	8010f00 <udp_sendto_if+0x34>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010efc:	4605      	mov	r5, r0
 8010efe:	e7ef      	b.n	8010ee0 <udp_sendto_if+0x14>
        return ERR_RTE;
 8010f00:	f06f 0003 	mvn.w	r0, #3
 8010f04:	e7f0      	b.n	8010ee8 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010f06:	4b11      	ldr	r3, [pc, #68]	@ (8010f4c <udp_sendto_if+0x80>)
 8010f08:	f240 2283 	movw	r2, #643	@ 0x283
 8010f0c:	4910      	ldr	r1, [pc, #64]	@ (8010f50 <udp_sendto_if+0x84>)
 8010f0e:	4811      	ldr	r0, [pc, #68]	@ (8010f54 <udp_sendto_if+0x88>)
 8010f10:	f003 fd00 	bl	8014914 <iprintf>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f14:	f06f 000f 	mvn.w	r0, #15
 8010f18:	e7e6      	b.n	8010ee8 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010f4c <udp_sendto_if+0x80>)
 8010f1c:	f240 2282 	movw	r2, #642	@ 0x282
 8010f20:	490d      	ldr	r1, [pc, #52]	@ (8010f58 <udp_sendto_if+0x8c>)
 8010f22:	480c      	ldr	r0, [pc, #48]	@ (8010f54 <udp_sendto_if+0x88>)
 8010f24:	f003 fcf6 	bl	8014914 <iprintf>
 8010f28:	e7f4      	b.n	8010f14 <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010f2a:	4b08      	ldr	r3, [pc, #32]	@ (8010f4c <udp_sendto_if+0x80>)
 8010f2c:	f240 2281 	movw	r2, #641	@ 0x281
 8010f30:	490a      	ldr	r1, [pc, #40]	@ (8010f5c <udp_sendto_if+0x90>)
 8010f32:	4808      	ldr	r0, [pc, #32]	@ (8010f54 <udp_sendto_if+0x88>)
 8010f34:	f003 fcee 	bl	8014914 <iprintf>
 8010f38:	e7ec      	b.n	8010f14 <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f3a:	4b04      	ldr	r3, [pc, #16]	@ (8010f4c <udp_sendto_if+0x80>)
 8010f3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010f40:	4907      	ldr	r1, [pc, #28]	@ (8010f60 <udp_sendto_if+0x94>)
 8010f42:	4804      	ldr	r0, [pc, #16]	@ (8010f54 <udp_sendto_if+0x88>)
 8010f44:	f003 fce6 	bl	8014914 <iprintf>
 8010f48:	e7e4      	b.n	8010f14 <udp_sendto_if+0x48>
 8010f4a:	bf00      	nop
 8010f4c:	08018050 	.word	0x08018050
 8010f50:	08018244 	.word	0x08018244
 8010f54:	08015bd0 	.word	0x08015bd0
 8010f58:	08018224 	.word	0x08018224
 8010f5c:	08018208 	.word	0x08018208
 8010f60:	080181ec 	.word	0x080181ec

08010f64 <udp_sendto>:
{
 8010f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f68:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f6a:	b378      	cbz	r0, 8010fcc <udp_sendto+0x68>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010f6c:	460e      	mov	r6, r1
 8010f6e:	b329      	cbz	r1, 8010fbc <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010f70:	4615      	mov	r5, r2
 8010f72:	b1ca      	cbz	r2, 8010fa8 <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010f74:	4604      	mov	r4, r0
 8010f76:	7a00      	ldrb	r0, [r0, #8]
 8010f78:	4698      	mov	r8, r3
 8010f7a:	b168      	cbz	r0, 8010f98 <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 8010f7c:	f7fa ffae 	bl	800bedc <netif_get_by_index>
 8010f80:	4607      	mov	r7, r0
  if (netif == NULL) {
 8010f82:	b177      	cbz	r7, 8010fa2 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010f84:	4643      	mov	r3, r8
 8010f86:	462a      	mov	r2, r5
 8010f88:	4631      	mov	r1, r6
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	9700      	str	r7, [sp, #0]
 8010f8e:	f7ff ff9d 	bl	8010ecc <udp_sendto_if>
}
 8010f92:	b002      	add	sp, #8
 8010f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010f98:	4610      	mov	r0, r2
 8010f9a:	f002 f9eb 	bl	8013374 <ip4_route>
 8010f9e:	4607      	mov	r7, r0
 8010fa0:	e7ef      	b.n	8010f82 <udp_sendto+0x1e>
    return ERR_RTE;
 8010fa2:	f06f 0003 	mvn.w	r0, #3
 8010fa6:	e7f4      	b.n	8010f92 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8010fdc <udp_sendto+0x78>)
 8010faa:	f240 221a 	movw	r2, #538	@ 0x21a
 8010fae:	490c      	ldr	r1, [pc, #48]	@ (8010fe0 <udp_sendto+0x7c>)
 8010fb0:	480c      	ldr	r0, [pc, #48]	@ (8010fe4 <udp_sendto+0x80>)
 8010fb2:	f003 fcaf 	bl	8014914 <iprintf>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fb6:	f06f 000f 	mvn.w	r0, #15
 8010fba:	e7ea      	b.n	8010f92 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010fbc:	4b07      	ldr	r3, [pc, #28]	@ (8010fdc <udp_sendto+0x78>)
 8010fbe:	f240 2219 	movw	r2, #537	@ 0x219
 8010fc2:	4909      	ldr	r1, [pc, #36]	@ (8010fe8 <udp_sendto+0x84>)
 8010fc4:	4807      	ldr	r0, [pc, #28]	@ (8010fe4 <udp_sendto+0x80>)
 8010fc6:	f003 fca5 	bl	8014914 <iprintf>
 8010fca:	e7f4      	b.n	8010fb6 <udp_sendto+0x52>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fcc:	4b03      	ldr	r3, [pc, #12]	@ (8010fdc <udp_sendto+0x78>)
 8010fce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010fd2:	4906      	ldr	r1, [pc, #24]	@ (8010fec <udp_sendto+0x88>)
 8010fd4:	4803      	ldr	r0, [pc, #12]	@ (8010fe4 <udp_sendto+0x80>)
 8010fd6:	f003 fc9d 	bl	8014914 <iprintf>
 8010fda:	e7ec      	b.n	8010fb6 <udp_sendto+0x52>
 8010fdc:	08018050 	.word	0x08018050
 8010fe0:	08018298 	.word	0x08018298
 8010fe4:	08015bd0 	.word	0x08015bd0
 8010fe8:	0801827c 	.word	0x0801827c
 8010fec:	08018264 	.word	0x08018264

08010ff0 <udp_send>:
{
 8010ff0:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ff2:	b188      	cbz	r0, 8011018 <udp_send+0x28>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8010ff4:	b131      	cbz	r1, 8011004 <udp_send+0x14>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	8a83      	ldrh	r3, [r0, #20]
 8010ffa:	3204      	adds	r2, #4
}
 8010ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8011000:	f7ff bfb0 	b.w	8010f64 <udp_sendto>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8011004:	4b08      	ldr	r3, [pc, #32]	@ (8011028 <udp_send+0x38>)
 8011006:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801100a:	4908      	ldr	r1, [pc, #32]	@ (801102c <udp_send+0x3c>)
 801100c:	4808      	ldr	r0, [pc, #32]	@ (8011030 <udp_send+0x40>)
 801100e:	f003 fc81 	bl	8014914 <iprintf>
}
 8011012:	f06f 000f 	mvn.w	r0, #15
 8011016:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8011018:	4b03      	ldr	r3, [pc, #12]	@ (8011028 <udp_send+0x38>)
 801101a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801101e:	4905      	ldr	r1, [pc, #20]	@ (8011034 <udp_send+0x44>)
 8011020:	4803      	ldr	r0, [pc, #12]	@ (8011030 <udp_send+0x40>)
 8011022:	f003 fc77 	bl	8014914 <iprintf>
 8011026:	e7f4      	b.n	8011012 <udp_send+0x22>
 8011028:	08018050 	.word	0x08018050
 801102c:	080182cc 	.word	0x080182cc
 8011030:	08015bd0 	.word	0x08015bd0
 8011034:	080182b4 	.word	0x080182b4

08011038 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8011038:	b538      	push	{r3, r4, r5, lr}
 801103a:	460c      	mov	r4, r1
 801103c:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 801103e:	f7f5 f95b 	bl	80062f8 <sys_check_core_locking>

  if (netif != NULL) {
 8011042:	b11c      	cbz	r4, 801104c <udp_bind_netif+0x14>
    pcb->netif_idx = netif_get_index(netif);
 8011044:	f894 4034 	ldrb.w	r4, [r4, #52]	@ 0x34
 8011048:	3401      	adds	r4, #1
 801104a:	b2e4      	uxtb	r4, r4
 801104c:	722c      	strb	r4, [r5, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 801104e:	bd38      	pop	{r3, r4, r5, pc}

08011050 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011050:	b570      	push	{r4, r5, r6, lr}
 8011052:	4604      	mov	r4, r0
 8011054:	460d      	mov	r5, r1
 8011056:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 8011058:	f7f5 f94e 	bl	80062f8 <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801105c:	b304      	cbz	r4, 80110a0 <udp_connect+0x50>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801105e:	b34d      	cbz	r5, 80110b4 <udp_connect+0x64>

  if (pcb->local_port == 0) {
 8011060:	8a62      	ldrh	r2, [r4, #18]
 8011062:	b1b2      	cbz	r2, 8011092 <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011064:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011066:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011068:	4916      	ldr	r1, [pc, #88]	@ (80110c4 <udp_connect+0x74>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801106a:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801106e:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011070:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 8011072:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011074:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011076:	b142      	cbz	r2, 801108a <udp_connect+0x3a>
    if (pcb == ipcb) {
 8011078:	4294      	cmp	r4, r2
 801107a:	d008      	beq.n	801108e <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801107c:	4613      	mov	r3, r2
 801107e:	e001      	b.n	8011084 <udp_connect+0x34>
    if (pcb == ipcb) {
 8011080:	429c      	cmp	r4, r3
 8011082:	d004      	beq.n	801108e <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1fa      	bne.n	8011080 <udp_connect+0x30>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801108a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801108c:	600c      	str	r4, [r1, #0]
      return ERR_OK;
 801108e:	2000      	movs	r0, #0
  return ERR_OK;
}
 8011090:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011092:	4621      	mov	r1, r4
 8011094:	4620      	mov	r0, r4
 8011096:	f7ff fde9 	bl	8010c6c <udp_bind>
    if (err != ERR_OK) {
 801109a:	2800      	cmp	r0, #0
 801109c:	d0e2      	beq.n	8011064 <udp_connect+0x14>
}
 801109e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80110a0:	4b09      	ldr	r3, [pc, #36]	@ (80110c8 <udp_connect+0x78>)
 80110a2:	f240 4235 	movw	r2, #1077	@ 0x435
 80110a6:	4909      	ldr	r1, [pc, #36]	@ (80110cc <udp_connect+0x7c>)
 80110a8:	4809      	ldr	r0, [pc, #36]	@ (80110d0 <udp_connect+0x80>)
 80110aa:	f003 fc33 	bl	8014914 <iprintf>
 80110ae:	f06f 000f 	mvn.w	r0, #15
}
 80110b2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80110b4:	4b04      	ldr	r3, [pc, #16]	@ (80110c8 <udp_connect+0x78>)
 80110b6:	f240 4236 	movw	r2, #1078	@ 0x436
 80110ba:	4906      	ldr	r1, [pc, #24]	@ (80110d4 <udp_connect+0x84>)
 80110bc:	4804      	ldr	r0, [pc, #16]	@ (80110d0 <udp_connect+0x80>)
 80110be:	f003 fc29 	bl	8014914 <iprintf>
 80110c2:	e7f4      	b.n	80110ae <udp_connect+0x5e>
 80110c4:	24010760 	.word	0x24010760
 80110c8:	08018050 	.word	0x08018050
 80110cc:	080182e4 	.word	0x080182e4
 80110d0:	08015bd0 	.word	0x08015bd0
 80110d4:	08018300 	.word	0x08018300

080110d8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80110d8:	b510      	push	{r4, lr}
 80110da:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80110dc:	f7f5 f90c 	bl	80062f8 <sys_check_core_locking>

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80110e0:	b144      	cbz	r4, 80110f4 <udp_disconnect+0x1c>
  }
#endif
  pcb->remote_port = 0;
  pcb->netif_idx = NETIF_NO_INDEX;
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80110e2:	7c23      	ldrb	r3, [r4, #16]
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80110e4:	2200      	movs	r2, #0
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80110e6:	f023 0304 	bic.w	r3, r3, #4
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80110ea:	6062      	str	r2, [r4, #4]
  pcb->remote_port = 0;
 80110ec:	82a2      	strh	r2, [r4, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80110ee:	7222      	strb	r2, [r4, #8]
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80110f0:	7423      	strb	r3, [r4, #16]
}
 80110f2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80110f4:	4b04      	ldr	r3, [pc, #16]	@ (8011108 <udp_disconnect+0x30>)
 80110f6:	f240 426a 	movw	r2, #1130	@ 0x46a
 80110fa:	4904      	ldr	r1, [pc, #16]	@ (801110c <udp_disconnect+0x34>)
 80110fc:	4804      	ldr	r0, [pc, #16]	@ (8011110 <udp_disconnect+0x38>)
}
 80110fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8011102:	f003 bc07 	b.w	8014914 <iprintf>
 8011106:	bf00      	nop
 8011108:	08018050 	.word	0x08018050
 801110c:	0801831c 	.word	0x0801831c
 8011110:	08015bd0 	.word	0x08015bd0

08011114 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011114:	b570      	push	{r4, r5, r6, lr}
 8011116:	4604      	mov	r4, r0
 8011118:	460e      	mov	r6, r1
 801111a:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 801111c:	f7f5 f8ec 	bl	80062f8 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011120:	b114      	cbz	r4, 8011128 <udp_recv+0x14>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 8011122:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 8011126:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011128:	4b04      	ldr	r3, [pc, #16]	@ (801113c <udp_recv+0x28>)
 801112a:	f240 428a 	movw	r2, #1162	@ 0x48a
 801112e:	4904      	ldr	r1, [pc, #16]	@ (8011140 <udp_recv+0x2c>)
 8011130:	4804      	ldr	r0, [pc, #16]	@ (8011144 <udp_recv+0x30>)
}
 8011132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011136:	f003 bbed 	b.w	8014914 <iprintf>
 801113a:	bf00      	nop
 801113c:	08018050 	.word	0x08018050
 8011140:	08018338 	.word	0x08018338
 8011144:	08015bd0 	.word	0x08015bd0

08011148 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011148:	b510      	push	{r4, lr}
 801114a:	4604      	mov	r4, r0
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 801114c:	f7f5 f8d4 	bl	80062f8 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011150:	b1cc      	cbz	r4, 8011186 <udp_remove+0x3e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011152:	4a11      	ldr	r2, [pc, #68]	@ (8011198 <udp_remove+0x50>)
 8011154:	6813      	ldr	r3, [r2, #0]
 8011156:	42a3      	cmp	r3, r4
 8011158:	d00d      	beq.n	8011176 <udp_remove+0x2e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801115a:	b133      	cbz	r3, 801116a <udp_remove+0x22>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801115c:	461a      	mov	r2, r3
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	b11b      	cbz	r3, 801116a <udp_remove+0x22>
 8011162:	42a3      	cmp	r3, r4
 8011164:	d1fa      	bne.n	801115c <udp_remove+0x14>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011166:	68e3      	ldr	r3, [r4, #12]
 8011168:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801116a:	4621      	mov	r1, r4
 801116c:	2000      	movs	r0, #0
}
 801116e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 8011172:	f7fa bcab 	b.w	800bacc <memp_free>
    udp_pcbs = udp_pcbs->next;
 8011176:	68e3      	ldr	r3, [r4, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8011178:	4621      	mov	r1, r4
 801117a:	2000      	movs	r0, #0
    udp_pcbs = udp_pcbs->next;
 801117c:	6013      	str	r3, [r2, #0]
}
 801117e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 8011182:	f7fa bca3 	b.w	800bacc <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011186:	4b05      	ldr	r3, [pc, #20]	@ (801119c <udp_remove+0x54>)
 8011188:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801118c:	4904      	ldr	r1, [pc, #16]	@ (80111a0 <udp_remove+0x58>)
 801118e:	4805      	ldr	r0, [pc, #20]	@ (80111a4 <udp_remove+0x5c>)
}
 8011190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011194:	f003 bbbe 	b.w	8014914 <iprintf>
 8011198:	24010760 	.word	0x24010760
 801119c:	08018050 	.word	0x08018050
 80111a0:	08018350 	.word	0x08018350
 80111a4:	08015bd0 	.word	0x08015bd0

080111a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80111a8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 80111aa:	f7f5 f8a5 	bl	80062f8 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80111ae:	2000      	movs	r0, #0
 80111b0:	f7fa fc46 	bl	800ba40 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80111b4:	4604      	mov	r4, r0
 80111b6:	b128      	cbz	r0, 80111c4 <udp_new+0x1c>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80111b8:	2220      	movs	r2, #32
 80111ba:	2100      	movs	r1, #0
 80111bc:	f003 fc5d 	bl	8014a7a <memset>
    pcb->ttl = UDP_TTL;
 80111c0:	23ff      	movs	r3, #255	@ 0xff
 80111c2:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80111c4:	4620      	mov	r0, r4
 80111c6:	bd10      	pop	{r4, pc}

080111c8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80111c8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 80111ca:	f7f5 f895 	bl	80062f8 <sys_check_core_locking>
  LWIP_ASSERT_CORE_LOCKED();
 80111ce:	f7f5 f893 	bl	80062f8 <sys_check_core_locking>
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80111d2:	2000      	movs	r0, #0
 80111d4:	f7fa fc34 	bl	800ba40 <memp_malloc>
  if (pcb != NULL) {
 80111d8:	4604      	mov	r4, r0
 80111da:	b128      	cbz	r0, 80111e8 <udp_new_ip_type+0x20>
    memset(pcb, 0, sizeof(struct udp_pcb));
 80111dc:	2220      	movs	r2, #32
 80111de:	2100      	movs	r1, #0
 80111e0:	f003 fc4b 	bl	8014a7a <memset>
    pcb->ttl = UDP_TTL;
 80111e4:	23ff      	movs	r3, #255	@ 0xff
 80111e6:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 80111e8:	4620      	mov	r0, r4
 80111ea:	bd10      	pop	{r4, pc}

080111ec <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80111ec:	b110      	cbz	r0, 80111f4 <udp_netif_ip_addr_changed+0x8>
 80111ee:	6802      	ldr	r2, [r0, #0]
 80111f0:	b101      	cbz	r1, 80111f4 <udp_netif_ip_addr_changed+0x8>
 80111f2:	b902      	cbnz	r2, 80111f6 <udp_netif_ip_addr_changed+0xa>
 80111f4:	4770      	bx	lr
 80111f6:	680b      	ldr	r3, [r1, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d0fb      	beq.n	80111f4 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80111fc:	4b08      	ldr	r3, [pc, #32]	@ (8011220 <udp_netif_ip_addr_changed+0x34>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d0f7      	beq.n	80111f4 <udp_netif_ip_addr_changed+0x8>
{
 8011204:	b410      	push	{r4}
 8011206:	e000      	b.n	801120a <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011208:	6802      	ldr	r2, [r0, #0]
 801120a:	681c      	ldr	r4, [r3, #0]
 801120c:	4294      	cmp	r4, r2
 801120e:	d101      	bne.n	8011214 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011210:	680a      	ldr	r2, [r1, #0]
 8011212:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1f6      	bne.n	8011208 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801121a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	24010760 	.word	0x24010760

08011224 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011226:	1d07      	adds	r7, r0, #4
{
 8011228:	4604      	mov	r4, r0
 801122a:	460d      	mov	r5, r1
 801122c:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801122e:	2f44      	cmp	r7, #68	@ 0x44
 8011230:	d80e      	bhi.n	8011250 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011232:	0e33      	lsrs	r3, r6, #24
 8011234:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011236:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011238:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801123a:	b292      	uxth	r2, r2
 801123c:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801123e:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011240:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011242:	0a32      	lsrs	r2, r6, #8
 8011244:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011246:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011248:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 801124a:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801124c:	552e      	strb	r6, [r5, r4]
}
 801124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011250:	4b03      	ldr	r3, [pc, #12]	@ (8011260 <dhcp_option_long+0x3c>)
 8011252:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8011256:	4903      	ldr	r1, [pc, #12]	@ (8011264 <dhcp_option_long+0x40>)
 8011258:	4803      	ldr	r0, [pc, #12]	@ (8011268 <dhcp_option_long+0x44>)
 801125a:	f003 fb5b 	bl	8014914 <iprintf>
 801125e:	e7e8      	b.n	8011232 <dhcp_option_long+0xe>
 8011260:	08018368 	.word	0x08018368
 8011264:	080183a0 	.word	0x080183a0
 8011268:	08015bd0 	.word	0x08015bd0

0801126c <dhcp_check>:
{
 801126c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801126e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (new_state != dhcp->state) {
 8011270:	7963      	ldrb	r3, [r4, #5]
 8011272:	2b08      	cmp	r3, #8
 8011274:	d004      	beq.n	8011280 <dhcp_check+0x14>
    dhcp->state = new_state;
 8011276:	2208      	movs	r2, #8
    dhcp->request_timeout = 0;
 8011278:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801127a:	f8a4 2005 	strh.w	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801127e:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011280:	2200      	movs	r2, #0
 8011282:	f104 011c 	add.w	r1, r4, #28
 8011286:	f001 fde9 	bl	8012e5c <etharp_query>
  if (dhcp->tries < 255) {
 801128a:	79a3      	ldrb	r3, [r4, #6]
 801128c:	2bff      	cmp	r3, #255	@ 0xff
 801128e:	d001      	beq.n	8011294 <dhcp_check+0x28>
    dhcp->tries++;
 8011290:	3301      	adds	r3, #1
 8011292:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011294:	2301      	movs	r3, #1
 8011296:	8123      	strh	r3, [r4, #8]
}
 8011298:	bd10      	pop	{r4, pc}
 801129a:	bf00      	nop

0801129c <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801129c:	2800      	cmp	r0, #0
 801129e:	d07e      	beq.n	801139e <dhcp_bind+0x102>
  dhcp = netif_dhcp_data(netif);
 80112a0:	6a41      	ldr	r1, [r0, #36]	@ 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80112a2:	2900      	cmp	r1, #0
 80112a4:	f000 8082 	beq.w	80113ac <dhcp_bind+0x110>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80112a8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  dhcp->lease_used = 0;
 80112aa:	2200      	movs	r2, #0
{
 80112ac:	b510      	push	{r4, lr}
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80112ae:	1c5c      	adds	r4, r3, #1
{
 80112b0:	b082      	sub	sp, #8
  dhcp->lease_used = 0;
 80112b2:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80112b4:	d007      	beq.n	80112c6 <dhcp_bind+0x2a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80112b6:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80112b8:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 80112bc:	d244      	bcs.n	8011348 <dhcp_bind+0xac>
    if (dhcp->t0_timeout == 0) {
 80112be:	2b3b      	cmp	r3, #59	@ 0x3b
 80112c0:	d87b      	bhi.n	80113ba <dhcp_bind+0x11e>
      dhcp->t0_timeout = 1;
 80112c2:	2301      	movs	r3, #1
 80112c4:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80112c6:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80112c8:	1c5a      	adds	r2, r3, #1
 80112ca:	d043      	beq.n	8011354 <dhcp_bind+0xb8>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80112cc:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80112ce:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 80112d2:	d235      	bcs.n	8011340 <dhcp_bind+0xa4>
    if (dhcp->t1_timeout == 0) {
 80112d4:	2b3b      	cmp	r3, #59	@ 0x3b
 80112d6:	f200 8081 	bhi.w	80113dc <dhcp_bind+0x140>
 80112da:	2201      	movs	r2, #1
 80112dc:	4613      	mov	r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 80112de:	814a      	strh	r2, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80112e0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80112e2:	81cb      	strh	r3, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80112e4:	1c54      	adds	r4, r2, #1
 80112e6:	d039      	beq.n	801135c <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80112e8:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 80112ea:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 80112ee:	d249      	bcs.n	8011384 <dhcp_bind+0xe8>
    if (dhcp->t2_timeout == 0) {
 80112f0:	2a3b      	cmp	r2, #59	@ 0x3b
 80112f2:	d868      	bhi.n	80113c6 <dhcp_bind+0x12a>
 80112f4:	f04f 0e01 	mov.w	lr, #1
 80112f8:	f04f 0c00 	mov.w	ip, #0
 80112fc:	4672      	mov	r2, lr
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80112fe:	459c      	cmp	ip, r3
    dhcp->t2_timeout = (u16_t)timeout;
 8011300:	f8a1 e00c 	strh.w	lr, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011304:	820a      	strh	r2, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011306:	d331      	bcc.n	801136c <dhcp_bind+0xd0>
  if (dhcp->subnet_mask_given) {
 8011308:	79cb      	ldrb	r3, [r1, #7]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d033      	beq.n	8011376 <dhcp_bind+0xda>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801130e:	6a0b      	ldr	r3, [r1, #32]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011310:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8011312:	e9cd 3200 	strd	r3, r2, [sp]
  if (ip4_addr_isany_val(gw_addr)) {
 8011316:	b922      	cbnz	r2, 8011322 <dhcp_bind+0x86>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8011318:	69ca      	ldr	r2, [r1, #28]
 801131a:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801131c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011320:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 8011322:	794b      	ldrb	r3, [r1, #5]
 8011324:	2b0a      	cmp	r3, #10
 8011326:	d004      	beq.n	8011332 <dhcp_bind+0x96>
    dhcp->state = new_state;
 8011328:	220a      	movs	r2, #10
    dhcp->request_timeout = 0;
 801132a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801132c:	f8a1 2005 	strh.w	r2, [r1, #5]
    dhcp->request_timeout = 0;
 8011330:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011332:	ab01      	add	r3, sp, #4
 8011334:	466a      	mov	r2, sp
 8011336:	311c      	adds	r1, #28
 8011338:	f7fa fc1e 	bl	800bb78 <netif_set_addr>
}
 801133c:	b002      	add	sp, #8
 801133e:	bd10      	pop	{r4, pc}
 8011340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011344:	4613      	mov	r3, r2
 8011346:	e7ca      	b.n	80112de <dhcp_bind+0x42>
    dhcp->t0_timeout = (u16_t)timeout;
 8011348:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801134c:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801134e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8011350:	1c5a      	adds	r2, r3, #1
 8011352:	d1bb      	bne.n	80112cc <dhcp_bind+0x30>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011354:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011356:	894b      	ldrh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011358:	1c54      	adds	r4, r2, #1
 801135a:	d1c5      	bne.n	80112e8 <dhcp_bind+0x4c>
 801135c:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 8011360:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011364:	fa1f fc8c 	uxth.w	ip, ip
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011368:	459c      	cmp	ip, r3
 801136a:	d2cd      	bcs.n	8011308 <dhcp_bind+0x6c>
    dhcp->t1_timeout = 0;
 801136c:	2300      	movs	r3, #0
 801136e:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 8011370:	79cb      	ldrb	r3, [r1, #7]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d1cb      	bne.n	801130e <dhcp_bind+0x72>
    if (first_octet <= 127) {
 8011376:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801137a:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 801137c:	2b00      	cmp	r3, #0
 801137e:	db07      	blt.n	8011390 <dhcp_bind+0xf4>
 8011380:	23ff      	movs	r3, #255	@ 0xff
 8011382:	e7c5      	b.n	8011310 <dhcp_bind+0x74>
 8011384:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 8011388:	f64f 7cfe 	movw	ip, #65534	@ 0xfffe
 801138c:	4672      	mov	r2, lr
 801138e:	e7b6      	b.n	80112fe <dhcp_bind+0x62>
    } else if (first_octet >= 192) {
 8011390:	2abf      	cmp	r2, #191	@ 0xbf
 8011392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011396:	bf88      	it	hi
 8011398:	f06f 437f 	mvnhi.w	r3, #4278190080	@ 0xff000000
 801139c:	e7b8      	b.n	8011310 <dhcp_bind+0x74>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801139e:	4b13      	ldr	r3, [pc, #76]	@ (80113ec <dhcp_bind+0x150>)
 80113a0:	f240 4215 	movw	r2, #1045	@ 0x415
 80113a4:	4912      	ldr	r1, [pc, #72]	@ (80113f0 <dhcp_bind+0x154>)
 80113a6:	4813      	ldr	r0, [pc, #76]	@ (80113f4 <dhcp_bind+0x158>)
 80113a8:	f003 bab4 	b.w	8014914 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80113ac:	4b0f      	ldr	r3, [pc, #60]	@ (80113ec <dhcp_bind+0x150>)
 80113ae:	f240 4217 	movw	r2, #1047	@ 0x417
 80113b2:	4911      	ldr	r1, [pc, #68]	@ (80113f8 <dhcp_bind+0x15c>)
 80113b4:	480f      	ldr	r0, [pc, #60]	@ (80113f4 <dhcp_bind+0x158>)
 80113b6:	f003 baad 	b.w	8014914 <iprintf>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80113ba:	4a10      	ldr	r2, [pc, #64]	@ (80113fc <dhcp_bind+0x160>)
 80113bc:	fba2 2303 	umull	r2, r3, r2, r3
 80113c0:	095b      	lsrs	r3, r3, #5
    dhcp->t0_timeout = (u16_t)timeout;
 80113c2:	828b      	strh	r3, [r1, #20]
 80113c4:	e77f      	b.n	80112c6 <dhcp_bind+0x2a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80113c6:	4c0d      	ldr	r4, [pc, #52]	@ (80113fc <dhcp_bind+0x160>)
 80113c8:	fba4 4202 	umull	r4, r2, r4, r2
    dhcp->t2_timeout = (u16_t)timeout;
 80113cc:	f3c2 124f 	ubfx	r2, r2, #5, #16
 80113d0:	f102 3cff 	add.w	ip, r2, #4294967295
 80113d4:	4696      	mov	lr, r2
 80113d6:	fa1f fc8c 	uxth.w	ip, ip
 80113da:	e790      	b.n	80112fe <dhcp_bind+0x62>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80113dc:	4a07      	ldr	r2, [pc, #28]	@ (80113fc <dhcp_bind+0x160>)
 80113de:	fba2 2303 	umull	r2, r3, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 80113e2:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80113e6:	461a      	mov	r2, r3
 80113e8:	e779      	b.n	80112de <dhcp_bind+0x42>
 80113ea:	bf00      	nop
 80113ec:	08018368 	.word	0x08018368
 80113f0:	080183dc 	.word	0x080183dc
 80113f4:	08015bd0 	.word	0x08015bd0
 80113f8:	080183f8 	.word	0x080183f8
 80113fc:	88888889 	.word	0x88888889

08011400 <dhcp_inc_pcb_refcount>:
{
 8011400:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8011402:	4c15      	ldr	r4, [pc, #84]	@ (8011458 <dhcp_inc_pcb_refcount+0x58>)
 8011404:	7823      	ldrb	r3, [r4, #0]
 8011406:	b9fb      	cbnz	r3, 8011448 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011408:	4d14      	ldr	r5, [pc, #80]	@ (801145c <dhcp_inc_pcb_refcount+0x5c>)
 801140a:	682b      	ldr	r3, [r5, #0]
 801140c:	b12b      	cbz	r3, 801141a <dhcp_inc_pcb_refcount+0x1a>
 801140e:	4b14      	ldr	r3, [pc, #80]	@ (8011460 <dhcp_inc_pcb_refcount+0x60>)
 8011410:	22e5      	movs	r2, #229	@ 0xe5
 8011412:	4914      	ldr	r1, [pc, #80]	@ (8011464 <dhcp_inc_pcb_refcount+0x64>)
 8011414:	4814      	ldr	r0, [pc, #80]	@ (8011468 <dhcp_inc_pcb_refcount+0x68>)
 8011416:	f003 fa7d 	bl	8014914 <iprintf>
    dhcp_pcb = udp_new();
 801141a:	f7ff fec5 	bl	80111a8 <udp_new>
 801141e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8011420:	b1b0      	cbz	r0, 8011450 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011422:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011424:	4911      	ldr	r1, [pc, #68]	@ (801146c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011426:	f042 0220 	orr.w	r2, r2, #32
 801142a:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801142c:	2244      	movs	r2, #68	@ 0x44
 801142e:	f7ff fc1d 	bl	8010c6c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011432:	2243      	movs	r2, #67	@ 0x43
 8011434:	490d      	ldr	r1, [pc, #52]	@ (801146c <dhcp_inc_pcb_refcount+0x6c>)
 8011436:	6828      	ldr	r0, [r5, #0]
 8011438:	f7ff fe0a 	bl	8011050 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801143c:	2200      	movs	r2, #0
 801143e:	490c      	ldr	r1, [pc, #48]	@ (8011470 <dhcp_inc_pcb_refcount+0x70>)
 8011440:	6828      	ldr	r0, [r5, #0]
 8011442:	f7ff fe67 	bl	8011114 <udp_recv>
  dhcp_pcb_refcount++;
 8011446:	7823      	ldrb	r3, [r4, #0]
 8011448:	3301      	adds	r3, #1
  return ERR_OK;
 801144a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801144c:	7023      	strb	r3, [r4, #0]
}
 801144e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8011450:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011454:	bd38      	pop	{r3, r4, r5, pc}
 8011456:	bf00      	nop
 8011458:	24010768 	.word	0x24010768
 801145c:	2401076c 	.word	0x2401076c
 8011460:	08018368 	.word	0x08018368
 8011464:	08018410 	.word	0x08018410
 8011468:	08015bd0 	.word	0x08015bd0
 801146c:	080189c0 	.word	0x080189c0
 8011470:	08011c3d 	.word	0x08011c3d

08011474 <dhcp_dec_pcb_refcount>:
{
 8011474:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011476:	4d0b      	ldr	r5, [pc, #44]	@ (80114a4 <dhcp_dec_pcb_refcount+0x30>)
 8011478:	782c      	ldrb	r4, [r5, #0]
 801147a:	b154      	cbz	r4, 8011492 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801147c:	3c01      	subs	r4, #1
 801147e:	b2e4      	uxtb	r4, r4
 8011480:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8011482:	b104      	cbz	r4, 8011486 <dhcp_dec_pcb_refcount+0x12>
}
 8011484:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 8011486:	4d08      	ldr	r5, [pc, #32]	@ (80114a8 <dhcp_dec_pcb_refcount+0x34>)
 8011488:	6828      	ldr	r0, [r5, #0]
 801148a:	f7ff fe5d 	bl	8011148 <udp_remove>
    dhcp_pcb = NULL;
 801148e:	602c      	str	r4, [r5, #0]
}
 8011490:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011492:	4b06      	ldr	r3, [pc, #24]	@ (80114ac <dhcp_dec_pcb_refcount+0x38>)
 8011494:	22ff      	movs	r2, #255	@ 0xff
 8011496:	4906      	ldr	r1, [pc, #24]	@ (80114b0 <dhcp_dec_pcb_refcount+0x3c>)
 8011498:	4806      	ldr	r0, [pc, #24]	@ (80114b4 <dhcp_dec_pcb_refcount+0x40>)
 801149a:	f003 fa3b 	bl	8014914 <iprintf>
  dhcp_pcb_refcount--;
 801149e:	782c      	ldrb	r4, [r5, #0]
 80114a0:	e7ec      	b.n	801147c <dhcp_dec_pcb_refcount+0x8>
 80114a2:	bf00      	nop
 80114a4:	24010768 	.word	0x24010768
 80114a8:	2401076c 	.word	0x2401076c
 80114ac:	08018368 	.word	0x08018368
 80114b0:	08018438 	.word	0x08018438
 80114b4:	08015bd0 	.word	0x08015bd0

080114b8 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80114b8:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80114ba:	4d1d      	ldr	r5, [pc, #116]	@ (8011530 <dhcp_handle_ack.isra.0+0x78>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80114bc:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80114be:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80114c0:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80114c2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80114c6:	b112      	cbz	r2, 80114ce <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80114c8:	4b1a      	ldr	r3, [pc, #104]	@ (8011534 <dhcp_handle_ack.isra.0+0x7c>)
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	6283      	str	r3, [r0, #40]	@ 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80114ce:	792b      	ldrb	r3, [r5, #4]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d029      	beq.n	8011528 <dhcp_handle_ack.isra.0+0x70>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80114d4:	4b17      	ldr	r3, [pc, #92]	@ (8011534 <dhcp_handle_ack.isra.0+0x7c>)
 80114d6:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80114d8:	796a      	ldrb	r2, [r5, #5]
 80114da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80114dc:	b152      	cbz	r2, 80114f4 <dhcp_handle_ack.isra.0+0x3c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80114de:	4b15      	ldr	r3, [pc, #84]	@ (8011534 <dhcp_handle_ack.isra.0+0x7c>)
 80114e0:	695b      	ldr	r3, [r3, #20]
 80114e2:	6323      	str	r3, [r4, #48]	@ 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80114e4:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80114e6:	690a      	ldr	r2, [r1, #16]
 80114e8:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80114ea:	b96b      	cbnz	r3, 8011508 <dhcp_handle_ack.isra.0+0x50>
    dhcp->subnet_mask_given = 1;
 80114ec:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80114ee:	79eb      	ldrb	r3, [r5, #7]
 80114f0:	b9a3      	cbnz	r3, 801151c <dhcp_handle_ack.isra.0+0x64>
}
 80114f2:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80114f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80114f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80114fa:	08db      	lsrs	r3, r3, #3
 80114fc:	6323      	str	r3, [r4, #48]	@ 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80114fe:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011500:	690a      	ldr	r2, [r1, #16]
 8011502:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8011504:	2b00      	cmp	r3, #0
 8011506:	d0f1      	beq.n	80114ec <dhcp_handle_ack.isra.0+0x34>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8011508:	4b0a      	ldr	r3, [pc, #40]	@ (8011534 <dhcp_handle_ack.isra.0+0x7c>)
 801150a:	6998      	ldr	r0, [r3, #24]
 801150c:	f7f9 fefc 	bl	800b308 <lwip_htonl>
 8011510:	2301      	movs	r3, #1
 8011512:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 8011514:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011516:	79eb      	ldrb	r3, [r5, #7]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d0ea      	beq.n	80114f2 <dhcp_handle_ack.isra.0+0x3a>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801151c:	4b05      	ldr	r3, [pc, #20]	@ (8011534 <dhcp_handle_ack.isra.0+0x7c>)
 801151e:	69d8      	ldr	r0, [r3, #28]
 8011520:	f7f9 fef2 	bl	800b308 <lwip_htonl>
 8011524:	6260      	str	r0, [r4, #36]	@ 0x24
}
 8011526:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011528:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801152a:	085b      	lsrs	r3, r3, #1
 801152c:	e7d4      	b.n	80114d8 <dhcp_handle_ack.isra.0+0x20>
 801152e:	bf00      	nop
 8011530:	24010770 	.word	0x24010770
 8011534:	24010778 	.word	0x24010778

08011538 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801153c:	2800      	cmp	r0, #0
 801153e:	f000 8095 	beq.w	801166c <dhcp_create_msg+0x134>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011542:	460c      	mov	r4, r1
 8011544:	2900      	cmp	r1, #0
 8011546:	f000 8088 	beq.w	801165a <dhcp_create_msg+0x122>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801154a:	4681      	mov	r9, r0
 801154c:	4616      	mov	r6, r2
 801154e:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8011552:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011556:	2036      	movs	r0, #54	@ 0x36
 8011558:	461f      	mov	r7, r3
 801155a:	f7fa fe5b 	bl	800c214 <pbuf_alloc>
  if (p_out == NULL) {
 801155e:	4605      	mov	r5, r0
 8011560:	2800      	cmp	r0, #0
 8011562:	f000 8081 	beq.w	8011668 <dhcp_create_msg+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011566:	8943      	ldrh	r3, [r0, #10]
 8011568:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801156c:	d36a      	bcc.n	8011644 <dhcp_create_msg+0x10c>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801156e:	2e03      	cmp	r6, #3
 8011570:	d04b      	beq.n	801160a <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011572:	79a3      	ldrb	r3, [r4, #6]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d043      	beq.n	8011600 <dhcp_create_msg+0xc8>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011578:	4b40      	ldr	r3, [pc, #256]	@ (801167c <dhcp_create_msg+0x144>)
 801157a:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801157c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011580:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8011584:	2100      	movs	r1, #0
    dhcp->xid = xid;
 8011586:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011588:	4640      	mov	r0, r8
 801158a:	f003 fa76 	bl	8014a7a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801158e:	f240 1301 	movw	r3, #257	@ 0x101
 8011592:	f8a8 3000 	strh.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
  msg_out->hlen = netif->hwaddr_len;
 8011596:	f899 3030 	ldrb.w	r3, [r9, #48]	@ 0x30
 801159a:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801159e:	6820      	ldr	r0, [r4, #0]
 80115a0:	f7f9 feb2 	bl	800b308 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80115a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
  msg_out->xid = lwip_htonl(dhcp->xid);
 80115a8:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80115ac:	40f3      	lsrs	r3, r6
 80115ae:	07db      	lsls	r3, r3, #31
 80115b0:	d550      	bpl.n	8011654 <dhcp_create_msg+0x11c>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80115b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80115b6:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80115ba:	f109 0129 	add.w	r1, r9, #41	@ 0x29
 80115be:	f109 042f 	add.w	r4, r9, #47	@ 0x2f
 80115c2:	f108 0c1b 	add.w	ip, r8, #27
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80115c6:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80115ca:	42a1      	cmp	r1, r4
    msg_out->chaddr[i] = netif->hwaddr[i];
 80115cc:	f80c ef01 	strb.w	lr, [ip, #1]!
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80115d0:	d1f9      	bne.n	80115c6 <dhcp_create_msg+0x8e>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80115d2:	2363      	movs	r3, #99	@ 0x63
 80115d4:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
  options[options_out_len++] = value;
 80115d8:	f888 60f2 	strb.w	r6, [r8, #242]	@ 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80115dc:	f888 30ec 	strb.w	r3, [r8, #236]	@ 0xec
 80115e0:	f888 30ef 	strb.w	r3, [r8, #239]	@ 0xef
  options[options_out_len++] = option_type;
 80115e4:	f240 1335 	movw	r3, #309	@ 0x135
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80115e8:	f888 20ed 	strb.w	r2, [r8, #237]	@ 0xed
 80115ec:	2253      	movs	r2, #83	@ 0x53
  options[options_out_len++] = option_type;
 80115ee:	f8a8 30f0 	strh.w	r3, [r8, #240]	@ 0xf0
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 80115f2:	2303      	movs	r3, #3
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80115f4:	f888 20ee 	strb.w	r2, [r8, #238]	@ 0xee
    *options_out_len = options_out_len_loc;
 80115f8:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 80115fa:	4628      	mov	r0, r5
 80115fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 8011600:	f002 ffd6 	bl	80145b0 <rand>
 8011604:	4b1d      	ldr	r3, [pc, #116]	@ (801167c <dhcp_create_msg+0x144>)
 8011606:	6018      	str	r0, [r3, #0]
 8011608:	e7b8      	b.n	801157c <dhcp_create_msg+0x44>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801160a:	7963      	ldrb	r3, [r4, #5]
 801160c:	2b03      	cmp	r3, #3
 801160e:	d0b0      	beq.n	8011572 <dhcp_create_msg+0x3a>
  msg_out = (struct dhcp_msg *)p_out->payload;
 8011610:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011614:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8011618:	2100      	movs	r1, #0
 801161a:	4640      	mov	r0, r8
 801161c:	f003 fa2d 	bl	8014a7a <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8011620:	f240 1301 	movw	r3, #257	@ 0x101
 8011624:	f8a8 3000 	strh.w	r3, [r8]
  msg_out->hlen = netif->hwaddr_len;
 8011628:	f899 3030 	ldrb.w	r3, [r9, #48]	@ 0x30
 801162c:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011630:	6820      	ldr	r0, [r4, #0]
 8011632:	f7f9 fe69 	bl	800b308 <lwip_htonl>
 8011636:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801163a:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801163c:	3b04      	subs	r3, #4
 801163e:	2b01      	cmp	r3, #1
 8011640:	d8bb      	bhi.n	80115ba <dhcp_create_msg+0x82>
 8011642:	e7b6      	b.n	80115b2 <dhcp_create_msg+0x7a>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011644:	4b0e      	ldr	r3, [pc, #56]	@ (8011680 <dhcp_create_msg+0x148>)
 8011646:	f240 7271 	movw	r2, #1905	@ 0x771
 801164a:	490e      	ldr	r1, [pc, #56]	@ (8011684 <dhcp_create_msg+0x14c>)
 801164c:	480e      	ldr	r0, [pc, #56]	@ (8011688 <dhcp_create_msg+0x150>)
 801164e:	f003 f961 	bl	8014914 <iprintf>
 8011652:	e78c      	b.n	801156e <dhcp_create_msg+0x36>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011654:	2e03      	cmp	r6, #3
 8011656:	d1b0      	bne.n	80115ba <dhcp_create_msg+0x82>
 8011658:	e7ef      	b.n	801163a <dhcp_create_msg+0x102>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801165a:	4b09      	ldr	r3, [pc, #36]	@ (8011680 <dhcp_create_msg+0x148>)
 801165c:	f240 726a 	movw	r2, #1898	@ 0x76a
 8011660:	490a      	ldr	r1, [pc, #40]	@ (801168c <dhcp_create_msg+0x154>)
 8011662:	4809      	ldr	r0, [pc, #36]	@ (8011688 <dhcp_create_msg+0x150>)
 8011664:	f003 f956 	bl	8014914 <iprintf>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011668:	2500      	movs	r5, #0
 801166a:	e7c6      	b.n	80115fa <dhcp_create_msg+0xc2>
 801166c:	4b04      	ldr	r3, [pc, #16]	@ (8011680 <dhcp_create_msg+0x148>)
 801166e:	f240 7269 	movw	r2, #1897	@ 0x769
 8011672:	4907      	ldr	r1, [pc, #28]	@ (8011690 <dhcp_create_msg+0x158>)
 8011674:	4804      	ldr	r0, [pc, #16]	@ (8011688 <dhcp_create_msg+0x150>)
 8011676:	f003 f94d 	bl	8014914 <iprintf>
 801167a:	e7f5      	b.n	8011668 <dhcp_create_msg+0x130>
 801167c:	24010764 	.word	0x24010764
 8011680:	08018368 	.word	0x08018368
 8011684:	0801849c 	.word	0x0801849c
 8011688:	08015bd0 	.word	0x08015bd0
 801168c:	0801847c 	.word	0x0801847c
 8011690:	0801845c 	.word	0x0801845c

08011694 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8011694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011698:	6a47      	ldr	r7, [r0, #36]	@ 0x24
dhcp_reboot(struct netif *netif)
 801169a:	b087      	sub	sp, #28
 801169c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801169e:	797b      	ldrb	r3, [r7, #5]
 80116a0:	2b03      	cmp	r3, #3
 80116a2:	d004      	beq.n	80116ae <dhcp_reboot.isra.0+0x1a>
    dhcp->state = new_state;
 80116a4:	2203      	movs	r2, #3
    dhcp->request_timeout = 0;
 80116a6:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80116a8:	f8a7 2005 	strh.w	r2, [r7, #5]
    dhcp->request_timeout = 0;
 80116ac:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80116ae:	f10d 0316 	add.w	r3, sp, #22
 80116b2:	2203      	movs	r2, #3
 80116b4:	4639      	mov	r1, r7
 80116b6:	4658      	mov	r0, fp
 80116b8:	f7ff ff3e 	bl	8011538 <dhcp_create_msg>
  if (p_out != NULL) {
 80116bc:	4680      	mov	r8, r0
 80116be:	2800      	cmp	r0, #0
 80116c0:	d073      	beq.n	80117aa <dhcp_reboot.isra.0+0x116>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80116c2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80116c6:	6845      	ldr	r5, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80116c8:	1d26      	adds	r6, r4, #4
 80116ca:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80116ce:	35f0      	adds	r5, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80116d0:	2e44      	cmp	r6, #68	@ 0x44
 80116d2:	f200 808f 	bhi.w	80117f4 <dhcp_reboot.isra.0+0x160>
  options[options_out_len++] = option_type;
 80116d6:	2239      	movs	r2, #57	@ 0x39
 80116d8:	1c63      	adds	r3, r4, #1
 80116da:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_len;
 80116de:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 80116e0:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = option_len;
 80116e2:	2202      	movs	r2, #2
 80116e4:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80116e6:	eb09 0302 	add.w	r3, r9, r2
 80116ea:	2b44      	cmp	r3, #68	@ 0x44
 80116ec:	f200 809a 	bhi.w	8011824 <dhcp_reboot.isra.0+0x190>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80116f0:	2202      	movs	r2, #2
 80116f2:	1ce3      	adds	r3, r4, #3
 80116f4:	b2b6      	uxth	r6, r6
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80116f6:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80116f8:	f805 2009 	strb.w	r2, [r5, r9]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80116fc:	2240      	movs	r2, #64	@ 0x40
 80116fe:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011700:	1db3      	adds	r3, r6, #6
 8011702:	2b44      	cmp	r3, #68	@ 0x44
 8011704:	f200 8086 	bhi.w	8011814 <dhcp_reboot.isra.0+0x180>
  options[options_out_len++] = option_type;
 8011708:	1d63      	adds	r3, r4, #5
 801170a:	2232      	movs	r2, #50	@ 0x32
  options[options_out_len++] = option_len;
 801170c:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 801170e:	55aa      	strb	r2, [r5, r6]
  options[options_out_len++] = option_len;
 8011710:	b29b      	uxth	r3, r3
 8011712:	2204      	movs	r2, #4
 8011714:	54ea      	strb	r2, [r5, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011716:	69f8      	ldr	r0, [r7, #28]
 8011718:	f7f9 fdf6 	bl	800b308 <lwip_htonl>
 801171c:	4629      	mov	r1, r5
 801171e:	4602      	mov	r2, r0
 8011720:	b2a0      	uxth	r0, r4
 8011722:	f7ff fd7f 	bl	8011224 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011726:	f100 0905 	add.w	r9, r0, #5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801172a:	4606      	mov	r6, r0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801172c:	f1b9 0f44 	cmp.w	r9, #68	@ 0x44
 8011730:	d868      	bhi.n	8011804 <dhcp_reboot.isra.0+0x170>
  options[options_out_len++] = option_type;
 8011732:	2237      	movs	r2, #55	@ 0x37
 8011734:	1c73      	adds	r3, r6, #1
  options[options_out_len++] = option_len;
 8011736:	1cb4      	adds	r4, r6, #2
 8011738:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 801173c:	55aa      	strb	r2, [r5, r6]
  options[options_out_len++] = option_len;
 801173e:	b29b      	uxth	r3, r3
 8011740:	2203      	movs	r2, #3
 8011742:	b2a4      	uxth	r4, r4
 8011744:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8011854 <dhcp_reboot.isra.0+0x1c0>
 8011748:	54ea      	strb	r2, [r5, r3]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801174a:	9703      	str	r7, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801174c:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801174e:	f81a 7b01 	ldrb.w	r7, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011752:	d842      	bhi.n	80117da <dhcp_reboot.isra.0+0x146>
  options[options_out_len++] = value;
 8011754:	1c63      	adds	r3, r4, #1
 8011756:	552f      	strb	r7, [r5, r4]
 8011758:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801175a:	4599      	cmp	r9, r3
  options[options_out_len++] = value;
 801175c:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801175e:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011762:	d1f3      	bne.n	801174c <dhcp_reboot.isra.0+0xb8>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8011764:	1db0      	adds	r0, r6, #6
 8011766:	23ff      	movs	r3, #255	@ 0xff
 8011768:	9f03      	ldr	r7, [sp, #12]
 801176a:	b280      	uxth	r0, r0
 801176c:	f805 3009 	strb.w	r3, [r5, r9]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011770:	2843      	cmp	r0, #67	@ 0x43
 8011772:	d808      	bhi.n	8011786 <dhcp_reboot.isra.0+0xf2>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011774:	f1c6 023d 	rsb	r2, r6, #61	@ 0x3d
 8011778:	4428      	add	r0, r5
 801177a:	2100      	movs	r1, #0
 801177c:	b292      	uxth	r2, r2
 801177e:	3201      	adds	r2, #1
 8011780:	f003 f97b 	bl	8014a7a <memset>
 8011784:	2044      	movs	r0, #68	@ 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011786:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 801178a:	4640      	mov	r0, r8
 801178c:	b289      	uxth	r1, r1
 801178e:	f7fa fde9 	bl	800c364 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011792:	4a28      	ldr	r2, [pc, #160]	@ (8011834 <dhcp_reboot.isra.0+0x1a0>)
 8011794:	f8cd b000 	str.w	fp, [sp]
 8011798:	2343      	movs	r3, #67	@ 0x43
 801179a:	6810      	ldr	r0, [r2, #0]
 801179c:	4641      	mov	r1, r8
 801179e:	4a26      	ldr	r2, [pc, #152]	@ (8011838 <dhcp_reboot.isra.0+0x1a4>)
 80117a0:	f7ff fb94 	bl	8010ecc <udp_sendto_if>
    pbuf_free(p_out);
 80117a4:	4640      	mov	r0, r8
 80117a6:	f7fa fcc5 	bl	800c134 <pbuf_free>
  if (dhcp->tries < 255) {
 80117aa:	79bb      	ldrb	r3, [r7, #6]
 80117ac:	2bff      	cmp	r3, #255	@ 0xff
 80117ae:	d01c      	beq.n	80117ea <dhcp_reboot.isra.0+0x156>
    dhcp->tries++;
 80117b0:	3301      	adds	r3, #1
 80117b2:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80117b4:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80117b6:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80117b8:	d817      	bhi.n	80117ea <dhcp_reboot.isra.0+0x156>
 80117ba:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80117be:	4a1f      	ldr	r2, [pc, #124]	@ (801183c <dhcp_reboot.isra.0+0x1a8>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80117c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80117c4:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80117c6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	fba2 2303 	umull	r2, r3, r2, r3
 80117d0:	095b      	lsrs	r3, r3, #5
 80117d2:	813b      	strh	r3, [r7, #8]
}
 80117d4:	b007      	add	sp, #28
 80117d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80117da:	4b19      	ldr	r3, [pc, #100]	@ (8011840 <dhcp_reboot.isra.0+0x1ac>)
 80117dc:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80117e0:	4918      	ldr	r1, [pc, #96]	@ (8011844 <dhcp_reboot.isra.0+0x1b0>)
 80117e2:	4819      	ldr	r0, [pc, #100]	@ (8011848 <dhcp_reboot.isra.0+0x1b4>)
 80117e4:	f003 f896 	bl	8014914 <iprintf>
 80117e8:	e7b4      	b.n	8011754 <dhcp_reboot.isra.0+0xc0>
    options[options_out_len++] = 0;
 80117ea:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80117ec:	813b      	strh	r3, [r7, #8]
}
 80117ee:	b007      	add	sp, #28
 80117f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80117f4:	4b12      	ldr	r3, [pc, #72]	@ (8011840 <dhcp_reboot.isra.0+0x1ac>)
 80117f6:	f240 529a 	movw	r2, #1434	@ 0x59a
 80117fa:	4914      	ldr	r1, [pc, #80]	@ (801184c <dhcp_reboot.isra.0+0x1b8>)
 80117fc:	4812      	ldr	r0, [pc, #72]	@ (8011848 <dhcp_reboot.isra.0+0x1b4>)
 80117fe:	f003 f889 	bl	8014914 <iprintf>
 8011802:	e768      	b.n	80116d6 <dhcp_reboot.isra.0+0x42>
 8011804:	4b0e      	ldr	r3, [pc, #56]	@ (8011840 <dhcp_reboot.isra.0+0x1ac>)
 8011806:	f240 529a 	movw	r2, #1434	@ 0x59a
 801180a:	4910      	ldr	r1, [pc, #64]	@ (801184c <dhcp_reboot.isra.0+0x1b8>)
 801180c:	480e      	ldr	r0, [pc, #56]	@ (8011848 <dhcp_reboot.isra.0+0x1b4>)
 801180e:	f003 f881 	bl	8014914 <iprintf>
 8011812:	e78e      	b.n	8011732 <dhcp_reboot.isra.0+0x9e>
 8011814:	4b0a      	ldr	r3, [pc, #40]	@ (8011840 <dhcp_reboot.isra.0+0x1ac>)
 8011816:	f240 529a 	movw	r2, #1434	@ 0x59a
 801181a:	490c      	ldr	r1, [pc, #48]	@ (801184c <dhcp_reboot.isra.0+0x1b8>)
 801181c:	480a      	ldr	r0, [pc, #40]	@ (8011848 <dhcp_reboot.isra.0+0x1b4>)
 801181e:	f003 f879 	bl	8014914 <iprintf>
 8011822:	e771      	b.n	8011708 <dhcp_reboot.isra.0+0x74>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011824:	4b06      	ldr	r3, [pc, #24]	@ (8011840 <dhcp_reboot.isra.0+0x1ac>)
 8011826:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801182a:	4909      	ldr	r1, [pc, #36]	@ (8011850 <dhcp_reboot.isra.0+0x1bc>)
 801182c:	4806      	ldr	r0, [pc, #24]	@ (8011848 <dhcp_reboot.isra.0+0x1b4>)
 801182e:	f003 f871 	bl	8014914 <iprintf>
 8011832:	e75d      	b.n	80116f0 <dhcp_reboot.isra.0+0x5c>
 8011834:	2401076c 	.word	0x2401076c
 8011838:	080189bc 	.word	0x080189bc
 801183c:	10624dd3 	.word	0x10624dd3
 8011840:	08018368 	.word	0x08018368
 8011844:	0801855c 	.word	0x0801855c
 8011848:	08015bd0 	.word	0x08015bd0
 801184c:	080184dc 	.word	0x080184dc
 8011850:	08018520 	.word	0x08018520
 8011854:	08018690 	.word	0x08018690

08011858 <dhcp_discover>:
{
 8011858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801185c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801185e:	2300      	movs	r3, #0
{
 8011860:	b087      	sub	sp, #28
 8011862:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8011864:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011866:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 8011868:	2a06      	cmp	r2, #6
 801186a:	d003      	beq.n	8011874 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801186c:	2206      	movs	r2, #6
    dhcp->request_timeout = 0;
 801186e:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 8011870:	f8a5 2005 	strh.w	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011874:	f10d 0316 	add.w	r3, sp, #22
 8011878:	2201      	movs	r2, #1
 801187a:	4629      	mov	r1, r5
 801187c:	4648      	mov	r0, r9
 801187e:	f7ff fe5b 	bl	8011538 <dhcp_create_msg>
  if (p_out != NULL) {
 8011882:	4680      	mov	r8, r0
 8011884:	2800      	cmp	r0, #0
 8011886:	d064      	beq.n	8011952 <dhcp_discover+0xfa>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011888:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 801188c:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801188e:	1d34      	adds	r4, r6, #4
 8011890:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011894:	37f0      	adds	r7, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011896:	2c44      	cmp	r4, #68	@ 0x44
 8011898:	f200 8088 	bhi.w	80119ac <dhcp_discover+0x154>
  options[options_out_len++] = option_type;
 801189c:	2239      	movs	r2, #57	@ 0x39
 801189e:	1c73      	adds	r3, r6, #1
 80118a0:	fa1f fa8a 	uxth.w	sl, sl
 80118a4:	55ba      	strb	r2, [r7, r6]
  options[options_out_len++] = option_len;
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	2202      	movs	r2, #2
 80118aa:	54fa      	strb	r2, [r7, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80118ac:	eb0a 0302 	add.w	r3, sl, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80118b0:	f8b9 b028 	ldrh.w	fp, [r9, #40]	@ 0x28
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80118b4:	2b44      	cmp	r3, #68	@ 0x44
 80118b6:	f200 8081 	bhi.w	80119bc <dhcp_discover+0x164>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80118ba:	1cf3      	adds	r3, r6, #3
 80118bc:	b2a4      	uxth	r4, r4
 80118be:	ea4f 221b 	mov.w	r2, fp, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80118c2:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80118c4:	f807 200a 	strb.w	r2, [r7, sl]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80118c8:	f807 b003 	strb.w	fp, [r7, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80118cc:	1d63      	adds	r3, r4, #5
 80118ce:	2b44      	cmp	r3, #68	@ 0x44
 80118d0:	d864      	bhi.n	801199c <dhcp_discover+0x144>
  options[options_out_len++] = option_type;
 80118d2:	2237      	movs	r2, #55	@ 0x37
 80118d4:	1d73      	adds	r3, r6, #5
 80118d6:	f8df a118 	ldr.w	sl, [pc, #280]	@ 80119f0 <dhcp_discover+0x198>
 80118da:	553a      	strb	r2, [r7, r4]
  options[options_out_len++] = option_len;
 80118dc:	b29b      	uxth	r3, r3
 80118de:	2203      	movs	r2, #3
 80118e0:	1db4      	adds	r4, r6, #6
 80118e2:	54fa      	strb	r2, [r7, r3]
 80118e4:	f106 0309 	add.w	r3, r6, #9
 80118e8:	b2a4      	uxth	r4, r4
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	9303      	str	r3, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80118ee:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80118f0:	f81a bb01 	ldrb.w	fp, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80118f4:	d844      	bhi.n	8011980 <dhcp_discover+0x128>
  options[options_out_len++] = value;
 80118f6:	1c63      	adds	r3, r4, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118f8:	9a03      	ldr	r2, [sp, #12]
  options[options_out_len++] = value;
 80118fa:	f807 b004 	strb.w	fp, [r7, r4]
 80118fe:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011900:	4293      	cmp	r3, r2
  options[options_out_len++] = value;
 8011902:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011904:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011908:	d1f1      	bne.n	80118ee <dhcp_discover+0x96>
  options[options_out_len++] = DHCP_OPTION_END;
 801190a:	f106 000a 	add.w	r0, r6, #10
 801190e:	23ff      	movs	r3, #255	@ 0xff
 8011910:	b280      	uxth	r0, r0
 8011912:	54bb      	strb	r3, [r7, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011914:	2843      	cmp	r0, #67	@ 0x43
 8011916:	d808      	bhi.n	801192a <dhcp_discover+0xd2>
    options[options_out_len++] = 0;
 8011918:	f1c6 0239 	rsb	r2, r6, #57	@ 0x39
 801191c:	4438      	add	r0, r7
 801191e:	2100      	movs	r1, #0
 8011920:	b292      	uxth	r2, r2
 8011922:	3201      	adds	r2, #1
 8011924:	f003 f8a9 	bl	8014a7a <memset>
 8011928:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801192a:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 801192e:	4640      	mov	r0, r8
 8011930:	b289      	uxth	r1, r1
 8011932:	f7fa fd17 	bl	800c364 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011936:	4925      	ldr	r1, [pc, #148]	@ (80119cc <dhcp_discover+0x174>)
 8011938:	4a25      	ldr	r2, [pc, #148]	@ (80119d0 <dhcp_discover+0x178>)
 801193a:	2343      	movs	r3, #67	@ 0x43
 801193c:	f8cd 9000 	str.w	r9, [sp]
 8011940:	6808      	ldr	r0, [r1, #0]
 8011942:	4641      	mov	r1, r8
 8011944:	9201      	str	r2, [sp, #4]
 8011946:	4a23      	ldr	r2, [pc, #140]	@ (80119d4 <dhcp_discover+0x17c>)
 8011948:	f7ff fa10 	bl	8010d6c <udp_sendto_if_src>
    pbuf_free(p_out);
 801194c:	4640      	mov	r0, r8
 801194e:	f7fa fbf1 	bl	800c134 <pbuf_free>
  if (dhcp->tries < 255) {
 8011952:	79ab      	ldrb	r3, [r5, #6]
 8011954:	2bff      	cmp	r3, #255	@ 0xff
 8011956:	d01b      	beq.n	8011990 <dhcp_discover+0x138>
    dhcp->tries++;
 8011958:	3301      	adds	r3, #1
 801195a:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801195c:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801195e:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011960:	d816      	bhi.n	8011990 <dhcp_discover+0x138>
 8011962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011966:	491c      	ldr	r1, [pc, #112]	@ (80119d8 <dhcp_discover+0x180>)
}
 8011968:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801196a:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801196c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011970:	b29b      	uxth	r3, r3
 8011972:	fba1 1303 	umull	r1, r3, r1, r3
 8011976:	095b      	lsrs	r3, r3, #5
 8011978:	812b      	strh	r3, [r5, #8]
}
 801197a:	b007      	add	sp, #28
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011980:	4b16      	ldr	r3, [pc, #88]	@ (80119dc <dhcp_discover+0x184>)
 8011982:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8011986:	4916      	ldr	r1, [pc, #88]	@ (80119e0 <dhcp_discover+0x188>)
 8011988:	4816      	ldr	r0, [pc, #88]	@ (80119e4 <dhcp_discover+0x18c>)
 801198a:	f002 ffc3 	bl	8014914 <iprintf>
 801198e:	e7b2      	b.n	80118f6 <dhcp_discover+0x9e>
    options[options_out_len++] = 0;
 8011990:	2378      	movs	r3, #120	@ 0x78
}
 8011992:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011994:	812b      	strh	r3, [r5, #8]
}
 8011996:	b007      	add	sp, #28
 8011998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801199c:	4b0f      	ldr	r3, [pc, #60]	@ (80119dc <dhcp_discover+0x184>)
 801199e:	f240 529a 	movw	r2, #1434	@ 0x59a
 80119a2:	4911      	ldr	r1, [pc, #68]	@ (80119e8 <dhcp_discover+0x190>)
 80119a4:	480f      	ldr	r0, [pc, #60]	@ (80119e4 <dhcp_discover+0x18c>)
 80119a6:	f002 ffb5 	bl	8014914 <iprintf>
 80119aa:	e792      	b.n	80118d2 <dhcp_discover+0x7a>
 80119ac:	4b0b      	ldr	r3, [pc, #44]	@ (80119dc <dhcp_discover+0x184>)
 80119ae:	f240 529a 	movw	r2, #1434	@ 0x59a
 80119b2:	490d      	ldr	r1, [pc, #52]	@ (80119e8 <dhcp_discover+0x190>)
 80119b4:	480b      	ldr	r0, [pc, #44]	@ (80119e4 <dhcp_discover+0x18c>)
 80119b6:	f002 ffad 	bl	8014914 <iprintf>
 80119ba:	e76f      	b.n	801189c <dhcp_discover+0x44>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80119bc:	4b07      	ldr	r3, [pc, #28]	@ (80119dc <dhcp_discover+0x184>)
 80119be:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80119c2:	490a      	ldr	r1, [pc, #40]	@ (80119ec <dhcp_discover+0x194>)
 80119c4:	4807      	ldr	r0, [pc, #28]	@ (80119e4 <dhcp_discover+0x18c>)
 80119c6:	f002 ffa5 	bl	8014914 <iprintf>
 80119ca:	e776      	b.n	80118ba <dhcp_discover+0x62>
 80119cc:	2401076c 	.word	0x2401076c
 80119d0:	080189c0 	.word	0x080189c0
 80119d4:	080189bc 	.word	0x080189bc
 80119d8:	10624dd3 	.word	0x10624dd3
 80119dc:	08018368 	.word	0x08018368
 80119e0:	0801855c 	.word	0x0801855c
 80119e4:	08015bd0 	.word	0x08015bd0
 80119e8:	080184dc 	.word	0x080184dc
 80119ec:	08018520 	.word	0x08018520
 80119f0:	08018690 	.word	0x08018690

080119f4 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80119f4:	2800      	cmp	r0, #0
 80119f6:	f000 80f8 	beq.w	8011bea <dhcp_select.isra.0+0x1f6>
dhcp_select(struct netif *netif)
 80119fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 80119fe:	6a46      	ldr	r6, [r0, #36]	@ 0x24
dhcp_select(struct netif *netif)
 8011a00:	b087      	sub	sp, #28
 8011a02:	4607      	mov	r7, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011a04:	2e00      	cmp	r6, #0
 8011a06:	f000 80f7 	beq.w	8011bf8 <dhcp_select.isra.0+0x204>
  if (new_state != dhcp->state) {
 8011a0a:	7973      	ldrb	r3, [r6, #5]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d004      	beq.n	8011a1a <dhcp_select.isra.0+0x26>
    dhcp->state = new_state;
 8011a10:	2201      	movs	r2, #1
    dhcp->request_timeout = 0;
 8011a12:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8011a14:	f8a6 2005 	strh.w	r2, [r6, #5]
    dhcp->request_timeout = 0;
 8011a18:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011a1a:	f10d 0316 	add.w	r3, sp, #22
 8011a1e:	2203      	movs	r2, #3
 8011a20:	4631      	mov	r1, r6
 8011a22:	4638      	mov	r0, r7
 8011a24:	f7ff fd88 	bl	8011538 <dhcp_create_msg>
  if (p_out != NULL) {
 8011a28:	4681      	mov	r9, r0
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	f000 8092 	beq.w	8011b54 <dhcp_select.isra.0+0x160>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011a30:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8011a34:	6845      	ldr	r5, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011a36:	f104 0804 	add.w	r8, r4, #4
 8011a3a:	f104 0a02 	add.w	sl, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011a3e:	35f0      	adds	r5, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011a40:	f1b8 0f44 	cmp.w	r8, #68	@ 0x44
 8011a44:	f200 80b1 	bhi.w	8011baa <dhcp_select.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 8011a48:	2239      	movs	r2, #57	@ 0x39
 8011a4a:	1c63      	adds	r3, r4, #1
 8011a4c:	fa1f fa8a 	uxth.w	sl, sl
 8011a50:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = option_len;
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	2202      	movs	r2, #2
 8011a56:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011a58:	eb0a 0302 	add.w	r3, sl, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011a5c:	f8b7 b028 	ldrh.w	fp, [r7, #40]	@ 0x28
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011a60:	2b44      	cmp	r3, #68	@ 0x44
 8011a62:	f200 80aa 	bhi.w	8011bba <dhcp_select.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011a66:	1ce3      	adds	r3, r4, #3
 8011a68:	fa1f f888 	uxth.w	r8, r8
 8011a6c:	ea4f 221b 	mov.w	r2, fp, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011a70:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011a72:	f805 200a 	strb.w	r2, [r5, sl]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011a76:	f805 b003 	strb.w	fp, [r5, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011a7a:	f108 0306 	add.w	r3, r8, #6
 8011a7e:	2b44      	cmp	r3, #68	@ 0x44
 8011a80:	f200 80a3 	bhi.w	8011bca <dhcp_select.isra.0+0x1d6>
  options[options_out_len++] = option_type;
 8011a84:	1d63      	adds	r3, r4, #5
 8011a86:	2232      	movs	r2, #50	@ 0x32
  options[options_out_len++] = option_len;
 8011a88:	3406      	adds	r4, #6
 8011a8a:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8011a8c:	f805 2008 	strb.w	r2, [r5, r8]
  options[options_out_len++] = option_len;
 8011a90:	2204      	movs	r2, #4
 8011a92:	54ea      	strb	r2, [r5, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011a94:	69f0      	ldr	r0, [r6, #28]
 8011a96:	f7f9 fc37 	bl	800b308 <lwip_htonl>
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	4602      	mov	r2, r0
 8011a9e:	b2a0      	uxth	r0, r4
 8011aa0:	f7ff fbc0 	bl	8011224 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011aa4:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011aa6:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011aa8:	2b44      	cmp	r3, #68	@ 0x44
 8011aaa:	f200 8096 	bhi.w	8011bda <dhcp_select.isra.0+0x1e6>
  options[options_out_len++] = option_type;
 8011aae:	1c63      	adds	r3, r4, #1
 8011ab0:	2236      	movs	r2, #54	@ 0x36
  options[options_out_len++] = option_len;
 8011ab2:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8011ab4:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = option_len;
 8011ab6:	2204      	movs	r2, #4
 8011ab8:	3402      	adds	r4, #2
 8011aba:	54ea      	strb	r2, [r5, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011abc:	69b0      	ldr	r0, [r6, #24]
 8011abe:	f7f9 fc23 	bl	800b308 <lwip_htonl>
 8011ac2:	4629      	mov	r1, r5
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	b2a0      	uxth	r0, r4
 8011ac8:	f7ff fbac 	bl	8011224 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011acc:	1d44      	adds	r4, r0, #5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011ace:	4680      	mov	r8, r0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011ad0:	2c44      	cmp	r4, #68	@ 0x44
 8011ad2:	d862      	bhi.n	8011b9a <dhcp_select.isra.0+0x1a6>
  options[options_out_len++] = option_type;
 8011ad4:	b2a3      	uxth	r3, r4
 8011ad6:	2237      	movs	r2, #55	@ 0x37
  options[options_out_len++] = option_len;
 8011ad8:	f108 0402 	add.w	r4, r8, #2
 8011adc:	f8df a158 	ldr.w	sl, [pc, #344]	@ 8011c38 <dhcp_select.isra.0+0x244>
 8011ae0:	9303      	str	r3, [sp, #12]
  options[options_out_len++] = option_type;
 8011ae2:	f108 0301 	add.w	r3, r8, #1
 8011ae6:	f805 2008 	strb.w	r2, [r5, r8]
  options[options_out_len++] = option_len;
 8011aea:	b2a4      	uxth	r4, r4
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	2203      	movs	r2, #3
 8011af0:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011af2:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011af4:	f81a bb01 	ldrb.w	fp, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011af8:	d842      	bhi.n	8011b80 <dhcp_select.isra.0+0x18c>
  options[options_out_len++] = value;
 8011afa:	1c63      	adds	r3, r4, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011afc:	9a03      	ldr	r2, [sp, #12]
  options[options_out_len++] = value;
 8011afe:	f805 b004 	strb.w	fp, [r5, r4]
 8011b02:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011b04:	4293      	cmp	r3, r2
  options[options_out_len++] = value;
 8011b06:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011b08:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011b0c:	d1f1      	bne.n	8011af2 <dhcp_select.isra.0+0xfe>
  options[options_out_len++] = DHCP_OPTION_END;
 8011b0e:	f108 0006 	add.w	r0, r8, #6
 8011b12:	23ff      	movs	r3, #255	@ 0xff
 8011b14:	b280      	uxth	r0, r0
 8011b16:	54ab      	strb	r3, [r5, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011b18:	2843      	cmp	r0, #67	@ 0x43
 8011b1a:	d808      	bhi.n	8011b2e <dhcp_select.isra.0+0x13a>
    options[options_out_len++] = 0;
 8011b1c:	f1c8 023d 	rsb	r2, r8, #61	@ 0x3d
 8011b20:	4428      	add	r0, r5
 8011b22:	2100      	movs	r1, #0
 8011b24:	b292      	uxth	r2, r2
 8011b26:	3201      	adds	r2, #1
 8011b28:	f002 ffa7 	bl	8014a7a <memset>
 8011b2c:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011b2e:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 8011b32:	4648      	mov	r0, r9
 8011b34:	b289      	uxth	r1, r1
 8011b36:	f7fa fc15 	bl	800c364 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011b3a:	4934      	ldr	r1, [pc, #208]	@ (8011c0c <dhcp_select.isra.0+0x218>)
 8011b3c:	4a34      	ldr	r2, [pc, #208]	@ (8011c10 <dhcp_select.isra.0+0x21c>)
 8011b3e:	2343      	movs	r3, #67	@ 0x43
 8011b40:	9700      	str	r7, [sp, #0]
 8011b42:	6808      	ldr	r0, [r1, #0]
 8011b44:	4649      	mov	r1, r9
 8011b46:	9201      	str	r2, [sp, #4]
 8011b48:	4a32      	ldr	r2, [pc, #200]	@ (8011c14 <dhcp_select.isra.0+0x220>)
 8011b4a:	f7ff f90f 	bl	8010d6c <udp_sendto_if_src>
    pbuf_free(p_out);
 8011b4e:	4648      	mov	r0, r9
 8011b50:	f7fa faf0 	bl	800c134 <pbuf_free>
  if (dhcp->tries < 255) {
 8011b54:	79b3      	ldrb	r3, [r6, #6]
 8011b56:	2bff      	cmp	r3, #255	@ 0xff
 8011b58:	d01a      	beq.n	8011b90 <dhcp_select.isra.0+0x19c>
    dhcp->tries++;
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011b5e:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8011b60:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011b62:	d815      	bhi.n	8011b90 <dhcp_select.isra.0+0x19c>
 8011b64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b68:	492b      	ldr	r1, [pc, #172]	@ (8011c18 <dhcp_select.isra.0+0x224>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011b6a:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b6c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	fba1 1303 	umull	r1, r3, r1, r3
 8011b76:	095b      	lsrs	r3, r3, #5
 8011b78:	8133      	strh	r3, [r6, #8]
}
 8011b7a:	b007      	add	sp, #28
 8011b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011b80:	4b26      	ldr	r3, [pc, #152]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011b82:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8011b86:	4926      	ldr	r1, [pc, #152]	@ (8011c20 <dhcp_select.isra.0+0x22c>)
 8011b88:	4826      	ldr	r0, [pc, #152]	@ (8011c24 <dhcp_select.isra.0+0x230>)
 8011b8a:	f002 fec3 	bl	8014914 <iprintf>
 8011b8e:	e7b4      	b.n	8011afa <dhcp_select.isra.0+0x106>
    options[options_out_len++] = 0;
 8011b90:	2378      	movs	r3, #120	@ 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b92:	8133      	strh	r3, [r6, #8]
}
 8011b94:	b007      	add	sp, #28
 8011b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011b9a:	4b20      	ldr	r3, [pc, #128]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011b9c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011ba0:	4921      	ldr	r1, [pc, #132]	@ (8011c28 <dhcp_select.isra.0+0x234>)
 8011ba2:	4820      	ldr	r0, [pc, #128]	@ (8011c24 <dhcp_select.isra.0+0x230>)
 8011ba4:	f002 feb6 	bl	8014914 <iprintf>
 8011ba8:	e794      	b.n	8011ad4 <dhcp_select.isra.0+0xe0>
 8011baa:	4b1c      	ldr	r3, [pc, #112]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011bac:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011bb0:	491d      	ldr	r1, [pc, #116]	@ (8011c28 <dhcp_select.isra.0+0x234>)
 8011bb2:	481c      	ldr	r0, [pc, #112]	@ (8011c24 <dhcp_select.isra.0+0x230>)
 8011bb4:	f002 feae 	bl	8014914 <iprintf>
 8011bb8:	e746      	b.n	8011a48 <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011bba:	4b18      	ldr	r3, [pc, #96]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011bbc:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8011bc0:	491a      	ldr	r1, [pc, #104]	@ (8011c2c <dhcp_select.isra.0+0x238>)
 8011bc2:	4818      	ldr	r0, [pc, #96]	@ (8011c24 <dhcp_select.isra.0+0x230>)
 8011bc4:	f002 fea6 	bl	8014914 <iprintf>
 8011bc8:	e74d      	b.n	8011a66 <dhcp_select.isra.0+0x72>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011bca:	4b14      	ldr	r3, [pc, #80]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011bcc:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011bd0:	4915      	ldr	r1, [pc, #84]	@ (8011c28 <dhcp_select.isra.0+0x234>)
 8011bd2:	4814      	ldr	r0, [pc, #80]	@ (8011c24 <dhcp_select.isra.0+0x230>)
 8011bd4:	f002 fe9e 	bl	8014914 <iprintf>
 8011bd8:	e754      	b.n	8011a84 <dhcp_select.isra.0+0x90>
 8011bda:	4b10      	ldr	r3, [pc, #64]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011bdc:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011be0:	4911      	ldr	r1, [pc, #68]	@ (8011c28 <dhcp_select.isra.0+0x234>)
 8011be2:	4810      	ldr	r0, [pc, #64]	@ (8011c24 <dhcp_select.isra.0+0x230>)
 8011be4:	f002 fe96 	bl	8014914 <iprintf>
 8011be8:	e761      	b.n	8011aae <dhcp_select.isra.0+0xba>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8011bea:	4b0c      	ldr	r3, [pc, #48]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011bec:	f240 1277 	movw	r2, #375	@ 0x177
 8011bf0:	490f      	ldr	r1, [pc, #60]	@ (8011c30 <dhcp_select.isra.0+0x23c>)
 8011bf2:	480c      	ldr	r0, [pc, #48]	@ (8011c24 <dhcp_select.isra.0+0x230>)
 8011bf4:	f002 be8e 	b.w	8014914 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011bf8:	4b08      	ldr	r3, [pc, #32]	@ (8011c1c <dhcp_select.isra.0+0x228>)
 8011bfa:	f240 1279 	movw	r2, #377	@ 0x179
 8011bfe:	490d      	ldr	r1, [pc, #52]	@ (8011c34 <dhcp_select.isra.0+0x240>)
 8011c00:	4808      	ldr	r0, [pc, #32]	@ (8011c24 <dhcp_select.isra.0+0x230>)
}
 8011c02:	b007      	add	sp, #28
 8011c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011c08:	f002 be84 	b.w	8014914 <iprintf>
 8011c0c:	2401076c 	.word	0x2401076c
 8011c10:	080189c0 	.word	0x080189c0
 8011c14:	080189bc 	.word	0x080189bc
 8011c18:	10624dd3 	.word	0x10624dd3
 8011c1c:	08018368 	.word	0x08018368
 8011c20:	0801855c 	.word	0x0801855c
 8011c24:	08015bd0 	.word	0x08015bd0
 8011c28:	080184dc 	.word	0x080184dc
 8011c2c:	08018520 	.word	0x08018520
 8011c30:	08018594 	.word	0x08018594
 8011c34:	080185b0 	.word	0x080185b0
 8011c38:	08018690 	.word	0x08018690

08011c3c <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8011c3c:	4b97      	ldr	r3, [pc, #604]	@ (8011e9c <dhcp_recv+0x260>)
{
 8011c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8011c42:	685f      	ldr	r7, [r3, #4]
{
 8011c44:	4614      	mov	r4, r2
 8011c46:	b087      	sub	sp, #28
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011c48:	6852      	ldr	r2, [r2, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c4a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011c4c:	2d00      	cmp	r5, #0
 8011c4e:	f000 8083 	beq.w	8011d58 <dhcp_recv+0x11c>
 8011c52:	792b      	ldrb	r3, [r5, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d07f      	beq.n	8011d58 <dhcp_recv+0x11c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8011c58:	8963      	ldrh	r3, [r4, #10]
 8011c5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8011c5c:	d97c      	bls.n	8011d58 <dhcp_recv+0x11c>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011c5e:	7813      	ldrb	r3, [r2, #0]
 8011c60:	2b02      	cmp	r3, #2
 8011c62:	d179      	bne.n	8011d58 <dhcp_recv+0x11c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011c64:	f897 e030 	ldrb.w	lr, [r7, #48]	@ 0x30
 8011c68:	f1be 0f00 	cmp.w	lr, #0
 8011c6c:	d010      	beq.n	8011c90 <dhcp_recv+0x54>
 8011c6e:	f107 0029 	add.w	r0, r7, #41	@ 0x29
 8011c72:	f102 011b 	add.w	r1, r2, #27
 8011c76:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011c78:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011c7c:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011c7e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011c82:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011c84:	45b4      	cmp	ip, r6
 8011c86:	d167      	bne.n	8011d58 <dhcp_recv+0x11c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011c88:	4573      	cmp	r3, lr
 8011c8a:	d201      	bcs.n	8011c90 <dhcp_recv+0x54>
 8011c8c:	2b06      	cmp	r3, #6
 8011c8e:	d1f3      	bne.n	8011c78 <dhcp_recv+0x3c>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011c90:	6850      	ldr	r0, [r2, #4]
 8011c92:	f7f9 fb39 	bl	800b308 <lwip_htonl>
 8011c96:	682b      	ldr	r3, [r5, #0]
 8011c98:	4298      	cmp	r0, r3
 8011c9a:	d15d      	bne.n	8011d58 <dhcp_recv+0x11c>
  dhcp_clear_all_options(dhcp);
 8011c9c:	f8df b204 	ldr.w	fp, [pc, #516]	@ 8011ea4 <dhcp_recv+0x268>
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	e9cb 2200 	strd	r2, r2, [fp]
  if (p->len < DHCP_SNAME_OFS) {
 8011ca6:	8963      	ldrh	r3, [r4, #10]
 8011ca8:	2b2b      	cmp	r3, #43	@ 0x2b
 8011caa:	d955      	bls.n	8011d58 <dhcp_recv+0x11c>
  int parse_sname_as_options = 0;
 8011cac:	4692      	mov	sl, r2
  options_idx = DHCP_OPTIONS_OFS;
 8011cae:	22f0      	movs	r2, #240	@ 0xf0
  options_idx_max = p->tot_len;
 8011cb0:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 8011cb4:	f8cd a000 	str.w	sl, [sp]
 8011cb8:	e9cd 7501 	strd	r7, r5, [sp, #4]
 8011cbc:	4617      	mov	r7, r2
 8011cbe:	4622      	mov	r2, r4
 8011cc0:	464c      	mov	r4, r9
 8011cc2:	4691      	mov	r9, r2
  options_idx = DHCP_OPTIONS_OFS;
 8011cc4:	464d      	mov	r5, r9
 8011cc6:	e005      	b.n	8011cd4 <dhcp_recv+0x98>
    q = q->next;
 8011cc8:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8011cca:	b297      	uxth	r7, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011ccc:	b29c      	uxth	r4, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8011cce:	2d00      	cmp	r5, #0
 8011cd0:	d041      	beq.n	8011d56 <dhcp_recv+0x11a>
 8011cd2:	896b      	ldrh	r3, [r5, #10]
 8011cd4:	42bb      	cmp	r3, r7
    options_idx = (u16_t)(options_idx - q->len);
 8011cd6:	eba7 0203 	sub.w	r2, r7, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011cda:	eba4 0303 	sub.w	r3, r4, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8011cde:	d9f3      	bls.n	8011cc8 <dhcp_recv+0x8c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011ce0:	42bc      	cmp	r4, r7
  options = (u8_t *)q->payload;
 8011ce2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011ce6:	f240 80e7 	bls.w	8011eb8 <dhcp_recv+0x27c>
 8011cea:	463e      	mov	r6, r7
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8011cec:	9703      	str	r7, [sp, #12]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011cee:	f818 1006 	ldrb.w	r1, [r8, r6]
 8011cf2:	29ff      	cmp	r1, #255	@ 0xff
 8011cf4:	f000 80e0 	beq.w	8011eb8 <dhcp_recv+0x27c>
    u16_t val_offset = (u16_t)(offset + 2);
 8011cf8:	1cb3      	adds	r3, r6, #2
 8011cfa:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 8011cfc:	42b3      	cmp	r3, r6
 8011cfe:	d32a      	bcc.n	8011d56 <dhcp_recv+0x11a>
    if ((offset + 1) < q->len) {
 8011d00:	1c70      	adds	r0, r6, #1
 8011d02:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8011d06:	4560      	cmp	r0, ip
 8011d08:	f280 80ce 	bge.w	8011ea8 <dhcp_recv+0x26c>
      len = options[offset + 1];
 8011d0c:	eb08 0206 	add.w	r2, r8, r6
 8011d10:	7857      	ldrb	r7, [r2, #1]
    switch (op) {
 8011d12:	293b      	cmp	r1, #59	@ 0x3b
 8011d14:	d826      	bhi.n	8011d64 <dhcp_recv+0x128>
 8011d16:	e8df f001 	tbb	[pc, r1]
 8011d1a:	413f      	.short	0x413f
 8011d1c:	25259525 	.word	0x25259525
 8011d20:	25252525 	.word	0x25252525
 8011d24:	25252525 	.word	0x25252525
 8011d28:	25252525 	.word	0x25252525
 8011d2c:	25252525 	.word	0x25252525
 8011d30:	25252525 	.word	0x25252525
 8011d34:	25252525 	.word	0x25252525
 8011d38:	25252525 	.word	0x25252525
 8011d3c:	25252525 	.word	0x25252525
 8011d40:	25252525 	.word	0x25252525
 8011d44:	25252525 	.word	0x25252525
 8011d48:	25252525 	.word	0x25252525
 8011d4c:	8ab07e25 	.word	0x8ab07e25
 8011d50:	252525a3 	.word	0x252525a3
 8011d54:	6773      	.short	0x6773
 8011d56:	464c      	mov	r4, r9
  pbuf_free(p);
 8011d58:	4620      	mov	r0, r4
}
 8011d5a:	b007      	add	sp, #28
 8011d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8011d60:	f7fa b9e8 	b.w	800c134 <pbuf_free>
      if (offset + len + 2 > 0xFFFF) {
 8011d64:	443e      	add	r6, r7
 8011d66:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8011d6a:	428e      	cmp	r6, r1
 8011d6c:	dcf3      	bgt.n	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011d6e:	443b      	add	r3, r7
 8011d70:	b29e      	uxth	r6, r3
    if (offset >= q->len) {
 8011d72:	45b4      	cmp	ip, r6
 8011d74:	f200 809d 	bhi.w	8011eb2 <dhcp_recv+0x276>
      offset = (u16_t)(offset - q->len);
 8011d78:	eba6 060c 	sub.w	r6, r6, ip
      offset_max = (u16_t)(offset_max - q->len);
 8011d7c:	eba4 0c0c 	sub.w	ip, r4, ip
      offset = (u16_t)(offset - q->len);
 8011d80:	b2b6      	uxth	r6, r6
      offset_max = (u16_t)(offset_max - q->len);
 8011d82:	fa1f f48c 	uxth.w	r4, ip
      if (offset < offset_max) {
 8011d86:	42a6      	cmp	r6, r4
 8011d88:	d2e5      	bcs.n	8011d56 <dhcp_recv+0x11a>
        q = q->next;
 8011d8a:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011d8c:	2d00      	cmp	r5, #0
 8011d8e:	f000 8175 	beq.w	801207c <dhcp_recv+0x440>
        options = (u8_t *)q->payload;
 8011d92:	f8d5 8004 	ldr.w	r8, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011d96:	e7aa      	b.n	8011cee <dhcp_recv+0xb2>
      offset++;
 8011d98:	b286      	uxth	r6, r0
 8011d9a:	e7ea      	b.n	8011d72 <dhcp_recv+0x136>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011d9c:	2f04      	cmp	r7, #4
 8011d9e:	f040 8164 	bne.w	801206a <dhcp_recv+0x42e>
      if (offset + len + 2 > 0xFFFF) {
 8011da2:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 8011da6:	428e      	cmp	r6, r1
 8011da8:	d8d5      	bhi.n	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011daa:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011dac:	f04f 0a06 	mov.w	sl, #6
      offset = (u16_t)(offset + len + 2);
 8011db0:	b2b6      	uxth	r6, r6
        u32_t value = 0;
 8011db2:	2200      	movs	r2, #0
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011db4:	f81b 100a 	ldrb.w	r1, [fp, sl]
        u32_t value = 0;
 8011db8:	9205      	str	r2, [sp, #20]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011dba:	2900      	cmp	r1, #0
 8011dbc:	d1d9      	bne.n	8011d72 <dhcp_recv+0x136>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8011dbe:	463a      	mov	r2, r7
 8011dc0:	a905      	add	r1, sp, #20
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	f7fa fc9a 	bl	800c6fc <pbuf_copy_partial>
 8011dc8:	4287      	cmp	r7, r0
 8011dca:	d1c4      	bne.n	8011d56 <dhcp_recv+0x11a>
          } else if (decode_len == 4) {
 8011dcc:	2f04      	cmp	r7, #4
 8011dce:	f000 8163 	beq.w	8012098 <dhcp_recv+0x45c>
            value = ((u8_t *)&value)[0];
 8011dd2:	f89d 0014 	ldrb.w	r0, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 8011dd6:	2201      	movs	r2, #1
    if (offset >= q->len) {
 8011dd8:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
          dhcp_got_option(dhcp, decode_idx);
 8011ddc:	f80b 200a 	strb.w	r2, [fp, sl]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011de0:	4a2f      	ldr	r2, [pc, #188]	@ (8011ea0 <dhcp_recv+0x264>)
 8011de2:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
 8011de6:	e7c4      	b.n	8011d72 <dhcp_recv+0x136>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011de8:	2f04      	cmp	r7, #4
 8011dea:	f040 8123 	bne.w	8012034 <dhcp_recv+0x3f8>
      if (offset + len + 2 > 0xFFFF) {
 8011dee:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 8011df2:	428e      	cmp	r6, r1
 8011df4:	d8af      	bhi.n	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011df6:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8011df8:	f04f 0a05 	mov.w	sl, #5
      offset = (u16_t)(offset + len + 2);
 8011dfc:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 8011dfe:	e7d8      	b.n	8011db2 <dhcp_recv+0x176>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011e00:	2f04      	cmp	r7, #4
 8011e02:	f040 80f3 	bne.w	8011fec <dhcp_recv+0x3b0>
      if (offset + len + 2 > 0xFFFF) {
 8011e06:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 8011e0a:	428e      	cmp	r6, r1
 8011e0c:	d8a3      	bhi.n	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011e0e:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8011e10:	46ba      	mov	sl, r7
      offset = (u16_t)(offset + len + 2);
 8011e12:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 8011e14:	e7cd      	b.n	8011db2 <dhcp_recv+0x176>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011e16:	2f04      	cmp	r7, #4
 8011e18:	f040 8115 	bne.w	8012046 <dhcp_recv+0x40a>
      if (offset + len + 2 > 0xFFFF) {
 8011e1c:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 8011e20:	428e      	cmp	r6, r1
 8011e22:	d898      	bhi.n	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011e24:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011e26:	f04f 0a03 	mov.w	sl, #3
      offset = (u16_t)(offset + len + 2);
 8011e2a:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 8011e2c:	e7c1      	b.n	8011db2 <dhcp_recv+0x176>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011e2e:	2f01      	cmp	r7, #1
 8011e30:	f040 80ee 	bne.w	8012010 <dhcp_recv+0x3d4>
      if (offset + len + 2 > 0xFFFF) {
 8011e34:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8011e38:	4288      	cmp	r0, r1
 8011e3a:	d08c      	beq.n	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011e3c:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011e3e:	46ba      	mov	sl, r7
      offset = (u16_t)(offset + len + 2);
 8011e40:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 8011e42:	e7b6      	b.n	8011db2 <dhcp_recv+0x176>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011e44:	2f03      	cmp	r7, #3
 8011e46:	f240 8107 	bls.w	8012058 <dhcp_recv+0x41c>
      if (offset + len + 2 > 0xFFFF) {
 8011e4a:	443e      	add	r6, r7
 8011e4c:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8011e50:	428e      	cmp	r6, r1
 8011e52:	dc80      	bgt.n	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011e54:	18fa      	adds	r2, r7, r3
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011e56:	f04f 0a07 	mov.w	sl, #7
        decode_len = 4; /* only copy the first given router */
 8011e5a:	2704      	movs	r7, #4
      offset = (u16_t)(offset + len + 2);
 8011e5c:	b296      	uxth	r6, r2
      if (decode_len > 0) {
 8011e5e:	e7a8      	b.n	8011db2 <dhcp_recv+0x176>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011e60:	2f04      	cmp	r7, #4
 8011e62:	f040 80cc 	bne.w	8011ffe <dhcp_recv+0x3c2>
      if (offset + len + 2 > 0xFFFF) {
 8011e66:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 8011e6a:	428e      	cmp	r6, r1
 8011e6c:	f63f af73 	bhi.w	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011e70:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011e72:	f04f 0a02 	mov.w	sl, #2
      offset = (u16_t)(offset + len + 2);
 8011e76:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 8011e78:	e79b      	b.n	8011db2 <dhcp_recv+0x176>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011e7a:	2f01      	cmp	r7, #1
 8011e7c:	f040 80d1 	bne.w	8012022 <dhcp_recv+0x3e6>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011e80:	9a03      	ldr	r2, [sp, #12]
 8011e82:	2af0      	cmp	r2, #240	@ 0xf0
 8011e84:	f040 810c 	bne.w	80120a0 <dhcp_recv+0x464>
      if (offset + len + 2 > 0xFFFF) {
 8011e88:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8011e8c:	4288      	cmp	r0, r1
 8011e8e:	f43f af62 	beq.w	8011d56 <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 8011e92:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8011e94:	f04f 0a00 	mov.w	sl, #0
      offset = (u16_t)(offset + len + 2);
 8011e98:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 8011e9a:	e78a      	b.n	8011db2 <dhcp_recv+0x176>
 8011e9c:	24009c28 	.word	0x24009c28
 8011ea0:	24010778 	.word	0x24010778
 8011ea4:	24010770 	.word	0x24010770
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011ea8:	682a      	ldr	r2, [r5, #0]
 8011eaa:	b302      	cbz	r2, 8011eee <dhcp_recv+0x2b2>
 8011eac:	6852      	ldr	r2, [r2, #4]
 8011eae:	7817      	ldrb	r7, [r2, #0]
 8011eb0:	e72f      	b.n	8011d12 <dhcp_recv+0xd6>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011eb2:	42a6      	cmp	r6, r4
 8011eb4:	f4ff af1b 	bcc.w	8011cee <dhcp_recv+0xb2>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011eb8:	f89b 3000 	ldrb.w	r3, [fp]
 8011ebc:	b163      	cbz	r3, 8011ed8 <dhcp_recv+0x29c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011ebe:	4bad      	ldr	r3, [pc, #692]	@ (8012174 <dhcp_recv+0x538>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011ec0:	2200      	movs	r2, #0
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011ec2:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011ec4:	f88b 2000 	strb.w	r2, [fp]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	f000 80e2 	beq.w	8012092 <dhcp_recv+0x456>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011ece:	2b02      	cmp	r3, #2
 8011ed0:	d006      	beq.n	8011ee0 <dhcp_recv+0x2a4>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011ed2:	2b03      	cmp	r3, #3
 8011ed4:	f000 80db 	beq.w	801208e <dhcp_recv+0x452>
  } else if (parse_sname_as_options) {
 8011ed8:	9b00      	ldr	r3, [sp, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	f000 80e9 	beq.w	80120b2 <dhcp_recv+0x476>
    parse_sname_as_options = 0;
 8011ee0:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8011ee2:	246c      	movs	r4, #108	@ 0x6c
    options_idx = DHCP_SNAME_OFS;
 8011ee4:	272c      	movs	r7, #44	@ 0x2c
    parse_sname_as_options = 0;
 8011ee6:	9300      	str	r3, [sp, #0]
  while ((q != NULL) && (options_idx >= q->len)) {
 8011ee8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8011eec:	e6ea      	b.n	8011cc4 <dhcp_recv+0x88>
    switch (op) {
 8011eee:	293b      	cmp	r1, #59	@ 0x3b
 8011ef0:	d87a      	bhi.n	8011fe8 <dhcp_recv+0x3ac>
 8011ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ef8 <dhcp_recv+0x2bc>)
 8011ef4:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8011ef8:	08011d99 	.word	0x08011d99
 8011efc:	0801206b 	.word	0x0801206b
 8011f00:	08011fe9 	.word	0x08011fe9
 8011f04:	08012059 	.word	0x08012059
 8011f08:	08011fe9 	.word	0x08011fe9
 8011f0c:	08011fe9 	.word	0x08011fe9
 8011f10:	08011fe9 	.word	0x08011fe9
 8011f14:	08011fe9 	.word	0x08011fe9
 8011f18:	08011fe9 	.word	0x08011fe9
 8011f1c:	08011fe9 	.word	0x08011fe9
 8011f20:	08011fe9 	.word	0x08011fe9
 8011f24:	08011fe9 	.word	0x08011fe9
 8011f28:	08011fe9 	.word	0x08011fe9
 8011f2c:	08011fe9 	.word	0x08011fe9
 8011f30:	08011fe9 	.word	0x08011fe9
 8011f34:	08011fe9 	.word	0x08011fe9
 8011f38:	08011fe9 	.word	0x08011fe9
 8011f3c:	08011fe9 	.word	0x08011fe9
 8011f40:	08011fe9 	.word	0x08011fe9
 8011f44:	08011fe9 	.word	0x08011fe9
 8011f48:	08011fe9 	.word	0x08011fe9
 8011f4c:	08011fe9 	.word	0x08011fe9
 8011f50:	08011fe9 	.word	0x08011fe9
 8011f54:	08011fe9 	.word	0x08011fe9
 8011f58:	08011fe9 	.word	0x08011fe9
 8011f5c:	08011fe9 	.word	0x08011fe9
 8011f60:	08011fe9 	.word	0x08011fe9
 8011f64:	08011fe9 	.word	0x08011fe9
 8011f68:	08011fe9 	.word	0x08011fe9
 8011f6c:	08011fe9 	.word	0x08011fe9
 8011f70:	08011fe9 	.word	0x08011fe9
 8011f74:	08011fe9 	.word	0x08011fe9
 8011f78:	08011fe9 	.word	0x08011fe9
 8011f7c:	08011fe9 	.word	0x08011fe9
 8011f80:	08011fe9 	.word	0x08011fe9
 8011f84:	08011fe9 	.word	0x08011fe9
 8011f88:	08011fe9 	.word	0x08011fe9
 8011f8c:	08011fe9 	.word	0x08011fe9
 8011f90:	08011fe9 	.word	0x08011fe9
 8011f94:	08011fe9 	.word	0x08011fe9
 8011f98:	08011fe9 	.word	0x08011fe9
 8011f9c:	08011fe9 	.word	0x08011fe9
 8011fa0:	08011fe9 	.word	0x08011fe9
 8011fa4:	08011fe9 	.word	0x08011fe9
 8011fa8:	08011fe9 	.word	0x08011fe9
 8011fac:	08011fe9 	.word	0x08011fe9
 8011fb0:	08011fe9 	.word	0x08011fe9
 8011fb4:	08011fe9 	.word	0x08011fe9
 8011fb8:	08011fe9 	.word	0x08011fe9
 8011fbc:	08011fe9 	.word	0x08011fe9
 8011fc0:	08011fe9 	.word	0x08011fe9
 8011fc4:	08012047 	.word	0x08012047
 8011fc8:	08012023 	.word	0x08012023
 8011fcc:	08012011 	.word	0x08012011
 8011fd0:	08011fff 	.word	0x08011fff
 8011fd4:	08011fe9 	.word	0x08011fe9
 8011fd8:	08011fe9 	.word	0x08011fe9
 8011fdc:	08011fe9 	.word	0x08011fe9
 8011fe0:	08011fed 	.word	0x08011fed
 8011fe4:	08012035 	.word	0x08012035
 8011fe8:	2700      	movs	r7, #0
 8011fea:	e6c0      	b.n	8011d6e <dhcp_recv+0x132>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011fec:	4b62      	ldr	r3, [pc, #392]	@ (8012178 <dhcp_recv+0x53c>)
 8011fee:	f240 625d 	movw	r2, #1629	@ 0x65d
 8011ff2:	4962      	ldr	r1, [pc, #392]	@ (801217c <dhcp_recv+0x540>)
 8011ff4:	464c      	mov	r4, r9
 8011ff6:	4862      	ldr	r0, [pc, #392]	@ (8012180 <dhcp_recv+0x544>)
 8011ff8:	f002 fc8c 	bl	8014914 <iprintf>
 8011ffc:	e6ac      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8012178 <dhcp_recv+0x53c>)
 8012000:	f240 6259 	movw	r2, #1625	@ 0x659
 8012004:	495d      	ldr	r1, [pc, #372]	@ (801217c <dhcp_recv+0x540>)
 8012006:	464c      	mov	r4, r9
 8012008:	485d      	ldr	r0, [pc, #372]	@ (8012180 <dhcp_recv+0x544>)
 801200a:	f002 fc83 	bl	8014914 <iprintf>
 801200e:	e6a3      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012010:	4b59      	ldr	r3, [pc, #356]	@ (8012178 <dhcp_recv+0x53c>)
 8012012:	f240 6255 	movw	r2, #1621	@ 0x655
 8012016:	495b      	ldr	r1, [pc, #364]	@ (8012184 <dhcp_recv+0x548>)
 8012018:	464c      	mov	r4, r9
 801201a:	4859      	ldr	r0, [pc, #356]	@ (8012180 <dhcp_recv+0x544>)
 801201c:	f002 fc7a 	bl	8014914 <iprintf>
 8012020:	e69a      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012022:	4b55      	ldr	r3, [pc, #340]	@ (8012178 <dhcp_recv+0x53c>)
 8012024:	f240 624f 	movw	r2, #1615	@ 0x64f
 8012028:	4956      	ldr	r1, [pc, #344]	@ (8012184 <dhcp_recv+0x548>)
 801202a:	464c      	mov	r4, r9
 801202c:	4854      	ldr	r0, [pc, #336]	@ (8012180 <dhcp_recv+0x544>)
 801202e:	f002 fc71 	bl	8014914 <iprintf>
 8012032:	e691      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012034:	4b50      	ldr	r3, [pc, #320]	@ (8012178 <dhcp_recv+0x53c>)
 8012036:	f240 6261 	movw	r2, #1633	@ 0x661
 801203a:	4950      	ldr	r1, [pc, #320]	@ (801217c <dhcp_recv+0x540>)
 801203c:	464c      	mov	r4, r9
 801203e:	4850      	ldr	r0, [pc, #320]	@ (8012180 <dhcp_recv+0x544>)
 8012040:	f002 fc68 	bl	8014914 <iprintf>
 8012044:	e688      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012046:	4b4c      	ldr	r3, [pc, #304]	@ (8012178 <dhcp_recv+0x53c>)
 8012048:	f240 6241 	movw	r2, #1601	@ 0x641
 801204c:	494b      	ldr	r1, [pc, #300]	@ (801217c <dhcp_recv+0x540>)
 801204e:	464c      	mov	r4, r9
 8012050:	484b      	ldr	r0, [pc, #300]	@ (8012180 <dhcp_recv+0x544>)
 8012052:	f002 fc5f 	bl	8014914 <iprintf>
 8012056:	e67f      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012058:	4b47      	ldr	r3, [pc, #284]	@ (8012178 <dhcp_recv+0x53c>)
 801205a:	f240 6233 	movw	r2, #1587	@ 0x633
 801205e:	494a      	ldr	r1, [pc, #296]	@ (8012188 <dhcp_recv+0x54c>)
 8012060:	464c      	mov	r4, r9
 8012062:	4847      	ldr	r0, [pc, #284]	@ (8012180 <dhcp_recv+0x544>)
 8012064:	f002 fc56 	bl	8014914 <iprintf>
 8012068:	e676      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801206a:	4b43      	ldr	r3, [pc, #268]	@ (8012178 <dhcp_recv+0x53c>)
 801206c:	f240 622e 	movw	r2, #1582	@ 0x62e
 8012070:	4942      	ldr	r1, [pc, #264]	@ (801217c <dhcp_recv+0x540>)
 8012072:	464c      	mov	r4, r9
 8012074:	4842      	ldr	r0, [pc, #264]	@ (8012180 <dhcp_recv+0x544>)
 8012076:	f002 fc4d 	bl	8014914 <iprintf>
 801207a:	e66d      	b.n	8011d58 <dhcp_recv+0x11c>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801207c:	4b3e      	ldr	r3, [pc, #248]	@ (8012178 <dhcp_recv+0x53c>)
 801207e:	f240 629d 	movw	r2, #1693	@ 0x69d
 8012082:	4942      	ldr	r1, [pc, #264]	@ (801218c <dhcp_recv+0x550>)
 8012084:	464c      	mov	r4, r9
 8012086:	483e      	ldr	r0, [pc, #248]	@ (8012180 <dhcp_recv+0x544>)
 8012088:	f002 fc44 	bl	8014914 <iprintf>
 801208c:	e664      	b.n	8011d58 <dhcp_recv+0x11c>
      parse_sname_as_options = 1;
 801208e:	2301      	movs	r3, #1
 8012090:	9300      	str	r3, [sp, #0]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012092:	24ec      	movs	r4, #236	@ 0xec
    options_idx = DHCP_FILE_OFS;
 8012094:	276c      	movs	r7, #108	@ 0x6c
 8012096:	e727      	b.n	8011ee8 <dhcp_recv+0x2ac>
            value = lwip_ntohl(value);
 8012098:	9805      	ldr	r0, [sp, #20]
 801209a:	f7f9 f935 	bl	800b308 <lwip_htonl>
 801209e:	e69a      	b.n	8011dd6 <dhcp_recv+0x19a>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80120a0:	4b35      	ldr	r3, [pc, #212]	@ (8012178 <dhcp_recv+0x53c>)
 80120a2:	f240 6251 	movw	r2, #1617	@ 0x651
 80120a6:	493a      	ldr	r1, [pc, #232]	@ (8012190 <dhcp_recv+0x554>)
 80120a8:	464c      	mov	r4, r9
 80120aa:	4835      	ldr	r0, [pc, #212]	@ (8012180 <dhcp_recv+0x544>)
 80120ac:	f002 fc32 	bl	8014914 <iprintf>
 80120b0:	e652      	b.n	8011d58 <dhcp_recv+0x11c>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80120b2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80120b6:	464c      	mov	r4, r9
 80120b8:	f8dd a000 	ldr.w	sl, [sp]
 80120bc:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	f43f ae49 	beq.w	8011d58 <dhcp_recv+0x11c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80120c6:	4a2b      	ldr	r2, [pc, #172]	@ (8012174 <dhcp_recv+0x538>)
  msg_in = (struct dhcp_msg *)p->payload;
 80120c8:	f8d9 6004 	ldr.w	r6, [r9, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80120cc:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80120ce:	2b05      	cmp	r3, #5
 80120d0:	d01b      	beq.n	801210a <dhcp_recv+0x4ce>
  else if ((msg_type == DHCP_NAK) &&
 80120d2:	2b06      	cmp	r3, #6
 80120d4:	d028      	beq.n	8012128 <dhcp_recv+0x4ec>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80120d6:	2b02      	cmp	r3, #2
 80120d8:	f47f ae3e 	bne.w	8011d58 <dhcp_recv+0x11c>
 80120dc:	796b      	ldrb	r3, [r5, #5]
 80120de:	2b06      	cmp	r3, #6
 80120e0:	f47f ae3a 	bne.w	8011d58 <dhcp_recv+0x11c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80120e4:	f89b 3002 	ldrb.w	r3, [fp, #2]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80120e8:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	f43f ae34 	beq.w	8011d58 <dhcp_recv+0x11c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80120f0:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80120f2:	f8a5 a008 	strh.w	sl, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80120f6:	f7f9 f907 	bl	800b308 <lwip_htonl>
 80120fa:	4603      	mov	r3, r0
    dhcp_select(netif);
 80120fc:	4638      	mov	r0, r7
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80120fe:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012100:	6933      	ldr	r3, [r6, #16]
 8012102:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8012104:	f7ff fc76 	bl	80119f4 <dhcp_select.isra.0>
 8012108:	e626      	b.n	8011d58 <dhcp_recv+0x11c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801210a:	796b      	ldrb	r3, [r5, #5]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d025      	beq.n	801215c <dhcp_recv+0x520>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012110:	3b03      	subs	r3, #3
 8012112:	2b02      	cmp	r3, #2
 8012114:	f63f ae20 	bhi.w	8011d58 <dhcp_recv+0x11c>
      dhcp_handle_ack(netif, msg_in);
 8012118:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801211a:	4631      	mov	r1, r6
 801211c:	f7ff f9cc 	bl	80114b8 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8012120:	4638      	mov	r0, r7
 8012122:	f7ff f8bb 	bl	801129c <dhcp_bind>
 8012126:	e617      	b.n	8011d58 <dhcp_recv+0x11c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012128:	796b      	ldrb	r3, [r5, #5]
 801212a:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801212c:	2a02      	cmp	r2, #2
 801212e:	d902      	bls.n	8012136 <dhcp_recv+0x4fa>
 8012130:	2b01      	cmp	r3, #1
 8012132:	f47f ae11 	bne.w	8011d58 <dhcp_recv+0x11c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  if (new_state != dhcp->state) {
 8012138:	795a      	ldrb	r2, [r3, #5]
 801213a:	2a0c      	cmp	r2, #12
 801213c:	d004      	beq.n	8012148 <dhcp_recv+0x50c>
    dhcp->state = new_state;
 801213e:	210c      	movs	r1, #12
    dhcp->request_timeout = 0;
 8012140:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8012142:	f8a3 1005 	strh.w	r1, [r3, #5]
    dhcp->request_timeout = 0;
 8012146:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012148:	4b12      	ldr	r3, [pc, #72]	@ (8012194 <dhcp_recv+0x558>)
 801214a:	4638      	mov	r0, r7
 801214c:	461a      	mov	r2, r3
 801214e:	4619      	mov	r1, r3
 8012150:	f7f9 fd12 	bl	800bb78 <netif_set_addr>
  dhcp_discover(netif);
 8012154:	4638      	mov	r0, r7
 8012156:	f7ff fb7f 	bl	8011858 <dhcp_discover>
}
 801215a:	e5fd      	b.n	8011d58 <dhcp_recv+0x11c>
      dhcp_handle_ack(netif, msg_in);
 801215c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801215e:	4631      	mov	r1, r6
 8012160:	f7ff f9aa 	bl	80114b8 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012164:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
        dhcp_check(netif);
 8012168:	4638      	mov	r0, r7
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801216a:	071b      	lsls	r3, r3, #28
 801216c:	d5d9      	bpl.n	8012122 <dhcp_recv+0x4e6>
        dhcp_check(netif);
 801216e:	f7ff f87d 	bl	801126c <dhcp_check>
 8012172:	e5f1      	b.n	8011d58 <dhcp_recv+0x11c>
 8012174:	24010778 	.word	0x24010778
 8012178:	08018368 	.word	0x08018368
 801217c:	080185cc 	.word	0x080185cc
 8012180:	08015bd0 	.word	0x08015bd0
 8012184:	080185ec 	.word	0x080185ec
 8012188:	080185d8 	.word	0x080185d8
 801218c:	08018610 	.word	0x08018610
 8012190:	080185f8 	.word	0x080185f8
 8012194:	080189c0 	.word	0x080189c0

08012198 <dhcp_network_changed>:
{
 8012198:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801219a:	6a45      	ldr	r5, [r0, #36]	@ 0x24
  if (!dhcp) {
 801219c:	b135      	cbz	r5, 80121ac <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 801219e:	796b      	ldrb	r3, [r5, #5]
 80121a0:	4604      	mov	r4, r0
 80121a2:	2b05      	cmp	r3, #5
 80121a4:	d803      	bhi.n	80121ae <dhcp_network_changed+0x16>
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d813      	bhi.n	80121d2 <dhcp_network_changed+0x3a>
 80121aa:	b95b      	cbnz	r3, 80121c4 <dhcp_network_changed+0x2c>
}
 80121ac:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 80121ae:	2b0a      	cmp	r3, #10
 80121b0:	d00f      	beq.n	80121d2 <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80121b2:	2b0c      	cmp	r3, #12
 80121b4:	d906      	bls.n	80121c4 <dhcp_network_changed+0x2c>
 80121b6:	4b0a      	ldr	r3, [pc, #40]	@ (80121e0 <dhcp_network_changed+0x48>)
 80121b8:	f240 326d 	movw	r2, #877	@ 0x36d
 80121bc:	4909      	ldr	r1, [pc, #36]	@ (80121e4 <dhcp_network_changed+0x4c>)
 80121be:	480a      	ldr	r0, [pc, #40]	@ (80121e8 <dhcp_network_changed+0x50>)
 80121c0:	f002 fba8 	bl	8014914 <iprintf>
      dhcp->tries = 0;
 80121c4:	2300      	movs	r3, #0
      dhcp_discover(netif);
 80121c6:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80121c8:	71ab      	strb	r3, [r5, #6]
}
 80121ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 80121ce:	f7ff bb43 	b.w	8011858 <dhcp_discover>
      dhcp->tries = 0;
 80121d2:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 80121d4:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80121d6:	71ab      	strb	r3, [r5, #6]
}
 80121d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 80121dc:	f7ff ba5a 	b.w	8011694 <dhcp_reboot.isra.0>
 80121e0:	08018368 	.word	0x08018368
 80121e4:	08018658 	.word	0x08018658
 80121e8:	08015bd0 	.word	0x08015bd0

080121ec <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d061      	beq.n	80122b4 <dhcp_arp_reply+0xc8>
{
 80121f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dhcp = netif_dhcp_data(netif);
 80121f4:	6a45      	ldr	r5, [r0, #36]	@ 0x24
{
 80121f6:	b084      	sub	sp, #16
 80121f8:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80121fa:	b115      	cbz	r5, 8012202 <dhcp_arp_reply+0x16>
 80121fc:	796b      	ldrb	r3, [r5, #5]
 80121fe:	2b08      	cmp	r3, #8
 8012200:	d002      	beq.n	8012208 <dhcp_arp_reply+0x1c>
}
 8012202:	b004      	add	sp, #16
 8012204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012208:	680a      	ldr	r2, [r1, #0]
 801220a:	69eb      	ldr	r3, [r5, #28]
 801220c:	429a      	cmp	r2, r3
 801220e:	d1f8      	bne.n	8012202 <dhcp_arp_reply+0x16>
    dhcp->state = new_state;
 8012210:	220c      	movs	r2, #12
    dhcp->request_timeout = 0;
 8012212:	2300      	movs	r3, #0
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012214:	4629      	mov	r1, r5
    dhcp->state = new_state;
 8012216:	f8a5 2005 	strh.w	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801221a:	2204      	movs	r2, #4
    dhcp->request_timeout = 0;
 801221c:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801221e:	f10d 030e 	add.w	r3, sp, #14
 8012222:	f7ff f989 	bl	8011538 <dhcp_create_msg>
  if (p_out != NULL) {
 8012226:	4606      	mov	r6, r0
 8012228:	2800      	cmp	r0, #0
 801222a:	d03b      	beq.n	80122a4 <dhcp_arp_reply+0xb8>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801222c:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8012230:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012232:	f108 0306 	add.w	r3, r8, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012236:	37f0      	adds	r7, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012238:	2b44      	cmp	r3, #68	@ 0x44
 801223a:	d842      	bhi.n	80122c2 <dhcp_arp_reply+0xd6>
  options[options_out_len++] = option_type;
 801223c:	f108 0301 	add.w	r3, r8, #1
 8012240:	2232      	movs	r2, #50	@ 0x32
  options[options_out_len++] = option_len;
 8012242:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8012244:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8012248:	2204      	movs	r2, #4
 801224a:	f108 0802 	add.w	r8, r8, #2
 801224e:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012250:	69e8      	ldr	r0, [r5, #28]
 8012252:	f7f9 f859 	bl	800b308 <lwip_htonl>
 8012256:	4639      	mov	r1, r7
 8012258:	4602      	mov	r2, r0
 801225a:	fa1f f088 	uxth.w	r0, r8
 801225e:	f7fe ffe1 	bl	8011224 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8012262:	1c41      	adds	r1, r0, #1
 8012264:	23ff      	movs	r3, #255	@ 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012266:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8012268:	b289      	uxth	r1, r1
 801226a:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801226c:	2943      	cmp	r1, #67	@ 0x43
 801226e:	d807      	bhi.n	8012280 <dhcp_arp_reply+0x94>
    options[options_out_len++] = 0;
 8012270:	f1c2 0243 	rsb	r2, r2, #67	@ 0x43
 8012274:	1878      	adds	r0, r7, r1
 8012276:	2100      	movs	r1, #0
 8012278:	b292      	uxth	r2, r2
 801227a:	f002 fbfe 	bl	8014a7a <memset>
 801227e:	2144      	movs	r1, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012280:	31f0      	adds	r1, #240	@ 0xf0
 8012282:	4630      	mov	r0, r6
 8012284:	b289      	uxth	r1, r1
 8012286:	f7fa f86d 	bl	800c364 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801228a:	4912      	ldr	r1, [pc, #72]	@ (80122d4 <dhcp_arp_reply+0xe8>)
 801228c:	4a12      	ldr	r2, [pc, #72]	@ (80122d8 <dhcp_arp_reply+0xec>)
 801228e:	2343      	movs	r3, #67	@ 0x43
 8012290:	9400      	str	r4, [sp, #0]
 8012292:	6808      	ldr	r0, [r1, #0]
 8012294:	4631      	mov	r1, r6
 8012296:	9201      	str	r2, [sp, #4]
 8012298:	4a10      	ldr	r2, [pc, #64]	@ (80122dc <dhcp_arp_reply+0xf0>)
 801229a:	f7fe fd67 	bl	8010d6c <udp_sendto_if_src>
    pbuf_free(p_out);
 801229e:	4630      	mov	r0, r6
 80122a0:	f7f9 ff48 	bl	800c134 <pbuf_free>
  if (dhcp->tries < 255) {
 80122a4:	79ab      	ldrb	r3, [r5, #6]
 80122a6:	2bff      	cmp	r3, #255	@ 0xff
 80122a8:	d001      	beq.n	80122ae <dhcp_arp_reply+0xc2>
    dhcp->tries++;
 80122aa:	3301      	adds	r3, #1
 80122ac:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80122ae:	2314      	movs	r3, #20
 80122b0:	812b      	strh	r3, [r5, #8]
  return result;
 80122b2:	e7a6      	b.n	8012202 <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80122b4:	4b0a      	ldr	r3, [pc, #40]	@ (80122e0 <dhcp_arp_reply+0xf4>)
 80122b6:	f240 328b 	movw	r2, #907	@ 0x38b
 80122ba:	490a      	ldr	r1, [pc, #40]	@ (80122e4 <dhcp_arp_reply+0xf8>)
 80122bc:	480a      	ldr	r0, [pc, #40]	@ (80122e8 <dhcp_arp_reply+0xfc>)
 80122be:	f002 bb29 	b.w	8014914 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80122c2:	4b07      	ldr	r3, [pc, #28]	@ (80122e0 <dhcp_arp_reply+0xf4>)
 80122c4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80122c8:	4908      	ldr	r1, [pc, #32]	@ (80122ec <dhcp_arp_reply+0x100>)
 80122ca:	4807      	ldr	r0, [pc, #28]	@ (80122e8 <dhcp_arp_reply+0xfc>)
 80122cc:	f002 fb22 	bl	8014914 <iprintf>
 80122d0:	e7b4      	b.n	801223c <dhcp_arp_reply+0x50>
 80122d2:	bf00      	nop
 80122d4:	2401076c 	.word	0x2401076c
 80122d8:	080189c0 	.word	0x080189c0
 80122dc:	080189bc 	.word	0x080189bc
 80122e0:	08018368 	.word	0x08018368
 80122e4:	08015bc0 	.word	0x08015bc0
 80122e8:	08015bd0 	.word	0x08015bd0
 80122ec:	080184dc 	.word	0x080184dc

080122f0 <dhcp_renew>:
{
 80122f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80122f4:	6a47      	ldr	r7, [r0, #36]	@ 0x24
{
 80122f6:	b087      	sub	sp, #28
 80122f8:	4683      	mov	fp, r0
  LWIP_ASSERT_CORE_LOCKED();
 80122fa:	f7f3 fffd 	bl	80062f8 <sys_check_core_locking>
  if (new_state != dhcp->state) {
 80122fe:	797b      	ldrb	r3, [r7, #5]
 8012300:	2b05      	cmp	r3, #5
 8012302:	d004      	beq.n	801230e <dhcp_renew+0x1e>
    dhcp->state = new_state;
 8012304:	2205      	movs	r2, #5
    dhcp->request_timeout = 0;
 8012306:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8012308:	f8a7 2005 	strh.w	r2, [r7, #5]
    dhcp->request_timeout = 0;
 801230c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801230e:	f10d 0316 	add.w	r3, sp, #22
 8012312:	2203      	movs	r2, #3
 8012314:	4639      	mov	r1, r7
 8012316:	4658      	mov	r0, fp
 8012318:	f7ff f90e 	bl	8011538 <dhcp_create_msg>
  if (p_out != NULL) {
 801231c:	4680      	mov	r8, r0
 801231e:	2800      	cmp	r0, #0
 8012320:	f000 80a5 	beq.w	801246e <dhcp_renew+0x17e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012324:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 8012328:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801232a:	1d2c      	adds	r4, r5, #4
 801232c:	f105 0902 	add.w	r9, r5, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012330:	36f0      	adds	r6, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012332:	2c44      	cmp	r4, #68	@ 0x44
 8012334:	f200 8083 	bhi.w	801243e <dhcp_renew+0x14e>
  options[options_out_len++] = option_type;
 8012338:	2239      	movs	r2, #57	@ 0x39
 801233a:	1c6b      	adds	r3, r5, #1
 801233c:	fa1f f989 	uxth.w	r9, r9
 8012340:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8012342:	b29b      	uxth	r3, r3
 8012344:	2202      	movs	r2, #2
 8012346:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012348:	eb09 0302 	add.w	r3, r9, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801234c:	f8bb a028 	ldrh.w	sl, [fp, #40]	@ 0x28
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012350:	2b44      	cmp	r3, #68	@ 0x44
 8012352:	f200 8084 	bhi.w	801245e <dhcp_renew+0x16e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012356:	1ceb      	adds	r3, r5, #3
 8012358:	b2a4      	uxth	r4, r4
 801235a:	ea4f 221a 	mov.w	r2, sl, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801235e:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012360:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012364:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012368:	1d63      	adds	r3, r4, #5
 801236a:	2b44      	cmp	r3, #68	@ 0x44
 801236c:	d86f      	bhi.n	801244e <dhcp_renew+0x15e>
  options[options_out_len++] = option_type;
 801236e:	2237      	movs	r2, #55	@ 0x37
 8012370:	1d6b      	adds	r3, r5, #5
 8012372:	f105 0909 	add.w	r9, r5, #9
 8012376:	f8df a118 	ldr.w	sl, [pc, #280]	@ 8012490 <dhcp_renew+0x1a0>
 801237a:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 801237c:	1dac      	adds	r4, r5, #6
 801237e:	b29b      	uxth	r3, r3
 8012380:	2203      	movs	r2, #3
 8012382:	b2a4      	uxth	r4, r4
 8012384:	9503      	str	r5, [sp, #12]
 8012386:	fa1f f989 	uxth.w	r9, r9
 801238a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801238c:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801238e:	f81a 5b01 	ldrb.w	r5, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012392:	d846      	bhi.n	8012422 <dhcp_renew+0x132>
  options[options_out_len++] = value;
 8012394:	1c63      	adds	r3, r4, #1
 8012396:	5535      	strb	r5, [r6, r4]
 8012398:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801239a:	4599      	cmp	r9, r3
  options[options_out_len++] = value;
 801239c:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801239e:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80123a2:	d1f3      	bne.n	801238c <dhcp_renew+0x9c>
  options[options_out_len++] = DHCP_OPTION_END;
 80123a4:	9d03      	ldr	r5, [sp, #12]
 80123a6:	23ff      	movs	r3, #255	@ 0xff
 80123a8:	f105 000a 	add.w	r0, r5, #10
 80123ac:	f806 3009 	strb.w	r3, [r6, r9]
 80123b0:	b280      	uxth	r0, r0
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80123b2:	2843      	cmp	r0, #67	@ 0x43
 80123b4:	d808      	bhi.n	80123c8 <dhcp_renew+0xd8>
    options[options_out_len++] = 0;
 80123b6:	f1c5 0239 	rsb	r2, r5, #57	@ 0x39
 80123ba:	4430      	add	r0, r6
 80123bc:	2100      	movs	r1, #0
 80123be:	b292      	uxth	r2, r2
 80123c0:	3201      	adds	r2, #1
 80123c2:	f002 fb5a 	bl	8014a7a <memset>
 80123c6:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80123c8:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 80123cc:	4640      	mov	r0, r8
 80123ce:	b289      	uxth	r1, r1
 80123d0:	f7f9 ffc8 	bl	800c364 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80123d4:	4a27      	ldr	r2, [pc, #156]	@ (8012474 <dhcp_renew+0x184>)
 80123d6:	f8cd b000 	str.w	fp, [sp]
 80123da:	2343      	movs	r3, #67	@ 0x43
 80123dc:	6810      	ldr	r0, [r2, #0]
 80123de:	4641      	mov	r1, r8
 80123e0:	f107 0218 	add.w	r2, r7, #24
 80123e4:	f7fe fd72 	bl	8010ecc <udp_sendto_if>
 80123e8:	4604      	mov	r4, r0
    pbuf_free(p_out);
 80123ea:	4640      	mov	r0, r8
 80123ec:	f7f9 fea2 	bl	800c134 <pbuf_free>
  if (dhcp->tries < 255) {
 80123f0:	79bb      	ldrb	r3, [r7, #6]
 80123f2:	2bff      	cmp	r3, #255	@ 0xff
 80123f4:	d01d      	beq.n	8012432 <dhcp_renew+0x142>
    dhcp->tries++;
 80123f6:	3301      	adds	r3, #1
 80123f8:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80123fa:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80123fc:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80123fe:	d818      	bhi.n	8012432 <dhcp_renew+0x142>
 8012400:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012404:	4a1c      	ldr	r2, [pc, #112]	@ (8012478 <dhcp_renew+0x188>)
}
 8012406:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012408:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801240c:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801240e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012412:	b29b      	uxth	r3, r3
 8012414:	fba2 2303 	umull	r2, r3, r2, r3
 8012418:	095b      	lsrs	r3, r3, #5
 801241a:	813b      	strh	r3, [r7, #8]
}
 801241c:	b007      	add	sp, #28
 801241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012422:	4b16      	ldr	r3, [pc, #88]	@ (801247c <dhcp_renew+0x18c>)
 8012424:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8012428:	4915      	ldr	r1, [pc, #84]	@ (8012480 <dhcp_renew+0x190>)
 801242a:	4816      	ldr	r0, [pc, #88]	@ (8012484 <dhcp_renew+0x194>)
 801242c:	f002 fa72 	bl	8014914 <iprintf>
 8012430:	e7b0      	b.n	8012394 <dhcp_renew+0xa4>
    result = ERR_MEM;
 8012432:	2328      	movs	r3, #40	@ 0x28
}
 8012434:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012436:	813b      	strh	r3, [r7, #8]
}
 8012438:	b007      	add	sp, #28
 801243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801243e:	4b0f      	ldr	r3, [pc, #60]	@ (801247c <dhcp_renew+0x18c>)
 8012440:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012444:	4910      	ldr	r1, [pc, #64]	@ (8012488 <dhcp_renew+0x198>)
 8012446:	480f      	ldr	r0, [pc, #60]	@ (8012484 <dhcp_renew+0x194>)
 8012448:	f002 fa64 	bl	8014914 <iprintf>
 801244c:	e774      	b.n	8012338 <dhcp_renew+0x48>
 801244e:	4b0b      	ldr	r3, [pc, #44]	@ (801247c <dhcp_renew+0x18c>)
 8012450:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012454:	490c      	ldr	r1, [pc, #48]	@ (8012488 <dhcp_renew+0x198>)
 8012456:	480b      	ldr	r0, [pc, #44]	@ (8012484 <dhcp_renew+0x194>)
 8012458:	f002 fa5c 	bl	8014914 <iprintf>
 801245c:	e787      	b.n	801236e <dhcp_renew+0x7e>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801245e:	4b07      	ldr	r3, [pc, #28]	@ (801247c <dhcp_renew+0x18c>)
 8012460:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8012464:	4909      	ldr	r1, [pc, #36]	@ (801248c <dhcp_renew+0x19c>)
 8012466:	4807      	ldr	r0, [pc, #28]	@ (8012484 <dhcp_renew+0x194>)
 8012468:	f002 fa54 	bl	8014914 <iprintf>
 801246c:	e773      	b.n	8012356 <dhcp_renew+0x66>
    result = ERR_MEM;
 801246e:	f04f 34ff 	mov.w	r4, #4294967295
 8012472:	e7bd      	b.n	80123f0 <dhcp_renew+0x100>
 8012474:	2401076c 	.word	0x2401076c
 8012478:	10624dd3 	.word	0x10624dd3
 801247c:	08018368 	.word	0x08018368
 8012480:	0801855c 	.word	0x0801855c
 8012484:	08015bd0 	.word	0x08015bd0
 8012488:	080184dc 	.word	0x080184dc
 801248c:	08018520 	.word	0x08018520
 8012490:	08018690 	.word	0x08018690

08012494 <dhcp_release_and_stop>:
{
 8012494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012498:	6a44      	ldr	r4, [r0, #36]	@ 0x24
{
 801249a:	b084      	sub	sp, #16
 801249c:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 801249e:	f7f3 ff2b 	bl	80062f8 <sys_check_core_locking>
  if (dhcp == NULL) {
 80124a2:	2c00      	cmp	r4, #0
 80124a4:	d06b      	beq.n	801257e <dhcp_release_and_stop+0xea>
  if (dhcp->state == DHCP_STATE_OFF) {
 80124a6:	7963      	ldrb	r3, [r4, #5]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d068      	beq.n	801257e <dhcp_release_and_stop+0xea>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80124ac:	2300      	movs	r3, #0
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80124ae:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80124b0:	69a1      	ldr	r1, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80124b2:	62a3      	str	r3, [r4, #40]	@ 0x28
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80124b4:	9103      	str	r1, [sp, #12]
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80124b6:	f8c4 300e 	str.w	r3, [r4, #14]
 80124ba:	f8c4 3012 	str.w	r3, [r4, #18]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80124be:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80124c2:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80124c6:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80124ca:	2a00      	cmp	r2, #0
 80124cc:	d049      	beq.n	8012562 <dhcp_release_and_stop+0xce>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80124ce:	7953      	ldrb	r3, [r2, #5]
 80124d0:	1f1a      	subs	r2, r3, #4
 80124d2:	2a01      	cmp	r2, #1
 80124d4:	d901      	bls.n	80124da <dhcp_release_and_stop+0x46>
 80124d6:	2b0a      	cmp	r3, #10
 80124d8:	d143      	bne.n	8012562 <dhcp_release_and_stop+0xce>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80124da:	f10d 030a 	add.w	r3, sp, #10
 80124de:	2207      	movs	r2, #7
 80124e0:	4621      	mov	r1, r4
 80124e2:	4628      	mov	r0, r5
 80124e4:	f7ff f828 	bl	8011538 <dhcp_create_msg>
    if (p_out != NULL) {
 80124e8:	4606      	mov	r6, r0
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d039      	beq.n	8012562 <dhcp_release_and_stop+0xce>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80124ee:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 80124f2:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80124f4:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80124f8:	37f0      	adds	r7, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80124fa:	2b44      	cmp	r3, #68	@ 0x44
 80124fc:	d849      	bhi.n	8012592 <dhcp_release_and_stop+0xfe>
  options[options_out_len++] = option_type;
 80124fe:	f108 0301 	add.w	r3, r8, #1
 8012502:	2236      	movs	r2, #54	@ 0x36
  options[options_out_len++] = option_len;
 8012504:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8012506:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 801250a:	2204      	movs	r2, #4
 801250c:	f108 0802 	add.w	r8, r8, #2
 8012510:	54fa      	strb	r2, [r7, r3]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012512:	9803      	ldr	r0, [sp, #12]
 8012514:	f7f8 fef8 	bl	800b308 <lwip_htonl>
 8012518:	4639      	mov	r1, r7
 801251a:	4602      	mov	r2, r0
 801251c:	fa1f f088 	uxth.w	r0, r8
 8012520:	f7fe fe80 	bl	8011224 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8012524:	1c41      	adds	r1, r0, #1
 8012526:	23ff      	movs	r3, #255	@ 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012528:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 801252a:	b289      	uxth	r1, r1
 801252c:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801252e:	2943      	cmp	r1, #67	@ 0x43
 8012530:	d807      	bhi.n	8012542 <dhcp_release_and_stop+0xae>
    options[options_out_len++] = 0;
 8012532:	f1c2 0243 	rsb	r2, r2, #67	@ 0x43
 8012536:	1878      	adds	r0, r7, r1
 8012538:	2100      	movs	r1, #0
 801253a:	b292      	uxth	r2, r2
 801253c:	f002 fa9d 	bl	8014a7a <memset>
 8012540:	2144      	movs	r1, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012542:	31f0      	adds	r1, #240	@ 0xf0
 8012544:	4630      	mov	r0, r6
 8012546:	b289      	uxth	r1, r1
 8012548:	f7f9 ff0c 	bl	800c364 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801254c:	4a15      	ldr	r2, [pc, #84]	@ (80125a4 <dhcp_release_and_stop+0x110>)
 801254e:	9500      	str	r5, [sp, #0]
 8012550:	2343      	movs	r3, #67	@ 0x43
 8012552:	6810      	ldr	r0, [r2, #0]
 8012554:	4631      	mov	r1, r6
 8012556:	aa03      	add	r2, sp, #12
 8012558:	f7fe fcb8 	bl	8010ecc <udp_sendto_if>
      pbuf_free(p_out);
 801255c:	4630      	mov	r0, r6
 801255e:	f7f9 fde9 	bl	800c134 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012562:	4b11      	ldr	r3, [pc, #68]	@ (80125a8 <dhcp_release_and_stop+0x114>)
 8012564:	4628      	mov	r0, r5
 8012566:	461a      	mov	r2, r3
 8012568:	4619      	mov	r1, r3
 801256a:	f7f9 fb05 	bl	800bb78 <netif_set_addr>
  if (new_state != dhcp->state) {
 801256e:	7963      	ldrb	r3, [r4, #5]
 8012570:	b11b      	cbz	r3, 801257a <dhcp_release_and_stop+0xe6>
    dhcp->state = new_state;
 8012572:	2300      	movs	r3, #0
 8012574:	f8a4 3005 	strh.w	r3, [r4, #5]
    dhcp->request_timeout = 0;
 8012578:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 801257a:	7923      	ldrb	r3, [r4, #4]
 801257c:	b913      	cbnz	r3, 8012584 <dhcp_release_and_stop+0xf0>
}
 801257e:	b004      	add	sp, #16
 8012580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012584:	f7fe ff76 	bl	8011474 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8012588:	2300      	movs	r3, #0
 801258a:	7123      	strb	r3, [r4, #4]
}
 801258c:	b004      	add	sp, #16
 801258e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012592:	4b06      	ldr	r3, [pc, #24]	@ (80125ac <dhcp_release_and_stop+0x118>)
 8012594:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012598:	4905      	ldr	r1, [pc, #20]	@ (80125b0 <dhcp_release_and_stop+0x11c>)
 801259a:	4806      	ldr	r0, [pc, #24]	@ (80125b4 <dhcp_release_and_stop+0x120>)
 801259c:	f002 f9ba 	bl	8014914 <iprintf>
 80125a0:	e7ad      	b.n	80124fe <dhcp_release_and_stop+0x6a>
 80125a2:	bf00      	nop
 80125a4:	2401076c 	.word	0x2401076c
 80125a8:	080189c0 	.word	0x080189c0
 80125ac:	08018368 	.word	0x08018368
 80125b0:	080184dc 	.word	0x080184dc
 80125b4:	08015bd0 	.word	0x08015bd0

080125b8 <dhcp_start>:
{
 80125b8:	b570      	push	{r4, r5, r6, lr}
 80125ba:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80125bc:	f7f3 fe9c 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80125c0:	2c00      	cmp	r4, #0
 80125c2:	d043      	beq.n	801264c <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80125c4:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 80125c8:	07da      	lsls	r2, r3, #31
 80125ca:	d535      	bpl.n	8012638 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80125cc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  dhcp = netif_dhcp_data(netif);
 80125ce:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80125d0:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80125d4:	d322      	bcc.n	801261c <dhcp_start+0x64>
  if (dhcp == NULL) {
 80125d6:	b33d      	cbz	r5, 8012628 <dhcp_start+0x70>
    if (dhcp->pcb_allocated != 0) {
 80125d8:	792b      	ldrb	r3, [r5, #4]
 80125da:	bb13      	cbnz	r3, 8012622 <dhcp_start+0x6a>
  memset(dhcp, 0, sizeof(struct dhcp));
 80125dc:	2234      	movs	r2, #52	@ 0x34
 80125de:	2100      	movs	r1, #0
 80125e0:	4628      	mov	r0, r5
 80125e2:	f002 fa4a 	bl	8014a7a <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80125e6:	f7fe ff0b 	bl	8011400 <dhcp_inc_pcb_refcount>
 80125ea:	4606      	mov	r6, r0
 80125ec:	b9b0      	cbnz	r0, 801261c <dhcp_start+0x64>
  dhcp->pcb_allocated = 1;
 80125ee:	2301      	movs	r3, #1
 80125f0:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 80125f2:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 80125f6:	075b      	lsls	r3, r3, #29
 80125f8:	d408      	bmi.n	801260c <dhcp_start+0x54>
  if (new_state != dhcp->state) {
 80125fa:	796b      	ldrb	r3, [r5, #5]
 80125fc:	2b02      	cmp	r3, #2
 80125fe:	d003      	beq.n	8012608 <dhcp_start+0x50>
    dhcp->state = new_state;
 8012600:	2302      	movs	r3, #2
    dhcp->request_timeout = 0;
 8012602:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8012604:	f8a5 3005 	strh.w	r3, [r5, #5]
}
 8012608:	4630      	mov	r0, r6
 801260a:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801260c:	4620      	mov	r0, r4
 801260e:	f7ff f923 	bl	8011858 <dhcp_discover>
  if (result != ERR_OK) {
 8012612:	2800      	cmp	r0, #0
 8012614:	d0f8      	beq.n	8012608 <dhcp_start+0x50>
    dhcp_release_and_stop(netif);
 8012616:	4620      	mov	r0, r4
 8012618:	f7ff ff3c 	bl	8012494 <dhcp_release_and_stop>
    return ERR_MEM;
 801261c:	f04f 36ff 	mov.w	r6, #4294967295
 8012620:	e7f2      	b.n	8012608 <dhcp_start+0x50>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012622:	f7fe ff27 	bl	8011474 <dhcp_dec_pcb_refcount>
 8012626:	e7d9      	b.n	80125dc <dhcp_start+0x24>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012628:	2034      	movs	r0, #52	@ 0x34
 801262a:	f7f9 f8d3 	bl	800b7d4 <mem_malloc>
    if (dhcp == NULL) {
 801262e:	4605      	mov	r5, r0
 8012630:	2800      	cmp	r0, #0
 8012632:	d0f3      	beq.n	801261c <dhcp_start+0x64>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012634:	6260      	str	r0, [r4, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8012636:	e7d1      	b.n	80125dc <dhcp_start+0x24>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012638:	4b08      	ldr	r3, [pc, #32]	@ (801265c <dhcp_start+0xa4>)
 801263a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801263e:	4908      	ldr	r1, [pc, #32]	@ (8012660 <dhcp_start+0xa8>)
 8012640:	4808      	ldr	r0, [pc, #32]	@ (8012664 <dhcp_start+0xac>)
 8012642:	f002 f967 	bl	8014914 <iprintf>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012646:	f06f 060f 	mvn.w	r6, #15
 801264a:	e7dd      	b.n	8012608 <dhcp_start+0x50>
 801264c:	4b03      	ldr	r3, [pc, #12]	@ (801265c <dhcp_start+0xa4>)
 801264e:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8012652:	4905      	ldr	r1, [pc, #20]	@ (8012668 <dhcp_start+0xb0>)
 8012654:	4803      	ldr	r0, [pc, #12]	@ (8012664 <dhcp_start+0xac>)
 8012656:	f002 f95d 	bl	8014914 <iprintf>
 801265a:	e7f4      	b.n	8012646 <dhcp_start+0x8e>
 801265c:	08018368 	.word	0x08018368
 8012660:	0801866c 	.word	0x0801866c
 8012664:	08015bd0 	.word	0x08015bd0
 8012668:	08015bc0 	.word	0x08015bc0

0801266c <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 801266c:	4b7d      	ldr	r3, [pc, #500]	@ (8012864 <dhcp_coarse_tmr+0x1f8>)
{
 801266e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8012672:	681d      	ldr	r5, [r3, #0]
{
 8012674:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8012676:	b1d5      	cbz	r5, 80126ae <dhcp_coarse_tmr+0x42>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012678:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801267a:	b1ac      	cbz	r4, 80126a8 <dhcp_coarse_tmr+0x3c>
 801267c:	7963      	ldrb	r3, [r4, #5]
 801267e:	b19b      	cbz	r3, 80126a8 <dhcp_coarse_tmr+0x3c>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012680:	8aa1      	ldrh	r1, [r4, #20]
 8012682:	b129      	cbz	r1, 8012690 <dhcp_coarse_tmr+0x24>
 8012684:	8a62      	ldrh	r2, [r4, #18]
 8012686:	3201      	adds	r2, #1
 8012688:	b292      	uxth	r2, r2
 801268a:	4291      	cmp	r1, r2
 801268c:	8262      	strh	r2, [r4, #18]
 801268e:	d011      	beq.n	80126b4 <dhcp_coarse_tmr+0x48>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012690:	8a22      	ldrh	r2, [r4, #16]
 8012692:	b11a      	cbz	r2, 801269c <dhcp_coarse_tmr+0x30>
 8012694:	1e51      	subs	r1, r2, #1
 8012696:	2a01      	cmp	r2, #1
 8012698:	8221      	strh	r1, [r4, #16]
 801269a:	d012      	beq.n	80126c2 <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801269c:	89e2      	ldrh	r2, [r4, #14]
 801269e:	b11a      	cbz	r2, 80126a8 <dhcp_coarse_tmr+0x3c>
 80126a0:	1e51      	subs	r1, r2, #1
 80126a2:	2a01      	cmp	r2, #1
 80126a4:	81e1      	strh	r1, [r4, #14]
 80126a6:	d015      	beq.n	80126d4 <dhcp_coarse_tmr+0x68>
  NETIF_FOREACH(netif) {
 80126a8:	682d      	ldr	r5, [r5, #0]
 80126aa:	2d00      	cmp	r5, #0
 80126ac:	d1e4      	bne.n	8012678 <dhcp_coarse_tmr+0xc>
}
 80126ae:	b007      	add	sp, #28
 80126b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 80126b4:	4628      	mov	r0, r5
 80126b6:	f7ff feed 	bl	8012494 <dhcp_release_and_stop>
        dhcp_start(netif);
 80126ba:	4628      	mov	r0, r5
 80126bc:	f7ff ff7c 	bl	80125b8 <dhcp_start>
 80126c0:	e7f2      	b.n	80126a8 <dhcp_coarse_tmr+0x3c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80126c2:	f003 02fb 	and.w	r2, r3, #251	@ 0xfb
 80126c6:	2a01      	cmp	r2, #1
 80126c8:	d015      	beq.n	80126f6 <dhcp_coarse_tmr+0x8a>
 80126ca:	2b0a      	cmp	r3, #10
 80126cc:	d013      	beq.n	80126f6 <dhcp_coarse_tmr+0x8a>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80126ce:	2b04      	cmp	r3, #4
 80126d0:	d1ea      	bne.n	80126a8 <dhcp_coarse_tmr+0x3c>
 80126d2:	e015      	b.n	8012700 <dhcp_coarse_tmr+0x94>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80126d4:	f003 02fb 	and.w	r2, r3, #251	@ 0xfb
 80126d8:	2a01      	cmp	r2, #1
 80126da:	d001      	beq.n	80126e0 <dhcp_coarse_tmr+0x74>
 80126dc:	2b0a      	cmp	r3, #10
 80126de:	d1e3      	bne.n	80126a8 <dhcp_coarse_tmr+0x3c>
    dhcp_renew(netif);
 80126e0:	4628      	mov	r0, r5
 80126e2:	f7ff fe05 	bl	80122f0 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80126e6:	89a3      	ldrh	r3, [r4, #12]
 80126e8:	8a62      	ldrh	r2, [r4, #18]
 80126ea:	1a9b      	subs	r3, r3, r2
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	dddb      	ble.n	80126a8 <dhcp_coarse_tmr+0x3c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80126f0:	105b      	asrs	r3, r3, #1
 80126f2:	81e3      	strh	r3, [r4, #14]
 80126f4:	e7d8      	b.n	80126a8 <dhcp_coarse_tmr+0x3c>
    dhcp->state = new_state;
 80126f6:	2204      	movs	r2, #4
    dhcp->request_timeout = 0;
 80126f8:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80126fa:	f8a4 2005 	strh.w	r2, [r4, #5]
    dhcp->request_timeout = 0;
 80126fe:	8123      	strh	r3, [r4, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012700:	f10d 0316 	add.w	r3, sp, #22
 8012704:	2203      	movs	r2, #3
 8012706:	4621      	mov	r1, r4
 8012708:	4628      	mov	r0, r5
 801270a:	f7fe ff15 	bl	8011538 <dhcp_create_msg>
  if (p_out != NULL) {
 801270e:	4681      	mov	r9, r0
 8012710:	2800      	cmp	r0, #0
 8012712:	d067      	beq.n	80127e4 <dhcp_coarse_tmr+0x178>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012714:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8012718:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801271a:	1d3e      	adds	r6, r7, #4
 801271c:	f107 0a02 	add.w	sl, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012720:	f103 08f0 	add.w	r8, r3, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012724:	2e44      	cmp	r6, #68	@ 0x44
 8012726:	f200 8085 	bhi.w	8012834 <dhcp_coarse_tmr+0x1c8>
  options[options_out_len++] = option_type;
 801272a:	2239      	movs	r2, #57	@ 0x39
 801272c:	1c7b      	adds	r3, r7, #1
 801272e:	fa1f fa8a 	uxth.w	sl, sl
 8012732:	f808 2007 	strb.w	r2, [r8, r7]
  options[options_out_len++] = option_len;
 8012736:	b29b      	uxth	r3, r3
 8012738:	2202      	movs	r2, #2
 801273a:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801273e:	eb0a 0302 	add.w	r3, sl, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012742:	f8b5 b028 	ldrh.w	fp, [r5, #40]	@ 0x28
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012746:	2b44      	cmp	r3, #68	@ 0x44
 8012748:	f200 8084 	bhi.w	8012854 <dhcp_coarse_tmr+0x1e8>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801274c:	1cfb      	adds	r3, r7, #3
 801274e:	b2b6      	uxth	r6, r6
 8012750:	ea4f 221b 	mov.w	r2, fp, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012754:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012756:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801275a:	f808 b003 	strb.w	fp, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801275e:	1d73      	adds	r3, r6, #5
 8012760:	2b44      	cmp	r3, #68	@ 0x44
 8012762:	d86f      	bhi.n	8012844 <dhcp_coarse_tmr+0x1d8>
  options[options_out_len++] = option_type;
 8012764:	2237      	movs	r2, #55	@ 0x37
 8012766:	1d7b      	adds	r3, r7, #5
 8012768:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 8012888 <dhcp_coarse_tmr+0x21c>
 801276c:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8012770:	b29b      	uxth	r3, r3
 8012772:	2203      	movs	r2, #3
 8012774:	1dbe      	adds	r6, r7, #6
 8012776:	f808 2003 	strb.w	r2, [r8, r3]
 801277a:	f107 0309 	add.w	r3, r7, #9
 801277e:	b2b6      	uxth	r6, r6
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012780:	b29b      	uxth	r3, r3
 8012782:	9303      	str	r3, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012784:	2e43      	cmp	r6, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012786:	f81a bb01 	ldrb.w	fp, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801278a:	d849      	bhi.n	8012820 <dhcp_coarse_tmr+0x1b4>
  options[options_out_len++] = value;
 801278c:	1c73      	adds	r3, r6, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801278e:	9a03      	ldr	r2, [sp, #12]
  options[options_out_len++] = value;
 8012790:	f808 b006 	strb.w	fp, [r8, r6]
 8012794:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012796:	4293      	cmp	r3, r2
  options[options_out_len++] = value;
 8012798:	461e      	mov	r6, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801279a:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801279e:	d1f1      	bne.n	8012784 <dhcp_coarse_tmr+0x118>
  options[options_out_len++] = DHCP_OPTION_END;
 80127a0:	f107 000a 	add.w	r0, r7, #10
 80127a4:	23ff      	movs	r3, #255	@ 0xff
 80127a6:	b280      	uxth	r0, r0
 80127a8:	f808 3002 	strb.w	r3, [r8, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80127ac:	2843      	cmp	r0, #67	@ 0x43
 80127ae:	d808      	bhi.n	80127c2 <dhcp_coarse_tmr+0x156>
    options[options_out_len++] = 0;
 80127b0:	f1c7 0239 	rsb	r2, r7, #57	@ 0x39
 80127b4:	4440      	add	r0, r8
 80127b6:	2100      	movs	r1, #0
 80127b8:	b292      	uxth	r2, r2
 80127ba:	3201      	adds	r2, #1
 80127bc:	f002 f95d 	bl	8014a7a <memset>
 80127c0:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80127c2:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 80127c6:	4648      	mov	r0, r9
 80127c8:	b289      	uxth	r1, r1
 80127ca:	f7f9 fdcb 	bl	800c364 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80127ce:	4a26      	ldr	r2, [pc, #152]	@ (8012868 <dhcp_coarse_tmr+0x1fc>)
 80127d0:	9500      	str	r5, [sp, #0]
 80127d2:	2343      	movs	r3, #67	@ 0x43
 80127d4:	6810      	ldr	r0, [r2, #0]
 80127d6:	4649      	mov	r1, r9
 80127d8:	4a24      	ldr	r2, [pc, #144]	@ (801286c <dhcp_coarse_tmr+0x200>)
 80127da:	f7fe fb77 	bl	8010ecc <udp_sendto_if>
    pbuf_free(p_out);
 80127de:	4648      	mov	r0, r9
 80127e0:	f7f9 fca8 	bl	800c134 <pbuf_free>
  if (dhcp->tries < 255) {
 80127e4:	79a3      	ldrb	r3, [r4, #6]
 80127e6:	2bff      	cmp	r3, #255	@ 0xff
 80127e8:	d022      	beq.n	8012830 <dhcp_coarse_tmr+0x1c4>
    dhcp->tries++;
 80127ea:	3301      	adds	r3, #1
 80127ec:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80127ee:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80127f0:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80127f2:	d81d      	bhi.n	8012830 <dhcp_coarse_tmr+0x1c4>
 80127f4:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80127f8:	4a1d      	ldr	r2, [pc, #116]	@ (8012870 <dhcp_coarse_tmr+0x204>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80127fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80127fe:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012800:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012804:	b29b      	uxth	r3, r3
 8012806:	fba2 2303 	umull	r2, r3, r2, r3
 801280a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801280c:	8aa2      	ldrh	r2, [r4, #20]
 801280e:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012810:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012812:	1a53      	subs	r3, r2, r1
 8012814:	2b01      	cmp	r3, #1
 8012816:	f77f af47 	ble.w	80126a8 <dhcp_coarse_tmr+0x3c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801281a:	105b      	asrs	r3, r3, #1
 801281c:	8223      	strh	r3, [r4, #16]
 801281e:	e743      	b.n	80126a8 <dhcp_coarse_tmr+0x3c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012820:	4b14      	ldr	r3, [pc, #80]	@ (8012874 <dhcp_coarse_tmr+0x208>)
 8012822:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8012826:	4914      	ldr	r1, [pc, #80]	@ (8012878 <dhcp_coarse_tmr+0x20c>)
 8012828:	4814      	ldr	r0, [pc, #80]	@ (801287c <dhcp_coarse_tmr+0x210>)
 801282a:	f002 f873 	bl	8014914 <iprintf>
 801282e:	e7ad      	b.n	801278c <dhcp_coarse_tmr+0x120>
    options[options_out_len++] = 0;
 8012830:	2314      	movs	r3, #20
 8012832:	e7eb      	b.n	801280c <dhcp_coarse_tmr+0x1a0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012834:	4b0f      	ldr	r3, [pc, #60]	@ (8012874 <dhcp_coarse_tmr+0x208>)
 8012836:	f240 529a 	movw	r2, #1434	@ 0x59a
 801283a:	4911      	ldr	r1, [pc, #68]	@ (8012880 <dhcp_coarse_tmr+0x214>)
 801283c:	480f      	ldr	r0, [pc, #60]	@ (801287c <dhcp_coarse_tmr+0x210>)
 801283e:	f002 f869 	bl	8014914 <iprintf>
 8012842:	e772      	b.n	801272a <dhcp_coarse_tmr+0xbe>
 8012844:	4b0b      	ldr	r3, [pc, #44]	@ (8012874 <dhcp_coarse_tmr+0x208>)
 8012846:	f240 529a 	movw	r2, #1434	@ 0x59a
 801284a:	490d      	ldr	r1, [pc, #52]	@ (8012880 <dhcp_coarse_tmr+0x214>)
 801284c:	480b      	ldr	r0, [pc, #44]	@ (801287c <dhcp_coarse_tmr+0x210>)
 801284e:	f002 f861 	bl	8014914 <iprintf>
 8012852:	e787      	b.n	8012764 <dhcp_coarse_tmr+0xf8>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012854:	4b07      	ldr	r3, [pc, #28]	@ (8012874 <dhcp_coarse_tmr+0x208>)
 8012856:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801285a:	490a      	ldr	r1, [pc, #40]	@ (8012884 <dhcp_coarse_tmr+0x218>)
 801285c:	4807      	ldr	r0, [pc, #28]	@ (801287c <dhcp_coarse_tmr+0x210>)
 801285e:	f002 f859 	bl	8014914 <iprintf>
 8012862:	e773      	b.n	801274c <dhcp_coarse_tmr+0xe0>
 8012864:	24010700 	.word	0x24010700
 8012868:	2401076c 	.word	0x2401076c
 801286c:	080189bc 	.word	0x080189bc
 8012870:	10624dd3 	.word	0x10624dd3
 8012874:	08018368 	.word	0x08018368
 8012878:	0801855c 	.word	0x0801855c
 801287c:	08015bd0 	.word	0x08015bd0
 8012880:	080184dc 	.word	0x080184dc
 8012884:	08018520 	.word	0x08018520
 8012888:	08018690 	.word	0x08018690

0801288c <dhcp_fine_tmr>:
  NETIF_FOREACH(netif) {
 801288c:	4b21      	ldr	r3, [pc, #132]	@ (8012914 <dhcp_fine_tmr+0x88>)
{
 801288e:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 8012890:	681c      	ldr	r4, [r3, #0]
 8012892:	b924      	cbnz	r4, 801289e <dhcp_fine_tmr+0x12>
 8012894:	e01e      	b.n	80128d4 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8012896:	3a01      	subs	r2, #1
 8012898:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 801289a:	6824      	ldr	r4, [r4, #0]
 801289c:	b1d4      	cbz	r4, 80128d4 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801289e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (dhcp != NULL) {
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d0fa      	beq.n	801289a <dhcp_fine_tmr+0xe>
      if (dhcp->request_timeout > 1) {
 80128a4:	891a      	ldrh	r2, [r3, #8]
 80128a6:	2a01      	cmp	r2, #1
 80128a8:	d8f5      	bhi.n	8012896 <dhcp_fine_tmr+0xa>
      } else if (dhcp->request_timeout == 1) {
 80128aa:	d1f6      	bne.n	801289a <dhcp_fine_tmr+0xe>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80128ac:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 80128ae:	2100      	movs	r1, #0
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80128b0:	2a0c      	cmp	r2, #12
        dhcp->request_timeout--;
 80128b2:	8119      	strh	r1, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80128b4:	d016      	beq.n	80128e4 <dhcp_fine_tmr+0x58>
 80128b6:	2a06      	cmp	r2, #6
 80128b8:	d014      	beq.n	80128e4 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80128ba:	2a01      	cmp	r2, #1
 80128bc:	d016      	beq.n	80128ec <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80128be:	2a08      	cmp	r2, #8
 80128c0:	d009      	beq.n	80128d6 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80128c2:	2a03      	cmp	r2, #3
 80128c4:	d1e9      	bne.n	801289a <dhcp_fine_tmr+0xe>
    if (dhcp->tries < REBOOT_TRIES) {
 80128c6:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80128c8:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	d91e      	bls.n	801290c <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 80128ce:	f7fe ffc3 	bl	8011858 <dhcp_discover>
 80128d2:	e7e2      	b.n	801289a <dhcp_fine_tmr+0xe>
}
 80128d4:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 1) {
 80128d6:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 80128d8:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d913      	bls.n	8012906 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 80128de:	f7fe fcdd 	bl	801129c <dhcp_bind>
 80128e2:	e7da      	b.n	801289a <dhcp_fine_tmr+0xe>
    dhcp_discover(netif);
 80128e4:	4620      	mov	r0, r4
 80128e6:	f7fe ffb7 	bl	8011858 <dhcp_discover>
 80128ea:	e7d6      	b.n	801289a <dhcp_fine_tmr+0xe>
    if (dhcp->tries <= 5) {
 80128ec:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 80128ee:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 80128f0:	2b05      	cmp	r3, #5
 80128f2:	d802      	bhi.n	80128fa <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 80128f4:	f7ff f87e 	bl	80119f4 <dhcp_select.isra.0>
 80128f8:	e7cf      	b.n	801289a <dhcp_fine_tmr+0xe>
      dhcp_release_and_stop(netif);
 80128fa:	f7ff fdcb 	bl	8012494 <dhcp_release_and_stop>
      dhcp_start(netif);
 80128fe:	4620      	mov	r0, r4
 8012900:	f7ff fe5a 	bl	80125b8 <dhcp_start>
 8012904:	e7c9      	b.n	801289a <dhcp_fine_tmr+0xe>
      dhcp_check(netif);
 8012906:	f7fe fcb1 	bl	801126c <dhcp_check>
 801290a:	e7c6      	b.n	801289a <dhcp_fine_tmr+0xe>
      dhcp_reboot(netif);
 801290c:	f7fe fec2 	bl	8011694 <dhcp_reboot.isra.0>
 8012910:	e7c3      	b.n	801289a <dhcp_fine_tmr+0xe>
 8012912:	bf00      	nop
 8012914:	24010700 	.word	0x24010700

08012918 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801291c:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801291e:	f04f 0e0a 	mov.w	lr, #10
{
 8012922:	b085      	sub	sp, #20
 8012924:	4e50      	ldr	r6, [pc, #320]	@ (8012a68 <etharp_find_entry+0x150>)
 8012926:	4605      	mov	r5, r0
 8012928:	4608      	mov	r0, r1
 801292a:	4617      	mov	r7, r2
 801292c:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801292e:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 8012930:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012932:	46f0      	mov	r8, lr
 8012934:	46f3      	mov	fp, lr
 8012936:	9001      	str	r0, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012938:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801293c:	e004      	b.n	8012948 <etharp_find_entry+0x30>
 801293e:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012940:	3301      	adds	r3, #1
 8012942:	3118      	adds	r1, #24
 8012944:	2b0a      	cmp	r3, #10
 8012946:	d019      	beq.n	801297c <etharp_find_entry+0x64>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012948:	2c0a      	cmp	r4, #10
 801294a:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 801294e:	f891 a014 	ldrb.w	sl, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012952:	d139      	bne.n	80129c8 <etharp_find_entry+0xb0>
 8012954:	f1ba 0f00 	cmp.w	sl, #0
 8012958:	d0f1      	beq.n	801293e <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801295a:	b11d      	cbz	r5, 8012964 <etharp_find_entry+0x4c>
 801295c:	6828      	ldr	r0, [r5, #0]
 801295e:	684a      	ldr	r2, [r1, #4]
 8012960:	4290      	cmp	r0, r2
 8012962:	d03d      	beq.n	80129e0 <etharp_find_entry+0xc8>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012964:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 8012968:	8a48      	ldrh	r0, [r1, #18]
      if (state == ETHARP_STATE_PENDING) {
 801296a:	d031      	beq.n	80129d0 <etharp_find_entry+0xb8>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801296c:	4548      	cmp	r0, r9
 801296e:	d3e7      	bcc.n	8012940 <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012970:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8012972:	4681      	mov	r9, r0
 8012974:	46e0      	mov	r8, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012976:	3118      	adds	r1, #24
 8012978:	2b0a      	cmp	r3, #10
 801297a:	d1e5      	bne.n	8012948 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801297c:	9801      	ldr	r0, [sp, #4]
 801297e:	2801      	cmp	r0, #1
 8012980:	d16e      	bne.n	8012a60 <etharp_find_entry+0x148>
 8012982:	2c0a      	cmp	r4, #10
 8012984:	d032      	beq.n	80129ec <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012986:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801298a:	46a1      	mov	r9, r4
 801298c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8012990:	7d1b      	ldrb	r3, [r3, #20]
 8012992:	b133      	cbz	r3, 80129a2 <etharp_find_entry+0x8a>
 8012994:	4b35      	ldr	r3, [pc, #212]	@ (8012a6c <etharp_find_entry+0x154>)
 8012996:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801299a:	4935      	ldr	r1, [pc, #212]	@ (8012a70 <etharp_find_entry+0x158>)
 801299c:	4835      	ldr	r0, [pc, #212]	@ (8012a74 <etharp_find_entry+0x15c>)
 801299e:	f001 ffb9 	bl	8014914 <iprintf>
    etharp_free_entry(i);
 80129a2:	46a0      	mov	r8, r4
 80129a4:	0064      	lsls	r4, r4, #1
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80129a6:	b12d      	cbz	r5, 80129b4 <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80129a8:	eb04 0309 	add.w	r3, r4, r9
 80129ac:	682a      	ldr	r2, [r5, #0]
 80129ae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80129b2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80129b4:	444c      	add	r4, r9
 80129b6:	2300      	movs	r3, #0
 80129b8:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 80129bc:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80129be:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 80129c0:	4640      	mov	r0, r8
 80129c2:	b005      	add	sp, #20
 80129c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 80129c8:	f1ba 0f00 	cmp.w	sl, #0
 80129cc:	d0b8      	beq.n	8012940 <etharp_find_entry+0x28>
 80129ce:	e7c4      	b.n	801295a <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 80129d0:	680a      	ldr	r2, [r1, #0]
 80129d2:	b392      	cbz	r2, 8012a3a <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 80129d4:	9a02      	ldr	r2, [sp, #8]
 80129d6:	4290      	cmp	r0, r2
 80129d8:	d3b2      	bcc.n	8012940 <etharp_find_entry+0x28>
 80129da:	46e6      	mov	lr, ip
 80129dc:	9002      	str	r0, [sp, #8]
 80129de:	e7af      	b.n	8012940 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80129e0:	b117      	cbz	r7, 80129e8 <etharp_find_entry+0xd0>
 80129e2:	6888      	ldr	r0, [r1, #8]
 80129e4:	42b8      	cmp	r0, r7
 80129e6:	d1bd      	bne.n	8012964 <etharp_find_entry+0x4c>
 80129e8:	46e0      	mov	r8, ip
 80129ea:	e7e9      	b.n	80129c0 <etharp_find_entry+0xa8>
    if (old_stable < ARP_TABLE_SIZE) {
 80129ec:	f1b8 0f0a 	cmp.w	r8, #10
 80129f0:	d02a      	beq.n	8012a48 <etharp_find_entry+0x130>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80129f2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80129f6:	46c1      	mov	r9, r8
 80129f8:	ea4f 0448 	mov.w	r4, r8, lsl #1
 80129fc:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 8012a00:	b1a3      	cbz	r3, 8012a2c <etharp_find_entry+0x114>
 8012a02:	4b1a      	ldr	r3, [pc, #104]	@ (8012a6c <etharp_find_entry+0x154>)
 8012a04:	f240 126d 	movw	r2, #365	@ 0x16d
 8012a08:	491b      	ldr	r1, [pc, #108]	@ (8012a78 <etharp_find_entry+0x160>)
 8012a0a:	481a      	ldr	r0, [pc, #104]	@ (8012a74 <etharp_find_entry+0x15c>)
 8012a0c:	f001 ff82 	bl	8014914 <iprintf>
  if (arp_table[i].q != NULL) {
 8012a10:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 8012a14:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8012a18:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8012a1c:	f856 000a 	ldr.w	r0, [r6, sl]
 8012a20:	b120      	cbz	r0, 8012a2c <etharp_find_entry+0x114>
    free_etharp_q(arp_table[i].q);
 8012a22:	f7f9 fb87 	bl	800c134 <pbuf_free>
    arp_table[i].q = NULL;
 8012a26:	2300      	movs	r3, #0
 8012a28:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012a2c:	eb04 0309 	add.w	r3, r4, r9
 8012a30:	2200      	movs	r2, #0
 8012a32:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8012a36:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012a38:	e7b5      	b.n	80129a6 <etharp_find_entry+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 8012a3a:	9a03      	ldr	r2, [sp, #12]
 8012a3c:	4290      	cmp	r0, r2
 8012a3e:	f4ff af7f 	bcc.w	8012940 <etharp_find_entry+0x28>
 8012a42:	46e3      	mov	fp, ip
 8012a44:	9003      	str	r0, [sp, #12]
 8012a46:	e77b      	b.n	8012940 <etharp_find_entry+0x28>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012a48:	f1bb 0f0a 	cmp.w	fp, #10
 8012a4c:	d105      	bne.n	8012a5a <etharp_find_entry+0x142>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012a4e:	f1be 0f0a 	cmp.w	lr, #10
 8012a52:	d005      	beq.n	8012a60 <etharp_find_entry+0x148>
    etharp_free_entry(i);
 8012a54:	46f0      	mov	r8, lr
 8012a56:	46f1      	mov	r9, lr
 8012a58:	e7da      	b.n	8012a10 <etharp_find_entry+0xf8>
 8012a5a:	46d8      	mov	r8, fp
 8012a5c:	46d9      	mov	r9, fp
 8012a5e:	e7d7      	b.n	8012a10 <etharp_find_entry+0xf8>
    return (s16_t)ERR_MEM;
 8012a60:	f04f 38ff 	mov.w	r8, #4294967295
 8012a64:	e7ac      	b.n	80129c0 <etharp_find_entry+0xa8>
 8012a66:	bf00      	nop
 8012a68:	2401079c 	.word	0x2401079c
 8012a6c:	08018694 	.word	0x08018694
 8012a70:	080186e4 	.word	0x080186e4
 8012a74:	08015bd0 	.word	0x08015bd0
 8012a78:	080186cc 	.word	0x080186cc

08012a7c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a80:	b082      	sub	sp, #8
 8012a82:	4688      	mov	r8, r1
 8012a84:	4691      	mov	r9, r2
 8012a86:	461f      	mov	r7, r3
 8012a88:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012a8c:	4606      	mov	r6, r0
{
 8012a8e:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012a92:	2800      	cmp	r0, #0
 8012a94:	d04a      	beq.n	8012b2c <etharp_raw+0xb0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012a96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012a9a:	211c      	movs	r1, #28
 8012a9c:	200e      	movs	r0, #14
 8012a9e:	f7f9 fbb9 	bl	800c214 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d049      	beq.n	8012b3c <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012aa8:	8943      	ldrh	r3, [r0, #10]
 8012aaa:	2b1b      	cmp	r3, #27
 8012aac:	d936      	bls.n	8012b1c <etharp_raw+0xa0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012aae:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 8012ab0:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8012ab2:	f7f8 fc25 	bl	800b300 <lwip_htons>
 8012ab6:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012ab8:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 8012abc:	2b06      	cmp	r3, #6
 8012abe:	d006      	beq.n	8012ace <etharp_raw+0x52>
 8012ac0:	4b20      	ldr	r3, [pc, #128]	@ (8012b44 <etharp_raw+0xc8>)
 8012ac2:	f240 4269 	movw	r2, #1129	@ 0x469
 8012ac6:	4920      	ldr	r1, [pc, #128]	@ (8012b48 <etharp_raw+0xcc>)
 8012ac8:	4820      	ldr	r0, [pc, #128]	@ (8012b4c <etharp_raw+0xd0>)
 8012aca:	f001 ff23 	bl	8014914 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012ace:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ad0:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012ad2:	4e1f      	ldr	r6, [pc, #124]	@ (8012b50 <etharp_raw+0xd4>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ad4:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012ad6:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ad8:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012ada:	88b9      	ldrh	r1, [r7, #4]
 8012adc:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012ade:	f8da 1000 	ldr.w	r1, [sl]
 8012ae2:	f8c4 1012 	str.w	r1, [r4, #18]
 8012ae6:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8012aea:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012aee:	6809      	ldr	r1, [r1, #0]
 8012af0:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012af4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012af6:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012af8:	6026      	str	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012afa:	61a1      	str	r1, [r4, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
 8012afc:	f240 4106 	movw	r1, #1030	@ 0x406
 8012b00:	80a1      	strh	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012b02:	f640 0106 	movw	r1, #2054	@ 0x806
 8012b06:	9100      	str	r1, [sp, #0]
 8012b08:	4629      	mov	r1, r5
 8012b0a:	f001 fb77 	bl	80141fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012b0e:	4628      	mov	r0, r5
 8012b10:	f7f9 fb10 	bl	800c134 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8012b14:	2000      	movs	r0, #0
}
 8012b16:	b002      	add	sp, #8
 8012b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012b1c:	4b09      	ldr	r3, [pc, #36]	@ (8012b44 <etharp_raw+0xc8>)
 8012b1e:	f240 4262 	movw	r2, #1122	@ 0x462
 8012b22:	490c      	ldr	r1, [pc, #48]	@ (8012b54 <etharp_raw+0xd8>)
 8012b24:	4809      	ldr	r0, [pc, #36]	@ (8012b4c <etharp_raw+0xd0>)
 8012b26:	f001 fef5 	bl	8014914 <iprintf>
 8012b2a:	e7c0      	b.n	8012aae <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012b2c:	4b05      	ldr	r3, [pc, #20]	@ (8012b44 <etharp_raw+0xc8>)
 8012b2e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012b32:	4909      	ldr	r1, [pc, #36]	@ (8012b58 <etharp_raw+0xdc>)
 8012b34:	4805      	ldr	r0, [pc, #20]	@ (8012b4c <etharp_raw+0xd0>)
 8012b36:	f001 feed 	bl	8014914 <iprintf>
 8012b3a:	e7ac      	b.n	8012a96 <etharp_raw+0x1a>
    return ERR_MEM;
 8012b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b40:	e7e9      	b.n	8012b16 <etharp_raw+0x9a>
 8012b42:	bf00      	nop
 8012b44:	08018694 	.word	0x08018694
 8012b48:	08018744 	.word	0x08018744
 8012b4c:	08015bd0 	.word	0x08015bd0
 8012b50:	00080100 	.word	0x00080100
 8012b54:	08018710 	.word	0x08018710
 8012b58:	08015bc0 	.word	0x08015bc0

08012b5c <etharp_output_to_arp_index>:
{
 8012b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012b60:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c38 <etharp_output_to_arp_index+0xdc>
 8012b64:	eb02 0642 	add.w	r6, r2, r2, lsl #1
{
 8012b68:	b084      	sub	sp, #16
 8012b6a:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012b6c:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
{
 8012b70:	4605      	mov	r5, r0
 8012b72:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012b74:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8012b78:	7d33      	ldrb	r3, [r6, #20]
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d936      	bls.n	8012bec <etharp_output_to_arp_index+0x90>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012b7e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8012b82:	2b02      	cmp	r3, #2
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012b84:	f105 0a2a 	add.w	sl, r5, #42	@ 0x2a
 8012b88:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012b8c:	f100 060c 	add.w	r6, r0, #12
 8012b90:	4446      	add	r6, r8
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012b92:	d00b      	beq.n	8012bac <etharp_output_to_arp_index+0x50>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012b94:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8012b98:	4633      	mov	r3, r6
 8012b9a:	4652      	mov	r2, sl
 8012b9c:	4639      	mov	r1, r7
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	9400      	str	r4, [sp, #0]
 8012ba2:	f001 fb2b 	bl	80141fc <ethernet_output>
}
 8012ba6:	b004      	add	sp, #16
 8012ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012bac:	44a1      	add	r9, r4
 8012bae:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 8012bb2:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8012bb6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012bba:	d820      	bhi.n	8012bfe <etharp_output_to_arp_index+0xa2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012bbc:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012bc0:	d3e8      	bcc.n	8012b94 <etharp_output_to_arp_index+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012bc2:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012bc4:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012bc6:	4632      	mov	r2, r6
 8012bc8:	4651      	mov	r1, sl
 8012bca:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012bcc:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012bce:	4b15      	ldr	r3, [pc, #84]	@ (8012c24 <etharp_output_to_arp_index+0xc8>)
 8012bd0:	9002      	str	r0, [sp, #8]
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012bd6:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012bd8:	9300      	str	r3, [sp, #0]
 8012bda:	4653      	mov	r3, sl
 8012bdc:	f7ff ff4e 	bl	8012a7c <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d1d7      	bne.n	8012b94 <etharp_output_to_arp_index+0x38>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012be4:	2303      	movs	r3, #3
 8012be6:	f889 3014 	strb.w	r3, [r9, #20]
 8012bea:	e7d3      	b.n	8012b94 <etharp_output_to_arp_index+0x38>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012bec:	4b0e      	ldr	r3, [pc, #56]	@ (8012c28 <etharp_output_to_arp_index+0xcc>)
 8012bee:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012bf2:	490e      	ldr	r1, [pc, #56]	@ (8012c2c <etharp_output_to_arp_index+0xd0>)
 8012bf4:	480e      	ldr	r0, [pc, #56]	@ (8012c30 <etharp_output_to_arp_index+0xd4>)
 8012bf6:	f001 fe8d 	bl	8014914 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012bfa:	7d33      	ldrb	r3, [r6, #20]
 8012bfc:	e7bf      	b.n	8012b7e <etharp_output_to_arp_index+0x22>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012bfe:	2301      	movs	r3, #1
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012c00:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012c02:	4a0c      	ldr	r2, [pc, #48]	@ (8012c34 <etharp_output_to_arp_index+0xd8>)
 8012c04:	4651      	mov	r1, sl
 8012c06:	9303      	str	r3, [sp, #12]
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012c08:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012c0a:	4b06      	ldr	r3, [pc, #24]	@ (8012c24 <etharp_output_to_arp_index+0xc8>)
 8012c0c:	9002      	str	r0, [sp, #8]
 8012c0e:	4628      	mov	r0, r5
 8012c10:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012c12:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012c14:	9300      	str	r3, [sp, #0]
 8012c16:	4653      	mov	r3, sl
 8012c18:	f7ff ff30 	bl	8012a7c <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	d1b9      	bne.n	8012b94 <etharp_output_to_arp_index+0x38>
 8012c20:	e7e0      	b.n	8012be4 <etharp_output_to_arp_index+0x88>
 8012c22:	bf00      	nop
 8012c24:	08018bb4 	.word	0x08018bb4
 8012c28:	08018694 	.word	0x08018694
 8012c2c:	08018788 	.word	0x08018788
 8012c30:	08015bd0 	.word	0x08015bd0
 8012c34:	08018bbc 	.word	0x08018bbc
 8012c38:	2401079c 	.word	0x2401079c

08012c3c <etharp_tmr>:
{
 8012c3c:	b570      	push	{r4, r5, r6, lr}
 8012c3e:	4c1d      	ldr	r4, [pc, #116]	@ (8012cb4 <etharp_tmr+0x78>)
 8012c40:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012c42:	2600      	movs	r6, #0
 8012c44:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 8012c48:	e00a      	b.n	8012c60 <etharp_tmr+0x24>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012c4a:	2a01      	cmp	r2, #1
 8012c4c:	d01f      	beq.n	8012c8e <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012c4e:	2a03      	cmp	r2, #3
 8012c50:	d02d      	beq.n	8012cae <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012c52:	2a04      	cmp	r2, #4
 8012c54:	d101      	bne.n	8012c5a <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012c56:	2302      	movs	r3, #2
 8012c58:	7423      	strb	r3, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c5a:	3418      	adds	r4, #24
 8012c5c:	42ac      	cmp	r4, r5
 8012c5e:	d014      	beq.n	8012c8a <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 8012c60:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8012c62:	2a00      	cmp	r2, #0
 8012c64:	d0f9      	beq.n	8012c5a <etharp_tmr+0x1e>
      arp_table[i].ctime++;
 8012c66:	89e3      	ldrh	r3, [r4, #14]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012c6c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 8012c70:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012c72:	d3ea      	bcc.n	8012c4a <etharp_tmr+0xe>
  if (arp_table[i].q != NULL) {
 8012c74:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8012c78:	b118      	cbz	r0, 8012c82 <etharp_tmr+0x46>
    free_etharp_q(arp_table[i].q);
 8012c7a:	f7f9 fa5b 	bl	800c134 <pbuf_free>
    arp_table[i].q = NULL;
 8012c7e:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012c82:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c84:	3418      	adds	r4, #24
 8012c86:	42ac      	cmp	r4, r5
 8012c88:	d1ea      	bne.n	8012c60 <etharp_tmr+0x24>
}
 8012c8a:	b004      	add	sp, #16
 8012c8c:	bd70      	pop	{r4, r5, r6, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012c8e:	2b04      	cmp	r3, #4
 8012c90:	d8f0      	bhi.n	8012c74 <etharp_tmr+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012c92:	9203      	str	r2, [sp, #12]
 8012c94:	4a08      	ldr	r2, [pc, #32]	@ (8012cb8 <etharp_tmr+0x7c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012c96:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012c98:	9201      	str	r2, [sp, #4]
 8012c9a:	f100 032a 	add.w	r3, r0, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012c9e:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ca0:	9402      	str	r4, [sp, #8]
 8012ca2:	9200      	str	r2, [sp, #0]
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	4a05      	ldr	r2, [pc, #20]	@ (8012cbc <etharp_tmr+0x80>)
 8012ca8:	f7ff fee8 	bl	8012a7c <etharp_raw>
 8012cac:	e7d5      	b.n	8012c5a <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012cae:	2304      	movs	r3, #4
 8012cb0:	7423      	strb	r3, [r4, #16]
 8012cb2:	e7d2      	b.n	8012c5a <etharp_tmr+0x1e>
 8012cb4:	240107a0 	.word	0x240107a0
 8012cb8:	08018bb4 	.word	0x08018bb4
 8012cbc:	08018bbc 	.word	0x08018bbc

08012cc0 <etharp_cleanup_netif>:
{
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	4c0b      	ldr	r4, [pc, #44]	@ (8012cf0 <etharp_cleanup_netif+0x30>)
 8012cc4:	4606      	mov	r6, r0
 8012cc6:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012cca:	7d23      	ldrb	r3, [r4, #20]
 8012ccc:	b113      	cbz	r3, 8012cd4 <etharp_cleanup_netif+0x14>
 8012cce:	68a3      	ldr	r3, [r4, #8]
 8012cd0:	42b3      	cmp	r3, r6
 8012cd2:	d003      	beq.n	8012cdc <etharp_cleanup_netif+0x1c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012cd4:	3418      	adds	r4, #24
 8012cd6:	42ac      	cmp	r4, r5
 8012cd8:	d1f7      	bne.n	8012cca <etharp_cleanup_netif+0xa>
}
 8012cda:	bd70      	pop	{r4, r5, r6, pc}
  if (arp_table[i].q != NULL) {
 8012cdc:	6820      	ldr	r0, [r4, #0]
 8012cde:	b118      	cbz	r0, 8012ce8 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 8012ce0:	f7f9 fa28 	bl	800c134 <pbuf_free>
    arp_table[i].q = NULL;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	7523      	strb	r3, [r4, #20]
}
 8012cec:	e7f2      	b.n	8012cd4 <etharp_cleanup_netif+0x14>
 8012cee:	bf00      	nop
 8012cf0:	2401079c 	.word	0x2401079c

08012cf4 <etharp_input>:
{
 8012cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf8:	460d      	mov	r5, r1
 8012cfa:	b086      	sub	sp, #24
 8012cfc:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8012cfe:	f7f3 fafb 	bl	80062f8 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012d02:	2d00      	cmp	r5, #0
 8012d04:	d06e      	beq.n	8012de4 <etharp_input+0xf0>
  hdr = (struct etharp_hdr *)p->payload;
 8012d06:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012d08:	8833      	ldrh	r3, [r6, #0]
 8012d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d0e:	d102      	bne.n	8012d16 <etharp_input+0x22>
 8012d10:	7933      	ldrb	r3, [r6, #4]
 8012d12:	2b06      	cmp	r3, #6
 8012d14:	d005      	beq.n	8012d22 <etharp_input+0x2e>
    pbuf_free(p);
 8012d16:	4620      	mov	r0, r4
}
 8012d18:	b006      	add	sp, #24
 8012d1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8012d1e:	f7f9 ba09 	b.w	800c134 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012d22:	7973      	ldrb	r3, [r6, #5]
 8012d24:	2b04      	cmp	r3, #4
 8012d26:	d1f6      	bne.n	8012d16 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012d28:	8873      	ldrh	r3, [r6, #2]
 8012d2a:	2b08      	cmp	r3, #8
 8012d2c:	d1f3      	bne.n	8012d16 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012d2e:	f8d6 000e 	ldr.w	r0, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012d32:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012d36:	686f      	ldr	r7, [r5, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012d38:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012d3a:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012d3c:	2f00      	cmp	r7, #0
 8012d3e:	d15b      	bne.n	8012df8 <etharp_input+0x104>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012d40:	f04f 0a02 	mov.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012d44:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8012d48:	2b06      	cmp	r3, #6
 8012d4a:	d15f      	bne.n	8012e0c <etharp_input+0x118>
  if (ip4_addr_isany(ipaddr) ||
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d03c      	beq.n	8012dca <etharp_input+0xd6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d50:	4629      	mov	r1, r5
 8012d52:	f000 fce1 	bl	8013718 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8012d56:	4681      	mov	r9, r0
 8012d58:	bbb8      	cbnz	r0, 8012dca <etharp_input+0xd6>
      ip4_addr_ismulticast(ipaddr)) {
 8012d5a:	9b05      	ldr	r3, [sp, #20]
 8012d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d60:	2be0      	cmp	r3, #224	@ 0xe0
 8012d62:	d032      	beq.n	8012dca <etharp_input+0xd6>
  i = etharp_find_entry(ipaddr, flags, netif);
 8012d64:	4651      	mov	r1, sl
 8012d66:	462a      	mov	r2, r5
 8012d68:	a805      	add	r0, sp, #20
 8012d6a:	f7ff fdd5 	bl	8012918 <etharp_find_entry>
  if (i < 0) {
 8012d6e:	1e03      	subs	r3, r0, #0
 8012d70:	db2b      	blt.n	8012dca <etharp_input+0xd6>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012d72:	4935      	ldr	r1, [pc, #212]	@ (8012e48 <etharp_input+0x154>)
 8012d74:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012d78:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012d7a:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012d7e:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 8012d82:	00d2      	lsls	r2, r2, #3
 8012d84:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012d88:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 8012d8a:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012d8e:	fb13 030e 	smlabb	r3, r3, lr, r0
 8012d92:	68b0      	ldr	r0, [r6, #8]
 8012d94:	50c8      	str	r0, [r1, r3]
 8012d96:	440b      	add	r3, r1
 8012d98:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8012d9c:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 8012d9e:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 8012da2:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 8012da6:	f1ba 0f00 	cmp.w	sl, #0
 8012daa:	d00e      	beq.n	8012dca <etharp_input+0xd6>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012dac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 8012db0:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012db4:	4628      	mov	r0, r5
 8012db6:	f105 022a 	add.w	r2, r5, #42	@ 0x2a
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	4651      	mov	r1, sl
 8012dbe:	4643      	mov	r3, r8
 8012dc0:	f001 fa1c 	bl	80141fc <ethernet_output>
    pbuf_free(p);
 8012dc4:	4650      	mov	r0, sl
 8012dc6:	f7f9 f9b5 	bl	800c134 <pbuf_free>
  switch (hdr->opcode) {
 8012dca:	88f3      	ldrh	r3, [r6, #6]
 8012dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012dd0:	d025      	beq.n	8012e1e <etharp_input+0x12a>
 8012dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012dd6:	d014      	beq.n	8012e02 <etharp_input+0x10e>
  pbuf_free(p);
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f7f9 f9ab 	bl	800c134 <pbuf_free>
}
 8012dde:	b006      	add	sp, #24
 8012de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012de4:	4b19      	ldr	r3, [pc, #100]	@ (8012e4c <etharp_input+0x158>)
 8012de6:	f240 228a 	movw	r2, #650	@ 0x28a
 8012dea:	4919      	ldr	r1, [pc, #100]	@ (8012e50 <etharp_input+0x15c>)
 8012dec:	4819      	ldr	r0, [pc, #100]	@ (8012e54 <etharp_input+0x160>)
}
 8012dee:	b006      	add	sp, #24
 8012df0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012df4:	f001 bd8e 	b.w	8014914 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012df8:	429f      	cmp	r7, r3
 8012dfa:	d122      	bne.n	8012e42 <etharp_input+0x14e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012dfc:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012dfe:	46ba      	mov	sl, r7
 8012e00:	e7a0      	b.n	8012d44 <etharp_input+0x50>
      dhcp_arp_reply(netif, &sipaddr);
 8012e02:	a905      	add	r1, sp, #20
 8012e04:	4628      	mov	r0, r5
 8012e06:	f7ff f9f1 	bl	80121ec <dhcp_arp_reply>
      break;
 8012e0a:	e7e5      	b.n	8012dd8 <etharp_input+0xe4>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8012e4c <etharp_input+0x158>)
 8012e0e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012e12:	4911      	ldr	r1, [pc, #68]	@ (8012e58 <etharp_input+0x164>)
 8012e14:	480f      	ldr	r0, [pc, #60]	@ (8012e54 <etharp_input+0x160>)
 8012e16:	f001 fd7d 	bl	8014914 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8012e1a:	9805      	ldr	r0, [sp, #20]
 8012e1c:	e796      	b.n	8012d4c <etharp_input+0x58>
      if (for_us) {
 8012e1e:	2f00      	cmp	r7, #0
 8012e20:	d0da      	beq.n	8012dd8 <etharp_input+0xe4>
        etharp_raw(netif,
 8012e22:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012e24:	f105 032a 	add.w	r3, r5, #42	@ 0x2a
        etharp_raw(netif,
 8012e28:	4642      	mov	r2, r8
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	9103      	str	r1, [sp, #12]
 8012e2e:	a905      	add	r1, sp, #20
 8012e30:	f8cd 8004 	str.w	r8, [sp, #4]
 8012e34:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012e36:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8012e38:	9100      	str	r1, [sp, #0]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	f7ff fe1e 	bl	8012a7c <etharp_raw>
 8012e40:	e7ca      	b.n	8012dd8 <etharp_input+0xe4>
 8012e42:	2700      	movs	r7, #0
 8012e44:	e77c      	b.n	8012d40 <etharp_input+0x4c>
 8012e46:	bf00      	nop
 8012e48:	2401079c 	.word	0x2401079c
 8012e4c:	08018694 	.word	0x08018694
 8012e50:	08015bc0 	.word	0x08015bc0
 8012e54:	08015bd0 	.word	0x08015bd0
 8012e58:	080187d8 	.word	0x080187d8

08012e5c <etharp_query>:
{
 8012e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e60:	460e      	mov	r6, r1
 8012e62:	b085      	sub	sp, #20
 8012e64:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012e66:	4601      	mov	r1, r0
 8012e68:	6830      	ldr	r0, [r6, #0]
{
 8012e6a:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012e6c:	f000 fc54 	bl	8013718 <ip4_addr_isbroadcast_u32>
 8012e70:	2800      	cmp	r0, #0
 8012e72:	f040 80a2 	bne.w	8012fba <etharp_query+0x15e>
      ip4_addr_ismulticast(ipaddr) ||
 8012e76:	6833      	ldr	r3, [r6, #0]
 8012e78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
      ip4_addr_isany(ipaddr)) {
 8012e7c:	2ae0      	cmp	r2, #224	@ 0xe0
 8012e7e:	f000 809c 	beq.w	8012fba <etharp_query+0x15e>
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	f000 8099 	beq.w	8012fba <etharp_query+0x15e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012e88:	462a      	mov	r2, r5
 8012e8a:	2101      	movs	r1, #1
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	f7ff fd43 	bl	8012918 <etharp_find_entry>
  if (i_err < 0) {
 8012e92:	f1b0 0800 	subs.w	r8, r0, #0
 8012e96:	db63      	blt.n	8012f60 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012e98:	f1b8 0f7e 	cmp.w	r8, #126	@ 0x7e
 8012e9c:	dc58      	bgt.n	8012f50 <etharp_query+0xf4>
  i = (netif_addr_idx_t)i_err;
 8012e9e:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012ea2:	4c49      	ldr	r4, [pc, #292]	@ (8012fc8 <etharp_query+0x16c>)
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012ea4:	f105 0b2a 	add.w	fp, r5, #42	@ 0x2a
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012ea8:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 8012eac:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8012eb0:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8012eb4:	f899 3014 	ldrb.w	r3, [r9, #20]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d133      	bne.n	8012f24 <etharp_query+0xc8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012ebc:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ebe:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 8012ec0:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ec4:	4659      	mov	r1, fp
 8012ec6:	9303      	str	r3, [sp, #12]
 8012ec8:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012eca:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ece:	4b3f      	ldr	r3, [pc, #252]	@ (8012fcc <etharp_query+0x170>)
 8012ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8012fd0 <etharp_query+0x174>)
 8012ed2:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012ed4:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	465b      	mov	r3, fp
 8012eda:	f7ff fdcf 	bl	8012a7c <etharp_raw>
    if (q == NULL) {
 8012ede:	2f00      	cmp	r7, #0
 8012ee0:	d033      	beq.n	8012f4a <etharp_query+0xee>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012ee2:	f899 3014 	ldrb.w	r3, [r9, #20]
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d820      	bhi.n	8012f2c <etharp_query+0xd0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012eea:	d12e      	bne.n	8012f4a <etharp_query+0xee>
{
 8012eec:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012eee:	4e39      	ldr	r6, [pc, #228]	@ (8012fd4 <etharp_query+0x178>)
 8012ef0:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 8012fe4 <etharp_query+0x188>
 8012ef4:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 8012fe0 <etharp_query+0x184>
 8012ef8:	e005      	b.n	8012f06 <etharp_query+0xaa>
      if (PBUF_NEEDS_COPY(p)) {
 8012efa:	7b2b      	ldrb	r3, [r5, #12]
 8012efc:	065b      	lsls	r3, r3, #25
 8012efe:	d434      	bmi.n	8012f6a <etharp_query+0x10e>
      p = p->next;
 8012f00:	682d      	ldr	r5, [r5, #0]
    while (p) {
 8012f02:	2d00      	cmp	r5, #0
 8012f04:	d047      	beq.n	8012f96 <etharp_query+0x13a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012f06:	896a      	ldrh	r2, [r5, #10]
 8012f08:	892b      	ldrh	r3, [r5, #8]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d1f5      	bne.n	8012efa <etharp_query+0x9e>
 8012f0e:	682a      	ldr	r2, [r5, #0]
 8012f10:	4633      	mov	r3, r6
 8012f12:	2a00      	cmp	r2, #0
 8012f14:	d0f1      	beq.n	8012efa <etharp_query+0x9e>
 8012f16:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8012f1a:	4659      	mov	r1, fp
 8012f1c:	4648      	mov	r0, r9
 8012f1e:	f001 fcf9 	bl	8014914 <iprintf>
 8012f22:	e7ea      	b.n	8012efa <etharp_query+0x9e>
  if (is_new_entry || (q == NULL)) {
 8012f24:	2f00      	cmp	r7, #0
 8012f26:	d03a      	beq.n	8012f9e <etharp_query+0x142>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012f28:	2b01      	cmp	r3, #1
 8012f2a:	d0df      	beq.n	8012eec <etharp_query+0x90>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012f2c:	2318      	movs	r3, #24
 8012f2e:	465a      	mov	r2, fp
 8012f30:	4639      	mov	r1, r7
 8012f32:	4628      	mov	r0, r5
 8012f34:	fb03 4308 	mla	r3, r3, r8, r4
 8012f38:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8012f3c:	9400      	str	r4, [sp, #0]
 8012f3e:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8012f40:	4c25      	ldr	r4, [pc, #148]	@ (8012fd8 <etharp_query+0x17c>)
 8012f42:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012f46:	f001 f959 	bl	80141fc <ethernet_output>
}
 8012f4a:	b005      	add	sp, #20
 8012f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012f50:	4b20      	ldr	r3, [pc, #128]	@ (8012fd4 <etharp_query+0x178>)
 8012f52:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8012f56:	4921      	ldr	r1, [pc, #132]	@ (8012fdc <etharp_query+0x180>)
 8012f58:	4821      	ldr	r0, [pc, #132]	@ (8012fe0 <etharp_query+0x184>)
 8012f5a:	f001 fcdb 	bl	8014914 <iprintf>
 8012f5e:	e79e      	b.n	8012e9e <etharp_query+0x42>
    return (err_t)i_err;
 8012f60:	fa4f f088 	sxtb.w	r0, r8
}
 8012f64:	b005      	add	sp, #20
 8012f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012f6a:	463a      	mov	r2, r7
 8012f6c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012f70:	200e      	movs	r0, #14
 8012f72:	f7f9 fc0f 	bl	800c794 <pbuf_clone>
 8012f76:	4607      	mov	r7, r0
    if (p != NULL) {
 8012f78:	b317      	cbz	r7, 8012fc0 <etharp_query+0x164>
      if (arp_table[i].q != NULL) {
 8012f7a:	eb0a 0308 	add.w	r3, sl, r8
 8012f7e:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 8012f82:	b108      	cbz	r0, 8012f88 <etharp_query+0x12c>
        pbuf_free(arp_table[i].q);
 8012f84:	f7f9 f8d6 	bl	800c134 <pbuf_free>
      arp_table[i].q = p;
 8012f88:	44d0      	add	r8, sl
      result = ERR_OK;
 8012f8a:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8012f8c:	f844 7038 	str.w	r7, [r4, r8, lsl #3]
}
 8012f90:	b005      	add	sp, #20
 8012f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 8012f96:	4638      	mov	r0, r7
 8012f98:	f7f9 fa68 	bl	800c46c <pbuf_ref>
 8012f9c:	e7ec      	b.n	8012f78 <etharp_query+0x11c>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012f9e:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	4c0a      	ldr	r4, [pc, #40]	@ (8012fcc <etharp_query+0x170>)
 8012fa4:	4659      	mov	r1, fp
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	e9cd 6302 	strd	r6, r3, [sp, #8]
 8012fac:	e9cd 2400 	strd	r2, r4, [sp]
 8012fb0:	465b      	mov	r3, fp
 8012fb2:	4a07      	ldr	r2, [pc, #28]	@ (8012fd0 <etharp_query+0x174>)
 8012fb4:	f7ff fd62 	bl	8012a7c <etharp_raw>
    if (q == NULL) {
 8012fb8:	e7c7      	b.n	8012f4a <etharp_query+0xee>
    return ERR_ARG;
 8012fba:	f06f 000f 	mvn.w	r0, #15
 8012fbe:	e7c4      	b.n	8012f4a <etharp_query+0xee>
  err_t result = ERR_MEM;
 8012fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fc4:	e7c1      	b.n	8012f4a <etharp_query+0xee>
 8012fc6:	bf00      	nop
 8012fc8:	2401079c 	.word	0x2401079c
 8012fcc:	08018bb4 	.word	0x08018bb4
 8012fd0:	08018bbc 	.word	0x08018bbc
 8012fd4:	08018694 	.word	0x08018694
 8012fd8:	24010798 	.word	0x24010798
 8012fdc:	080187fc 	.word	0x080187fc
 8012fe0:	08015bd0 	.word	0x08015bd0
 8012fe4:	0801880c 	.word	0x0801880c

08012fe8 <etharp_output>:
{
 8012fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fea:	4604      	mov	r4, r0
 8012fec:	b085      	sub	sp, #20
 8012fee:	460e      	mov	r6, r1
 8012ff0:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 8012ff2:	f7f3 f981 	bl	80062f8 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012ff6:	2c00      	cmp	r4, #0
 8012ff8:	f000 8081 	beq.w	80130fe <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ffc:	2e00      	cmp	r6, #0
 8012ffe:	d06d      	beq.n	80130dc <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013000:	2d00      	cmp	r5, #0
 8013002:	d074      	beq.n	80130ee <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013004:	4621      	mov	r1, r4
 8013006:	6828      	ldr	r0, [r5, #0]
 8013008:	f000 fb86 	bl	8013718 <ip4_addr_isbroadcast_u32>
 801300c:	2800      	cmp	r0, #0
 801300e:	d163      	bne.n	80130d8 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013010:	682b      	ldr	r3, [r5, #0]
 8013012:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8013016:	2ae0      	cmp	r2, #224	@ 0xe0
 8013018:	d039      	beq.n	801308e <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801301a:	6862      	ldr	r2, [r4, #4]
 801301c:	68a1      	ldr	r1, [r4, #8]
 801301e:	405a      	eors	r2, r3
 8013020:	420a      	tst	r2, r1
 8013022:	d009      	beq.n	8013038 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 8013024:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013026:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801302a:	4293      	cmp	r3, r2
 801302c:	d004      	beq.n	8013038 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801302e:	68e3      	ldr	r3, [r4, #12]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d076      	beq.n	8013122 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 8013034:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013038:	4f3b      	ldr	r7, [pc, #236]	@ (8013128 <etharp_output+0x140>)
 801303a:	4b3c      	ldr	r3, [pc, #240]	@ (801312c <etharp_output+0x144>)
 801303c:	783a      	ldrb	r2, [r7, #0]
 801303e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8013042:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013046:	7d19      	ldrb	r1, [r3, #20]
 8013048:	2901      	cmp	r1, #1
 801304a:	d902      	bls.n	8013052 <etharp_output+0x6a>
 801304c:	6899      	ldr	r1, [r3, #8]
 801304e:	42a1      	cmp	r1, r4
 8013050:	d060      	beq.n	8013114 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013052:	4b36      	ldr	r3, [pc, #216]	@ (801312c <etharp_output+0x144>)
{
 8013054:	f04f 0c00 	mov.w	ip, #0
 8013058:	e005      	b.n	8013066 <etharp_output+0x7e>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801305a:	f10c 0c01 	add.w	ip, ip, #1
 801305e:	3318      	adds	r3, #24
 8013060:	f1bc 0f0a 	cmp.w	ip, #10
 8013064:	d030      	beq.n	80130c8 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013066:	7d18      	ldrb	r0, [r3, #20]
 8013068:	2801      	cmp	r0, #1
 801306a:	d9f6      	bls.n	801305a <etharp_output+0x72>
 801306c:	689a      	ldr	r2, [r3, #8]
 801306e:	42a2      	cmp	r2, r4
 8013070:	d1f3      	bne.n	801305a <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 8013072:	685a      	ldr	r2, [r3, #4]
 8013074:	6829      	ldr	r1, [r5, #0]
 8013076:	4291      	cmp	r1, r2
 8013078:	d1ef      	bne.n	801305a <etharp_output+0x72>
 801307a:	fa5f f28c 	uxtb.w	r2, ip
        return etharp_output_to_arp_index(netif, q, i);
 801307e:	4631      	mov	r1, r6
 8013080:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 8013082:	703a      	strb	r2, [r7, #0]
}
 8013084:	b005      	add	sp, #20
 8013086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 801308a:	f7ff bd67 	b.w	8012b5c <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801308e:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013090:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013092:	215e      	movs	r1, #94	@ 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013098:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801309c:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801309e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80130a2:	78ab      	ldrb	r3, [r5, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80130a4:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80130a8:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 80130ac:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80130ae:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80130b2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80130b6:	f104 022a 	add.w	r2, r4, #42	@ 0x2a
 80130ba:	4631      	mov	r1, r6
 80130bc:	4620      	mov	r0, r4
 80130be:	9500      	str	r5, [sp, #0]
 80130c0:	f001 f89c 	bl	80141fc <ethernet_output>
}
 80130c4:	b005      	add	sp, #20
 80130c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 80130c8:	4632      	mov	r2, r6
 80130ca:	4629      	mov	r1, r5
 80130cc:	4620      	mov	r0, r4
}
 80130ce:	b005      	add	sp, #20
 80130d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 80130d4:	f7ff bec2 	b.w	8012e5c <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 80130d8:	4b15      	ldr	r3, [pc, #84]	@ (8013130 <etharp_output+0x148>)
 80130da:	e7ea      	b.n	80130b2 <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 80130dc:	4b15      	ldr	r3, [pc, #84]	@ (8013134 <etharp_output+0x14c>)
 80130de:	f240 321f 	movw	r2, #799	@ 0x31f
 80130e2:	4915      	ldr	r1, [pc, #84]	@ (8013138 <etharp_output+0x150>)
 80130e4:	4815      	ldr	r0, [pc, #84]	@ (801313c <etharp_output+0x154>)
 80130e6:	f001 fc15 	bl	8014914 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80130ea:	2d00      	cmp	r5, #0
 80130ec:	d18a      	bne.n	8013004 <etharp_output+0x1c>
 80130ee:	4b11      	ldr	r3, [pc, #68]	@ (8013134 <etharp_output+0x14c>)
 80130f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80130f4:	4912      	ldr	r1, [pc, #72]	@ (8013140 <etharp_output+0x158>)
 80130f6:	4811      	ldr	r0, [pc, #68]	@ (801313c <etharp_output+0x154>)
 80130f8:	f001 fc0c 	bl	8014914 <iprintf>
 80130fc:	e782      	b.n	8013004 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80130fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013134 <etharp_output+0x14c>)
 8013100:	f240 321e 	movw	r2, #798	@ 0x31e
 8013104:	490f      	ldr	r1, [pc, #60]	@ (8013144 <etharp_output+0x15c>)
 8013106:	480d      	ldr	r0, [pc, #52]	@ (801313c <etharp_output+0x154>)
 8013108:	f001 fc04 	bl	8014914 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801310c:	2e00      	cmp	r6, #0
 801310e:	f47f af77 	bne.w	8013000 <etharp_output+0x18>
 8013112:	e7e3      	b.n	80130dc <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	6829      	ldr	r1, [r5, #0]
 8013118:	4299      	cmp	r1, r3
 801311a:	d19a      	bne.n	8013052 <etharp_output+0x6a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801311c:	4631      	mov	r1, r6
 801311e:	4620      	mov	r0, r4
 8013120:	e7b0      	b.n	8013084 <etharp_output+0x9c>
            return ERR_RTE;
 8013122:	f06f 0003 	mvn.w	r0, #3
 8013126:	e7cd      	b.n	80130c4 <etharp_output+0xdc>
 8013128:	24010798 	.word	0x24010798
 801312c:	2401079c 	.word	0x2401079c
 8013130:	08018bbc 	.word	0x08018bbc
 8013134:	08018694 	.word	0x08018694
 8013138:	08018828 	.word	0x08018828
 801313c:	08015bd0 	.word	0x08015bd0
 8013140:	080187b8 	.word	0x080187b8
 8013144:	08015bc0 	.word	0x08015bc0

08013148 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013148:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801314a:	2301      	movs	r3, #1
{
 801314c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801314e:	4c07      	ldr	r4, [pc, #28]	@ (801316c <etharp_request+0x24>)
 8013150:	4a07      	ldr	r2, [pc, #28]	@ (8013170 <etharp_request+0x28>)
 8013152:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013154:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013156:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801315a:	f100 032a 	add.w	r3, r0, #42	@ 0x2a
 801315e:	9400      	str	r4, [sp, #0]
 8013160:	4619      	mov	r1, r3
 8013162:	f7ff fc8b 	bl	8012a7c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8013166:	b004      	add	sp, #16
 8013168:	bd10      	pop	{r4, pc}
 801316a:	bf00      	nop
 801316c:	08018bb4 	.word	0x08018bb4
 8013170:	08018bbc 	.word	0x08018bbc

08013174 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013176:	460f      	mov	r7, r1
 8013178:	b087      	sub	sp, #28
 801317a:	4616      	mov	r6, r2
 801317c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801317e:	2124      	movs	r1, #36	@ 0x24
 8013180:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013184:	2022      	movs	r0, #34	@ 0x22
 8013186:	f7f9 f845 	bl	800c214 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801318a:	b390      	cbz	r0, 80131f2 <icmp_send_response+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801318c:	8943      	ldrh	r3, [r0, #10]
 801318e:	4605      	mov	r5, r0
 8013190:	2b23      	cmp	r3, #35	@ 0x23
 8013192:	d930      	bls.n	80131f6 <icmp_send_response+0x82>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013194:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013196:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8013198:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 801319a:	2700      	movs	r7, #0
  icmphdr->code = code;
 801319c:	7066      	strb	r6, [r4, #1]
  icmphdr->id = 0;
 801319e:	6067      	str	r7, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80131a0:	6818      	ldr	r0, [r3, #0]
 80131a2:	6859      	ldr	r1, [r3, #4]
 80131a4:	689a      	ldr	r2, [r3, #8]
 80131a6:	68de      	ldr	r6, [r3, #12]
 80131a8:	60a0      	str	r0, [r4, #8]
 80131aa:	6166      	str	r6, [r4, #20]
 80131ac:	60e1      	str	r1, [r4, #12]
 80131ae:	6122      	str	r2, [r4, #16]
 80131b0:	6918      	ldr	r0, [r3, #16]
 80131b2:	6959      	ldr	r1, [r3, #20]
 80131b4:	699a      	ldr	r2, [r3, #24]
 80131b6:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80131b8:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80131ba:	61e1      	str	r1, [r4, #28]
 80131bc:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 80131c2:	f000 f8d7 	bl	8013374 <ip4_route>
#endif
  if (netif != NULL) {
 80131c6:	4606      	mov	r6, r0
 80131c8:	b180      	cbz	r0, 80131ec <icmp_send_response+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80131ca:	8969      	ldrh	r1, [r5, #10]
 80131cc:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 80131ce:	70a7      	strb	r7, [r4, #2]
 80131d0:	70e7      	strb	r7, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80131d2:	f7f8 f8d5 	bl	800b380 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80131d6:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80131d8:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80131da:	aa05      	add	r2, sp, #20
 80131dc:	4639      	mov	r1, r7
 80131de:	4628      	mov	r0, r5
 80131e0:	9700      	str	r7, [sp, #0]
 80131e2:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80131e6:	23ff      	movs	r3, #255	@ 0xff
 80131e8:	f000 fa84 	bl	80136f4 <ip4_output_if>
  }
  pbuf_free(q);
 80131ec:	4628      	mov	r0, r5
 80131ee:	f7f8 ffa1 	bl	800c134 <pbuf_free>
}
 80131f2:	b007      	add	sp, #28
 80131f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80131f6:	4b04      	ldr	r3, [pc, #16]	@ (8013208 <icmp_send_response+0x94>)
 80131f8:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80131fc:	4903      	ldr	r1, [pc, #12]	@ (801320c <icmp_send_response+0x98>)
 80131fe:	4804      	ldr	r0, [pc, #16]	@ (8013210 <icmp_send_response+0x9c>)
 8013200:	f001 fb88 	bl	8014914 <iprintf>
 8013204:	e7c6      	b.n	8013194 <icmp_send_response+0x20>
 8013206:	bf00      	nop
 8013208:	08018834 	.word	0x08018834
 801320c:	0801886c 	.word	0x0801886c
 8013210:	08015bd0 	.word	0x08015bd0

08013214 <icmp_input>:
{
 8013214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8013218:	4f4c      	ldr	r7, [pc, #304]	@ (801334c <icmp_input+0x138>)
{
 801321a:	b085      	sub	sp, #20
 801321c:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 801321e:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8013222:	f898 4000 	ldrb.w	r4, [r8]
 8013226:	f004 040f 	and.w	r4, r4, #15
 801322a:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801322c:	2c13      	cmp	r4, #19
 801322e:	d913      	bls.n	8013258 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8013230:	8943      	ldrh	r3, [r0, #10]
 8013232:	2b03      	cmp	r3, #3
 8013234:	d910      	bls.n	8013258 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8013236:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	2b08      	cmp	r3, #8
 801323c:	d10c      	bne.n	8013258 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801323e:	6978      	ldr	r0, [r7, #20]
 8013240:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8013244:	2be0      	cmp	r3, #224	@ 0xe0
 8013246:	d007      	beq.n	8013258 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013248:	460e      	mov	r6, r1
 801324a:	6839      	ldr	r1, [r7, #0]
 801324c:	f000 fa64 	bl	8013718 <ip4_addr_isbroadcast_u32>
 8013250:	b910      	cbnz	r0, 8013258 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013252:	892b      	ldrh	r3, [r5, #8]
 8013254:	2b07      	cmp	r3, #7
 8013256:	d805      	bhi.n	8013264 <icmp_input+0x50>
  pbuf_free(p);
 8013258:	4628      	mov	r0, r5
}
 801325a:	b005      	add	sp, #20
 801325c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8013260:	f7f8 bf68 	b.w	800c134 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8013264:	4628      	mov	r0, r5
 8013266:	f7f8 f891 	bl	800b38c <inet_chksum_pbuf>
 801326a:	2800      	cmp	r0, #0
 801326c:	d1f4      	bne.n	8013258 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801326e:	f104 090e 	add.w	r9, r4, #14
 8013272:	4628      	mov	r0, r5
 8013274:	4649      	mov	r1, r9
 8013276:	f7f8 fecb 	bl	800c010 <pbuf_add_header>
 801327a:	2800      	cmp	r0, #0
 801327c:	d04b      	beq.n	8013316 <icmp_input+0x102>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801327e:	892b      	ldrh	r3, [r5, #8]
 8013280:	18e1      	adds	r1, r4, r3
 8013282:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8013284:	428b      	cmp	r3, r1
 8013286:	d8e7      	bhi.n	8013258 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013288:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801328c:	200e      	movs	r0, #14
 801328e:	f7f8 ffc1 	bl	800c214 <pbuf_alloc>
        if (r == NULL) {
 8013292:	4681      	mov	r9, r0
 8013294:	2800      	cmp	r0, #0
 8013296:	d0df      	beq.n	8013258 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013298:	8942      	ldrh	r2, [r0, #10]
 801329a:	f104 0308 	add.w	r3, r4, #8
 801329e:	429a      	cmp	r2, r3
 80132a0:	d346      	bcc.n	8013330 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 80132a2:	4641      	mov	r1, r8
 80132a4:	4622      	mov	r2, r4
 80132a6:	6840      	ldr	r0, [r0, #4]
 80132a8:	f001 fcc9 	bl	8014c3e <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80132ac:	4621      	mov	r1, r4
 80132ae:	4648      	mov	r0, r9
 80132b0:	f7f8 fede 	bl	800c070 <pbuf_remove_header>
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d13f      	bne.n	8013338 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 80132b8:	4629      	mov	r1, r5
 80132ba:	4648      	mov	r0, r9
 80132bc:	f7f9 f956 	bl	800c56c <pbuf_copy>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d135      	bne.n	8013330 <icmp_input+0x11c>
        pbuf_free(p);
 80132c4:	4628      	mov	r0, r5
 80132c6:	464d      	mov	r5, r9
 80132c8:	f7f8 ff34 	bl	800c134 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 80132cc:	4621      	mov	r1, r4
 80132ce:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 80132d0:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 80132d2:	f7f8 fe9d 	bl	800c010 <pbuf_add_header>
 80132d6:	2800      	cmp	r0, #0
 80132d8:	d1be      	bne.n	8013258 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80132da:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 80132dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80132e0:	610a      	str	r2, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80132e2:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 80132e6:	60cb      	str	r3, [r1, #12]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80132e8:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80132ea:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80132ec:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80132ee:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 80132f0:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80132f4:	bf8c      	ite	hi
 80132f6:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80132f8:	3308      	addls	r3, #8
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80132fe:	23ff      	movs	r3, #255	@ 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8013300:	728a      	strb	r2, [r1, #10]
 8013302:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013304:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013306:	2101      	movs	r1, #1
 8013308:	9200      	str	r2, [sp, #0]
 801330a:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801330e:	4910      	ldr	r1, [pc, #64]	@ (8013350 <icmp_input+0x13c>)
 8013310:	f000 f9f0 	bl	80136f4 <ip4_output_if>
  pbuf_free(p);
 8013314:	e7a0      	b.n	8013258 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013316:	4649      	mov	r1, r9
 8013318:	4628      	mov	r0, r5
 801331a:	f7f8 fea9 	bl	800c070 <pbuf_remove_header>
 801331e:	2800      	cmp	r0, #0
 8013320:	d0d4      	beq.n	80132cc <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013322:	4b0c      	ldr	r3, [pc, #48]	@ (8013354 <icmp_input+0x140>)
 8013324:	22c7      	movs	r2, #199	@ 0xc7
 8013326:	490c      	ldr	r1, [pc, #48]	@ (8013358 <icmp_input+0x144>)
 8013328:	480c      	ldr	r0, [pc, #48]	@ (801335c <icmp_input+0x148>)
 801332a:	f001 faf3 	bl	8014914 <iprintf>
          goto icmperr;
 801332e:	e793      	b.n	8013258 <icmp_input+0x44>
          pbuf_free(r);
 8013330:	4648      	mov	r0, r9
 8013332:	f7f8 feff 	bl	800c134 <pbuf_free>
          goto icmperr;
 8013336:	e78f      	b.n	8013258 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013338:	4b06      	ldr	r3, [pc, #24]	@ (8013354 <icmp_input+0x140>)
 801333a:	22b6      	movs	r2, #182	@ 0xb6
 801333c:	4908      	ldr	r1, [pc, #32]	@ (8013360 <icmp_input+0x14c>)
 801333e:	4807      	ldr	r0, [pc, #28]	@ (801335c <icmp_input+0x148>)
 8013340:	f001 fae8 	bl	8014914 <iprintf>
          pbuf_free(r);
 8013344:	4648      	mov	r0, r9
 8013346:	f7f8 fef5 	bl	800c134 <pbuf_free>
          goto icmperr;
 801334a:	e785      	b.n	8013258 <icmp_input+0x44>
 801334c:	24009c28 	.word	0x24009c28
 8013350:	24009c3c 	.word	0x24009c3c
 8013354:	08018834 	.word	0x08018834
 8013358:	080188d0 	.word	0x080188d0
 801335c:	08015bd0 	.word	0x08015bd0
 8013360:	08018898 	.word	0x08018898

08013364 <icmp_dest_unreach>:
{
 8013364:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8013366:	2103      	movs	r1, #3
 8013368:	f7ff bf04 	b.w	8013174 <icmp_send_response>

0801336c <icmp_time_exceeded>:
{
 801336c:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 801336e:	210b      	movs	r1, #11
 8013370:	f7ff bf00 	b.w	8013174 <icmp_send_response>

08013374 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013374:	b538      	push	{r3, r4, r5, lr}
 8013376:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8013378:	f7f2 ffbe 	bl	80062f8 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801337c:	4b15      	ldr	r3, [pc, #84]	@ (80133d4 <ip4_route+0x60>)
 801337e:	6818      	ldr	r0, [r3, #0]
 8013380:	b1a0      	cbz	r0, 80133ac <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013382:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8013386:	07d9      	lsls	r1, r3, #31
 8013388:	d50d      	bpl.n	80133a6 <ip4_route+0x32>
 801338a:	075a      	lsls	r2, r3, #29
 801338c:	d50b      	bpl.n	80133a6 <ip4_route+0x32>
 801338e:	6842      	ldr	r2, [r0, #4]
 8013390:	b14a      	cbz	r2, 80133a6 <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013392:	6821      	ldr	r1, [r4, #0]
 8013394:	6885      	ldr	r5, [r0, #8]
 8013396:	404a      	eors	r2, r1
 8013398:	422a      	tst	r2, r5
 801339a:	d016      	beq.n	80133ca <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801339c:	079b      	lsls	r3, r3, #30
 801339e:	d402      	bmi.n	80133a6 <ip4_route+0x32>
 80133a0:	68c3      	ldr	r3, [r0, #12]
 80133a2:	4299      	cmp	r1, r3
 80133a4:	d011      	beq.n	80133ca <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 80133a6:	6800      	ldr	r0, [r0, #0]
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d1ea      	bne.n	8013382 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80133ac:	4b0a      	ldr	r3, [pc, #40]	@ (80133d8 <ip4_route+0x64>)
 80133ae:	6818      	ldr	r0, [r3, #0]
 80133b0:	b158      	cbz	r0, 80133ca <ip4_route+0x56>
 80133b2:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 80133b6:	f003 0305 	and.w	r3, r3, #5
 80133ba:	2b05      	cmp	r3, #5
 80133bc:	d106      	bne.n	80133cc <ip4_route+0x58>
 80133be:	6843      	ldr	r3, [r0, #4]
 80133c0:	b133      	cbz	r3, 80133d0 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80133c2:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80133c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80133c6:	bf08      	it	eq
 80133c8:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 80133ca:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 80133cc:	2000      	movs	r0, #0
}
 80133ce:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 80133d0:	4618      	mov	r0, r3
}
 80133d2:	bd38      	pop	{r3, r4, r5, pc}
 80133d4:	24010700 	.word	0x24010700
 80133d8:	240106fc 	.word	0x240106fc

080133dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80133dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133e0:	4604      	mov	r4, r0
 80133e2:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 80133e4:	f7f2 ff88 	bl	80062f8 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80133e8:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 80133ea:	783b      	ldrb	r3, [r7, #0]
 80133ec:	091a      	lsrs	r2, r3, #4
 80133ee:	2a04      	cmp	r2, #4
 80133f0:	d12d      	bne.n	801344e <ip4_input+0x72>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80133f2:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80133f6:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80133f8:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80133fa:	f7f7 ff81 	bl	800b300 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80133fe:	8923      	ldrh	r3, [r4, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013400:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8013402:	4283      	cmp	r3, r0
 8013404:	d829      	bhi.n	801345a <ip4_input+0x7e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013406:	8963      	ldrh	r3, [r4, #10]
 8013408:	42ab      	cmp	r3, r5
 801340a:	d320      	bcc.n	801344e <ip4_input+0x72>
 801340c:	8923      	ldrh	r3, [r4, #8]
 801340e:	4543      	cmp	r3, r8
 8013410:	d31d      	bcc.n	801344e <ip4_input+0x72>
 8013412:	2d13      	cmp	r5, #19
 8013414:	d91b      	bls.n	801344e <ip4_input+0x72>
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013416:	693a      	ldr	r2, [r7, #16]
 8013418:	68f8      	ldr	r0, [r7, #12]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801341a:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801341e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 80135e8 <ip4_input+0x20c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013422:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013426:	29e0      	cmp	r1, #224	@ 0xe0
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013428:	f003 0301 	and.w	r3, r3, #1
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801342c:	e9c8 0204 	strd	r0, r2, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013430:	d118      	bne.n	8013464 <ip4_input+0x88>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013432:	b133      	cbz	r3, 8013442 <ip4_input+0x66>
 8013434:	6873      	ldr	r3, [r6, #4]
 8013436:	b123      	cbz	r3, 8013442 <ip4_input+0x66>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013438:	2800      	cmp	r0, #0
 801343a:	f040 80a8 	bne.w	801358e <ip4_input+0x1b2>
        netif = inp;
 801343e:	46b1      	mov	r9, r6
 8013440:	e058      	b.n	80134f4 <ip4_input+0x118>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013442:	7a7b      	ldrb	r3, [r7, #9]
 8013444:	2b11      	cmp	r3, #17
 8013446:	f000 8098 	beq.w	801357a <ip4_input+0x19e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801344a:	2800      	cmp	r0, #0
 801344c:	d142      	bne.n	80134d4 <ip4_input+0xf8>
    pbuf_free(p);
 801344e:	4620      	mov	r0, r4
 8013450:	f7f8 fe70 	bl	800c134 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8013454:	2000      	movs	r0, #0
 8013456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 801345a:	4601      	mov	r1, r0
 801345c:	4620      	mov	r0, r4
 801345e:	f7f8 ff81 	bl	800c364 <pbuf_realloc>
 8013462:	e7d0      	b.n	8013406 <ip4_input+0x2a>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013464:	bb33      	cbnz	r3, 80134b4 <ip4_input+0xd8>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013466:	b2d2      	uxtb	r2, r2
 8013468:	2a7f      	cmp	r2, #127	@ 0x7f
 801346a:	f000 8092 	beq.w	8013592 <ip4_input+0x1b6>
        NETIF_FOREACH(netif) {
 801346e:	4b5d      	ldr	r3, [pc, #372]	@ (80135e4 <ip4_input+0x208>)
 8013470:	f8d3 9000 	ldr.w	r9, [r3]
 8013474:	f1b9 0f00 	cmp.w	r9, #0
 8013478:	d109      	bne.n	801348e <ip4_input+0xb2>
 801347a:	e08a      	b.n	8013592 <ip4_input+0x1b6>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801347c:	f000 f94c 	bl	8013718 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013480:	b9a0      	cbnz	r0, 80134ac <ip4_input+0xd0>
        NETIF_FOREACH(netif) {
 8013482:	f8d9 9000 	ldr.w	r9, [r9]
 8013486:	f1b9 0f00 	cmp.w	r9, #0
 801348a:	f000 8082 	beq.w	8013592 <ip4_input+0x1b6>
          if (netif == inp) {
 801348e:	454e      	cmp	r6, r9
 8013490:	d0f7      	beq.n	8013482 <ip4_input+0xa6>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013492:	f899 3031 	ldrb.w	r3, [r9, #49]	@ 0x31
 8013496:	07db      	lsls	r3, r3, #31
 8013498:	d5f3      	bpl.n	8013482 <ip4_input+0xa6>
 801349a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d0ef      	beq.n	8013482 <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80134a2:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80134a6:	4649      	mov	r1, r9
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80134a8:	4283      	cmp	r3, r0
 80134aa:	d1e7      	bne.n	801347c <ip4_input+0xa0>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80134ac:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80134b0:	b300      	cbz	r0, 80134f4 <ip4_input+0x118>
 80134b2:	e011      	b.n	80134d8 <ip4_input+0xfc>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80134b4:	6873      	ldr	r3, [r6, #4]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d0d5      	beq.n	8013466 <ip4_input+0x8a>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80134ba:	4293      	cmp	r3, r2
 80134bc:	f000 8088 	beq.w	80135d0 <ip4_input+0x1f4>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80134c0:	4610      	mov	r0, r2
 80134c2:	4631      	mov	r1, r6
 80134c4:	f000 f928 	bl	8013718 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80134c8:	2800      	cmp	r0, #0
 80134ca:	f040 8085 	bne.w	80135d8 <ip4_input+0x1fc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80134ce:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80134d2:	e7c8      	b.n	8013466 <ip4_input+0x8a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80134d4:	f04f 0900 	mov.w	r9, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134d8:	4631      	mov	r1, r6
 80134da:	f000 f91d 	bl	8013718 <ip4_addr_isbroadcast_u32>
 80134de:	2800      	cmp	r0, #0
 80134e0:	d1b5      	bne.n	801344e <ip4_input+0x72>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80134e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80134e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134ea:	2be0      	cmp	r3, #224	@ 0xe0
 80134ec:	d0af      	beq.n	801344e <ip4_input+0x72>
  if (netif == NULL) {
 80134ee:	f1b9 0f00 	cmp.w	r9, #0
 80134f2:	d0ac      	beq.n	801344e <ip4_input+0x72>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80134f4:	88fb      	ldrh	r3, [r7, #6]
 80134f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80134fa:	b133      	cbz	r3, 801350a <ip4_input+0x12e>
    p = ip4_reass(p);
 80134fc:	4620      	mov	r0, r4
 80134fe:	f000 fae7 	bl	8013ad0 <ip4_reass>
    if (p == NULL) {
 8013502:	4604      	mov	r4, r0
 8013504:	2800      	cmp	r0, #0
 8013506:	d0a5      	beq.n	8013454 <ip4_input+0x78>
    iphdr = (const struct ip_hdr *)p->payload;
 8013508:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 801350a:	f8c8 7008 	str.w	r7, [r8, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801350e:	4629      	mov	r1, r5
 8013510:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8013512:	e9c8 9600 	strd	r9, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013516:	783b      	ldrb	r3, [r7, #0]
 8013518:	f003 030f 	and.w	r3, r3, #15
 801351c:	009b      	lsls	r3, r3, #2
 801351e:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013522:	f7f8 fda5 	bl	800c070 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8013526:	7a7b      	ldrb	r3, [r7, #9]
 8013528:	2b06      	cmp	r3, #6
 801352a:	d03b      	beq.n	80135a4 <ip4_input+0x1c8>
 801352c:	2b11      	cmp	r3, #17
 801352e:	d043      	beq.n	80135b8 <ip4_input+0x1dc>
 8013530:	2b01      	cmp	r3, #1
 8013532:	d03c      	beq.n	80135ae <ip4_input+0x1d2>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013534:	4649      	mov	r1, r9
 8013536:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801353a:	f000 f8ed 	bl	8013718 <ip4_addr_isbroadcast_u32>
 801353e:	b968      	cbnz	r0, 801355c <ip4_input+0x180>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013540:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8013544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013548:	2be0      	cmp	r3, #224	@ 0xe0
 801354a:	d007      	beq.n	801355c <ip4_input+0x180>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801354c:	4629      	mov	r1, r5
 801354e:	4620      	mov	r0, r4
 8013550:	f7f8 fdbc 	bl	800c0cc <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013554:	2102      	movs	r1, #2
 8013556:	4620      	mov	r0, r4
 8013558:	f7ff ff04 	bl	8013364 <icmp_dest_unreach>
        pbuf_free(p);
 801355c:	4620      	mov	r0, r4
 801355e:	f7f8 fde9 	bl	800c134 <pbuf_free>
  ip_data.current_netif = NULL;
 8013562:	2300      	movs	r3, #0
}
 8013564:	2000      	movs	r0, #0
  ip_data.current_netif = NULL;
 8013566:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 801356a:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 801356e:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013572:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8013576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801357a:	197b      	adds	r3, r7, r5
 801357c:	885b      	ldrh	r3, [r3, #2]
 801357e:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8013582:	f43f af5c 	beq.w	801343e <ip4_input+0x62>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013586:	2800      	cmp	r0, #0
 8013588:	f43f af61 	beq.w	801344e <ip4_input+0x72>
 801358c:	e7a2      	b.n	80134d4 <ip4_input+0xf8>
      netif = inp;
 801358e:	46b1      	mov	r9, r6
 8013590:	e7a2      	b.n	80134d8 <ip4_input+0xfc>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013592:	7a7b      	ldrb	r3, [r7, #9]
 8013594:	2b11      	cmp	r3, #17
 8013596:	d014      	beq.n	80135c2 <ip4_input+0x1e6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013598:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801359c:	2800      	cmp	r0, #0
 801359e:	f43f af56 	beq.w	801344e <ip4_input+0x72>
 80135a2:	e797      	b.n	80134d4 <ip4_input+0xf8>
        tcp_input(p, inp);
 80135a4:	4631      	mov	r1, r6
 80135a6:	4620      	mov	r0, r4
 80135a8:	f7fb f95e 	bl	800e868 <tcp_input>
        break;
 80135ac:	e7d9      	b.n	8013562 <ip4_input+0x186>
        icmp_input(p, inp);
 80135ae:	4631      	mov	r1, r6
 80135b0:	4620      	mov	r0, r4
 80135b2:	f7ff fe2f 	bl	8013214 <icmp_input>
        break;
 80135b6:	e7d4      	b.n	8013562 <ip4_input+0x186>
        udp_input(p, inp);
 80135b8:	4631      	mov	r1, r6
 80135ba:	4620      	mov	r0, r4
 80135bc:	f7fd fa54 	bl	8010a68 <udp_input>
        break;
 80135c0:	e7cf      	b.n	8013562 <ip4_input+0x186>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80135c2:	197b      	adds	r3, r7, r5
 80135c4:	885b      	ldrh	r3, [r3, #2]
 80135c6:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 80135ca:	d1e5      	bne.n	8013598 <ip4_input+0x1bc>
        netif = inp;
 80135cc:	46b1      	mov	r9, r6
 80135ce:	e791      	b.n	80134f4 <ip4_input+0x118>
 80135d0:	46b1      	mov	r9, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d08e      	beq.n	80134f4 <ip4_input+0x118>
 80135d6:	e77f      	b.n	80134d8 <ip4_input+0xfc>
 80135d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80135dc:	46b1      	mov	r9, r6
 80135de:	2800      	cmp	r0, #0
 80135e0:	d088      	beq.n	80134f4 <ip4_input+0x118>
 80135e2:	e779      	b.n	80134d8 <ip4_input+0xfc>
 80135e4:	24010700 	.word	0x24010700
 80135e8:	24009c28 	.word	0x24009c28

080135ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	4604      	mov	r4, r0
 80135f2:	b083      	sub	sp, #12
 80135f4:	4699      	mov	r9, r3
 80135f6:	460f      	mov	r7, r1
 80135f8:	4616      	mov	r6, r2
 80135fa:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 80135fe:	f89d b034 	ldrb.w	fp, [sp, #52]	@ 0x34
 8013602:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 8013606:	f7f2 fe77 	bl	80062f8 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801360a:	7ba3      	ldrb	r3, [r4, #14]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d13d      	bne.n	801368c <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013610:	2e00      	cmp	r6, #0
 8013612:	d044      	beq.n	801369e <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013614:	2114      	movs	r1, #20
 8013616:	4620      	mov	r0, r4
 8013618:	f7f8 fcfa 	bl	800c010 <pbuf_add_header>
 801361c:	2800      	cmp	r0, #0
 801361e:	d159      	bne.n	80136d4 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013620:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8013622:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013624:	2b13      	cmp	r3, #19
 8013626:	d942      	bls.n	80136ae <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013628:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801362c:	2245      	movs	r2, #69	@ 0x45
    IPH_PROTO_SET(iphdr, proto);
 801362e:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8013632:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013634:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8013636:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 801363a:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801363c:	8920      	ldrh	r0, [r4, #8]
 801363e:	f7f7 fe5f 	bl	800b300 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013642:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80136f0 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 8013646:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013648:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801364a:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 801364e:	71ab      	strb	r3, [r5, #6]
 8013650:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013652:	f7f7 fe55 	bl	800b300 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013656:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801365a:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 801365c:	3301      	adds	r3, #1
 801365e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8013662:	b367      	cbz	r7, 80136be <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013668:	2300      	movs	r3, #0
 801366a:	72ab      	strb	r3, [r5, #10]
 801366c:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801366e:	f8b8 3028 	ldrh.w	r3, [r8, #40]	@ 0x28
 8013672:	b113      	cbz	r3, 801367a <ip4_output_if_src+0x8e>
 8013674:	8922      	ldrh	r2, [r4, #8]
 8013676:	429a      	cmp	r2, r3
 8013678:	d824      	bhi.n	80136c4 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801367a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801367e:	4632      	mov	r2, r6
 8013680:	4621      	mov	r1, r4
 8013682:	4640      	mov	r0, r8
 8013684:	4798      	blx	r3
}
 8013686:	b003      	add	sp, #12
 8013688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801368c:	4b13      	ldr	r3, [pc, #76]	@ (80136dc <ip4_output_if_src+0xf0>)
 801368e:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013692:	4913      	ldr	r1, [pc, #76]	@ (80136e0 <ip4_output_if_src+0xf4>)
 8013694:	4813      	ldr	r0, [pc, #76]	@ (80136e4 <ip4_output_if_src+0xf8>)
 8013696:	f001 f93d 	bl	8014914 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801369a:	2e00      	cmp	r6, #0
 801369c:	d1ba      	bne.n	8013614 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 801369e:	8963      	ldrh	r3, [r4, #10]
 80136a0:	2b13      	cmp	r3, #19
 80136a2:	d917      	bls.n	80136d4 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80136a4:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 80136a6:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 80136a8:	691b      	ldr	r3, [r3, #16]
 80136aa:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80136ac:	e7df      	b.n	801366e <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80136ae:	4b0b      	ldr	r3, [pc, #44]	@ (80136dc <ip4_output_if_src+0xf0>)
 80136b0:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80136b4:	490c      	ldr	r1, [pc, #48]	@ (80136e8 <ip4_output_if_src+0xfc>)
 80136b6:	480b      	ldr	r0, [pc, #44]	@ (80136e4 <ip4_output_if_src+0xf8>)
 80136b8:	f001 f92c 	bl	8014914 <iprintf>
 80136bc:	e7b4      	b.n	8013628 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80136be:	4b0b      	ldr	r3, [pc, #44]	@ (80136ec <ip4_output_if_src+0x100>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	e7d0      	b.n	8013666 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 80136c4:	4632      	mov	r2, r6
 80136c6:	4641      	mov	r1, r8
 80136c8:	4620      	mov	r0, r4
 80136ca:	f000 fc3d 	bl	8013f48 <ip4_frag>
}
 80136ce:	b003      	add	sp, #12
 80136d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 80136d4:	f06f 0001 	mvn.w	r0, #1
 80136d8:	e7d5      	b.n	8013686 <ip4_output_if_src+0x9a>
 80136da:	bf00      	nop
 80136dc:	08018904 	.word	0x08018904
 80136e0:	08018938 	.word	0x08018938
 80136e4:	08015bd0 	.word	0x08015bd0
 80136e8:	08018944 	.word	0x08018944
 80136ec:	080189c0 	.word	0x080189c0
 80136f0:	2401088c 	.word	0x2401088c

080136f4 <ip4_output_if>:
{
 80136f4:	b4f0      	push	{r4, r5, r6, r7}
 80136f6:	9c06      	ldr	r4, [sp, #24]
 80136f8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80136fc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013700:	b11a      	cbz	r2, 801370a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8013702:	b109      	cbz	r1, 8013708 <ip4_output_if+0x14>
 8013704:	680f      	ldr	r7, [r1, #0]
 8013706:	b907      	cbnz	r7, 801370a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8013708:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801370a:	9504      	str	r5, [sp, #16]
 801370c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8013710:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013712:	f7ff bf6b 	b.w	80135ec <ip4_output_if_src>
 8013716:	bf00      	nop

08013718 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013718:	1e42      	subs	r2, r0, #1
{
 801371a:	4603      	mov	r3, r0
  if ((~addr == IPADDR_ANY) ||
 801371c:	3203      	adds	r2, #3
 801371e:	d815      	bhi.n	801374c <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013720:	f891 0031 	ldrb.w	r0, [r1, #49]	@ 0x31
 8013724:	f010 0002 	ands.w	r0, r0, #2
 8013728:	d00f      	beq.n	801374a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801372a:	684a      	ldr	r2, [r1, #4]
 801372c:	429a      	cmp	r2, r3
 801372e:	d00b      	beq.n	8013748 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013730:	6889      	ldr	r1, [r1, #8]
 8013732:	405a      	eors	r2, r3
 8013734:	420a      	tst	r2, r1
 8013736:	d107      	bne.n	8013748 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013738:	43c8      	mvns	r0, r1
 801373a:	ea23 0301 	bic.w	r3, r3, r1
 801373e:	1a18      	subs	r0, r3, r0
 8013740:	fab0 f080 	clz	r0, r0
 8013744:	0940      	lsrs	r0, r0, #5
 8013746:	4770      	bx	lr
    return 0;
 8013748:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 801374a:	4770      	bx	lr
    return 1;
 801374c:	2001      	movs	r0, #1
 801374e:	4770      	bx	lr

08013750 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8013750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8013754:	4e4a      	ldr	r6, [pc, #296]	@ (8013880 <ip4addr_aton+0x130>)
{
 8013756:	b084      	sub	sp, #16
  c = *cp;
 8013758:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 801375a:	5cf2      	ldrb	r2, [r6, r3]
 801375c:	0752      	lsls	r2, r2, #29
 801375e:	d532      	bpl.n	80137c6 <ip4addr_aton+0x76>
  u32_t *pp = parts;
 8013760:	46e9      	mov	r9, sp
 8013762:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8013764:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8013768:	464f      	mov	r7, r9
    if (c == '0') {
 801376a:	2b30      	cmp	r3, #48	@ 0x30
 801376c:	d02f      	beq.n	80137ce <ip4addr_aton+0x7e>
    base = 10;
 801376e:	210a      	movs	r1, #10
 8013770:	3001      	adds	r0, #1
        base = 8;
 8013772:	2400      	movs	r4, #0
 8013774:	e003      	b.n	801377e <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8013776:	f1ae 0430 	sub.w	r4, lr, #48	@ 0x30
        c = *++cp;
 801377a:	7803      	ldrb	r3, [r0, #0]
 801377c:	3001      	adds	r0, #1
      if (lwip_isdigit(c)) {
 801377e:	5cf2      	ldrb	r2, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8013780:	f103 0c0a 	add.w	ip, r3, #10
        val = (val * base) + (u32_t)(c - '0');
 8013784:	fb04 3e01 	mla	lr, r4, r1, r3
      if (lwip_isdigit(c)) {
 8013788:	f012 0f04 	tst.w	r2, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801378c:	f002 0a03 	and.w	sl, r2, #3
      if (lwip_isdigit(c)) {
 8013790:	d1f1      	bne.n	8013776 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8013792:	2910      	cmp	r1, #16
 8013794:	d10d      	bne.n	80137b2 <ip4addr_aton+0x62>
 8013796:	f012 0f44 	tst.w	r2, #68	@ 0x44
 801379a:	d00a      	beq.n	80137b2 <ip4addr_aton+0x62>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801379c:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 80137a0:	7803      	ldrb	r3, [r0, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80137a2:	bf14      	ite	ne
 80137a4:	2241      	movne	r2, #65	@ 0x41
 80137a6:	2261      	moveq	r2, #97	@ 0x61
 80137a8:	ebac 0c02 	sub.w	ip, ip, r2
 80137ac:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
        c = *++cp;
 80137b0:	e7e4      	b.n	801377c <ip4addr_aton+0x2c>
    if (c == '.') {
 80137b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80137b4:	d117      	bne.n	80137e6 <ip4addr_aton+0x96>
      if (pp >= parts + 3) {
 80137b6:	4547      	cmp	r7, r8
 80137b8:	d005      	beq.n	80137c6 <ip4addr_aton+0x76>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 80137ba:	7803      	ldrb	r3, [r0, #0]
      *pp++ = val;
 80137bc:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 80137c0:	5cf2      	ldrb	r2, [r6, r3]
 80137c2:	0752      	lsls	r2, r2, #29
 80137c4:	d4d1      	bmi.n	801376a <ip4addr_aton+0x1a>
      return 0;
 80137c6:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 80137c8:	b004      	add	sp, #16
 80137ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      c = *++cp;
 80137ce:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 80137d0:	f003 02df 	and.w	r2, r3, #223	@ 0xdf
 80137d4:	2a58      	cmp	r2, #88	@ 0x58
 80137d6:	d002      	beq.n	80137de <ip4addr_aton+0x8e>
      c = *++cp;
 80137d8:	3001      	adds	r0, #1
        base = 8;
 80137da:	2108      	movs	r1, #8
 80137dc:	e7c8      	b.n	8013770 <ip4addr_aton+0x20>
        c = *++cp;
 80137de:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 80137e0:	2110      	movs	r1, #16
        c = *++cp;
 80137e2:	3002      	adds	r0, #2
 80137e4:	e7c4      	b.n	8013770 <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 80137e6:	b10b      	cbz	r3, 80137ec <ip4addr_aton+0x9c>
 80137e8:	0713      	lsls	r3, r2, #28
 80137ea:	d5ec      	bpl.n	80137c6 <ip4addr_aton+0x76>
  switch (pp - parts + 1) {
 80137ec:	eba7 0309 	sub.w	r3, r7, r9
 80137f0:	109b      	asrs	r3, r3, #2
 80137f2:	3301      	adds	r3, #1
 80137f4:	2b04      	cmp	r3, #4
 80137f6:	d83c      	bhi.n	8013872 <ip4addr_aton+0x122>
 80137f8:	a201      	add	r2, pc, #4	@ (adr r2, 8013800 <ip4addr_aton+0xb0>)
 80137fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137fe:	bf00      	nop
 8013800:	080137c7 	.word	0x080137c7
 8013804:	08013825 	.word	0x08013825
 8013808:	08013815 	.word	0x08013815
 801380c:	08013857 	.word	0x08013857
 8013810:	08013833 	.word	0x08013833
      if (val > 0xffffffUL) {
 8013814:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 8013818:	d2d5      	bcs.n	80137c6 <ip4addr_aton+0x76>
      if (parts[0] > 0xff) {
 801381a:	9b00      	ldr	r3, [sp, #0]
 801381c:	2bff      	cmp	r3, #255	@ 0xff
 801381e:	d8d2      	bhi.n	80137c6 <ip4addr_aton+0x76>
      val |= parts[0] << 24;
 8013820:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8013824:	b11d      	cbz	r5, 801382e <ip4addr_aton+0xde>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8013826:	4620      	mov	r0, r4
 8013828:	f7f7 fd6e 	bl	800b308 <lwip_htonl>
 801382c:	6028      	str	r0, [r5, #0]
  return 1;
 801382e:	2001      	movs	r0, #1
 8013830:	e7ca      	b.n	80137c8 <ip4addr_aton+0x78>
      if (val > 0xff) {
 8013832:	2cff      	cmp	r4, #255	@ 0xff
 8013834:	d8c7      	bhi.n	80137c6 <ip4addr_aton+0x76>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8013836:	9900      	ldr	r1, [sp, #0]
 8013838:	29ff      	cmp	r1, #255	@ 0xff
 801383a:	d8c4      	bhi.n	80137c6 <ip4addr_aton+0x76>
 801383c:	9b01      	ldr	r3, [sp, #4]
 801383e:	2bff      	cmp	r3, #255	@ 0xff
 8013840:	d8c1      	bhi.n	80137c6 <ip4addr_aton+0x76>
 8013842:	9a02      	ldr	r2, [sp, #8]
 8013844:	2aff      	cmp	r2, #255	@ 0xff
 8013846:	d8be      	bhi.n	80137c6 <ip4addr_aton+0x76>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8013848:	041b      	lsls	r3, r3, #16
 801384a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801384e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013852:	431c      	orrs	r4, r3
      break;
 8013854:	e7e6      	b.n	8013824 <ip4addr_aton+0xd4>
      if (val > 0xffff) {
 8013856:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 801385a:	d2b4      	bcs.n	80137c6 <ip4addr_aton+0x76>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801385c:	9a00      	ldr	r2, [sp, #0]
 801385e:	2aff      	cmp	r2, #255	@ 0xff
 8013860:	d8b1      	bhi.n	80137c6 <ip4addr_aton+0x76>
 8013862:	9b01      	ldr	r3, [sp, #4]
 8013864:	2bff      	cmp	r3, #255	@ 0xff
 8013866:	d8ae      	bhi.n	80137c6 <ip4addr_aton+0x76>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8013868:	041b      	lsls	r3, r3, #16
 801386a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801386e:	431c      	orrs	r4, r3
      break;
 8013870:	e7d8      	b.n	8013824 <ip4addr_aton+0xd4>
      LWIP_ASSERT("unhandled", 0);
 8013872:	4b04      	ldr	r3, [pc, #16]	@ (8013884 <ip4addr_aton+0x134>)
 8013874:	22f9      	movs	r2, #249	@ 0xf9
 8013876:	4904      	ldr	r1, [pc, #16]	@ (8013888 <ip4addr_aton+0x138>)
 8013878:	4804      	ldr	r0, [pc, #16]	@ (801388c <ip4addr_aton+0x13c>)
 801387a:	f001 f84b 	bl	8014914 <iprintf>
      break;
 801387e:	e7d1      	b.n	8013824 <ip4addr_aton+0xd4>
 8013880:	08018c32 	.word	0x08018c32
 8013884:	08018974 	.word	0x08018974
 8013888:	080189b0 	.word	0x080189b0
 801388c:	08015bd0 	.word	0x08015bd0

08013890 <ipaddr_addr>:
{
 8013890:	b500      	push	{lr}
 8013892:	b083      	sub	sp, #12
  if (ip4addr_aton(cp, &val)) {
 8013894:	a901      	add	r1, sp, #4
 8013896:	f7ff ff5b 	bl	8013750 <ip4addr_aton>
 801389a:	b920      	cbnz	r0, 80138a6 <ipaddr_addr+0x16>
  return (IPADDR_NONE);
 801389c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80138a0:	b003      	add	sp, #12
 80138a2:	f85d fb04 	ldr.w	pc, [sp], #4
    return ip4_addr_get_u32(&val);
 80138a6:	9801      	ldr	r0, [sp, #4]
}
 80138a8:	b003      	add	sp, #12
 80138aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80138ae:	bf00      	nop

080138b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80138b0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80138b2:	4604      	mov	r4, r0
 80138b4:	b148      	cbz	r0, 80138ca <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80138b6:	6960      	ldr	r0, [r4, #20]
 80138b8:	b108      	cbz	r0, 80138be <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80138ba:	f7f8 fc3b 	bl	800c134 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80138be:	4621      	mov	r1, r4
 80138c0:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 80138c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80138c6:	f7f8 b901 	b.w	800bacc <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80138ca:	4b04      	ldr	r3, [pc, #16]	@ (80138dc <ipfrag_free_pbuf_custom+0x2c>)
 80138cc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80138d0:	4903      	ldr	r1, [pc, #12]	@ (80138e0 <ipfrag_free_pbuf_custom+0x30>)
 80138d2:	4804      	ldr	r0, [pc, #16]	@ (80138e4 <ipfrag_free_pbuf_custom+0x34>)
 80138d4:	f001 f81e 	bl	8014914 <iprintf>
 80138d8:	e7ed      	b.n	80138b6 <ipfrag_free_pbuf_custom+0x6>
 80138da:	bf00      	nop
 80138dc:	080189c4 	.word	0x080189c4
 80138e0:	08018a00 	.word	0x08018a00
 80138e4:	08015bd0 	.word	0x08015bd0

080138e8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80138e8:	4281      	cmp	r1, r0
{
 80138ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ee:	4606      	mov	r6, r0
 80138f0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80138f2:	d076      	beq.n	80139e2 <ip_reass_free_complete_datagram+0xfa>
  if (prev != NULL) {
 80138f4:	b147      	cbz	r7, 8013908 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	42b3      	cmp	r3, r6
 80138fa:	d005      	beq.n	8013908 <ip_reass_free_complete_datagram+0x20>
 80138fc:	4b40      	ldr	r3, [pc, #256]	@ (8013a00 <ip_reass_free_complete_datagram+0x118>)
 80138fe:	22ad      	movs	r2, #173	@ 0xad
 8013900:	4940      	ldr	r1, [pc, #256]	@ (8013a04 <ip_reass_free_complete_datagram+0x11c>)
 8013902:	4841      	ldr	r0, [pc, #260]	@ (8013a08 <ip_reass_free_complete_datagram+0x120>)
 8013904:	f001 f806 	bl	8014914 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013908:	6874      	ldr	r4, [r6, #4]
 801390a:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801390c:	889a      	ldrh	r2, [r3, #4]
 801390e:	2a00      	cmp	r2, #0
 8013910:	d046      	beq.n	80139a0 <ip_reass_free_complete_datagram+0xb8>
  u16_t pbufs_freed = 0;
 8013912:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013916:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8013a00 <ip_reass_free_complete_datagram+0x118>
 801391a:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8013a20 <ip_reass_free_complete_datagram+0x138>
 801391e:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8013a08 <ip_reass_free_complete_datagram+0x120>
 8013922:	e003      	b.n	801392c <ip_reass_free_complete_datagram+0x44>
    pbuf_free(pcur);
 8013924:	4628      	mov	r0, r5
 8013926:	f7f8 fc05 	bl	800c134 <pbuf_free>
  while (p != NULL) {
 801392a:	b1b4      	cbz	r4, 801395a <ip_reass_free_complete_datagram+0x72>
    iprh = (struct ip_reass_helper *)p->payload;
 801392c:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801392e:	4620      	mov	r0, r4
 8013930:	4625      	mov	r5, r4
    p = iprh->next_pbuf;
 8013932:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8013934:	f7f8 fd90 	bl	800c458 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013938:	4458      	add	r0, fp
 801393a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801393e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013942:	dbef      	blt.n	8013924 <ip_reass_free_complete_datagram+0x3c>
 8013944:	4653      	mov	r3, sl
 8013946:	22cc      	movs	r2, #204	@ 0xcc
 8013948:	4649      	mov	r1, r9
 801394a:	4640      	mov	r0, r8
 801394c:	f000 ffe2 	bl	8014914 <iprintf>
    pbuf_free(pcur);
 8013950:	4628      	mov	r0, r5
 8013952:	f7f8 fbef 	bl	800c134 <pbuf_free>
  while (p != NULL) {
 8013956:	2c00      	cmp	r4, #0
 8013958:	d1e8      	bne.n	801392c <ip_reass_free_complete_datagram+0x44>
  if (reassdatagrams == ipr) {
 801395a:	4b2c      	ldr	r3, [pc, #176]	@ (8013a0c <ip_reass_free_complete_datagram+0x124>)
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	4296      	cmp	r6, r2
 8013960:	d03c      	beq.n	80139dc <ip_reass_free_complete_datagram+0xf4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013962:	2f00      	cmp	r7, #0
 8013964:	d044      	beq.n	80139f0 <ip_reass_free_complete_datagram+0x108>
    prev->next = ipr->next;
 8013966:	6833      	ldr	r3, [r6, #0]
 8013968:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801396a:	4c29      	ldr	r4, [pc, #164]	@ (8013a10 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 801396c:	4631      	mov	r1, r6
 801396e:	2004      	movs	r0, #4
 8013970:	f7f8 f8ac 	bl	800bacc <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013974:	8823      	ldrh	r3, [r4, #0]
 8013976:	455b      	cmp	r3, fp
 8013978:	d305      	bcc.n	8013986 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801397a:	eba3 030b 	sub.w	r3, r3, fp
}
 801397e:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013980:	8023      	strh	r3, [r4, #0]
}
 8013982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013986:	4b1e      	ldr	r3, [pc, #120]	@ (8013a00 <ip_reass_free_complete_datagram+0x118>)
 8013988:	22d2      	movs	r2, #210	@ 0xd2
 801398a:	4922      	ldr	r1, [pc, #136]	@ (8013a14 <ip_reass_free_complete_datagram+0x12c>)
 801398c:	481e      	ldr	r0, [pc, #120]	@ (8013a08 <ip_reass_free_complete_datagram+0x120>)
 801398e:	f000 ffc1 	bl	8014914 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013992:	8823      	ldrh	r3, [r4, #0]
}
 8013994:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013996:	eba3 030b 	sub.w	r3, r3, fp
 801399a:	8023      	strh	r3, [r4, #0]
}
 801399c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 80139a0:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80139a2:	6930      	ldr	r0, [r6, #16]
 80139a4:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 80139a6:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80139a8:	68f5      	ldr	r5, [r6, #12]
 80139aa:	68b2      	ldr	r2, [r6, #8]
 80139ac:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80139ae:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80139b0:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80139b2:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80139b4:	601a      	str	r2, [r3, #0]
 80139b6:	605d      	str	r5, [r3, #4]
 80139b8:	69b2      	ldr	r2, [r6, #24]
 80139ba:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80139bc:	f7ff fcd6 	bl	801336c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80139c0:	4620      	mov	r0, r4
 80139c2:	f7f8 fd49 	bl	800c458 <pbuf_clen>
 80139c6:	4683      	mov	fp, r0
    pbuf_free(p);
 80139c8:	4620      	mov	r0, r4
 80139ca:	f7f8 fbb3 	bl	800c134 <pbuf_free>
  p = ipr->p;
 80139ce:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 80139d0:	2c00      	cmp	r4, #0
 80139d2:	d1a0      	bne.n	8013916 <ip_reass_free_complete_datagram+0x2e>
  if (reassdatagrams == ipr) {
 80139d4:	4b0d      	ldr	r3, [pc, #52]	@ (8013a0c <ip_reass_free_complete_datagram+0x124>)
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	4296      	cmp	r6, r2
 80139da:	d1c2      	bne.n	8013962 <ip_reass_free_complete_datagram+0x7a>
    reassdatagrams = ipr->next;
 80139dc:	6832      	ldr	r2, [r6, #0]
 80139de:	601a      	str	r2, [r3, #0]
 80139e0:	e7c3      	b.n	801396a <ip_reass_free_complete_datagram+0x82>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80139e2:	4b07      	ldr	r3, [pc, #28]	@ (8013a00 <ip_reass_free_complete_datagram+0x118>)
 80139e4:	22ab      	movs	r2, #171	@ 0xab
 80139e6:	490c      	ldr	r1, [pc, #48]	@ (8013a18 <ip_reass_free_complete_datagram+0x130>)
 80139e8:	4807      	ldr	r0, [pc, #28]	@ (8013a08 <ip_reass_free_complete_datagram+0x120>)
 80139ea:	f000 ff93 	bl	8014914 <iprintf>
 80139ee:	e781      	b.n	80138f4 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80139f0:	4b03      	ldr	r3, [pc, #12]	@ (8013a00 <ip_reass_free_complete_datagram+0x118>)
 80139f2:	f240 1245 	movw	r2, #325	@ 0x145
 80139f6:	4909      	ldr	r1, [pc, #36]	@ (8013a1c <ip_reass_free_complete_datagram+0x134>)
 80139f8:	4803      	ldr	r0, [pc, #12]	@ (8013a08 <ip_reass_free_complete_datagram+0x120>)
 80139fa:	f000 ff8b 	bl	8014914 <iprintf>
 80139fe:	e7b2      	b.n	8013966 <ip_reass_free_complete_datagram+0x7e>
 8013a00:	080189c4 	.word	0x080189c4
 8013a04:	08018a18 	.word	0x08018a18
 8013a08:	08015bd0 	.word	0x08015bd0
 8013a0c:	24010890 	.word	0x24010890
 8013a10:	2401088e 	.word	0x2401088e
 8013a14:	08018a68 	.word	0x08018a68
 8013a18:	08018a0c 	.word	0x08018a0c
 8013a1c:	08018a4c 	.word	0x08018a4c
 8013a20:	08018a2c 	.word	0x08018a2c

08013a24 <ip_reass_remove_oldest_datagram>:
{
 8013a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8013a28:	2700      	movs	r7, #0
 8013a2a:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8013a9c <ip_reass_remove_oldest_datagram+0x78>
{
 8013a2e:	4605      	mov	r5, r0
 8013a30:	460e      	mov	r6, r1
    r = reassdatagrams;
 8013a32:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8013a36:	b1f3      	cbz	r3, 8013a76 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8013a38:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013a3a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8013a3e:	4621      	mov	r1, r4
    prev = NULL;
 8013a40:	46a4      	mov	ip, r4
    oldest = NULL;
 8013a42:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013a44:	695a      	ldr	r2, [r3, #20]
 8013a46:	4572      	cmp	r2, lr
 8013a48:	d018      	beq.n	8013a7c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8013a4a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8013a4c:	b318      	cbz	r0, 8013a96 <ip_reass_remove_oldest_datagram+0x72>
        } else if (r->timer <= oldest->timer) {
 8013a4e:	7fc2      	ldrb	r2, [r0, #31]
 8013a50:	f893 901f 	ldrb.w	r9, [r3, #31]
 8013a54:	4591      	cmp	r9, r2
 8013a56:	bf9c      	itt	ls
 8013a58:	4661      	movls	r1, ip
 8013a5a:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	469c      	mov	ip, r3
 8013a60:	4613      	mov	r3, r2
 8013a62:	2a00      	cmp	r2, #0
 8013a64:	d1ee      	bne.n	8013a44 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8013a66:	b110      	cbz	r0, 8013a6e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013a68:	f7ff ff3e 	bl	80138e8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8013a6c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013a6e:	42b7      	cmp	r7, r6
 8013a70:	da01      	bge.n	8013a76 <ip_reass_remove_oldest_datagram+0x52>
 8013a72:	2c01      	cmp	r4, #1
 8013a74:	dcdd      	bgt.n	8013a32 <ip_reass_remove_oldest_datagram+0xe>
}
 8013a76:	4638      	mov	r0, r7
 8013a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013a7c:	699a      	ldr	r2, [r3, #24]
 8013a7e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013a82:	454a      	cmp	r2, r9
 8013a84:	d1e1      	bne.n	8013a4a <ip_reass_remove_oldest_datagram+0x26>
 8013a86:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8013a8a:	88aa      	ldrh	r2, [r5, #4]
 8013a8c:	4591      	cmp	r9, r2
 8013a8e:	d0e5      	beq.n	8013a5c <ip_reass_remove_oldest_datagram+0x38>
        other_datagrams++;
 8013a90:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8013a92:	2800      	cmp	r0, #0
 8013a94:	d1db      	bne.n	8013a4e <ip_reass_remove_oldest_datagram+0x2a>
 8013a96:	4661      	mov	r1, ip
 8013a98:	4618      	mov	r0, r3
 8013a9a:	e7df      	b.n	8013a5c <ip_reass_remove_oldest_datagram+0x38>
 8013a9c:	24010890 	.word	0x24010890

08013aa0 <ip_reass_tmr>:
{
 8013aa0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8013aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8013acc <ip_reass_tmr+0x2c>)
 8013aa4:	681c      	ldr	r4, [r3, #0]
  while (r != NULL) {
 8013aa6:	b14c      	cbz	r4, 8013abc <ip_reass_tmr+0x1c>
  struct ip_reassdata *r, *prev = NULL;
 8013aa8:	2500      	movs	r5, #0
    if (r->timer > 0) {
 8013aaa:	7fe3      	ldrb	r3, [r4, #31]
 8013aac:	4620      	mov	r0, r4
      r = r->next;
 8013aae:	6824      	ldr	r4, [r4, #0]
      r->timer--;
 8013ab0:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8013ab2:	b123      	cbz	r3, 8013abe <ip_reass_tmr+0x1e>
 8013ab4:	4605      	mov	r5, r0
      r->timer--;
 8013ab6:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 8013ab8:	2c00      	cmp	r4, #0
 8013aba:	d1f6      	bne.n	8013aaa <ip_reass_tmr+0xa>
}
 8013abc:	bd38      	pop	{r3, r4, r5, pc}
      ip_reass_free_complete_datagram(tmp, prev);
 8013abe:	4629      	mov	r1, r5
 8013ac0:	f7ff ff12 	bl	80138e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013ac4:	2c00      	cmp	r4, #0
 8013ac6:	d1f0      	bne.n	8013aaa <ip_reass_tmr+0xa>
 8013ac8:	e7f8      	b.n	8013abc <ip_reass_tmr+0x1c>
 8013aca:	bf00      	nop
 8013acc:	24010890 	.word	0x24010890

08013ad0 <ip4_reass>:
{
 8013ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8013ad4:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 8013ad8:	b085      	sub	sp, #20
 8013ada:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013adc:	f899 3000 	ldrb.w	r3, [r9]
 8013ae0:	f003 030f 	and.w	r3, r3, #15
 8013ae4:	2b05      	cmp	r3, #5
 8013ae6:	f040 8089 	bne.w	8013bfc <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013aea:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8013aee:	f7f7 fc07 	bl	800b300 <lwip_htons>
 8013af2:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013af4:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8013af8:	f7f7 fc02 	bl	800b300 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8013afc:	f899 3000 	ldrb.w	r3, [r9]
 8013b00:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8013b04:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8013b08:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013b0c:	d376      	bcc.n	8013bfc <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8013b0e:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013b10:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 8013e24 <ip4_reass+0x354>
  clen = pbuf_clen(p);
 8013b14:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8013b1a:	f7f8 fc9d 	bl	800c458 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013b1e:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 8013b22:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013b24:	4403      	add	r3, r0
 8013b26:	2b0a      	cmp	r3, #10
 8013b28:	f300 80e7 	bgt.w	8013cfa <ip4_reass+0x22a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b2c:	f8df a2f8 	ldr.w	sl, [pc, #760]	@ 8013e28 <ip4_reass+0x358>
 8013b30:	f8da 4000 	ldr.w	r4, [sl]
 8013b34:	2c00      	cmp	r4, #0
 8013b36:	f000 80ee 	beq.w	8013d16 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013b3a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8013b3e:	e003      	b.n	8013b48 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b40:	6824      	ldr	r4, [r4, #0]
 8013b42:	2c00      	cmp	r4, #0
 8013b44:	f000 80e7 	beq.w	8013d16 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013b48:	6963      	ldr	r3, [r4, #20]
 8013b4a:	4293      	cmp	r3, r2
 8013b4c:	d1f8      	bne.n	8013b40 <ip4_reass+0x70>
 8013b4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b52:	69a1      	ldr	r1, [r4, #24]
 8013b54:	4299      	cmp	r1, r3
 8013b56:	d1f3      	bne.n	8013b40 <ip4_reass+0x70>
 8013b58:	89a1      	ldrh	r1, [r4, #12]
 8013b5a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8013b5e:	4299      	cmp	r1, r3
 8013b60:	d1ee      	bne.n	8013b40 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013b62:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8013b66:	f7f7 fbcb 	bl	800b300 <lwip_htons>
 8013b6a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	f000 80ab 	beq.w	8013cca <ip4_reass+0x1fa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013b74:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013b78:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8013b7c:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013b80:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 8013b84:	9302      	str	r3, [sp, #8]
 8013b86:	d108      	bne.n	8013b9a <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8013b88:	9b01      	ldr	r3, [sp, #4]
 8013b8a:	18f3      	adds	r3, r6, r3
 8013b8c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013b8e:	429e      	cmp	r6, r3
 8013b90:	d812      	bhi.n	8013bb8 <ip4_reass+0xe8>
 8013b92:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013b96:	4293      	cmp	r3, r2
 8013b98:	d80e      	bhi.n	8013bb8 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013b9a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013b9e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8013ba2:	f7f7 fbad 	bl	800b300 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8013ba6:	f899 3000 	ldrb.w	r3, [r9]
 8013baa:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8013bae:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8013bb2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013bb6:	d229      	bcs.n	8013c0c <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8013bb8:	6866      	ldr	r6, [r4, #4]
 8013bba:	b9fe      	cbnz	r6, 8013bfc <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013bbc:	f8da 3000 	ldr.w	r3, [sl]
 8013bc0:	42a3      	cmp	r3, r4
 8013bc2:	d014      	beq.n	8013bee <ip4_reass+0x11e>
 8013bc4:	4b93      	ldr	r3, [pc, #588]	@ (8013e14 <ip4_reass+0x344>)
 8013bc6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013bca:	4993      	ldr	r1, [pc, #588]	@ (8013e18 <ip4_reass+0x348>)
 8013bcc:	4893      	ldr	r0, [pc, #588]	@ (8013e1c <ip4_reass+0x34c>)
 8013bce:	f000 fea1 	bl	8014914 <iprintf>
  if (reassdatagrams == ipr) {
 8013bd2:	f8da 3000 	ldr.w	r3, [sl]
 8013bd6:	429c      	cmp	r4, r3
 8013bd8:	d009      	beq.n	8013bee <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013bda:	4b8e      	ldr	r3, [pc, #568]	@ (8013e14 <ip4_reass+0x344>)
 8013bdc:	f240 1245 	movw	r2, #325	@ 0x145
 8013be0:	498f      	ldr	r1, [pc, #572]	@ (8013e20 <ip4_reass+0x350>)
 8013be2:	488e      	ldr	r0, [pc, #568]	@ (8013e1c <ip4_reass+0x34c>)
 8013be4:	f000 fe96 	bl	8014914 <iprintf>
    prev->next = ipr->next;
 8013be8:	6823      	ldr	r3, [r4, #0]
 8013bea:	6033      	str	r3, [r6, #0]
 8013bec:	deff      	udf	#255	@ 0xff
    reassdatagrams = ipr->next;
 8013bee:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8013bf0:	4621      	mov	r1, r4
 8013bf2:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 8013bf4:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 8013bf8:	f7f7 ff68 	bl	800bacc <memp_free>
  pbuf_free(p);
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	f7f8 fa99 	bl	800c134 <pbuf_free>
  return NULL;
 8013c02:	2600      	movs	r6, #0
}
 8013c04:	4630      	mov	r0, r6
 8013c06:	b005      	add	sp, #20
 8013c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8013c0c:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013c0e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
  len = (u16_t)(len - hlen);
 8013c12:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013c16:	f7f7 fb73 	bl	800b300 <lwip_htons>
 8013c1a:	f3c0 020c 	ubfx	r2, r0, #0, #13
 8013c1e:	00d2      	lsls	r2, r2, #3
  iprh->end = (u16_t)(offset + len);
 8013c20:	eb09 0302 	add.w	r3, r9, r2
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013c24:	f8d5 9004 	ldr.w	r9, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 8013c28:	f8a9 3006 	strh.w	r3, [r9, #6]
 8013c2c:	b29b      	uxth	r3, r3
  iprh->start = offset;
 8013c2e:	f8a9 2004 	strh.w	r2, [r9, #4]
  iprh->end = (u16_t)(offset + len);
 8013c32:	4619      	mov	r1, r3
 8013c34:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8013c36:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8013c38:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8013c3a:	f889 3000 	strb.w	r3, [r9]
 8013c3e:	f889 3001 	strb.w	r3, [r9, #1]
 8013c42:	f889 3002 	strb.w	r3, [r9, #2]
 8013c46:	f889 3003 	strb.w	r3, [r9, #3]
  if (iprh->end < offset) {
 8013c4a:	d8b5      	bhi.n	8013bb8 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8013c4c:	6861      	ldr	r1, [r4, #4]
 8013c4e:	2900      	cmp	r1, #0
 8013c50:	f000 80d4 	beq.w	8013dfc <ip4_reass+0x32c>
  int valid = 1;
 8013c54:	f04f 0b01 	mov.w	fp, #1
 8013c58:	4694      	mov	ip, r2
 8013c5a:	e00e      	b.n	8013c7a <ip4_reass+0x1aa>
    } else if (iprh->start == iprh_tmp->start) {
 8013c5c:	d0ce      	beq.n	8013bfc <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 8013c5e:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8013c62:	45f4      	cmp	ip, lr
 8013c64:	d3ca      	bcc.n	8013bfc <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8013c66:	b122      	cbz	r2, 8013c72 <ip4_reass+0x1a2>
        if (iprh_prev->end != iprh_tmp->start) {
 8013c68:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8013c6a:	4282      	cmp	r2, r0
 8013c6c:	bf18      	it	ne
 8013c6e:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 8013c72:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8013c74:	2900      	cmp	r1, #0
 8013c76:	f000 80a6 	beq.w	8013dc6 <ip4_reass+0x2f6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8013c7e:	8898      	ldrh	r0, [r3, #4]
 8013c80:	4584      	cmp	ip, r0
 8013c82:	d2eb      	bcs.n	8013c5c <ip4_reass+0x18c>
      iprh->next_pbuf = q;
 8013c84:	4613      	mov	r3, r2
 8013c86:	f8c9 1000 	str.w	r1, [r9]
 8013c8a:	4662      	mov	r2, ip
 8013c8c:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d064      	beq.n	8013d5c <ip4_reass+0x28c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013c92:	88db      	ldrh	r3, [r3, #6]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d3b1      	bcc.n	8013bfc <ip4_reass+0x12c>
 8013c98:	9903      	ldr	r1, [sp, #12]
 8013c9a:	4281      	cmp	r1, r0
 8013c9c:	d8ae      	bhi.n	8013bfc <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 8013c9e:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 8013ca0:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8013ca4:	d05f      	beq.n	8013d66 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013ca6:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013caa:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013cac:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013cae:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013cb0:	b292      	uxth	r2, r2
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013cb2:	2900      	cmp	r1, #0
 8013cb4:	f000 80ab 	beq.w	8013e0e <ip4_reass+0x33e>
 8013cb8:	07d9      	lsls	r1, r3, #31
 8013cba:	f100 8122 	bmi.w	8013f02 <ip4_reass+0x432>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013cbe:	f8b8 3000 	ldrh.w	r3, [r8]
 8013cc2:	443b      	add	r3, r7
 8013cc4:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8013cc8:	e79b      	b.n	8013c02 <ip4_reass+0x132>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013cca:	89e0      	ldrh	r0, [r4, #14]
 8013ccc:	f7f7 fb18 	bl	800b300 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013cd0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	f43f af4d 	beq.w	8013b74 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013cda:	f8d9 3000 	ldr.w	r3, [r9]
 8013cde:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8013ce2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8013ce6:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8013cea:	60a3      	str	r3, [r4, #8]
 8013cec:	60e0      	str	r0, [r4, #12]
 8013cee:	6121      	str	r1, [r4, #16]
 8013cf0:	6162      	str	r2, [r4, #20]
 8013cf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013cf6:	61a3      	str	r3, [r4, #24]
 8013cf8:	e73c      	b.n	8013b74 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013cfa:	4601      	mov	r1, r0
 8013cfc:	4648      	mov	r0, r9
 8013cfe:	f7ff fe91 	bl	8013a24 <ip_reass_remove_oldest_datagram>
 8013d02:	2800      	cmp	r0, #0
 8013d04:	f43f af7a 	beq.w	8013bfc <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013d08:	f8b8 3000 	ldrh.w	r3, [r8]
 8013d0c:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d0e:	2b0a      	cmp	r3, #10
 8013d10:	f77f af0c 	ble.w	8013b2c <ip4_reass+0x5c>
 8013d14:	e772      	b.n	8013bfc <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013d16:	2004      	movs	r0, #4
 8013d18:	f7f7 fe92 	bl	800ba40 <memp_malloc>
  if (ipr == NULL) {
 8013d1c:	4604      	mov	r4, r0
 8013d1e:	b178      	cbz	r0, 8013d40 <ip4_reass+0x270>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013d20:	2300      	movs	r3, #0
 8013d22:	61e3      	str	r3, [r4, #28]
 8013d24:	60a3      	str	r3, [r4, #8]
 8013d26:	60e3      	str	r3, [r4, #12]
 8013d28:	6123      	str	r3, [r4, #16]
 8013d2a:	6163      	str	r3, [r4, #20]
 8013d2c:	61a3      	str	r3, [r4, #24]
 8013d2e:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8013d30:	f8da 3000 	ldr.w	r3, [sl]
  reassdatagrams = ipr;
 8013d34:	f8ca 4000 	str.w	r4, [sl]
  ipr->next = reassdatagrams;
 8013d38:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8013d3a:	230f      	movs	r3, #15
 8013d3c:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013d3e:	e7cc      	b.n	8013cda <ip4_reass+0x20a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013d40:	4639      	mov	r1, r7
 8013d42:	4648      	mov	r0, r9
 8013d44:	f7ff fe6e 	bl	8013a24 <ip_reass_remove_oldest_datagram>
 8013d48:	4287      	cmp	r7, r0
 8013d4a:	f73f af57 	bgt.w	8013bfc <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013d4e:	2004      	movs	r0, #4
 8013d50:	f7f7 fe76 	bl	800ba40 <memp_malloc>
    if (ipr == NULL)
 8013d54:	4604      	mov	r4, r0
 8013d56:	2800      	cmp	r0, #0
 8013d58:	d1e2      	bne.n	8013d20 <ip4_reass+0x250>
 8013d5a:	e74f      	b.n	8013bfc <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 8013d5c:	9b03      	ldr	r3, [sp, #12]
 8013d5e:	4283      	cmp	r3, r0
 8013d60:	f63f af4c 	bhi.w	8013bfc <ip4_reass+0x12c>
        ipr->p = new_p;
 8013d64:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013d66:	9b02      	ldr	r3, [sp, #8]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d03b      	beq.n	8013de4 <ip4_reass+0x314>
 8013d6c:	7fa3      	ldrb	r3, [r4, #30]
 8013d6e:	07db      	lsls	r3, r3, #31
 8013d70:	d5a5      	bpl.n	8013cbe <ip4_reass+0x1ee>
    if (valid) {
 8013d72:	f1bb 0f00 	cmp.w	fp, #0
 8013d76:	d0a2      	beq.n	8013cbe <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013d78:	6862      	ldr	r2, [r4, #4]
 8013d7a:	2a00      	cmp	r2, #0
 8013d7c:	d09f      	beq.n	8013cbe <ip4_reass+0x1ee>
 8013d7e:	6851      	ldr	r1, [r2, #4]
 8013d80:	888b      	ldrh	r3, [r1, #4]
 8013d82:	b97b      	cbnz	r3, 8013da4 <ip4_reass+0x2d4>
        q = iprh->next_pbuf;
 8013d84:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f000 80bd 	beq.w	8013f08 <ip4_reass+0x438>
 8013d8e:	464a      	mov	r2, r9
 8013d90:	e002      	b.n	8013d98 <ip4_reass+0x2c8>
          q = iprh->next_pbuf;
 8013d92:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d049      	beq.n	8013e2c <ip4_reass+0x35c>
          iprh = (struct ip_reass_helper *)q->payload;
 8013d98:	4610      	mov	r0, r2
 8013d9a:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8013d9c:	88c0      	ldrh	r0, [r0, #6]
 8013d9e:	8893      	ldrh	r3, [r2, #4]
 8013da0:	4298      	cmp	r0, r3
 8013da2:	d0f6      	beq.n	8013d92 <ip4_reass+0x2c2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013da4:	f8b8 3000 	ldrh.w	r3, [r8]
 8013da8:	443b      	add	r3, r7
 8013daa:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8013dae:	9b02      	ldr	r3, [sp, #8]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	f47f af26 	bne.w	8013c02 <ip4_reass+0x132>
 8013db6:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8013db8:	9a01      	ldr	r2, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013dba:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8013dbe:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013dc0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8013dc2:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013dc4:	e71d      	b.n	8013c02 <ip4_reass+0x132>
      if (iprh_prev->end != iprh->start) {
 8013dc6:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 8013dc8:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013dca:	d0cc      	beq.n	8013d66 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013dcc:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013dd0:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013dd2:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013dd4:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013dd6:	b292      	uxth	r2, r2
 8013dd8:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013ddc:	2900      	cmp	r1, #0
 8013dde:	f47f af10 	bne.w	8013c02 <ip4_reass+0x132>
 8013de2:	e7e9      	b.n	8013db8 <ip4_reass+0x2e8>
    if (valid) {
 8013de4:	f1bb 0f00 	cmp.w	fp, #0
 8013de8:	d002      	beq.n	8013df0 <ip4_reass+0x320>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013dea:	6862      	ldr	r2, [r4, #4]
 8013dec:	2a00      	cmp	r2, #0
 8013dee:	d1c6      	bne.n	8013d7e <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013df0:	f8b8 3000 	ldrh.w	r3, [r8]
 8013df4:	443b      	add	r3, r7
 8013df6:	f8a8 3000 	strh.w	r3, [r8]
 8013dfa:	e7dc      	b.n	8013db6 <ip4_reass+0x2e6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013dfc:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 8013dfe:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013e00:	b11b      	cbz	r3, 8013e0a <ip4_reass+0x33a>
 8013e02:	7fa3      	ldrb	r3, [r4, #30]
 8013e04:	07da      	lsls	r2, r3, #31
 8013e06:	f57f af5a 	bpl.w	8013cbe <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013e0a:	6862      	ldr	r2, [r4, #4]
 8013e0c:	e7b7      	b.n	8013d7e <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013e0e:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 8013e12:	e7d1      	b.n	8013db8 <ip4_reass+0x2e8>
 8013e14:	080189c4 	.word	0x080189c4
 8013e18:	08018adc 	.word	0x08018adc
 8013e1c:	08015bd0 	.word	0x08015bd0
 8013e20:	08018a4c 	.word	0x08018a4c
 8013e24:	2401088e 	.word	0x2401088e
 8013e28:	24010890 	.word	0x24010890
          LWIP_ASSERT("sanity check",
 8013e2c:	4291      	cmp	r1, r2
 8013e2e:	4691      	mov	r9, r2
 8013e30:	d06c      	beq.n	8013f0c <ip4_reass+0x43c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013e32:	f8d9 3000 	ldr.w	r3, [r9]
 8013e36:	b133      	cbz	r3, 8013e46 <ip4_reass+0x376>
 8013e38:	4b3d      	ldr	r3, [pc, #244]	@ (8013f30 <ip4_reass+0x460>)
 8013e3a:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013e3e:	493d      	ldr	r1, [pc, #244]	@ (8013f34 <ip4_reass+0x464>)
 8013e40:	483d      	ldr	r0, [pc, #244]	@ (8013f38 <ip4_reass+0x468>)
 8013e42:	f000 fd67 	bl	8014914 <iprintf>
 8013e46:	6862      	ldr	r2, [r4, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013e48:	f8b8 3000 	ldrh.w	r3, [r8]
 8013e4c:	443b      	add	r3, r7
 8013e4e:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8013e52:	9b02      	ldr	r3, [sp, #8]
 8013e54:	b933      	cbnz	r3, 8013e64 <ip4_reass+0x394>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e56:	9b01      	ldr	r3, [sp, #4]
 8013e58:	441e      	add	r6, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013e5a:	7fa3      	ldrb	r3, [r4, #30]
 8013e5c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8013e60:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013e62:	77a3      	strb	r3, [r4, #30]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013e64:	6856      	ldr	r6, [r2, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013e66:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013e68:	68a3      	ldr	r3, [r4, #8]
 8013e6a:	68e5      	ldr	r5, [r4, #12]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013e6c:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013e6e:	6921      	ldr	r1, [r4, #16]
 8013e70:	6962      	ldr	r2, [r4, #20]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013e72:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013e74:	6075      	str	r5, [r6, #4]
 8013e76:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013e78:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013e7a:	60f2      	str	r2, [r6, #12]
 8013e7c:	6033      	str	r3, [r6, #0]
 8013e7e:	69a3      	ldr	r3, [r4, #24]
 8013e80:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013e82:	f7f7 fa3d 	bl	800b300 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8013e86:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013e88:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013e8a:	71b3      	strb	r3, [r6, #6]
 8013e8c:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013e8e:	72b3      	strb	r3, [r6, #10]
 8013e90:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8013e92:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8013e94:	b15d      	cbz	r5, 8013eae <ip4_reass+0x3de>
      iprh = (struct ip_reass_helper *)r->payload;
 8013e96:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8013e98:	4628      	mov	r0, r5
 8013e9a:	2114      	movs	r1, #20
 8013e9c:	f7f8 f8e8 	bl	800c070 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f7f8 fb00 	bl	800c4a8 <pbuf_cat>
      r = iprh->next_pbuf;
 8013ea8:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8013eaa:	2d00      	cmp	r5, #0
 8013eac:	d1f3      	bne.n	8013e96 <ip4_reass+0x3c6>
    if (ipr == reassdatagrams) {
 8013eae:	f8da 5000 	ldr.w	r5, [sl]
 8013eb2:	42a5      	cmp	r5, r4
 8013eb4:	d005      	beq.n	8013ec2 <ip4_reass+0x3f2>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013eb6:	b38d      	cbz	r5, 8013f1c <ip4_reass+0x44c>
        if (ipr_prev->next == ipr) {
 8013eb8:	682b      	ldr	r3, [r5, #0]
 8013eba:	42a3      	cmp	r3, r4
 8013ebc:	d014      	beq.n	8013ee8 <ip4_reass+0x418>
 8013ebe:	461d      	mov	r5, r3
 8013ec0:	e7f9      	b.n	8013eb6 <ip4_reass+0x3e6>
    reassdatagrams = ipr->next;
 8013ec2:	6823      	ldr	r3, [r4, #0]
 8013ec4:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 8013ec8:	4621      	mov	r1, r4
 8013eca:	2004      	movs	r0, #4
 8013ecc:	f7f7 fdfe 	bl	800bacc <memp_free>
    clen = pbuf_clen(p);
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	f7f8 fac1 	bl	800c458 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013ed6:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 8013eda:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013edc:	4283      	cmp	r3, r0
 8013ede:	d306      	bcc.n	8013eee <ip4_reass+0x41e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013ee0:	1b1b      	subs	r3, r3, r4
 8013ee2:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8013ee6:	e68d      	b.n	8013c04 <ip4_reass+0x134>
    prev->next = ipr->next;
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	602b      	str	r3, [r5, #0]
 8013eec:	e7ec      	b.n	8013ec8 <ip4_reass+0x3f8>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013eee:	4b10      	ldr	r3, [pc, #64]	@ (8013f30 <ip4_reass+0x460>)
 8013ef0:	f240 229b 	movw	r2, #667	@ 0x29b
 8013ef4:	4911      	ldr	r1, [pc, #68]	@ (8013f3c <ip4_reass+0x46c>)
 8013ef6:	4810      	ldr	r0, [pc, #64]	@ (8013f38 <ip4_reass+0x468>)
 8013ef8:	f000 fd0c 	bl	8014914 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013efc:	f8b8 3000 	ldrh.w	r3, [r8]
 8013f00:	e7ee      	b.n	8013ee0 <ip4_reass+0x410>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013f02:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 8013f06:	e67c      	b.n	8013c02 <ip4_reass+0x132>
          LWIP_ASSERT("sanity check",
 8013f08:	4589      	cmp	r9, r1
 8013f0a:	d19d      	bne.n	8013e48 <ip4_reass+0x378>
 8013f0c:	4b08      	ldr	r3, [pc, #32]	@ (8013f30 <ip4_reass+0x460>)
 8013f0e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013f12:	490b      	ldr	r1, [pc, #44]	@ (8013f40 <ip4_reass+0x470>)
 8013f14:	4808      	ldr	r0, [pc, #32]	@ (8013f38 <ip4_reass+0x468>)
 8013f16:	f000 fcfd 	bl	8014914 <iprintf>
 8013f1a:	e78a      	b.n	8013e32 <ip4_reass+0x362>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013f1c:	4b04      	ldr	r3, [pc, #16]	@ (8013f30 <ip4_reass+0x460>)
 8013f1e:	f240 1245 	movw	r2, #325	@ 0x145
 8013f22:	4908      	ldr	r1, [pc, #32]	@ (8013f44 <ip4_reass+0x474>)
 8013f24:	4804      	ldr	r0, [pc, #16]	@ (8013f38 <ip4_reass+0x468>)
 8013f26:	f000 fcf5 	bl	8014914 <iprintf>
    prev->next = ipr->next;
 8013f2a:	6823      	ldr	r3, [r4, #0]
 8013f2c:	602b      	str	r3, [r5, #0]
 8013f2e:	deff      	udf	#255	@ 0xff
 8013f30:	080189c4 	.word	0x080189c4
 8013f34:	08018a9c 	.word	0x08018a9c
 8013f38:	08015bd0 	.word	0x08015bd0
 8013f3c:	08018ac0 	.word	0x08018ac0
 8013f40:	08018a8c 	.word	0x08018a8c
 8013f44:	08018a4c 	.word	0x08018a4c

08013f48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013f4c:	8d0b      	ldrh	r3, [r1, #40]	@ 0x28
{
 8013f4e:	b08d      	sub	sp, #52	@ 0x34
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013f50:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8013f54:	4681      	mov	r9, r0
 8013f56:	9107      	str	r1, [sp, #28]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013f58:	f1b3 0114 	subs.w	r1, r3, #20
{
 8013f5c:	920a      	str	r2, [sp, #40]	@ 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013f5e:	bf48      	it	mi
 8013f60:	f1a3 010d 	submi.w	r1, r3, #13
 8013f64:	f3c1 03cf 	ubfx	r3, r1, #3, #16
 8013f68:	9306      	str	r3, [sp, #24]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f6e:	f003 030f 	and.w	r3, r3, #15
 8013f72:	2b05      	cmp	r3, #5
 8013f74:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8013f78:	f040 80dd 	bne.w	8014136 <ip4_frag+0x1ee>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013f7c:	8943      	ldrh	r3, [r0, #10]
 8013f7e:	2b13      	cmp	r3, #19
 8013f80:	f240 80d2 	bls.w	8014128 <ip4_frag+0x1e0>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013f84:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8013f88:	f7f7 f9ba 	bl	800b300 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013f8c:	f8b9 c008 	ldrh.w	ip, [r9, #8]
  ofo = tmp & IP_OFFMASK;
 8013f90:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8013f94:	f1ac 0c14 	sub.w	ip, ip, #20
  ofo = tmp & IP_OFFMASK;
 8013f98:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 8013f9a:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8013f9e:	fa1f fc8c 	uxth.w	ip, ip
 8013fa2:	930b      	str	r3, [sp, #44]	@ 0x2c

  while (left) {
 8013fa4:	f1bc 0f00 	cmp.w	ip, #0
 8013fa8:	f000 80a1 	beq.w	80140ee <ip4_frag+0x1a6>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013fac:	9b06      	ldr	r3, [sp, #24]
  u16_t newpbuflen = 0;
 8013fae:	2400      	movs	r4, #0

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013fb0:	464d      	mov	r5, r9
 8013fb2:	f8cd c010 	str.w	ip, [sp, #16]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013fb6:	00db      	lsls	r3, r3, #3
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	9308      	str	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013fbc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013fc0:	2114      	movs	r1, #20
 8013fc2:	200e      	movs	r0, #14
 8013fc4:	f7f8 f926 	bl	800c214 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013fc8:	9b08      	ldr	r3, [sp, #32]
 8013fca:	9a04      	ldr	r2, [sp, #16]
    if (rambuf == NULL) {
 8013fcc:	4680      	mov	r8, r0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	bf28      	it	cs
 8013fd2:	4613      	movcs	r3, r2
 8013fd4:	4699      	mov	r9, r3
    if (rambuf == NULL) {
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	f000 8098 	beq.w	801410c <ip4_frag+0x1c4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013fdc:	8943      	ldrh	r3, [r0, #10]
 8013fde:	2b13      	cmp	r3, #19
 8013fe0:	f240 8097 	bls.w	8014112 <ip4_frag+0x1ca>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013fe4:	f8da 2000 	ldr.w	r2, [sl]
 8013fe8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013fec:	f8da 7004 	ldr.w	r7, [sl, #4]
 8013ff0:	f8da 0008 	ldr.w	r0, [sl, #8]
 8013ff4:	f8da 100c 	ldr.w	r1, [sl, #12]
 8013ff8:	601a      	str	r2, [r3, #0]
 8013ffa:	605f      	str	r7, [r3, #4]
 8013ffc:	6098      	str	r0, [r3, #8]
 8013ffe:	60d9      	str	r1, [r3, #12]
 8014000:	f8da 2010 	ldr.w	r2, [sl, #16]
 8014004:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014006:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801400a:	9309      	str	r3, [sp, #36]	@ 0x24
    while (left_to_copy) {
 801400c:	f1b9 0f00 	cmp.w	r9, #0
 8014010:	d03c      	beq.n	801408c <ip4_frag+0x144>
      u16_t plen = (u16_t)(p->len - poff);
 8014012:	896b      	ldrh	r3, [r5, #10]
 8014014:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014016:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8014018:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801401a:	d206      	bcs.n	801402a <ip4_frag+0xe2>
 801401c:	4b47      	ldr	r3, [pc, #284]	@ (801413c <ip4_frag+0x1f4>)
 801401e:	f240 322d 	movw	r2, #813	@ 0x32d
 8014022:	4947      	ldr	r1, [pc, #284]	@ (8014140 <ip4_frag+0x1f8>)
 8014024:	4847      	ldr	r0, [pc, #284]	@ (8014144 <ip4_frag+0x1fc>)
 8014026:	f000 fc75 	bl	8014914 <iprintf>
  u16_t newpbuflen = 0;
 801402a:	f8cd 9008 	str.w	r9, [sp, #8]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801402e:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014030:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014032:	429c      	cmp	r4, r3
 8014034:	bf28      	it	cs
 8014036:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014038:	2c00      	cmp	r4, #0
 801403a:	d05c      	beq.n	80140f6 <ip4_frag+0x1ae>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801403c:	f7f7 fd00 	bl	800ba40 <memp_malloc>
 8014040:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014042:	2241      	movs	r2, #65	@ 0x41
 8014044:	4621      	mov	r1, r4
 8014046:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8014048:	f1bb 0f00 	cmp.w	fp, #0
 801404c:	d05b      	beq.n	8014106 <ip4_frag+0x1be>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801404e:	9401      	str	r4, [sp, #4]
 8014050:	465b      	mov	r3, fp
 8014052:	686f      	ldr	r7, [r5, #4]
 8014054:	eb07 0c06 	add.w	ip, r7, r6
 8014058:	f8cd c000 	str.w	ip, [sp]
 801405c:	f7f7 ffb8 	bl	800bfd0 <pbuf_alloced_custom>
 8014060:	4601      	mov	r1, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8014062:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8014064:	2900      	cmp	r1, #0
 8014066:	d04a      	beq.n	80140fe <ip4_frag+0x1b6>
 8014068:	9103      	str	r1, [sp, #12]
      pbuf_ref(p);
 801406a:	f7f8 f9ff 	bl	800c46c <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801406e:	4b36      	ldr	r3, [pc, #216]	@ (8014148 <ip4_frag+0x200>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014070:	4640      	mov	r0, r8
 8014072:	9903      	ldr	r1, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014074:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 8014078:	f8cb 5014 	str.w	r5, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 801407c:	f7f8 fa14 	bl	800c4a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014080:	9b02      	ldr	r3, [sp, #8]
 8014082:	1b1f      	subs	r7, r3, r4
 8014084:	b2bb      	uxth	r3, r7
 8014086:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 8014088:	2b00      	cmp	r3, #0
 801408a:	d134      	bne.n	80140f6 <ip4_frag+0x1ae>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801408c:	9b07      	ldr	r3, [sp, #28]
    poff = (u16_t)(poff + newpbuflen);
 801408e:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014090:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8014092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    poff = (u16_t)(poff + newpbuflen);
 8014094:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8014096:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801409a:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 801409c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 801409e:	4293      	cmp	r3, r2
 80140a0:	dd3f      	ble.n	8014122 <ip4_frag+0x1da>
 80140a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d13c      	bne.n	8014122 <ip4_frag+0x1da>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80140a8:	f7f7 f92a 	bl	800b300 <lwip_htons>
 80140ac:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80140ae:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80140b0:	f109 0014 	add.w	r0, r9, #20
 80140b4:	b280      	uxth	r0, r0
 80140b6:	f7f7 f923 	bl	800b300 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80140ba:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80140bc:	8078      	strh	r0, [r7, #2]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80140be:	4641      	mov	r1, r8
 80140c0:	9807      	ldr	r0, [sp, #28]
 80140c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    IPH_CHKSUM_SET(iphdr, 0);
 80140c4:	72bb      	strb	r3, [r7, #10]
 80140c6:	72fb      	strb	r3, [r7, #11]
    netif->output(netif, rambuf, dest);
 80140c8:	6943      	ldr	r3, [r0, #20]
 80140ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80140cc:	4640      	mov	r0, r8
 80140ce:	f7f8 f831 	bl	800c134 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80140d2:	9b04      	ldr	r3, [sp, #16]
 80140d4:	eba3 0909 	sub.w	r9, r3, r9
    ofo = (u16_t)(ofo + nfb);
 80140d8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80140dc:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 80140de:	fa1f f289 	uxth.w	r2, r9
    ofo = (u16_t)(ofo + nfb);
 80140e2:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 80140e4:	9204      	str	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 80140e6:	9305      	str	r3, [sp, #20]
  while (left) {
 80140e8:	2a00      	cmp	r2, #0
 80140ea:	f47f af67 	bne.w	8013fbc <ip4_frag+0x74>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80140ee:	2000      	movs	r0, #0
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80140f0:	b00d      	add	sp, #52	@ 0x34
 80140f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = p->next;
 80140f6:	682d      	ldr	r5, [r5, #0]
      u16_t plen = (u16_t)(p->len - poff);
 80140f8:	2600      	movs	r6, #0
 80140fa:	896c      	ldrh	r4, [r5, #10]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80140fc:	e797      	b.n	801402e <ip4_frag+0xe6>
  memp_free(MEMP_FRAG_PBUF, p);
 80140fe:	4659      	mov	r1, fp
 8014100:	2005      	movs	r0, #5
 8014102:	f7f7 fce3 	bl	800bacc <memp_free>
        pbuf_free(rambuf);
 8014106:	4640      	mov	r0, r8
 8014108:	f7f8 f814 	bl	800c134 <pbuf_free>
  return ERR_MEM;
 801410c:	f04f 30ff 	mov.w	r0, #4294967295
 8014110:	e7ee      	b.n	80140f0 <ip4_frag+0x1a8>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014112:	4b0a      	ldr	r3, [pc, #40]	@ (801413c <ip4_frag+0x1f4>)
 8014114:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014118:	490c      	ldr	r1, [pc, #48]	@ (801414c <ip4_frag+0x204>)
 801411a:	480a      	ldr	r0, [pc, #40]	@ (8014144 <ip4_frag+0x1fc>)
 801411c:	f000 fbfa 	bl	8014914 <iprintf>
 8014120:	e760      	b.n	8013fe4 <ip4_frag+0x9c>
      tmp = tmp | IP_MF;
 8014122:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8014126:	e7bf      	b.n	80140a8 <ip4_frag+0x160>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014128:	4b04      	ldr	r3, [pc, #16]	@ (801413c <ip4_frag+0x1f4>)
 801412a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801412e:	4908      	ldr	r1, [pc, #32]	@ (8014150 <ip4_frag+0x208>)
 8014130:	4804      	ldr	r0, [pc, #16]	@ (8014144 <ip4_frag+0x1fc>)
 8014132:	f000 fbef 	bl	8014914 <iprintf>
    return ERR_VAL;
 8014136:	f06f 0005 	mvn.w	r0, #5
 801413a:	e7d9      	b.n	80140f0 <ip4_frag+0x1a8>
 801413c:	080189c4 	.word	0x080189c4
 8014140:	08018b38 	.word	0x08018b38
 8014144:	08015bd0 	.word	0x08015bd0
 8014148:	080138b1 	.word	0x080138b1
 801414c:	08018b18 	.word	0x08018b18
 8014150:	08018afc 	.word	0x08018afc

08014154 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	4604      	mov	r4, r0
 8014158:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 801415a:	f7f2 f8cd 	bl	80062f8 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 801415e:	8963      	ldrh	r3, [r4, #10]
 8014160:	2b0e      	cmp	r3, #14
 8014162:	d91a      	bls.n	801419a <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014164:	7be3      	ldrb	r3, [r4, #15]
 8014166:	b91b      	cbnz	r3, 8014170 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 8014168:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
 801416c:	3301      	adds	r3, #1
 801416e:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014170:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014172:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8014174:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8014176:	07d9      	lsls	r1, r3, #31
 8014178:	d50a      	bpl.n	8014190 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801417a:	2b01      	cmp	r3, #1
 801417c:	d030      	beq.n	80141e0 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801417e:	2206      	movs	r2, #6
 8014180:	491d      	ldr	r1, [pc, #116]	@ (80141f8 <ethernet_input+0xa4>)
 8014182:	f000 fc50 	bl	8014a26 <memcmp>
 8014186:	b918      	cbnz	r0, 8014190 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014188:	7b63      	ldrb	r3, [r4, #13]
 801418a:	f043 0308 	orr.w	r3, r3, #8
 801418e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8014190:	2e08      	cmp	r6, #8
 8014192:	d016      	beq.n	80141c2 <ethernet_input+0x6e>
 8014194:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 8014198:	d004      	beq.n	80141a4 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801419a:	4620      	mov	r0, r4
 801419c:	f7f7 ffca 	bl	800c134 <pbuf_free>
  return ERR_OK;
}
 80141a0:	2000      	movs	r0, #0
 80141a2:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80141a4:	f895 3031 	ldrb.w	r3, [r5, #49]	@ 0x31
 80141a8:	071b      	lsls	r3, r3, #28
 80141aa:	d5f6      	bpl.n	801419a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80141ac:	210e      	movs	r1, #14
 80141ae:	4620      	mov	r0, r4
 80141b0:	f7f7 ff5e 	bl	800c070 <pbuf_remove_header>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d1f0      	bne.n	801419a <ethernet_input+0x46>
        etharp_input(p, netif);
 80141b8:	4629      	mov	r1, r5
 80141ba:	4620      	mov	r0, r4
 80141bc:	f7fe fd9a 	bl	8012cf4 <etharp_input>
      break;
 80141c0:	e7ee      	b.n	80141a0 <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80141c2:	f895 3031 	ldrb.w	r3, [r5, #49]	@ 0x31
 80141c6:	071a      	lsls	r2, r3, #28
 80141c8:	d5e7      	bpl.n	801419a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80141ca:	210e      	movs	r1, #14
 80141cc:	4620      	mov	r0, r4
 80141ce:	f7f7 ff4f 	bl	800c070 <pbuf_remove_header>
 80141d2:	2800      	cmp	r0, #0
 80141d4:	d1e1      	bne.n	801419a <ethernet_input+0x46>
        ip4_input(p, netif);
 80141d6:	4629      	mov	r1, r5
 80141d8:	4620      	mov	r0, r4
 80141da:	f7ff f8ff 	bl	80133dc <ip4_input>
      break;
 80141de:	e7df      	b.n	80141a0 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80141e0:	7843      	ldrb	r3, [r0, #1]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d1d4      	bne.n	8014190 <ethernet_input+0x3c>
 80141e6:	7883      	ldrb	r3, [r0, #2]
 80141e8:	2b5e      	cmp	r3, #94	@ 0x5e
 80141ea:	d1d1      	bne.n	8014190 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 80141ec:	7b63      	ldrb	r3, [r4, #13]
 80141ee:	f043 0310 	orr.w	r3, r3, #16
 80141f2:	7363      	strb	r3, [r4, #13]
 80141f4:	e7cc      	b.n	8014190 <ethernet_input+0x3c>
 80141f6:	bf00      	nop
 80141f8:	08018bbc 	.word	0x08018bbc

080141fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	460c      	mov	r4, r1
 8014202:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014204:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8014208:	4616      	mov	r6, r2
 801420a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801420c:	f7f7 f878 	bl	800b300 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014210:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8014212:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014214:	4620      	mov	r0, r4
 8014216:	f7f7 fefb 	bl	800c010 <pbuf_add_header>
 801421a:	b9f0      	cbnz	r0, 801425a <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 801421c:	f7f2 f86c 	bl	80062f8 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8014220:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8014222:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	600b      	str	r3, [r1, #0]
 801422a:	88bb      	ldrh	r3, [r7, #4]
 801422c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801422e:	6833      	ldr	r3, [r6, #0]
 8014230:	f8c1 3006 	str.w	r3, [r1, #6]
 8014234:	88b3      	ldrh	r3, [r6, #4]
 8014236:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014238:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 801423c:	2b06      	cmp	r3, #6
 801423e:	d006      	beq.n	801424e <ethernet_output+0x52>
 8014240:	4b08      	ldr	r3, [pc, #32]	@ (8014264 <ethernet_output+0x68>)
 8014242:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014246:	4908      	ldr	r1, [pc, #32]	@ (8014268 <ethernet_output+0x6c>)
 8014248:	4808      	ldr	r0, [pc, #32]	@ (801426c <ethernet_output+0x70>)
 801424a:	f000 fb63 	bl	8014914 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801424e:	69ab      	ldr	r3, [r5, #24]
 8014250:	4621      	mov	r1, r4
 8014252:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8014254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8014258:	4718      	bx	r3
}
 801425a:	f06f 0001 	mvn.w	r0, #1
 801425e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014262:	bf00      	nop
 8014264:	08018b48 	.word	0x08018b48
 8014268:	08018b80 	.word	0x08018b80
 801426c:	08015bd0 	.word	0x08015bd0

08014270 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014270:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8014272:	2200      	movs	r2, #0
 8014274:	2104      	movs	r1, #4
{
 8014276:	b510      	push	{r4, lr}
 8014278:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801427a:	4618      	mov	r0, r3
 801427c:	f7f2 fa50 	bl	8006720 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014280:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8014284:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8014286:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8014288:	4258      	negs	r0, r3
 801428a:	bd10      	pop	{r4, pc}

0801428c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801428c:	b510      	push	{r4, lr}
 801428e:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8014290:	6800      	ldr	r0, [r0, #0]
 8014292:	f7f2 faf7 	bl	8006884 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8014296:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 801429c:	f7f2 bafc 	b.w	8006898 <osMessageQueueDelete>

080142a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80142a0:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80142a2:	2300      	movs	r3, #0
{
 80142a4:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80142a6:	6800      	ldr	r0, [r0, #0]
{
 80142a8:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80142aa:	461a      	mov	r2, r3
 80142ac:	a901      	add	r1, sp, #4
 80142ae:	f7f2 fa73 	bl	8006798 <osMessageQueuePut>
 80142b2:	3800      	subs	r0, #0
 80142b4:	bf18      	it	ne
 80142b6:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80142b8:	4240      	negs	r0, r0
 80142ba:	b003      	add	sp, #12
 80142bc:	f85d fb04 	ldr.w	pc, [sp], #4

080142c0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80142c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142c2:	4615      	mov	r5, r2
 80142c4:	4606      	mov	r6, r0
 80142c6:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80142c8:	f7f2 f88a 	bl	80063e0 <osKernelGetTickCount>
 80142cc:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 80142ce:	b14d      	cbz	r5, 80142e4 <sys_arch_mbox_fetch+0x24>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80142d0:	462b      	mov	r3, r5
 80142d2:	2200      	movs	r2, #0
 80142d4:	4639      	mov	r1, r7
 80142d6:	6830      	ldr	r0, [r6, #0]
 80142d8:	f7f2 fa9a 	bl	8006810 <osMessageQueueGet>
    if (status == osOK)
 80142dc:	b148      	cbz	r0, 80142f2 <sys_arch_mbox_fetch+0x32>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80142de:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80142e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80142e4:	f04f 33ff 	mov.w	r3, #4294967295
 80142e8:	462a      	mov	r2, r5
 80142ea:	4639      	mov	r1, r7
 80142ec:	6830      	ldr	r0, [r6, #0]
 80142ee:	f7f2 fa8f 	bl	8006810 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80142f2:	f7f2 f875 	bl	80063e0 <osKernelGetTickCount>
 80142f6:	1b00      	subs	r0, r0, r4
}
 80142f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142fa:	bf00      	nop

080142fc <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80142fc:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80142fe:	2300      	movs	r3, #0
 8014300:	6800      	ldr	r0, [r0, #0]
 8014302:	461a      	mov	r2, r3
 8014304:	f7f2 fa84 	bl	8006810 <osMessageQueueGet>
 8014308:	3800      	subs	r0, #0
 801430a:	bf18      	it	ne
 801430c:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 801430e:	4240      	negs	r0, r0
 8014310:	bd08      	pop	{r3, pc}
 8014312:	bf00      	nop

08014314 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 8014314:	6800      	ldr	r0, [r0, #0]
 8014316:	3800      	subs	r0, #0
 8014318:	bf18      	it	ne
 801431a:	2001      	movne	r0, #1
 801431c:	4770      	bx	lr
 801431e:	bf00      	nop

08014320 <sys_mbox_set_invalid>:
    return 0;
  else
    return 1;
}
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
 8014320:	2300      	movs	r3, #0
 8014322:	6003      	str	r3, [r0, #0]
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop

08014328 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014328:	b538      	push	{r3, r4, r5, lr}
 801432a:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801432c:	2200      	movs	r2, #0
 801432e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
{
 8014332:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8014334:	f7f2 f938 	bl	80065a8 <osSemaphoreNew>
 8014338:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 801433a:	b130      	cbz	r0, 801434a <sys_sem_new+0x22>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 801433c:	b10c      	cbz	r4, 8014342 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801433e:	2000      	movs	r0, #0
}
 8014340:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 8014342:	4621      	mov	r1, r4
 8014344:	f7f2 f97c 	bl	8006640 <osSemaphoreAcquire>
 8014348:	e7f9      	b.n	801433e <sys_sem_new+0x16>
    return ERR_MEM;
 801434a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801434e:	bd38      	pop	{r3, r4, r5, pc}

08014350 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014350:	b570      	push	{r4, r5, r6, lr}
 8014352:	460e      	mov	r6, r1
 8014354:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8014356:	f7f2 f843 	bl	80063e0 <osKernelGetTickCount>
 801435a:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 801435c:	b956      	cbnz	r6, 8014374 <sys_arch_sem_wait+0x24>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801435e:	f04f 31ff 	mov.w	r1, #4294967295
 8014362:	6820      	ldr	r0, [r4, #0]
 8014364:	f7f2 f96c 	bl	8006640 <osSemaphoreAcquire>
 8014368:	2800      	cmp	r0, #0
 801436a:	d1f8      	bne.n	801435e <sys_arch_sem_wait+0xe>
    return (osKernelGetTickCount() - starttime);
 801436c:	f7f2 f838 	bl	80063e0 <osKernelGetTickCount>
 8014370:	1b40      	subs	r0, r0, r5
#endif
  }
}
 8014372:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8014374:	4631      	mov	r1, r6
 8014376:	6820      	ldr	r0, [r4, #0]
 8014378:	f7f2 f962 	bl	8006640 <osSemaphoreAcquire>
 801437c:	2800      	cmp	r0, #0
 801437e:	d0f5      	beq.n	801436c <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 8014380:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014384:	bd70      	pop	{r4, r5, r6, pc}
 8014386:	bf00      	nop

08014388 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8014388:	6800      	ldr	r0, [r0, #0]
 801438a:	f7f2 b98b 	b.w	80066a4 <osSemaphoreRelease>
 801438e:	bf00      	nop

08014390 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014390:	6800      	ldr	r0, [r0, #0]
 8014392:	f7f2 b9b1 	b.w	80066f8 <osSemaphoreDelete>
 8014396:	bf00      	nop

08014398 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8014398:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 801439a:	3800      	subs	r0, #0
 801439c:	bf18      	it	ne
 801439e:	2001      	movne	r0, #1
 80143a0:	4770      	bx	lr
 80143a2:	bf00      	nop

080143a4 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 80143a4:	2300      	movs	r3, #0
 80143a6:	6003      	str	r3, [r0, #0]
}
 80143a8:	4770      	bx	lr
 80143aa:	bf00      	nop

080143ac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80143ac:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80143ae:	2000      	movs	r0, #0
 80143b0:	f7f2 f872 	bl	8006498 <osMutexNew>
 80143b4:	4b01      	ldr	r3, [pc, #4]	@ (80143bc <sys_init+0x10>)
 80143b6:	6018      	str	r0, [r3, #0]
#endif
}
 80143b8:	bd08      	pop	{r3, pc}
 80143ba:	bf00      	nop
 80143bc:	24010894 	.word	0x24010894

080143c0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80143c0:	b510      	push	{r4, lr}
 80143c2:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80143c4:	2000      	movs	r0, #0
 80143c6:	f7f2 f867 	bl	8006498 <osMutexNew>
#endif

  if(*mutex == NULL)
 80143ca:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 80143ce:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 80143d0:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 80143d2:	4258      	negs	r0, r3
 80143d4:	bd10      	pop	{r4, pc}
 80143d6:	bf00      	nop

080143d8 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80143d8:	f04f 31ff 	mov.w	r1, #4294967295
 80143dc:	6800      	ldr	r0, [r0, #0]
 80143de:	f7f2 b89d 	b.w	800651c <osMutexAcquire>
 80143e2:	bf00      	nop

080143e4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80143e4:	6800      	ldr	r0, [r0, #0]
 80143e6:	f7f2 b8bd 	b.w	8006564 <osMutexRelease>
 80143ea:	bf00      	nop

080143ec <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80143ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ee:	b08b      	sub	sp, #44	@ 0x2c
 80143f0:	4617      	mov	r7, r2
 80143f2:	460e      	mov	r6, r1
 80143f4:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80143f6:	2220      	movs	r2, #32
 80143f8:	2100      	movs	r1, #0
 80143fa:	a802      	add	r0, sp, #8
{
 80143fc:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 80143fe:	f000 fb3c 	bl	8014a7a <memset>
 8014402:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014404:	4639      	mov	r1, r7
 8014406:	aa01      	add	r2, sp, #4
 8014408:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 801440a:	9501      	str	r5, [sp, #4]
 801440c:	9406      	str	r4, [sp, #24]
 801440e:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 8014410:	f7f1 ffee 	bl	80063f0 <osThreadNew>
#endif
}
 8014414:	b00b      	add	sp, #44	@ 0x2c
 8014416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014418 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014418:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801441a:	4b04      	ldr	r3, [pc, #16]	@ (801442c <sys_arch_protect+0x14>)
 801441c:	f04f 31ff 	mov.w	r1, #4294967295
 8014420:	6818      	ldr	r0, [r3, #0]
 8014422:	f7f2 f87b 	bl	800651c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 8014426:	2001      	movs	r0, #1
 8014428:	bd08      	pop	{r3, pc}
 801442a:	bf00      	nop
 801442c:	24010894 	.word	0x24010894

08014430 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014430:	4b01      	ldr	r3, [pc, #4]	@ (8014438 <sys_arch_unprotect+0x8>)
 8014432:	6818      	ldr	r0, [r3, #0]
 8014434:	f7f2 b896 	b.w	8006564 <osMutexRelease>
 8014438:	24010894 	.word	0x24010894

0801443c <atoi>:
 801443c:	220a      	movs	r2, #10
 801443e:	2100      	movs	r1, #0
 8014440:	f000 b99c 	b.w	801477c <strtol>

08014444 <malloc>:
 8014444:	4b02      	ldr	r3, [pc, #8]	@ (8014450 <malloc+0xc>)
 8014446:	4601      	mov	r1, r0
 8014448:	6818      	ldr	r0, [r3, #0]
 801444a:	f000 b825 	b.w	8014498 <_malloc_r>
 801444e:	bf00      	nop
 8014450:	2400009c 	.word	0x2400009c

08014454 <sbrk_aligned>:
 8014454:	b570      	push	{r4, r5, r6, lr}
 8014456:	4e0f      	ldr	r6, [pc, #60]	@ (8014494 <sbrk_aligned+0x40>)
 8014458:	460c      	mov	r4, r1
 801445a:	6831      	ldr	r1, [r6, #0]
 801445c:	4605      	mov	r5, r0
 801445e:	b911      	cbnz	r1, 8014466 <sbrk_aligned+0x12>
 8014460:	f000 fb9e 	bl	8014ba0 <_sbrk_r>
 8014464:	6030      	str	r0, [r6, #0]
 8014466:	4621      	mov	r1, r4
 8014468:	4628      	mov	r0, r5
 801446a:	f000 fb99 	bl	8014ba0 <_sbrk_r>
 801446e:	1c43      	adds	r3, r0, #1
 8014470:	d103      	bne.n	801447a <sbrk_aligned+0x26>
 8014472:	f04f 34ff 	mov.w	r4, #4294967295
 8014476:	4620      	mov	r0, r4
 8014478:	bd70      	pop	{r4, r5, r6, pc}
 801447a:	1cc4      	adds	r4, r0, #3
 801447c:	f024 0403 	bic.w	r4, r4, #3
 8014480:	42a0      	cmp	r0, r4
 8014482:	d0f8      	beq.n	8014476 <sbrk_aligned+0x22>
 8014484:	1a21      	subs	r1, r4, r0
 8014486:	4628      	mov	r0, r5
 8014488:	f000 fb8a 	bl	8014ba0 <_sbrk_r>
 801448c:	3001      	adds	r0, #1
 801448e:	d1f2      	bne.n	8014476 <sbrk_aligned+0x22>
 8014490:	e7ef      	b.n	8014472 <sbrk_aligned+0x1e>
 8014492:	bf00      	nop
 8014494:	24010898 	.word	0x24010898

08014498 <_malloc_r>:
 8014498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801449c:	1ccd      	adds	r5, r1, #3
 801449e:	f025 0503 	bic.w	r5, r5, #3
 80144a2:	3508      	adds	r5, #8
 80144a4:	2d0c      	cmp	r5, #12
 80144a6:	bf38      	it	cc
 80144a8:	250c      	movcc	r5, #12
 80144aa:	2d00      	cmp	r5, #0
 80144ac:	4606      	mov	r6, r0
 80144ae:	db01      	blt.n	80144b4 <_malloc_r+0x1c>
 80144b0:	42a9      	cmp	r1, r5
 80144b2:	d904      	bls.n	80144be <_malloc_r+0x26>
 80144b4:	230c      	movs	r3, #12
 80144b6:	6033      	str	r3, [r6, #0]
 80144b8:	2000      	movs	r0, #0
 80144ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014594 <_malloc_r+0xfc>
 80144c2:	f000 f869 	bl	8014598 <__malloc_lock>
 80144c6:	f8d8 3000 	ldr.w	r3, [r8]
 80144ca:	461c      	mov	r4, r3
 80144cc:	bb44      	cbnz	r4, 8014520 <_malloc_r+0x88>
 80144ce:	4629      	mov	r1, r5
 80144d0:	4630      	mov	r0, r6
 80144d2:	f7ff ffbf 	bl	8014454 <sbrk_aligned>
 80144d6:	1c43      	adds	r3, r0, #1
 80144d8:	4604      	mov	r4, r0
 80144da:	d158      	bne.n	801458e <_malloc_r+0xf6>
 80144dc:	f8d8 4000 	ldr.w	r4, [r8]
 80144e0:	4627      	mov	r7, r4
 80144e2:	2f00      	cmp	r7, #0
 80144e4:	d143      	bne.n	801456e <_malloc_r+0xd6>
 80144e6:	2c00      	cmp	r4, #0
 80144e8:	d04b      	beq.n	8014582 <_malloc_r+0xea>
 80144ea:	6823      	ldr	r3, [r4, #0]
 80144ec:	4639      	mov	r1, r7
 80144ee:	4630      	mov	r0, r6
 80144f0:	eb04 0903 	add.w	r9, r4, r3
 80144f4:	f000 fb54 	bl	8014ba0 <_sbrk_r>
 80144f8:	4581      	cmp	r9, r0
 80144fa:	d142      	bne.n	8014582 <_malloc_r+0xea>
 80144fc:	6821      	ldr	r1, [r4, #0]
 80144fe:	1a6d      	subs	r5, r5, r1
 8014500:	4629      	mov	r1, r5
 8014502:	4630      	mov	r0, r6
 8014504:	f7ff ffa6 	bl	8014454 <sbrk_aligned>
 8014508:	3001      	adds	r0, #1
 801450a:	d03a      	beq.n	8014582 <_malloc_r+0xea>
 801450c:	6823      	ldr	r3, [r4, #0]
 801450e:	442b      	add	r3, r5
 8014510:	6023      	str	r3, [r4, #0]
 8014512:	f8d8 3000 	ldr.w	r3, [r8]
 8014516:	685a      	ldr	r2, [r3, #4]
 8014518:	bb62      	cbnz	r2, 8014574 <_malloc_r+0xdc>
 801451a:	f8c8 7000 	str.w	r7, [r8]
 801451e:	e00f      	b.n	8014540 <_malloc_r+0xa8>
 8014520:	6822      	ldr	r2, [r4, #0]
 8014522:	1b52      	subs	r2, r2, r5
 8014524:	d420      	bmi.n	8014568 <_malloc_r+0xd0>
 8014526:	2a0b      	cmp	r2, #11
 8014528:	d917      	bls.n	801455a <_malloc_r+0xc2>
 801452a:	1961      	adds	r1, r4, r5
 801452c:	42a3      	cmp	r3, r4
 801452e:	6025      	str	r5, [r4, #0]
 8014530:	bf18      	it	ne
 8014532:	6059      	strne	r1, [r3, #4]
 8014534:	6863      	ldr	r3, [r4, #4]
 8014536:	bf08      	it	eq
 8014538:	f8c8 1000 	streq.w	r1, [r8]
 801453c:	5162      	str	r2, [r4, r5]
 801453e:	604b      	str	r3, [r1, #4]
 8014540:	4630      	mov	r0, r6
 8014542:	f000 f82f 	bl	80145a4 <__malloc_unlock>
 8014546:	f104 000b 	add.w	r0, r4, #11
 801454a:	1d23      	adds	r3, r4, #4
 801454c:	f020 0007 	bic.w	r0, r0, #7
 8014550:	1ac2      	subs	r2, r0, r3
 8014552:	bf1c      	itt	ne
 8014554:	1a1b      	subne	r3, r3, r0
 8014556:	50a3      	strne	r3, [r4, r2]
 8014558:	e7af      	b.n	80144ba <_malloc_r+0x22>
 801455a:	6862      	ldr	r2, [r4, #4]
 801455c:	42a3      	cmp	r3, r4
 801455e:	bf0c      	ite	eq
 8014560:	f8c8 2000 	streq.w	r2, [r8]
 8014564:	605a      	strne	r2, [r3, #4]
 8014566:	e7eb      	b.n	8014540 <_malloc_r+0xa8>
 8014568:	4623      	mov	r3, r4
 801456a:	6864      	ldr	r4, [r4, #4]
 801456c:	e7ae      	b.n	80144cc <_malloc_r+0x34>
 801456e:	463c      	mov	r4, r7
 8014570:	687f      	ldr	r7, [r7, #4]
 8014572:	e7b6      	b.n	80144e2 <_malloc_r+0x4a>
 8014574:	461a      	mov	r2, r3
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	42a3      	cmp	r3, r4
 801457a:	d1fb      	bne.n	8014574 <_malloc_r+0xdc>
 801457c:	2300      	movs	r3, #0
 801457e:	6053      	str	r3, [r2, #4]
 8014580:	e7de      	b.n	8014540 <_malloc_r+0xa8>
 8014582:	230c      	movs	r3, #12
 8014584:	6033      	str	r3, [r6, #0]
 8014586:	4630      	mov	r0, r6
 8014588:	f000 f80c 	bl	80145a4 <__malloc_unlock>
 801458c:	e794      	b.n	80144b8 <_malloc_r+0x20>
 801458e:	6005      	str	r5, [r0, #0]
 8014590:	e7d6      	b.n	8014540 <_malloc_r+0xa8>
 8014592:	bf00      	nop
 8014594:	2401089c 	.word	0x2401089c

08014598 <__malloc_lock>:
 8014598:	4801      	ldr	r0, [pc, #4]	@ (80145a0 <__malloc_lock+0x8>)
 801459a:	f000 bb4e 	b.w	8014c3a <__retarget_lock_acquire_recursive>
 801459e:	bf00      	nop
 80145a0:	240109e0 	.word	0x240109e0

080145a4 <__malloc_unlock>:
 80145a4:	4801      	ldr	r0, [pc, #4]	@ (80145ac <__malloc_unlock+0x8>)
 80145a6:	f000 bb49 	b.w	8014c3c <__retarget_lock_release_recursive>
 80145aa:	bf00      	nop
 80145ac:	240109e0 	.word	0x240109e0

080145b0 <rand>:
 80145b0:	4b16      	ldr	r3, [pc, #88]	@ (801460c <rand+0x5c>)
 80145b2:	b510      	push	{r4, lr}
 80145b4:	681c      	ldr	r4, [r3, #0]
 80145b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80145b8:	b9b3      	cbnz	r3, 80145e8 <rand+0x38>
 80145ba:	2018      	movs	r0, #24
 80145bc:	f7ff ff42 	bl	8014444 <malloc>
 80145c0:	4602      	mov	r2, r0
 80145c2:	6320      	str	r0, [r4, #48]	@ 0x30
 80145c4:	b920      	cbnz	r0, 80145d0 <rand+0x20>
 80145c6:	4b12      	ldr	r3, [pc, #72]	@ (8014610 <rand+0x60>)
 80145c8:	4812      	ldr	r0, [pc, #72]	@ (8014614 <rand+0x64>)
 80145ca:	2152      	movs	r1, #82	@ 0x52
 80145cc:	f000 fb46 	bl	8014c5c <__assert_func>
 80145d0:	4911      	ldr	r1, [pc, #68]	@ (8014618 <rand+0x68>)
 80145d2:	4b12      	ldr	r3, [pc, #72]	@ (801461c <rand+0x6c>)
 80145d4:	e9c0 1300 	strd	r1, r3, [r0]
 80145d8:	4b11      	ldr	r3, [pc, #68]	@ (8014620 <rand+0x70>)
 80145da:	6083      	str	r3, [r0, #8]
 80145dc:	230b      	movs	r3, #11
 80145de:	8183      	strh	r3, [r0, #12]
 80145e0:	2100      	movs	r1, #0
 80145e2:	2001      	movs	r0, #1
 80145e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80145e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80145ea:	480e      	ldr	r0, [pc, #56]	@ (8014624 <rand+0x74>)
 80145ec:	690b      	ldr	r3, [r1, #16]
 80145ee:	694c      	ldr	r4, [r1, #20]
 80145f0:	4a0d      	ldr	r2, [pc, #52]	@ (8014628 <rand+0x78>)
 80145f2:	4358      	muls	r0, r3
 80145f4:	fb02 0004 	mla	r0, r2, r4, r0
 80145f8:	fba3 3202 	umull	r3, r2, r3, r2
 80145fc:	3301      	adds	r3, #1
 80145fe:	eb40 0002 	adc.w	r0, r0, r2
 8014602:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014606:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801460a:	bd10      	pop	{r4, pc}
 801460c:	2400009c 	.word	0x2400009c
 8014610:	08018bc2 	.word	0x08018bc2
 8014614:	08018bd9 	.word	0x08018bd9
 8014618:	abcd330e 	.word	0xabcd330e
 801461c:	e66d1234 	.word	0xe66d1234
 8014620:	0005deec 	.word	0x0005deec
 8014624:	5851f42d 	.word	0x5851f42d
 8014628:	4c957f2d 	.word	0x4c957f2d

0801462c <_realloc_r>:
 801462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014630:	4680      	mov	r8, r0
 8014632:	4615      	mov	r5, r2
 8014634:	460c      	mov	r4, r1
 8014636:	b921      	cbnz	r1, 8014642 <_realloc_r+0x16>
 8014638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801463c:	4611      	mov	r1, r2
 801463e:	f7ff bf2b 	b.w	8014498 <_malloc_r>
 8014642:	b92a      	cbnz	r2, 8014650 <_realloc_r+0x24>
 8014644:	f000 fb28 	bl	8014c98 <_free_r>
 8014648:	2400      	movs	r4, #0
 801464a:	4620      	mov	r0, r4
 801464c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014650:	f000 fb6c 	bl	8014d2c <_malloc_usable_size_r>
 8014654:	4285      	cmp	r5, r0
 8014656:	4606      	mov	r6, r0
 8014658:	d802      	bhi.n	8014660 <_realloc_r+0x34>
 801465a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801465e:	d8f4      	bhi.n	801464a <_realloc_r+0x1e>
 8014660:	4629      	mov	r1, r5
 8014662:	4640      	mov	r0, r8
 8014664:	f7ff ff18 	bl	8014498 <_malloc_r>
 8014668:	4607      	mov	r7, r0
 801466a:	2800      	cmp	r0, #0
 801466c:	d0ec      	beq.n	8014648 <_realloc_r+0x1c>
 801466e:	42b5      	cmp	r5, r6
 8014670:	462a      	mov	r2, r5
 8014672:	4621      	mov	r1, r4
 8014674:	bf28      	it	cs
 8014676:	4632      	movcs	r2, r6
 8014678:	f000 fae1 	bl	8014c3e <memcpy>
 801467c:	4621      	mov	r1, r4
 801467e:	4640      	mov	r0, r8
 8014680:	f000 fb0a 	bl	8014c98 <_free_r>
 8014684:	463c      	mov	r4, r7
 8014686:	e7e0      	b.n	801464a <_realloc_r+0x1e>

08014688 <_strtol_l.constprop.0>:
 8014688:	2b24      	cmp	r3, #36	@ 0x24
 801468a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801468e:	4686      	mov	lr, r0
 8014690:	4690      	mov	r8, r2
 8014692:	d801      	bhi.n	8014698 <_strtol_l.constprop.0+0x10>
 8014694:	2b01      	cmp	r3, #1
 8014696:	d106      	bne.n	80146a6 <_strtol_l.constprop.0+0x1e>
 8014698:	f000 faa4 	bl	8014be4 <__errno>
 801469c:	2316      	movs	r3, #22
 801469e:	6003      	str	r3, [r0, #0]
 80146a0:	2000      	movs	r0, #0
 80146a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146a6:	4834      	ldr	r0, [pc, #208]	@ (8014778 <_strtol_l.constprop.0+0xf0>)
 80146a8:	460d      	mov	r5, r1
 80146aa:	462a      	mov	r2, r5
 80146ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80146b0:	5d06      	ldrb	r6, [r0, r4]
 80146b2:	f016 0608 	ands.w	r6, r6, #8
 80146b6:	d1f8      	bne.n	80146aa <_strtol_l.constprop.0+0x22>
 80146b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80146ba:	d12d      	bne.n	8014718 <_strtol_l.constprop.0+0x90>
 80146bc:	782c      	ldrb	r4, [r5, #0]
 80146be:	2601      	movs	r6, #1
 80146c0:	1c95      	adds	r5, r2, #2
 80146c2:	f033 0210 	bics.w	r2, r3, #16
 80146c6:	d109      	bne.n	80146dc <_strtol_l.constprop.0+0x54>
 80146c8:	2c30      	cmp	r4, #48	@ 0x30
 80146ca:	d12a      	bne.n	8014722 <_strtol_l.constprop.0+0x9a>
 80146cc:	782a      	ldrb	r2, [r5, #0]
 80146ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80146d2:	2a58      	cmp	r2, #88	@ 0x58
 80146d4:	d125      	bne.n	8014722 <_strtol_l.constprop.0+0x9a>
 80146d6:	786c      	ldrb	r4, [r5, #1]
 80146d8:	2310      	movs	r3, #16
 80146da:	3502      	adds	r5, #2
 80146dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80146e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80146e4:	2200      	movs	r2, #0
 80146e6:	fbbc f9f3 	udiv	r9, ip, r3
 80146ea:	4610      	mov	r0, r2
 80146ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80146f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80146f4:	2f09      	cmp	r7, #9
 80146f6:	d81b      	bhi.n	8014730 <_strtol_l.constprop.0+0xa8>
 80146f8:	463c      	mov	r4, r7
 80146fa:	42a3      	cmp	r3, r4
 80146fc:	dd27      	ble.n	801474e <_strtol_l.constprop.0+0xc6>
 80146fe:	1c57      	adds	r7, r2, #1
 8014700:	d007      	beq.n	8014712 <_strtol_l.constprop.0+0x8a>
 8014702:	4581      	cmp	r9, r0
 8014704:	d320      	bcc.n	8014748 <_strtol_l.constprop.0+0xc0>
 8014706:	d101      	bne.n	801470c <_strtol_l.constprop.0+0x84>
 8014708:	45a2      	cmp	sl, r4
 801470a:	db1d      	blt.n	8014748 <_strtol_l.constprop.0+0xc0>
 801470c:	fb00 4003 	mla	r0, r0, r3, r4
 8014710:	2201      	movs	r2, #1
 8014712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014716:	e7eb      	b.n	80146f0 <_strtol_l.constprop.0+0x68>
 8014718:	2c2b      	cmp	r4, #43	@ 0x2b
 801471a:	bf04      	itt	eq
 801471c:	782c      	ldrbeq	r4, [r5, #0]
 801471e:	1c95      	addeq	r5, r2, #2
 8014720:	e7cf      	b.n	80146c2 <_strtol_l.constprop.0+0x3a>
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1da      	bne.n	80146dc <_strtol_l.constprop.0+0x54>
 8014726:	2c30      	cmp	r4, #48	@ 0x30
 8014728:	bf0c      	ite	eq
 801472a:	2308      	moveq	r3, #8
 801472c:	230a      	movne	r3, #10
 801472e:	e7d5      	b.n	80146dc <_strtol_l.constprop.0+0x54>
 8014730:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014734:	2f19      	cmp	r7, #25
 8014736:	d801      	bhi.n	801473c <_strtol_l.constprop.0+0xb4>
 8014738:	3c37      	subs	r4, #55	@ 0x37
 801473a:	e7de      	b.n	80146fa <_strtol_l.constprop.0+0x72>
 801473c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014740:	2f19      	cmp	r7, #25
 8014742:	d804      	bhi.n	801474e <_strtol_l.constprop.0+0xc6>
 8014744:	3c57      	subs	r4, #87	@ 0x57
 8014746:	e7d8      	b.n	80146fa <_strtol_l.constprop.0+0x72>
 8014748:	f04f 32ff 	mov.w	r2, #4294967295
 801474c:	e7e1      	b.n	8014712 <_strtol_l.constprop.0+0x8a>
 801474e:	1c53      	adds	r3, r2, #1
 8014750:	d108      	bne.n	8014764 <_strtol_l.constprop.0+0xdc>
 8014752:	2322      	movs	r3, #34	@ 0x22
 8014754:	f8ce 3000 	str.w	r3, [lr]
 8014758:	4660      	mov	r0, ip
 801475a:	f1b8 0f00 	cmp.w	r8, #0
 801475e:	d0a0      	beq.n	80146a2 <_strtol_l.constprop.0+0x1a>
 8014760:	1e69      	subs	r1, r5, #1
 8014762:	e006      	b.n	8014772 <_strtol_l.constprop.0+0xea>
 8014764:	b106      	cbz	r6, 8014768 <_strtol_l.constprop.0+0xe0>
 8014766:	4240      	negs	r0, r0
 8014768:	f1b8 0f00 	cmp.w	r8, #0
 801476c:	d099      	beq.n	80146a2 <_strtol_l.constprop.0+0x1a>
 801476e:	2a00      	cmp	r2, #0
 8014770:	d1f6      	bne.n	8014760 <_strtol_l.constprop.0+0xd8>
 8014772:	f8c8 1000 	str.w	r1, [r8]
 8014776:	e794      	b.n	80146a2 <_strtol_l.constprop.0+0x1a>
 8014778:	08018c32 	.word	0x08018c32

0801477c <strtol>:
 801477c:	4613      	mov	r3, r2
 801477e:	460a      	mov	r2, r1
 8014780:	4601      	mov	r1, r0
 8014782:	4802      	ldr	r0, [pc, #8]	@ (801478c <strtol+0x10>)
 8014784:	6800      	ldr	r0, [r0, #0]
 8014786:	f7ff bf7f 	b.w	8014688 <_strtol_l.constprop.0>
 801478a:	bf00      	nop
 801478c:	2400009c 	.word	0x2400009c

08014790 <std>:
 8014790:	2300      	movs	r3, #0
 8014792:	b510      	push	{r4, lr}
 8014794:	4604      	mov	r4, r0
 8014796:	e9c0 3300 	strd	r3, r3, [r0]
 801479a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801479e:	6083      	str	r3, [r0, #8]
 80147a0:	8181      	strh	r1, [r0, #12]
 80147a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80147a4:	81c2      	strh	r2, [r0, #14]
 80147a6:	6183      	str	r3, [r0, #24]
 80147a8:	4619      	mov	r1, r3
 80147aa:	2208      	movs	r2, #8
 80147ac:	305c      	adds	r0, #92	@ 0x5c
 80147ae:	f000 f964 	bl	8014a7a <memset>
 80147b2:	4b0d      	ldr	r3, [pc, #52]	@ (80147e8 <std+0x58>)
 80147b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80147b6:	4b0d      	ldr	r3, [pc, #52]	@ (80147ec <std+0x5c>)
 80147b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80147ba:	4b0d      	ldr	r3, [pc, #52]	@ (80147f0 <std+0x60>)
 80147bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80147be:	4b0d      	ldr	r3, [pc, #52]	@ (80147f4 <std+0x64>)
 80147c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80147c2:	4b0d      	ldr	r3, [pc, #52]	@ (80147f8 <std+0x68>)
 80147c4:	6224      	str	r4, [r4, #32]
 80147c6:	429c      	cmp	r4, r3
 80147c8:	d006      	beq.n	80147d8 <std+0x48>
 80147ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80147ce:	4294      	cmp	r4, r2
 80147d0:	d002      	beq.n	80147d8 <std+0x48>
 80147d2:	33d0      	adds	r3, #208	@ 0xd0
 80147d4:	429c      	cmp	r4, r3
 80147d6:	d105      	bne.n	80147e4 <std+0x54>
 80147d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80147dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147e0:	f000 ba2a 	b.w	8014c38 <__retarget_lock_init_recursive>
 80147e4:	bd10      	pop	{r4, pc}
 80147e6:	bf00      	nop
 80147e8:	080149a1 	.word	0x080149a1
 80147ec:	080149c3 	.word	0x080149c3
 80147f0:	080149fb 	.word	0x080149fb
 80147f4:	08014a1f 	.word	0x08014a1f
 80147f8:	240108a0 	.word	0x240108a0

080147fc <stdio_exit_handler>:
 80147fc:	4a02      	ldr	r2, [pc, #8]	@ (8014808 <stdio_exit_handler+0xc>)
 80147fe:	4903      	ldr	r1, [pc, #12]	@ (801480c <stdio_exit_handler+0x10>)
 8014800:	4803      	ldr	r0, [pc, #12]	@ (8014810 <stdio_exit_handler+0x14>)
 8014802:	f000 b869 	b.w	80148d8 <_fwalk_sglue>
 8014806:	bf00      	nop
 8014808:	24000090 	.word	0x24000090
 801480c:	08015695 	.word	0x08015695
 8014810:	240000a0 	.word	0x240000a0

08014814 <cleanup_stdio>:
 8014814:	6841      	ldr	r1, [r0, #4]
 8014816:	4b0c      	ldr	r3, [pc, #48]	@ (8014848 <cleanup_stdio+0x34>)
 8014818:	4299      	cmp	r1, r3
 801481a:	b510      	push	{r4, lr}
 801481c:	4604      	mov	r4, r0
 801481e:	d001      	beq.n	8014824 <cleanup_stdio+0x10>
 8014820:	f000 ff38 	bl	8015694 <_fflush_r>
 8014824:	68a1      	ldr	r1, [r4, #8]
 8014826:	4b09      	ldr	r3, [pc, #36]	@ (801484c <cleanup_stdio+0x38>)
 8014828:	4299      	cmp	r1, r3
 801482a:	d002      	beq.n	8014832 <cleanup_stdio+0x1e>
 801482c:	4620      	mov	r0, r4
 801482e:	f000 ff31 	bl	8015694 <_fflush_r>
 8014832:	68e1      	ldr	r1, [r4, #12]
 8014834:	4b06      	ldr	r3, [pc, #24]	@ (8014850 <cleanup_stdio+0x3c>)
 8014836:	4299      	cmp	r1, r3
 8014838:	d004      	beq.n	8014844 <cleanup_stdio+0x30>
 801483a:	4620      	mov	r0, r4
 801483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014840:	f000 bf28 	b.w	8015694 <_fflush_r>
 8014844:	bd10      	pop	{r4, pc}
 8014846:	bf00      	nop
 8014848:	240108a0 	.word	0x240108a0
 801484c:	24010908 	.word	0x24010908
 8014850:	24010970 	.word	0x24010970

08014854 <global_stdio_init.part.0>:
 8014854:	b510      	push	{r4, lr}
 8014856:	4b0b      	ldr	r3, [pc, #44]	@ (8014884 <global_stdio_init.part.0+0x30>)
 8014858:	4c0b      	ldr	r4, [pc, #44]	@ (8014888 <global_stdio_init.part.0+0x34>)
 801485a:	4a0c      	ldr	r2, [pc, #48]	@ (801488c <global_stdio_init.part.0+0x38>)
 801485c:	601a      	str	r2, [r3, #0]
 801485e:	4620      	mov	r0, r4
 8014860:	2200      	movs	r2, #0
 8014862:	2104      	movs	r1, #4
 8014864:	f7ff ff94 	bl	8014790 <std>
 8014868:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801486c:	2201      	movs	r2, #1
 801486e:	2109      	movs	r1, #9
 8014870:	f7ff ff8e 	bl	8014790 <std>
 8014874:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014878:	2202      	movs	r2, #2
 801487a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801487e:	2112      	movs	r1, #18
 8014880:	f7ff bf86 	b.w	8014790 <std>
 8014884:	240109d8 	.word	0x240109d8
 8014888:	240108a0 	.word	0x240108a0
 801488c:	080147fd 	.word	0x080147fd

08014890 <__sfp_lock_acquire>:
 8014890:	4801      	ldr	r0, [pc, #4]	@ (8014898 <__sfp_lock_acquire+0x8>)
 8014892:	f000 b9d2 	b.w	8014c3a <__retarget_lock_acquire_recursive>
 8014896:	bf00      	nop
 8014898:	240109e1 	.word	0x240109e1

0801489c <__sfp_lock_release>:
 801489c:	4801      	ldr	r0, [pc, #4]	@ (80148a4 <__sfp_lock_release+0x8>)
 801489e:	f000 b9cd 	b.w	8014c3c <__retarget_lock_release_recursive>
 80148a2:	bf00      	nop
 80148a4:	240109e1 	.word	0x240109e1

080148a8 <__sinit>:
 80148a8:	b510      	push	{r4, lr}
 80148aa:	4604      	mov	r4, r0
 80148ac:	f7ff fff0 	bl	8014890 <__sfp_lock_acquire>
 80148b0:	6a23      	ldr	r3, [r4, #32]
 80148b2:	b11b      	cbz	r3, 80148bc <__sinit+0x14>
 80148b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148b8:	f7ff bff0 	b.w	801489c <__sfp_lock_release>
 80148bc:	4b04      	ldr	r3, [pc, #16]	@ (80148d0 <__sinit+0x28>)
 80148be:	6223      	str	r3, [r4, #32]
 80148c0:	4b04      	ldr	r3, [pc, #16]	@ (80148d4 <__sinit+0x2c>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d1f5      	bne.n	80148b4 <__sinit+0xc>
 80148c8:	f7ff ffc4 	bl	8014854 <global_stdio_init.part.0>
 80148cc:	e7f2      	b.n	80148b4 <__sinit+0xc>
 80148ce:	bf00      	nop
 80148d0:	08014815 	.word	0x08014815
 80148d4:	240109d8 	.word	0x240109d8

080148d8 <_fwalk_sglue>:
 80148d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148dc:	4607      	mov	r7, r0
 80148de:	4688      	mov	r8, r1
 80148e0:	4614      	mov	r4, r2
 80148e2:	2600      	movs	r6, #0
 80148e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148e8:	f1b9 0901 	subs.w	r9, r9, #1
 80148ec:	d505      	bpl.n	80148fa <_fwalk_sglue+0x22>
 80148ee:	6824      	ldr	r4, [r4, #0]
 80148f0:	2c00      	cmp	r4, #0
 80148f2:	d1f7      	bne.n	80148e4 <_fwalk_sglue+0xc>
 80148f4:	4630      	mov	r0, r6
 80148f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148fa:	89ab      	ldrh	r3, [r5, #12]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d907      	bls.n	8014910 <_fwalk_sglue+0x38>
 8014900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014904:	3301      	adds	r3, #1
 8014906:	d003      	beq.n	8014910 <_fwalk_sglue+0x38>
 8014908:	4629      	mov	r1, r5
 801490a:	4638      	mov	r0, r7
 801490c:	47c0      	blx	r8
 801490e:	4306      	orrs	r6, r0
 8014910:	3568      	adds	r5, #104	@ 0x68
 8014912:	e7e9      	b.n	80148e8 <_fwalk_sglue+0x10>

08014914 <iprintf>:
 8014914:	b40f      	push	{r0, r1, r2, r3}
 8014916:	b507      	push	{r0, r1, r2, lr}
 8014918:	4906      	ldr	r1, [pc, #24]	@ (8014934 <iprintf+0x20>)
 801491a:	ab04      	add	r3, sp, #16
 801491c:	6808      	ldr	r0, [r1, #0]
 801491e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014922:	6881      	ldr	r1, [r0, #8]
 8014924:	9301      	str	r3, [sp, #4]
 8014926:	f000 fb8b 	bl	8015040 <_vfiprintf_r>
 801492a:	b003      	add	sp, #12
 801492c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014930:	b004      	add	sp, #16
 8014932:	4770      	bx	lr
 8014934:	2400009c 	.word	0x2400009c

08014938 <sniprintf>:
 8014938:	b40c      	push	{r2, r3}
 801493a:	b530      	push	{r4, r5, lr}
 801493c:	4b17      	ldr	r3, [pc, #92]	@ (801499c <sniprintf+0x64>)
 801493e:	1e0c      	subs	r4, r1, #0
 8014940:	681d      	ldr	r5, [r3, #0]
 8014942:	b09d      	sub	sp, #116	@ 0x74
 8014944:	da08      	bge.n	8014958 <sniprintf+0x20>
 8014946:	238b      	movs	r3, #139	@ 0x8b
 8014948:	602b      	str	r3, [r5, #0]
 801494a:	f04f 30ff 	mov.w	r0, #4294967295
 801494e:	b01d      	add	sp, #116	@ 0x74
 8014950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014954:	b002      	add	sp, #8
 8014956:	4770      	bx	lr
 8014958:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801495c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014960:	bf14      	ite	ne
 8014962:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014966:	4623      	moveq	r3, r4
 8014968:	9304      	str	r3, [sp, #16]
 801496a:	9307      	str	r3, [sp, #28]
 801496c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014970:	9002      	str	r0, [sp, #8]
 8014972:	9006      	str	r0, [sp, #24]
 8014974:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014978:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801497a:	ab21      	add	r3, sp, #132	@ 0x84
 801497c:	a902      	add	r1, sp, #8
 801497e:	4628      	mov	r0, r5
 8014980:	9301      	str	r3, [sp, #4]
 8014982:	f000 fa37 	bl	8014df4 <_svfiprintf_r>
 8014986:	1c43      	adds	r3, r0, #1
 8014988:	bfbc      	itt	lt
 801498a:	238b      	movlt	r3, #139	@ 0x8b
 801498c:	602b      	strlt	r3, [r5, #0]
 801498e:	2c00      	cmp	r4, #0
 8014990:	d0dd      	beq.n	801494e <sniprintf+0x16>
 8014992:	9b02      	ldr	r3, [sp, #8]
 8014994:	2200      	movs	r2, #0
 8014996:	701a      	strb	r2, [r3, #0]
 8014998:	e7d9      	b.n	801494e <sniprintf+0x16>
 801499a:	bf00      	nop
 801499c:	2400009c 	.word	0x2400009c

080149a0 <__sread>:
 80149a0:	b510      	push	{r4, lr}
 80149a2:	460c      	mov	r4, r1
 80149a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a8:	f000 f8e8 	bl	8014b7c <_read_r>
 80149ac:	2800      	cmp	r0, #0
 80149ae:	bfab      	itete	ge
 80149b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80149b2:	89a3      	ldrhlt	r3, [r4, #12]
 80149b4:	181b      	addge	r3, r3, r0
 80149b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80149ba:	bfac      	ite	ge
 80149bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80149be:	81a3      	strhlt	r3, [r4, #12]
 80149c0:	bd10      	pop	{r4, pc}

080149c2 <__swrite>:
 80149c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c6:	461f      	mov	r7, r3
 80149c8:	898b      	ldrh	r3, [r1, #12]
 80149ca:	05db      	lsls	r3, r3, #23
 80149cc:	4605      	mov	r5, r0
 80149ce:	460c      	mov	r4, r1
 80149d0:	4616      	mov	r6, r2
 80149d2:	d505      	bpl.n	80149e0 <__swrite+0x1e>
 80149d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d8:	2302      	movs	r3, #2
 80149da:	2200      	movs	r2, #0
 80149dc:	f000 f8bc 	bl	8014b58 <_lseek_r>
 80149e0:	89a3      	ldrh	r3, [r4, #12]
 80149e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80149ea:	81a3      	strh	r3, [r4, #12]
 80149ec:	4632      	mov	r2, r6
 80149ee:	463b      	mov	r3, r7
 80149f0:	4628      	mov	r0, r5
 80149f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149f6:	f000 b8e3 	b.w	8014bc0 <_write_r>

080149fa <__sseek>:
 80149fa:	b510      	push	{r4, lr}
 80149fc:	460c      	mov	r4, r1
 80149fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a02:	f000 f8a9 	bl	8014b58 <_lseek_r>
 8014a06:	1c43      	adds	r3, r0, #1
 8014a08:	89a3      	ldrh	r3, [r4, #12]
 8014a0a:	bf15      	itete	ne
 8014a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a16:	81a3      	strheq	r3, [r4, #12]
 8014a18:	bf18      	it	ne
 8014a1a:	81a3      	strhne	r3, [r4, #12]
 8014a1c:	bd10      	pop	{r4, pc}

08014a1e <__sclose>:
 8014a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a22:	f000 b833 	b.w	8014a8c <_close_r>

08014a26 <memcmp>:
 8014a26:	b510      	push	{r4, lr}
 8014a28:	3901      	subs	r1, #1
 8014a2a:	4402      	add	r2, r0
 8014a2c:	4290      	cmp	r0, r2
 8014a2e:	d101      	bne.n	8014a34 <memcmp+0xe>
 8014a30:	2000      	movs	r0, #0
 8014a32:	e005      	b.n	8014a40 <memcmp+0x1a>
 8014a34:	7803      	ldrb	r3, [r0, #0]
 8014a36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014a3a:	42a3      	cmp	r3, r4
 8014a3c:	d001      	beq.n	8014a42 <memcmp+0x1c>
 8014a3e:	1b18      	subs	r0, r3, r4
 8014a40:	bd10      	pop	{r4, pc}
 8014a42:	3001      	adds	r0, #1
 8014a44:	e7f2      	b.n	8014a2c <memcmp+0x6>

08014a46 <memmove>:
 8014a46:	4288      	cmp	r0, r1
 8014a48:	b510      	push	{r4, lr}
 8014a4a:	eb01 0402 	add.w	r4, r1, r2
 8014a4e:	d902      	bls.n	8014a56 <memmove+0x10>
 8014a50:	4284      	cmp	r4, r0
 8014a52:	4623      	mov	r3, r4
 8014a54:	d807      	bhi.n	8014a66 <memmove+0x20>
 8014a56:	1e43      	subs	r3, r0, #1
 8014a58:	42a1      	cmp	r1, r4
 8014a5a:	d008      	beq.n	8014a6e <memmove+0x28>
 8014a5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a64:	e7f8      	b.n	8014a58 <memmove+0x12>
 8014a66:	4402      	add	r2, r0
 8014a68:	4601      	mov	r1, r0
 8014a6a:	428a      	cmp	r2, r1
 8014a6c:	d100      	bne.n	8014a70 <memmove+0x2a>
 8014a6e:	bd10      	pop	{r4, pc}
 8014a70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a78:	e7f7      	b.n	8014a6a <memmove+0x24>

08014a7a <memset>:
 8014a7a:	4402      	add	r2, r0
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d100      	bne.n	8014a84 <memset+0xa>
 8014a82:	4770      	bx	lr
 8014a84:	f803 1b01 	strb.w	r1, [r3], #1
 8014a88:	e7f9      	b.n	8014a7e <memset+0x4>
	...

08014a8c <_close_r>:
 8014a8c:	b538      	push	{r3, r4, r5, lr}
 8014a8e:	4d06      	ldr	r5, [pc, #24]	@ (8014aa8 <_close_r+0x1c>)
 8014a90:	2300      	movs	r3, #0
 8014a92:	4604      	mov	r4, r0
 8014a94:	4608      	mov	r0, r1
 8014a96:	602b      	str	r3, [r5, #0]
 8014a98:	f7ec f998 	bl	8000dcc <_close>
 8014a9c:	1c43      	adds	r3, r0, #1
 8014a9e:	d102      	bne.n	8014aa6 <_close_r+0x1a>
 8014aa0:	682b      	ldr	r3, [r5, #0]
 8014aa2:	b103      	cbz	r3, 8014aa6 <_close_r+0x1a>
 8014aa4:	6023      	str	r3, [r4, #0]
 8014aa6:	bd38      	pop	{r3, r4, r5, pc}
 8014aa8:	240109dc 	.word	0x240109dc

08014aac <_reclaim_reent>:
 8014aac:	4b29      	ldr	r3, [pc, #164]	@ (8014b54 <_reclaim_reent+0xa8>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	4283      	cmp	r3, r0
 8014ab2:	b570      	push	{r4, r5, r6, lr}
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	d04b      	beq.n	8014b50 <_reclaim_reent+0xa4>
 8014ab8:	69c3      	ldr	r3, [r0, #28]
 8014aba:	b1ab      	cbz	r3, 8014ae8 <_reclaim_reent+0x3c>
 8014abc:	68db      	ldr	r3, [r3, #12]
 8014abe:	b16b      	cbz	r3, 8014adc <_reclaim_reent+0x30>
 8014ac0:	2500      	movs	r5, #0
 8014ac2:	69e3      	ldr	r3, [r4, #28]
 8014ac4:	68db      	ldr	r3, [r3, #12]
 8014ac6:	5959      	ldr	r1, [r3, r5]
 8014ac8:	2900      	cmp	r1, #0
 8014aca:	d13b      	bne.n	8014b44 <_reclaim_reent+0x98>
 8014acc:	3504      	adds	r5, #4
 8014ace:	2d80      	cmp	r5, #128	@ 0x80
 8014ad0:	d1f7      	bne.n	8014ac2 <_reclaim_reent+0x16>
 8014ad2:	69e3      	ldr	r3, [r4, #28]
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	68d9      	ldr	r1, [r3, #12]
 8014ad8:	f000 f8de 	bl	8014c98 <_free_r>
 8014adc:	69e3      	ldr	r3, [r4, #28]
 8014ade:	6819      	ldr	r1, [r3, #0]
 8014ae0:	b111      	cbz	r1, 8014ae8 <_reclaim_reent+0x3c>
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f000 f8d8 	bl	8014c98 <_free_r>
 8014ae8:	6961      	ldr	r1, [r4, #20]
 8014aea:	b111      	cbz	r1, 8014af2 <_reclaim_reent+0x46>
 8014aec:	4620      	mov	r0, r4
 8014aee:	f000 f8d3 	bl	8014c98 <_free_r>
 8014af2:	69e1      	ldr	r1, [r4, #28]
 8014af4:	b111      	cbz	r1, 8014afc <_reclaim_reent+0x50>
 8014af6:	4620      	mov	r0, r4
 8014af8:	f000 f8ce 	bl	8014c98 <_free_r>
 8014afc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014afe:	b111      	cbz	r1, 8014b06 <_reclaim_reent+0x5a>
 8014b00:	4620      	mov	r0, r4
 8014b02:	f000 f8c9 	bl	8014c98 <_free_r>
 8014b06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b08:	b111      	cbz	r1, 8014b10 <_reclaim_reent+0x64>
 8014b0a:	4620      	mov	r0, r4
 8014b0c:	f000 f8c4 	bl	8014c98 <_free_r>
 8014b10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014b12:	b111      	cbz	r1, 8014b1a <_reclaim_reent+0x6e>
 8014b14:	4620      	mov	r0, r4
 8014b16:	f000 f8bf 	bl	8014c98 <_free_r>
 8014b1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014b1c:	b111      	cbz	r1, 8014b24 <_reclaim_reent+0x78>
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f000 f8ba 	bl	8014c98 <_free_r>
 8014b24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014b26:	b111      	cbz	r1, 8014b2e <_reclaim_reent+0x82>
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f000 f8b5 	bl	8014c98 <_free_r>
 8014b2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014b30:	b111      	cbz	r1, 8014b38 <_reclaim_reent+0x8c>
 8014b32:	4620      	mov	r0, r4
 8014b34:	f000 f8b0 	bl	8014c98 <_free_r>
 8014b38:	6a23      	ldr	r3, [r4, #32]
 8014b3a:	b14b      	cbz	r3, 8014b50 <_reclaim_reent+0xa4>
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b42:	4718      	bx	r3
 8014b44:	680e      	ldr	r6, [r1, #0]
 8014b46:	4620      	mov	r0, r4
 8014b48:	f000 f8a6 	bl	8014c98 <_free_r>
 8014b4c:	4631      	mov	r1, r6
 8014b4e:	e7bb      	b.n	8014ac8 <_reclaim_reent+0x1c>
 8014b50:	bd70      	pop	{r4, r5, r6, pc}
 8014b52:	bf00      	nop
 8014b54:	2400009c 	.word	0x2400009c

08014b58 <_lseek_r>:
 8014b58:	b538      	push	{r3, r4, r5, lr}
 8014b5a:	4d07      	ldr	r5, [pc, #28]	@ (8014b78 <_lseek_r+0x20>)
 8014b5c:	4604      	mov	r4, r0
 8014b5e:	4608      	mov	r0, r1
 8014b60:	4611      	mov	r1, r2
 8014b62:	2200      	movs	r2, #0
 8014b64:	602a      	str	r2, [r5, #0]
 8014b66:	461a      	mov	r2, r3
 8014b68:	f7ec f93c 	bl	8000de4 <_lseek>
 8014b6c:	1c43      	adds	r3, r0, #1
 8014b6e:	d102      	bne.n	8014b76 <_lseek_r+0x1e>
 8014b70:	682b      	ldr	r3, [r5, #0]
 8014b72:	b103      	cbz	r3, 8014b76 <_lseek_r+0x1e>
 8014b74:	6023      	str	r3, [r4, #0]
 8014b76:	bd38      	pop	{r3, r4, r5, pc}
 8014b78:	240109dc 	.word	0x240109dc

08014b7c <_read_r>:
 8014b7c:	b538      	push	{r3, r4, r5, lr}
 8014b7e:	4d07      	ldr	r5, [pc, #28]	@ (8014b9c <_read_r+0x20>)
 8014b80:	4604      	mov	r4, r0
 8014b82:	4608      	mov	r0, r1
 8014b84:	4611      	mov	r1, r2
 8014b86:	2200      	movs	r2, #0
 8014b88:	602a      	str	r2, [r5, #0]
 8014b8a:	461a      	mov	r2, r3
 8014b8c:	f7ec f902 	bl	8000d94 <_read>
 8014b90:	1c43      	adds	r3, r0, #1
 8014b92:	d102      	bne.n	8014b9a <_read_r+0x1e>
 8014b94:	682b      	ldr	r3, [r5, #0]
 8014b96:	b103      	cbz	r3, 8014b9a <_read_r+0x1e>
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	bd38      	pop	{r3, r4, r5, pc}
 8014b9c:	240109dc 	.word	0x240109dc

08014ba0 <_sbrk_r>:
 8014ba0:	b538      	push	{r3, r4, r5, lr}
 8014ba2:	4d06      	ldr	r5, [pc, #24]	@ (8014bbc <_sbrk_r+0x1c>)
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	4608      	mov	r0, r1
 8014baa:	602b      	str	r3, [r5, #0]
 8014bac:	f7ec f91c 	bl	8000de8 <_sbrk>
 8014bb0:	1c43      	adds	r3, r0, #1
 8014bb2:	d102      	bne.n	8014bba <_sbrk_r+0x1a>
 8014bb4:	682b      	ldr	r3, [r5, #0]
 8014bb6:	b103      	cbz	r3, 8014bba <_sbrk_r+0x1a>
 8014bb8:	6023      	str	r3, [r4, #0]
 8014bba:	bd38      	pop	{r3, r4, r5, pc}
 8014bbc:	240109dc 	.word	0x240109dc

08014bc0 <_write_r>:
 8014bc0:	b538      	push	{r3, r4, r5, lr}
 8014bc2:	4d07      	ldr	r5, [pc, #28]	@ (8014be0 <_write_r+0x20>)
 8014bc4:	4604      	mov	r4, r0
 8014bc6:	4608      	mov	r0, r1
 8014bc8:	4611      	mov	r1, r2
 8014bca:	2200      	movs	r2, #0
 8014bcc:	602a      	str	r2, [r5, #0]
 8014bce:	461a      	mov	r2, r3
 8014bd0:	f7ec f8ee 	bl	8000db0 <_write>
 8014bd4:	1c43      	adds	r3, r0, #1
 8014bd6:	d102      	bne.n	8014bde <_write_r+0x1e>
 8014bd8:	682b      	ldr	r3, [r5, #0]
 8014bda:	b103      	cbz	r3, 8014bde <_write_r+0x1e>
 8014bdc:	6023      	str	r3, [r4, #0]
 8014bde:	bd38      	pop	{r3, r4, r5, pc}
 8014be0:	240109dc 	.word	0x240109dc

08014be4 <__errno>:
 8014be4:	4b01      	ldr	r3, [pc, #4]	@ (8014bec <__errno+0x8>)
 8014be6:	6818      	ldr	r0, [r3, #0]
 8014be8:	4770      	bx	lr
 8014bea:	bf00      	nop
 8014bec:	2400009c 	.word	0x2400009c

08014bf0 <__libc_init_array>:
 8014bf0:	b570      	push	{r4, r5, r6, lr}
 8014bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8014c28 <__libc_init_array+0x38>)
 8014bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8014c2c <__libc_init_array+0x3c>)
 8014bf6:	1b64      	subs	r4, r4, r5
 8014bf8:	10a4      	asrs	r4, r4, #2
 8014bfa:	2600      	movs	r6, #0
 8014bfc:	42a6      	cmp	r6, r4
 8014bfe:	d109      	bne.n	8014c14 <__libc_init_array+0x24>
 8014c00:	4d0b      	ldr	r5, [pc, #44]	@ (8014c30 <__libc_init_array+0x40>)
 8014c02:	4c0c      	ldr	r4, [pc, #48]	@ (8014c34 <__libc_init_array+0x44>)
 8014c04:	f000 fee4 	bl	80159d0 <_init>
 8014c08:	1b64      	subs	r4, r4, r5
 8014c0a:	10a4      	asrs	r4, r4, #2
 8014c0c:	2600      	movs	r6, #0
 8014c0e:	42a6      	cmp	r6, r4
 8014c10:	d105      	bne.n	8014c1e <__libc_init_array+0x2e>
 8014c12:	bd70      	pop	{r4, r5, r6, pc}
 8014c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c18:	4798      	blx	r3
 8014c1a:	3601      	adds	r6, #1
 8014c1c:	e7ee      	b.n	8014bfc <__libc_init_array+0xc>
 8014c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c22:	4798      	blx	r3
 8014c24:	3601      	adds	r6, #1
 8014c26:	e7f2      	b.n	8014c0e <__libc_init_array+0x1e>
 8014c28:	08018dac 	.word	0x08018dac
 8014c2c:	08018dac 	.word	0x08018dac
 8014c30:	08018dac 	.word	0x08018dac
 8014c34:	08018db0 	.word	0x08018db0

08014c38 <__retarget_lock_init_recursive>:
 8014c38:	4770      	bx	lr

08014c3a <__retarget_lock_acquire_recursive>:
 8014c3a:	4770      	bx	lr

08014c3c <__retarget_lock_release_recursive>:
 8014c3c:	4770      	bx	lr

08014c3e <memcpy>:
 8014c3e:	440a      	add	r2, r1
 8014c40:	4291      	cmp	r1, r2
 8014c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c46:	d100      	bne.n	8014c4a <memcpy+0xc>
 8014c48:	4770      	bx	lr
 8014c4a:	b510      	push	{r4, lr}
 8014c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c54:	4291      	cmp	r1, r2
 8014c56:	d1f9      	bne.n	8014c4c <memcpy+0xe>
 8014c58:	bd10      	pop	{r4, pc}
	...

08014c5c <__assert_func>:
 8014c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c5e:	4614      	mov	r4, r2
 8014c60:	461a      	mov	r2, r3
 8014c62:	4b09      	ldr	r3, [pc, #36]	@ (8014c88 <__assert_func+0x2c>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	4605      	mov	r5, r0
 8014c68:	68d8      	ldr	r0, [r3, #12]
 8014c6a:	b954      	cbnz	r4, 8014c82 <__assert_func+0x26>
 8014c6c:	4b07      	ldr	r3, [pc, #28]	@ (8014c8c <__assert_func+0x30>)
 8014c6e:	461c      	mov	r4, r3
 8014c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c74:	9100      	str	r1, [sp, #0]
 8014c76:	462b      	mov	r3, r5
 8014c78:	4905      	ldr	r1, [pc, #20]	@ (8014c90 <__assert_func+0x34>)
 8014c7a:	f000 fd33 	bl	80156e4 <fiprintf>
 8014c7e:	f000 fdd7 	bl	8015830 <abort>
 8014c82:	4b04      	ldr	r3, [pc, #16]	@ (8014c94 <__assert_func+0x38>)
 8014c84:	e7f4      	b.n	8014c70 <__assert_func+0x14>
 8014c86:	bf00      	nop
 8014c88:	2400009c 	.word	0x2400009c
 8014c8c:	08018d6d 	.word	0x08018d6d
 8014c90:	08018d3f 	.word	0x08018d3f
 8014c94:	08018d32 	.word	0x08018d32

08014c98 <_free_r>:
 8014c98:	b538      	push	{r3, r4, r5, lr}
 8014c9a:	4605      	mov	r5, r0
 8014c9c:	2900      	cmp	r1, #0
 8014c9e:	d041      	beq.n	8014d24 <_free_r+0x8c>
 8014ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ca4:	1f0c      	subs	r4, r1, #4
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	bfb8      	it	lt
 8014caa:	18e4      	addlt	r4, r4, r3
 8014cac:	f7ff fc74 	bl	8014598 <__malloc_lock>
 8014cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8014d28 <_free_r+0x90>)
 8014cb2:	6813      	ldr	r3, [r2, #0]
 8014cb4:	b933      	cbnz	r3, 8014cc4 <_free_r+0x2c>
 8014cb6:	6063      	str	r3, [r4, #4]
 8014cb8:	6014      	str	r4, [r2, #0]
 8014cba:	4628      	mov	r0, r5
 8014cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cc0:	f7ff bc70 	b.w	80145a4 <__malloc_unlock>
 8014cc4:	42a3      	cmp	r3, r4
 8014cc6:	d908      	bls.n	8014cda <_free_r+0x42>
 8014cc8:	6820      	ldr	r0, [r4, #0]
 8014cca:	1821      	adds	r1, r4, r0
 8014ccc:	428b      	cmp	r3, r1
 8014cce:	bf01      	itttt	eq
 8014cd0:	6819      	ldreq	r1, [r3, #0]
 8014cd2:	685b      	ldreq	r3, [r3, #4]
 8014cd4:	1809      	addeq	r1, r1, r0
 8014cd6:	6021      	streq	r1, [r4, #0]
 8014cd8:	e7ed      	b.n	8014cb6 <_free_r+0x1e>
 8014cda:	461a      	mov	r2, r3
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	b10b      	cbz	r3, 8014ce4 <_free_r+0x4c>
 8014ce0:	42a3      	cmp	r3, r4
 8014ce2:	d9fa      	bls.n	8014cda <_free_r+0x42>
 8014ce4:	6811      	ldr	r1, [r2, #0]
 8014ce6:	1850      	adds	r0, r2, r1
 8014ce8:	42a0      	cmp	r0, r4
 8014cea:	d10b      	bne.n	8014d04 <_free_r+0x6c>
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	4401      	add	r1, r0
 8014cf0:	1850      	adds	r0, r2, r1
 8014cf2:	4283      	cmp	r3, r0
 8014cf4:	6011      	str	r1, [r2, #0]
 8014cf6:	d1e0      	bne.n	8014cba <_free_r+0x22>
 8014cf8:	6818      	ldr	r0, [r3, #0]
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	6053      	str	r3, [r2, #4]
 8014cfe:	4408      	add	r0, r1
 8014d00:	6010      	str	r0, [r2, #0]
 8014d02:	e7da      	b.n	8014cba <_free_r+0x22>
 8014d04:	d902      	bls.n	8014d0c <_free_r+0x74>
 8014d06:	230c      	movs	r3, #12
 8014d08:	602b      	str	r3, [r5, #0]
 8014d0a:	e7d6      	b.n	8014cba <_free_r+0x22>
 8014d0c:	6820      	ldr	r0, [r4, #0]
 8014d0e:	1821      	adds	r1, r4, r0
 8014d10:	428b      	cmp	r3, r1
 8014d12:	bf04      	itt	eq
 8014d14:	6819      	ldreq	r1, [r3, #0]
 8014d16:	685b      	ldreq	r3, [r3, #4]
 8014d18:	6063      	str	r3, [r4, #4]
 8014d1a:	bf04      	itt	eq
 8014d1c:	1809      	addeq	r1, r1, r0
 8014d1e:	6021      	streq	r1, [r4, #0]
 8014d20:	6054      	str	r4, [r2, #4]
 8014d22:	e7ca      	b.n	8014cba <_free_r+0x22>
 8014d24:	bd38      	pop	{r3, r4, r5, pc}
 8014d26:	bf00      	nop
 8014d28:	2401089c 	.word	0x2401089c

08014d2c <_malloc_usable_size_r>:
 8014d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d30:	1f18      	subs	r0, r3, #4
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	bfbc      	itt	lt
 8014d36:	580b      	ldrlt	r3, [r1, r0]
 8014d38:	18c0      	addlt	r0, r0, r3
 8014d3a:	4770      	bx	lr

08014d3c <__ssputs_r>:
 8014d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d40:	688e      	ldr	r6, [r1, #8]
 8014d42:	461f      	mov	r7, r3
 8014d44:	42be      	cmp	r6, r7
 8014d46:	680b      	ldr	r3, [r1, #0]
 8014d48:	4682      	mov	sl, r0
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	4690      	mov	r8, r2
 8014d4e:	d82d      	bhi.n	8014dac <__ssputs_r+0x70>
 8014d50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014d54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014d58:	d026      	beq.n	8014da8 <__ssputs_r+0x6c>
 8014d5a:	6965      	ldr	r5, [r4, #20]
 8014d5c:	6909      	ldr	r1, [r1, #16]
 8014d5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d62:	eba3 0901 	sub.w	r9, r3, r1
 8014d66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d6a:	1c7b      	adds	r3, r7, #1
 8014d6c:	444b      	add	r3, r9
 8014d6e:	106d      	asrs	r5, r5, #1
 8014d70:	429d      	cmp	r5, r3
 8014d72:	bf38      	it	cc
 8014d74:	461d      	movcc	r5, r3
 8014d76:	0553      	lsls	r3, r2, #21
 8014d78:	d527      	bpl.n	8014dca <__ssputs_r+0x8e>
 8014d7a:	4629      	mov	r1, r5
 8014d7c:	f7ff fb8c 	bl	8014498 <_malloc_r>
 8014d80:	4606      	mov	r6, r0
 8014d82:	b360      	cbz	r0, 8014dde <__ssputs_r+0xa2>
 8014d84:	6921      	ldr	r1, [r4, #16]
 8014d86:	464a      	mov	r2, r9
 8014d88:	f7ff ff59 	bl	8014c3e <memcpy>
 8014d8c:	89a3      	ldrh	r3, [r4, #12]
 8014d8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d96:	81a3      	strh	r3, [r4, #12]
 8014d98:	6126      	str	r6, [r4, #16]
 8014d9a:	6165      	str	r5, [r4, #20]
 8014d9c:	444e      	add	r6, r9
 8014d9e:	eba5 0509 	sub.w	r5, r5, r9
 8014da2:	6026      	str	r6, [r4, #0]
 8014da4:	60a5      	str	r5, [r4, #8]
 8014da6:	463e      	mov	r6, r7
 8014da8:	42be      	cmp	r6, r7
 8014daa:	d900      	bls.n	8014dae <__ssputs_r+0x72>
 8014dac:	463e      	mov	r6, r7
 8014dae:	6820      	ldr	r0, [r4, #0]
 8014db0:	4632      	mov	r2, r6
 8014db2:	4641      	mov	r1, r8
 8014db4:	f7ff fe47 	bl	8014a46 <memmove>
 8014db8:	68a3      	ldr	r3, [r4, #8]
 8014dba:	1b9b      	subs	r3, r3, r6
 8014dbc:	60a3      	str	r3, [r4, #8]
 8014dbe:	6823      	ldr	r3, [r4, #0]
 8014dc0:	4433      	add	r3, r6
 8014dc2:	6023      	str	r3, [r4, #0]
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dca:	462a      	mov	r2, r5
 8014dcc:	f7ff fc2e 	bl	801462c <_realloc_r>
 8014dd0:	4606      	mov	r6, r0
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d1e0      	bne.n	8014d98 <__ssputs_r+0x5c>
 8014dd6:	6921      	ldr	r1, [r4, #16]
 8014dd8:	4650      	mov	r0, sl
 8014dda:	f7ff ff5d 	bl	8014c98 <_free_r>
 8014dde:	230c      	movs	r3, #12
 8014de0:	f8ca 3000 	str.w	r3, [sl]
 8014de4:	89a3      	ldrh	r3, [r4, #12]
 8014de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dea:	81a3      	strh	r3, [r4, #12]
 8014dec:	f04f 30ff 	mov.w	r0, #4294967295
 8014df0:	e7e9      	b.n	8014dc6 <__ssputs_r+0x8a>
	...

08014df4 <_svfiprintf_r>:
 8014df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df8:	4698      	mov	r8, r3
 8014dfa:	898b      	ldrh	r3, [r1, #12]
 8014dfc:	061b      	lsls	r3, r3, #24
 8014dfe:	b09d      	sub	sp, #116	@ 0x74
 8014e00:	4607      	mov	r7, r0
 8014e02:	460d      	mov	r5, r1
 8014e04:	4614      	mov	r4, r2
 8014e06:	d510      	bpl.n	8014e2a <_svfiprintf_r+0x36>
 8014e08:	690b      	ldr	r3, [r1, #16]
 8014e0a:	b973      	cbnz	r3, 8014e2a <_svfiprintf_r+0x36>
 8014e0c:	2140      	movs	r1, #64	@ 0x40
 8014e0e:	f7ff fb43 	bl	8014498 <_malloc_r>
 8014e12:	6028      	str	r0, [r5, #0]
 8014e14:	6128      	str	r0, [r5, #16]
 8014e16:	b930      	cbnz	r0, 8014e26 <_svfiprintf_r+0x32>
 8014e18:	230c      	movs	r3, #12
 8014e1a:	603b      	str	r3, [r7, #0]
 8014e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e20:	b01d      	add	sp, #116	@ 0x74
 8014e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e26:	2340      	movs	r3, #64	@ 0x40
 8014e28:	616b      	str	r3, [r5, #20]
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e2e:	2320      	movs	r3, #32
 8014e30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e38:	2330      	movs	r3, #48	@ 0x30
 8014e3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014fd8 <_svfiprintf_r+0x1e4>
 8014e3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014e42:	f04f 0901 	mov.w	r9, #1
 8014e46:	4623      	mov	r3, r4
 8014e48:	469a      	mov	sl, r3
 8014e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e4e:	b10a      	cbz	r2, 8014e54 <_svfiprintf_r+0x60>
 8014e50:	2a25      	cmp	r2, #37	@ 0x25
 8014e52:	d1f9      	bne.n	8014e48 <_svfiprintf_r+0x54>
 8014e54:	ebba 0b04 	subs.w	fp, sl, r4
 8014e58:	d00b      	beq.n	8014e72 <_svfiprintf_r+0x7e>
 8014e5a:	465b      	mov	r3, fp
 8014e5c:	4622      	mov	r2, r4
 8014e5e:	4629      	mov	r1, r5
 8014e60:	4638      	mov	r0, r7
 8014e62:	f7ff ff6b 	bl	8014d3c <__ssputs_r>
 8014e66:	3001      	adds	r0, #1
 8014e68:	f000 80a7 	beq.w	8014fba <_svfiprintf_r+0x1c6>
 8014e6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e6e:	445a      	add	r2, fp
 8014e70:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e72:	f89a 3000 	ldrb.w	r3, [sl]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f000 809f 	beq.w	8014fba <_svfiprintf_r+0x1c6>
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e86:	f10a 0a01 	add.w	sl, sl, #1
 8014e8a:	9304      	str	r3, [sp, #16]
 8014e8c:	9307      	str	r3, [sp, #28]
 8014e8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e92:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e94:	4654      	mov	r4, sl
 8014e96:	2205      	movs	r2, #5
 8014e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e9c:	484e      	ldr	r0, [pc, #312]	@ (8014fd8 <_svfiprintf_r+0x1e4>)
 8014e9e:	f7eb fa3f 	bl	8000320 <memchr>
 8014ea2:	9a04      	ldr	r2, [sp, #16]
 8014ea4:	b9d8      	cbnz	r0, 8014ede <_svfiprintf_r+0xea>
 8014ea6:	06d0      	lsls	r0, r2, #27
 8014ea8:	bf44      	itt	mi
 8014eaa:	2320      	movmi	r3, #32
 8014eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014eb0:	0711      	lsls	r1, r2, #28
 8014eb2:	bf44      	itt	mi
 8014eb4:	232b      	movmi	r3, #43	@ 0x2b
 8014eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014eba:	f89a 3000 	ldrb.w	r3, [sl]
 8014ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ec0:	d015      	beq.n	8014eee <_svfiprintf_r+0xfa>
 8014ec2:	9a07      	ldr	r2, [sp, #28]
 8014ec4:	4654      	mov	r4, sl
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	f04f 0c0a 	mov.w	ip, #10
 8014ecc:	4621      	mov	r1, r4
 8014ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ed2:	3b30      	subs	r3, #48	@ 0x30
 8014ed4:	2b09      	cmp	r3, #9
 8014ed6:	d94b      	bls.n	8014f70 <_svfiprintf_r+0x17c>
 8014ed8:	b1b0      	cbz	r0, 8014f08 <_svfiprintf_r+0x114>
 8014eda:	9207      	str	r2, [sp, #28]
 8014edc:	e014      	b.n	8014f08 <_svfiprintf_r+0x114>
 8014ede:	eba0 0308 	sub.w	r3, r0, r8
 8014ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8014ee6:	4313      	orrs	r3, r2
 8014ee8:	9304      	str	r3, [sp, #16]
 8014eea:	46a2      	mov	sl, r4
 8014eec:	e7d2      	b.n	8014e94 <_svfiprintf_r+0xa0>
 8014eee:	9b03      	ldr	r3, [sp, #12]
 8014ef0:	1d19      	adds	r1, r3, #4
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	9103      	str	r1, [sp, #12]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	bfbb      	ittet	lt
 8014efa:	425b      	neglt	r3, r3
 8014efc:	f042 0202 	orrlt.w	r2, r2, #2
 8014f00:	9307      	strge	r3, [sp, #28]
 8014f02:	9307      	strlt	r3, [sp, #28]
 8014f04:	bfb8      	it	lt
 8014f06:	9204      	strlt	r2, [sp, #16]
 8014f08:	7823      	ldrb	r3, [r4, #0]
 8014f0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014f0c:	d10a      	bne.n	8014f24 <_svfiprintf_r+0x130>
 8014f0e:	7863      	ldrb	r3, [r4, #1]
 8014f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f12:	d132      	bne.n	8014f7a <_svfiprintf_r+0x186>
 8014f14:	9b03      	ldr	r3, [sp, #12]
 8014f16:	1d1a      	adds	r2, r3, #4
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	9203      	str	r2, [sp, #12]
 8014f1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014f20:	3402      	adds	r4, #2
 8014f22:	9305      	str	r3, [sp, #20]
 8014f24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014fe8 <_svfiprintf_r+0x1f4>
 8014f28:	7821      	ldrb	r1, [r4, #0]
 8014f2a:	2203      	movs	r2, #3
 8014f2c:	4650      	mov	r0, sl
 8014f2e:	f7eb f9f7 	bl	8000320 <memchr>
 8014f32:	b138      	cbz	r0, 8014f44 <_svfiprintf_r+0x150>
 8014f34:	9b04      	ldr	r3, [sp, #16]
 8014f36:	eba0 000a 	sub.w	r0, r0, sl
 8014f3a:	2240      	movs	r2, #64	@ 0x40
 8014f3c:	4082      	lsls	r2, r0
 8014f3e:	4313      	orrs	r3, r2
 8014f40:	3401      	adds	r4, #1
 8014f42:	9304      	str	r3, [sp, #16]
 8014f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f48:	4824      	ldr	r0, [pc, #144]	@ (8014fdc <_svfiprintf_r+0x1e8>)
 8014f4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014f4e:	2206      	movs	r2, #6
 8014f50:	f7eb f9e6 	bl	8000320 <memchr>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d036      	beq.n	8014fc6 <_svfiprintf_r+0x1d2>
 8014f58:	4b21      	ldr	r3, [pc, #132]	@ (8014fe0 <_svfiprintf_r+0x1ec>)
 8014f5a:	bb1b      	cbnz	r3, 8014fa4 <_svfiprintf_r+0x1b0>
 8014f5c:	9b03      	ldr	r3, [sp, #12]
 8014f5e:	3307      	adds	r3, #7
 8014f60:	f023 0307 	bic.w	r3, r3, #7
 8014f64:	3308      	adds	r3, #8
 8014f66:	9303      	str	r3, [sp, #12]
 8014f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f6a:	4433      	add	r3, r6
 8014f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f6e:	e76a      	b.n	8014e46 <_svfiprintf_r+0x52>
 8014f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f74:	460c      	mov	r4, r1
 8014f76:	2001      	movs	r0, #1
 8014f78:	e7a8      	b.n	8014ecc <_svfiprintf_r+0xd8>
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	3401      	adds	r4, #1
 8014f7e:	9305      	str	r3, [sp, #20]
 8014f80:	4619      	mov	r1, r3
 8014f82:	f04f 0c0a 	mov.w	ip, #10
 8014f86:	4620      	mov	r0, r4
 8014f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f8c:	3a30      	subs	r2, #48	@ 0x30
 8014f8e:	2a09      	cmp	r2, #9
 8014f90:	d903      	bls.n	8014f9a <_svfiprintf_r+0x1a6>
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d0c6      	beq.n	8014f24 <_svfiprintf_r+0x130>
 8014f96:	9105      	str	r1, [sp, #20]
 8014f98:	e7c4      	b.n	8014f24 <_svfiprintf_r+0x130>
 8014f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	e7f0      	b.n	8014f86 <_svfiprintf_r+0x192>
 8014fa4:	ab03      	add	r3, sp, #12
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	462a      	mov	r2, r5
 8014faa:	4b0e      	ldr	r3, [pc, #56]	@ (8014fe4 <_svfiprintf_r+0x1f0>)
 8014fac:	a904      	add	r1, sp, #16
 8014fae:	4638      	mov	r0, r7
 8014fb0:	f3af 8000 	nop.w
 8014fb4:	1c42      	adds	r2, r0, #1
 8014fb6:	4606      	mov	r6, r0
 8014fb8:	d1d6      	bne.n	8014f68 <_svfiprintf_r+0x174>
 8014fba:	89ab      	ldrh	r3, [r5, #12]
 8014fbc:	065b      	lsls	r3, r3, #25
 8014fbe:	f53f af2d 	bmi.w	8014e1c <_svfiprintf_r+0x28>
 8014fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014fc4:	e72c      	b.n	8014e20 <_svfiprintf_r+0x2c>
 8014fc6:	ab03      	add	r3, sp, #12
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	462a      	mov	r2, r5
 8014fcc:	4b05      	ldr	r3, [pc, #20]	@ (8014fe4 <_svfiprintf_r+0x1f0>)
 8014fce:	a904      	add	r1, sp, #16
 8014fd0:	4638      	mov	r0, r7
 8014fd2:	f000 f9bb 	bl	801534c <_printf_i>
 8014fd6:	e7ed      	b.n	8014fb4 <_svfiprintf_r+0x1c0>
 8014fd8:	08018d6e 	.word	0x08018d6e
 8014fdc:	08018d78 	.word	0x08018d78
 8014fe0:	00000000 	.word	0x00000000
 8014fe4:	08014d3d 	.word	0x08014d3d
 8014fe8:	08018d74 	.word	0x08018d74

08014fec <__sfputc_r>:
 8014fec:	6893      	ldr	r3, [r2, #8]
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	b410      	push	{r4}
 8014ff4:	6093      	str	r3, [r2, #8]
 8014ff6:	da08      	bge.n	801500a <__sfputc_r+0x1e>
 8014ff8:	6994      	ldr	r4, [r2, #24]
 8014ffa:	42a3      	cmp	r3, r4
 8014ffc:	db01      	blt.n	8015002 <__sfputc_r+0x16>
 8014ffe:	290a      	cmp	r1, #10
 8015000:	d103      	bne.n	801500a <__sfputc_r+0x1e>
 8015002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015006:	f000 bb7f 	b.w	8015708 <__swbuf_r>
 801500a:	6813      	ldr	r3, [r2, #0]
 801500c:	1c58      	adds	r0, r3, #1
 801500e:	6010      	str	r0, [r2, #0]
 8015010:	7019      	strb	r1, [r3, #0]
 8015012:	4608      	mov	r0, r1
 8015014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015018:	4770      	bx	lr

0801501a <__sfputs_r>:
 801501a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801501c:	4606      	mov	r6, r0
 801501e:	460f      	mov	r7, r1
 8015020:	4614      	mov	r4, r2
 8015022:	18d5      	adds	r5, r2, r3
 8015024:	42ac      	cmp	r4, r5
 8015026:	d101      	bne.n	801502c <__sfputs_r+0x12>
 8015028:	2000      	movs	r0, #0
 801502a:	e007      	b.n	801503c <__sfputs_r+0x22>
 801502c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015030:	463a      	mov	r2, r7
 8015032:	4630      	mov	r0, r6
 8015034:	f7ff ffda 	bl	8014fec <__sfputc_r>
 8015038:	1c43      	adds	r3, r0, #1
 801503a:	d1f3      	bne.n	8015024 <__sfputs_r+0xa>
 801503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015040 <_vfiprintf_r>:
 8015040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015044:	460d      	mov	r5, r1
 8015046:	b09d      	sub	sp, #116	@ 0x74
 8015048:	4614      	mov	r4, r2
 801504a:	4698      	mov	r8, r3
 801504c:	4606      	mov	r6, r0
 801504e:	b118      	cbz	r0, 8015058 <_vfiprintf_r+0x18>
 8015050:	6a03      	ldr	r3, [r0, #32]
 8015052:	b90b      	cbnz	r3, 8015058 <_vfiprintf_r+0x18>
 8015054:	f7ff fc28 	bl	80148a8 <__sinit>
 8015058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801505a:	07d9      	lsls	r1, r3, #31
 801505c:	d405      	bmi.n	801506a <_vfiprintf_r+0x2a>
 801505e:	89ab      	ldrh	r3, [r5, #12]
 8015060:	059a      	lsls	r2, r3, #22
 8015062:	d402      	bmi.n	801506a <_vfiprintf_r+0x2a>
 8015064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015066:	f7ff fde8 	bl	8014c3a <__retarget_lock_acquire_recursive>
 801506a:	89ab      	ldrh	r3, [r5, #12]
 801506c:	071b      	lsls	r3, r3, #28
 801506e:	d501      	bpl.n	8015074 <_vfiprintf_r+0x34>
 8015070:	692b      	ldr	r3, [r5, #16]
 8015072:	b99b      	cbnz	r3, 801509c <_vfiprintf_r+0x5c>
 8015074:	4629      	mov	r1, r5
 8015076:	4630      	mov	r0, r6
 8015078:	f000 fb84 	bl	8015784 <__swsetup_r>
 801507c:	b170      	cbz	r0, 801509c <_vfiprintf_r+0x5c>
 801507e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015080:	07dc      	lsls	r4, r3, #31
 8015082:	d504      	bpl.n	801508e <_vfiprintf_r+0x4e>
 8015084:	f04f 30ff 	mov.w	r0, #4294967295
 8015088:	b01d      	add	sp, #116	@ 0x74
 801508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801508e:	89ab      	ldrh	r3, [r5, #12]
 8015090:	0598      	lsls	r0, r3, #22
 8015092:	d4f7      	bmi.n	8015084 <_vfiprintf_r+0x44>
 8015094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015096:	f7ff fdd1 	bl	8014c3c <__retarget_lock_release_recursive>
 801509a:	e7f3      	b.n	8015084 <_vfiprintf_r+0x44>
 801509c:	2300      	movs	r3, #0
 801509e:	9309      	str	r3, [sp, #36]	@ 0x24
 80150a0:	2320      	movs	r3, #32
 80150a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80150a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80150aa:	2330      	movs	r3, #48	@ 0x30
 80150ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801525c <_vfiprintf_r+0x21c>
 80150b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80150b4:	f04f 0901 	mov.w	r9, #1
 80150b8:	4623      	mov	r3, r4
 80150ba:	469a      	mov	sl, r3
 80150bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150c0:	b10a      	cbz	r2, 80150c6 <_vfiprintf_r+0x86>
 80150c2:	2a25      	cmp	r2, #37	@ 0x25
 80150c4:	d1f9      	bne.n	80150ba <_vfiprintf_r+0x7a>
 80150c6:	ebba 0b04 	subs.w	fp, sl, r4
 80150ca:	d00b      	beq.n	80150e4 <_vfiprintf_r+0xa4>
 80150cc:	465b      	mov	r3, fp
 80150ce:	4622      	mov	r2, r4
 80150d0:	4629      	mov	r1, r5
 80150d2:	4630      	mov	r0, r6
 80150d4:	f7ff ffa1 	bl	801501a <__sfputs_r>
 80150d8:	3001      	adds	r0, #1
 80150da:	f000 80a7 	beq.w	801522c <_vfiprintf_r+0x1ec>
 80150de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150e0:	445a      	add	r2, fp
 80150e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80150e4:	f89a 3000 	ldrb.w	r3, [sl]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	f000 809f 	beq.w	801522c <_vfiprintf_r+0x1ec>
 80150ee:	2300      	movs	r3, #0
 80150f0:	f04f 32ff 	mov.w	r2, #4294967295
 80150f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150f8:	f10a 0a01 	add.w	sl, sl, #1
 80150fc:	9304      	str	r3, [sp, #16]
 80150fe:	9307      	str	r3, [sp, #28]
 8015100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015104:	931a      	str	r3, [sp, #104]	@ 0x68
 8015106:	4654      	mov	r4, sl
 8015108:	2205      	movs	r2, #5
 801510a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801510e:	4853      	ldr	r0, [pc, #332]	@ (801525c <_vfiprintf_r+0x21c>)
 8015110:	f7eb f906 	bl	8000320 <memchr>
 8015114:	9a04      	ldr	r2, [sp, #16]
 8015116:	b9d8      	cbnz	r0, 8015150 <_vfiprintf_r+0x110>
 8015118:	06d1      	lsls	r1, r2, #27
 801511a:	bf44      	itt	mi
 801511c:	2320      	movmi	r3, #32
 801511e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015122:	0713      	lsls	r3, r2, #28
 8015124:	bf44      	itt	mi
 8015126:	232b      	movmi	r3, #43	@ 0x2b
 8015128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801512c:	f89a 3000 	ldrb.w	r3, [sl]
 8015130:	2b2a      	cmp	r3, #42	@ 0x2a
 8015132:	d015      	beq.n	8015160 <_vfiprintf_r+0x120>
 8015134:	9a07      	ldr	r2, [sp, #28]
 8015136:	4654      	mov	r4, sl
 8015138:	2000      	movs	r0, #0
 801513a:	f04f 0c0a 	mov.w	ip, #10
 801513e:	4621      	mov	r1, r4
 8015140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015144:	3b30      	subs	r3, #48	@ 0x30
 8015146:	2b09      	cmp	r3, #9
 8015148:	d94b      	bls.n	80151e2 <_vfiprintf_r+0x1a2>
 801514a:	b1b0      	cbz	r0, 801517a <_vfiprintf_r+0x13a>
 801514c:	9207      	str	r2, [sp, #28]
 801514e:	e014      	b.n	801517a <_vfiprintf_r+0x13a>
 8015150:	eba0 0308 	sub.w	r3, r0, r8
 8015154:	fa09 f303 	lsl.w	r3, r9, r3
 8015158:	4313      	orrs	r3, r2
 801515a:	9304      	str	r3, [sp, #16]
 801515c:	46a2      	mov	sl, r4
 801515e:	e7d2      	b.n	8015106 <_vfiprintf_r+0xc6>
 8015160:	9b03      	ldr	r3, [sp, #12]
 8015162:	1d19      	adds	r1, r3, #4
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	9103      	str	r1, [sp, #12]
 8015168:	2b00      	cmp	r3, #0
 801516a:	bfbb      	ittet	lt
 801516c:	425b      	neglt	r3, r3
 801516e:	f042 0202 	orrlt.w	r2, r2, #2
 8015172:	9307      	strge	r3, [sp, #28]
 8015174:	9307      	strlt	r3, [sp, #28]
 8015176:	bfb8      	it	lt
 8015178:	9204      	strlt	r2, [sp, #16]
 801517a:	7823      	ldrb	r3, [r4, #0]
 801517c:	2b2e      	cmp	r3, #46	@ 0x2e
 801517e:	d10a      	bne.n	8015196 <_vfiprintf_r+0x156>
 8015180:	7863      	ldrb	r3, [r4, #1]
 8015182:	2b2a      	cmp	r3, #42	@ 0x2a
 8015184:	d132      	bne.n	80151ec <_vfiprintf_r+0x1ac>
 8015186:	9b03      	ldr	r3, [sp, #12]
 8015188:	1d1a      	adds	r2, r3, #4
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	9203      	str	r2, [sp, #12]
 801518e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015192:	3402      	adds	r4, #2
 8015194:	9305      	str	r3, [sp, #20]
 8015196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801526c <_vfiprintf_r+0x22c>
 801519a:	7821      	ldrb	r1, [r4, #0]
 801519c:	2203      	movs	r2, #3
 801519e:	4650      	mov	r0, sl
 80151a0:	f7eb f8be 	bl	8000320 <memchr>
 80151a4:	b138      	cbz	r0, 80151b6 <_vfiprintf_r+0x176>
 80151a6:	9b04      	ldr	r3, [sp, #16]
 80151a8:	eba0 000a 	sub.w	r0, r0, sl
 80151ac:	2240      	movs	r2, #64	@ 0x40
 80151ae:	4082      	lsls	r2, r0
 80151b0:	4313      	orrs	r3, r2
 80151b2:	3401      	adds	r4, #1
 80151b4:	9304      	str	r3, [sp, #16]
 80151b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151ba:	4829      	ldr	r0, [pc, #164]	@ (8015260 <_vfiprintf_r+0x220>)
 80151bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80151c0:	2206      	movs	r2, #6
 80151c2:	f7eb f8ad 	bl	8000320 <memchr>
 80151c6:	2800      	cmp	r0, #0
 80151c8:	d03f      	beq.n	801524a <_vfiprintf_r+0x20a>
 80151ca:	4b26      	ldr	r3, [pc, #152]	@ (8015264 <_vfiprintf_r+0x224>)
 80151cc:	bb1b      	cbnz	r3, 8015216 <_vfiprintf_r+0x1d6>
 80151ce:	9b03      	ldr	r3, [sp, #12]
 80151d0:	3307      	adds	r3, #7
 80151d2:	f023 0307 	bic.w	r3, r3, #7
 80151d6:	3308      	adds	r3, #8
 80151d8:	9303      	str	r3, [sp, #12]
 80151da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151dc:	443b      	add	r3, r7
 80151de:	9309      	str	r3, [sp, #36]	@ 0x24
 80151e0:	e76a      	b.n	80150b8 <_vfiprintf_r+0x78>
 80151e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80151e6:	460c      	mov	r4, r1
 80151e8:	2001      	movs	r0, #1
 80151ea:	e7a8      	b.n	801513e <_vfiprintf_r+0xfe>
 80151ec:	2300      	movs	r3, #0
 80151ee:	3401      	adds	r4, #1
 80151f0:	9305      	str	r3, [sp, #20]
 80151f2:	4619      	mov	r1, r3
 80151f4:	f04f 0c0a 	mov.w	ip, #10
 80151f8:	4620      	mov	r0, r4
 80151fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151fe:	3a30      	subs	r2, #48	@ 0x30
 8015200:	2a09      	cmp	r2, #9
 8015202:	d903      	bls.n	801520c <_vfiprintf_r+0x1cc>
 8015204:	2b00      	cmp	r3, #0
 8015206:	d0c6      	beq.n	8015196 <_vfiprintf_r+0x156>
 8015208:	9105      	str	r1, [sp, #20]
 801520a:	e7c4      	b.n	8015196 <_vfiprintf_r+0x156>
 801520c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015210:	4604      	mov	r4, r0
 8015212:	2301      	movs	r3, #1
 8015214:	e7f0      	b.n	80151f8 <_vfiprintf_r+0x1b8>
 8015216:	ab03      	add	r3, sp, #12
 8015218:	9300      	str	r3, [sp, #0]
 801521a:	462a      	mov	r2, r5
 801521c:	4b12      	ldr	r3, [pc, #72]	@ (8015268 <_vfiprintf_r+0x228>)
 801521e:	a904      	add	r1, sp, #16
 8015220:	4630      	mov	r0, r6
 8015222:	f3af 8000 	nop.w
 8015226:	4607      	mov	r7, r0
 8015228:	1c78      	adds	r0, r7, #1
 801522a:	d1d6      	bne.n	80151da <_vfiprintf_r+0x19a>
 801522c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801522e:	07d9      	lsls	r1, r3, #31
 8015230:	d405      	bmi.n	801523e <_vfiprintf_r+0x1fe>
 8015232:	89ab      	ldrh	r3, [r5, #12]
 8015234:	059a      	lsls	r2, r3, #22
 8015236:	d402      	bmi.n	801523e <_vfiprintf_r+0x1fe>
 8015238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801523a:	f7ff fcff 	bl	8014c3c <__retarget_lock_release_recursive>
 801523e:	89ab      	ldrh	r3, [r5, #12]
 8015240:	065b      	lsls	r3, r3, #25
 8015242:	f53f af1f 	bmi.w	8015084 <_vfiprintf_r+0x44>
 8015246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015248:	e71e      	b.n	8015088 <_vfiprintf_r+0x48>
 801524a:	ab03      	add	r3, sp, #12
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	462a      	mov	r2, r5
 8015250:	4b05      	ldr	r3, [pc, #20]	@ (8015268 <_vfiprintf_r+0x228>)
 8015252:	a904      	add	r1, sp, #16
 8015254:	4630      	mov	r0, r6
 8015256:	f000 f879 	bl	801534c <_printf_i>
 801525a:	e7e4      	b.n	8015226 <_vfiprintf_r+0x1e6>
 801525c:	08018d6e 	.word	0x08018d6e
 8015260:	08018d78 	.word	0x08018d78
 8015264:	00000000 	.word	0x00000000
 8015268:	0801501b 	.word	0x0801501b
 801526c:	08018d74 	.word	0x08018d74

08015270 <_printf_common>:
 8015270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015274:	4616      	mov	r6, r2
 8015276:	4698      	mov	r8, r3
 8015278:	688a      	ldr	r2, [r1, #8]
 801527a:	690b      	ldr	r3, [r1, #16]
 801527c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015280:	4293      	cmp	r3, r2
 8015282:	bfb8      	it	lt
 8015284:	4613      	movlt	r3, r2
 8015286:	6033      	str	r3, [r6, #0]
 8015288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801528c:	4607      	mov	r7, r0
 801528e:	460c      	mov	r4, r1
 8015290:	b10a      	cbz	r2, 8015296 <_printf_common+0x26>
 8015292:	3301      	adds	r3, #1
 8015294:	6033      	str	r3, [r6, #0]
 8015296:	6823      	ldr	r3, [r4, #0]
 8015298:	0699      	lsls	r1, r3, #26
 801529a:	bf42      	ittt	mi
 801529c:	6833      	ldrmi	r3, [r6, #0]
 801529e:	3302      	addmi	r3, #2
 80152a0:	6033      	strmi	r3, [r6, #0]
 80152a2:	6825      	ldr	r5, [r4, #0]
 80152a4:	f015 0506 	ands.w	r5, r5, #6
 80152a8:	d106      	bne.n	80152b8 <_printf_common+0x48>
 80152aa:	f104 0a19 	add.w	sl, r4, #25
 80152ae:	68e3      	ldr	r3, [r4, #12]
 80152b0:	6832      	ldr	r2, [r6, #0]
 80152b2:	1a9b      	subs	r3, r3, r2
 80152b4:	42ab      	cmp	r3, r5
 80152b6:	dc26      	bgt.n	8015306 <_printf_common+0x96>
 80152b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80152bc:	6822      	ldr	r2, [r4, #0]
 80152be:	3b00      	subs	r3, #0
 80152c0:	bf18      	it	ne
 80152c2:	2301      	movne	r3, #1
 80152c4:	0692      	lsls	r2, r2, #26
 80152c6:	d42b      	bmi.n	8015320 <_printf_common+0xb0>
 80152c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80152cc:	4641      	mov	r1, r8
 80152ce:	4638      	mov	r0, r7
 80152d0:	47c8      	blx	r9
 80152d2:	3001      	adds	r0, #1
 80152d4:	d01e      	beq.n	8015314 <_printf_common+0xa4>
 80152d6:	6823      	ldr	r3, [r4, #0]
 80152d8:	6922      	ldr	r2, [r4, #16]
 80152da:	f003 0306 	and.w	r3, r3, #6
 80152de:	2b04      	cmp	r3, #4
 80152e0:	bf02      	ittt	eq
 80152e2:	68e5      	ldreq	r5, [r4, #12]
 80152e4:	6833      	ldreq	r3, [r6, #0]
 80152e6:	1aed      	subeq	r5, r5, r3
 80152e8:	68a3      	ldr	r3, [r4, #8]
 80152ea:	bf0c      	ite	eq
 80152ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80152f0:	2500      	movne	r5, #0
 80152f2:	4293      	cmp	r3, r2
 80152f4:	bfc4      	itt	gt
 80152f6:	1a9b      	subgt	r3, r3, r2
 80152f8:	18ed      	addgt	r5, r5, r3
 80152fa:	2600      	movs	r6, #0
 80152fc:	341a      	adds	r4, #26
 80152fe:	42b5      	cmp	r5, r6
 8015300:	d11a      	bne.n	8015338 <_printf_common+0xc8>
 8015302:	2000      	movs	r0, #0
 8015304:	e008      	b.n	8015318 <_printf_common+0xa8>
 8015306:	2301      	movs	r3, #1
 8015308:	4652      	mov	r2, sl
 801530a:	4641      	mov	r1, r8
 801530c:	4638      	mov	r0, r7
 801530e:	47c8      	blx	r9
 8015310:	3001      	adds	r0, #1
 8015312:	d103      	bne.n	801531c <_printf_common+0xac>
 8015314:	f04f 30ff 	mov.w	r0, #4294967295
 8015318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801531c:	3501      	adds	r5, #1
 801531e:	e7c6      	b.n	80152ae <_printf_common+0x3e>
 8015320:	18e1      	adds	r1, r4, r3
 8015322:	1c5a      	adds	r2, r3, #1
 8015324:	2030      	movs	r0, #48	@ 0x30
 8015326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801532a:	4422      	add	r2, r4
 801532c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015334:	3302      	adds	r3, #2
 8015336:	e7c7      	b.n	80152c8 <_printf_common+0x58>
 8015338:	2301      	movs	r3, #1
 801533a:	4622      	mov	r2, r4
 801533c:	4641      	mov	r1, r8
 801533e:	4638      	mov	r0, r7
 8015340:	47c8      	blx	r9
 8015342:	3001      	adds	r0, #1
 8015344:	d0e6      	beq.n	8015314 <_printf_common+0xa4>
 8015346:	3601      	adds	r6, #1
 8015348:	e7d9      	b.n	80152fe <_printf_common+0x8e>
	...

0801534c <_printf_i>:
 801534c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015350:	7e0f      	ldrb	r7, [r1, #24]
 8015352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015354:	2f78      	cmp	r7, #120	@ 0x78
 8015356:	4691      	mov	r9, r2
 8015358:	4680      	mov	r8, r0
 801535a:	460c      	mov	r4, r1
 801535c:	469a      	mov	sl, r3
 801535e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015362:	d807      	bhi.n	8015374 <_printf_i+0x28>
 8015364:	2f62      	cmp	r7, #98	@ 0x62
 8015366:	d80a      	bhi.n	801537e <_printf_i+0x32>
 8015368:	2f00      	cmp	r7, #0
 801536a:	f000 80d2 	beq.w	8015512 <_printf_i+0x1c6>
 801536e:	2f58      	cmp	r7, #88	@ 0x58
 8015370:	f000 80b9 	beq.w	80154e6 <_printf_i+0x19a>
 8015374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801537c:	e03a      	b.n	80153f4 <_printf_i+0xa8>
 801537e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015382:	2b15      	cmp	r3, #21
 8015384:	d8f6      	bhi.n	8015374 <_printf_i+0x28>
 8015386:	a101      	add	r1, pc, #4	@ (adr r1, 801538c <_printf_i+0x40>)
 8015388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801538c:	080153e5 	.word	0x080153e5
 8015390:	080153f9 	.word	0x080153f9
 8015394:	08015375 	.word	0x08015375
 8015398:	08015375 	.word	0x08015375
 801539c:	08015375 	.word	0x08015375
 80153a0:	08015375 	.word	0x08015375
 80153a4:	080153f9 	.word	0x080153f9
 80153a8:	08015375 	.word	0x08015375
 80153ac:	08015375 	.word	0x08015375
 80153b0:	08015375 	.word	0x08015375
 80153b4:	08015375 	.word	0x08015375
 80153b8:	080154f9 	.word	0x080154f9
 80153bc:	08015423 	.word	0x08015423
 80153c0:	080154b3 	.word	0x080154b3
 80153c4:	08015375 	.word	0x08015375
 80153c8:	08015375 	.word	0x08015375
 80153cc:	0801551b 	.word	0x0801551b
 80153d0:	08015375 	.word	0x08015375
 80153d4:	08015423 	.word	0x08015423
 80153d8:	08015375 	.word	0x08015375
 80153dc:	08015375 	.word	0x08015375
 80153e0:	080154bb 	.word	0x080154bb
 80153e4:	6833      	ldr	r3, [r6, #0]
 80153e6:	1d1a      	adds	r2, r3, #4
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	6032      	str	r2, [r6, #0]
 80153ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80153f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80153f4:	2301      	movs	r3, #1
 80153f6:	e09d      	b.n	8015534 <_printf_i+0x1e8>
 80153f8:	6833      	ldr	r3, [r6, #0]
 80153fa:	6820      	ldr	r0, [r4, #0]
 80153fc:	1d19      	adds	r1, r3, #4
 80153fe:	6031      	str	r1, [r6, #0]
 8015400:	0606      	lsls	r6, r0, #24
 8015402:	d501      	bpl.n	8015408 <_printf_i+0xbc>
 8015404:	681d      	ldr	r5, [r3, #0]
 8015406:	e003      	b.n	8015410 <_printf_i+0xc4>
 8015408:	0645      	lsls	r5, r0, #25
 801540a:	d5fb      	bpl.n	8015404 <_printf_i+0xb8>
 801540c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015410:	2d00      	cmp	r5, #0
 8015412:	da03      	bge.n	801541c <_printf_i+0xd0>
 8015414:	232d      	movs	r3, #45	@ 0x2d
 8015416:	426d      	negs	r5, r5
 8015418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801541c:	4859      	ldr	r0, [pc, #356]	@ (8015584 <_printf_i+0x238>)
 801541e:	230a      	movs	r3, #10
 8015420:	e011      	b.n	8015446 <_printf_i+0xfa>
 8015422:	6821      	ldr	r1, [r4, #0]
 8015424:	6833      	ldr	r3, [r6, #0]
 8015426:	0608      	lsls	r0, r1, #24
 8015428:	f853 5b04 	ldr.w	r5, [r3], #4
 801542c:	d402      	bmi.n	8015434 <_printf_i+0xe8>
 801542e:	0649      	lsls	r1, r1, #25
 8015430:	bf48      	it	mi
 8015432:	b2ad      	uxthmi	r5, r5
 8015434:	2f6f      	cmp	r7, #111	@ 0x6f
 8015436:	4853      	ldr	r0, [pc, #332]	@ (8015584 <_printf_i+0x238>)
 8015438:	6033      	str	r3, [r6, #0]
 801543a:	bf14      	ite	ne
 801543c:	230a      	movne	r3, #10
 801543e:	2308      	moveq	r3, #8
 8015440:	2100      	movs	r1, #0
 8015442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015446:	6866      	ldr	r6, [r4, #4]
 8015448:	60a6      	str	r6, [r4, #8]
 801544a:	2e00      	cmp	r6, #0
 801544c:	bfa2      	ittt	ge
 801544e:	6821      	ldrge	r1, [r4, #0]
 8015450:	f021 0104 	bicge.w	r1, r1, #4
 8015454:	6021      	strge	r1, [r4, #0]
 8015456:	b90d      	cbnz	r5, 801545c <_printf_i+0x110>
 8015458:	2e00      	cmp	r6, #0
 801545a:	d04b      	beq.n	80154f4 <_printf_i+0x1a8>
 801545c:	4616      	mov	r6, r2
 801545e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015462:	fb03 5711 	mls	r7, r3, r1, r5
 8015466:	5dc7      	ldrb	r7, [r0, r7]
 8015468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801546c:	462f      	mov	r7, r5
 801546e:	42bb      	cmp	r3, r7
 8015470:	460d      	mov	r5, r1
 8015472:	d9f4      	bls.n	801545e <_printf_i+0x112>
 8015474:	2b08      	cmp	r3, #8
 8015476:	d10b      	bne.n	8015490 <_printf_i+0x144>
 8015478:	6823      	ldr	r3, [r4, #0]
 801547a:	07df      	lsls	r7, r3, #31
 801547c:	d508      	bpl.n	8015490 <_printf_i+0x144>
 801547e:	6923      	ldr	r3, [r4, #16]
 8015480:	6861      	ldr	r1, [r4, #4]
 8015482:	4299      	cmp	r1, r3
 8015484:	bfde      	ittt	le
 8015486:	2330      	movle	r3, #48	@ 0x30
 8015488:	f806 3c01 	strble.w	r3, [r6, #-1]
 801548c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015490:	1b92      	subs	r2, r2, r6
 8015492:	6122      	str	r2, [r4, #16]
 8015494:	f8cd a000 	str.w	sl, [sp]
 8015498:	464b      	mov	r3, r9
 801549a:	aa03      	add	r2, sp, #12
 801549c:	4621      	mov	r1, r4
 801549e:	4640      	mov	r0, r8
 80154a0:	f7ff fee6 	bl	8015270 <_printf_common>
 80154a4:	3001      	adds	r0, #1
 80154a6:	d14a      	bne.n	801553e <_printf_i+0x1f2>
 80154a8:	f04f 30ff 	mov.w	r0, #4294967295
 80154ac:	b004      	add	sp, #16
 80154ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154b2:	6823      	ldr	r3, [r4, #0]
 80154b4:	f043 0320 	orr.w	r3, r3, #32
 80154b8:	6023      	str	r3, [r4, #0]
 80154ba:	4833      	ldr	r0, [pc, #204]	@ (8015588 <_printf_i+0x23c>)
 80154bc:	2778      	movs	r7, #120	@ 0x78
 80154be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80154c2:	6823      	ldr	r3, [r4, #0]
 80154c4:	6831      	ldr	r1, [r6, #0]
 80154c6:	061f      	lsls	r7, r3, #24
 80154c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80154cc:	d402      	bmi.n	80154d4 <_printf_i+0x188>
 80154ce:	065f      	lsls	r7, r3, #25
 80154d0:	bf48      	it	mi
 80154d2:	b2ad      	uxthmi	r5, r5
 80154d4:	6031      	str	r1, [r6, #0]
 80154d6:	07d9      	lsls	r1, r3, #31
 80154d8:	bf44      	itt	mi
 80154da:	f043 0320 	orrmi.w	r3, r3, #32
 80154de:	6023      	strmi	r3, [r4, #0]
 80154e0:	b11d      	cbz	r5, 80154ea <_printf_i+0x19e>
 80154e2:	2310      	movs	r3, #16
 80154e4:	e7ac      	b.n	8015440 <_printf_i+0xf4>
 80154e6:	4827      	ldr	r0, [pc, #156]	@ (8015584 <_printf_i+0x238>)
 80154e8:	e7e9      	b.n	80154be <_printf_i+0x172>
 80154ea:	6823      	ldr	r3, [r4, #0]
 80154ec:	f023 0320 	bic.w	r3, r3, #32
 80154f0:	6023      	str	r3, [r4, #0]
 80154f2:	e7f6      	b.n	80154e2 <_printf_i+0x196>
 80154f4:	4616      	mov	r6, r2
 80154f6:	e7bd      	b.n	8015474 <_printf_i+0x128>
 80154f8:	6833      	ldr	r3, [r6, #0]
 80154fa:	6825      	ldr	r5, [r4, #0]
 80154fc:	6961      	ldr	r1, [r4, #20]
 80154fe:	1d18      	adds	r0, r3, #4
 8015500:	6030      	str	r0, [r6, #0]
 8015502:	062e      	lsls	r6, r5, #24
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	d501      	bpl.n	801550c <_printf_i+0x1c0>
 8015508:	6019      	str	r1, [r3, #0]
 801550a:	e002      	b.n	8015512 <_printf_i+0x1c6>
 801550c:	0668      	lsls	r0, r5, #25
 801550e:	d5fb      	bpl.n	8015508 <_printf_i+0x1bc>
 8015510:	8019      	strh	r1, [r3, #0]
 8015512:	2300      	movs	r3, #0
 8015514:	6123      	str	r3, [r4, #16]
 8015516:	4616      	mov	r6, r2
 8015518:	e7bc      	b.n	8015494 <_printf_i+0x148>
 801551a:	6833      	ldr	r3, [r6, #0]
 801551c:	1d1a      	adds	r2, r3, #4
 801551e:	6032      	str	r2, [r6, #0]
 8015520:	681e      	ldr	r6, [r3, #0]
 8015522:	6862      	ldr	r2, [r4, #4]
 8015524:	2100      	movs	r1, #0
 8015526:	4630      	mov	r0, r6
 8015528:	f7ea fefa 	bl	8000320 <memchr>
 801552c:	b108      	cbz	r0, 8015532 <_printf_i+0x1e6>
 801552e:	1b80      	subs	r0, r0, r6
 8015530:	6060      	str	r0, [r4, #4]
 8015532:	6863      	ldr	r3, [r4, #4]
 8015534:	6123      	str	r3, [r4, #16]
 8015536:	2300      	movs	r3, #0
 8015538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801553c:	e7aa      	b.n	8015494 <_printf_i+0x148>
 801553e:	6923      	ldr	r3, [r4, #16]
 8015540:	4632      	mov	r2, r6
 8015542:	4649      	mov	r1, r9
 8015544:	4640      	mov	r0, r8
 8015546:	47d0      	blx	sl
 8015548:	3001      	adds	r0, #1
 801554a:	d0ad      	beq.n	80154a8 <_printf_i+0x15c>
 801554c:	6823      	ldr	r3, [r4, #0]
 801554e:	079b      	lsls	r3, r3, #30
 8015550:	d413      	bmi.n	801557a <_printf_i+0x22e>
 8015552:	68e0      	ldr	r0, [r4, #12]
 8015554:	9b03      	ldr	r3, [sp, #12]
 8015556:	4298      	cmp	r0, r3
 8015558:	bfb8      	it	lt
 801555a:	4618      	movlt	r0, r3
 801555c:	e7a6      	b.n	80154ac <_printf_i+0x160>
 801555e:	2301      	movs	r3, #1
 8015560:	4632      	mov	r2, r6
 8015562:	4649      	mov	r1, r9
 8015564:	4640      	mov	r0, r8
 8015566:	47d0      	blx	sl
 8015568:	3001      	adds	r0, #1
 801556a:	d09d      	beq.n	80154a8 <_printf_i+0x15c>
 801556c:	3501      	adds	r5, #1
 801556e:	68e3      	ldr	r3, [r4, #12]
 8015570:	9903      	ldr	r1, [sp, #12]
 8015572:	1a5b      	subs	r3, r3, r1
 8015574:	42ab      	cmp	r3, r5
 8015576:	dcf2      	bgt.n	801555e <_printf_i+0x212>
 8015578:	e7eb      	b.n	8015552 <_printf_i+0x206>
 801557a:	2500      	movs	r5, #0
 801557c:	f104 0619 	add.w	r6, r4, #25
 8015580:	e7f5      	b.n	801556e <_printf_i+0x222>
 8015582:	bf00      	nop
 8015584:	08018d7f 	.word	0x08018d7f
 8015588:	08018d90 	.word	0x08018d90

0801558c <__sflush_r>:
 801558c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015594:	0716      	lsls	r6, r2, #28
 8015596:	4605      	mov	r5, r0
 8015598:	460c      	mov	r4, r1
 801559a:	d454      	bmi.n	8015646 <__sflush_r+0xba>
 801559c:	684b      	ldr	r3, [r1, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	dc02      	bgt.n	80155a8 <__sflush_r+0x1c>
 80155a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	dd48      	ble.n	801563a <__sflush_r+0xae>
 80155a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80155aa:	2e00      	cmp	r6, #0
 80155ac:	d045      	beq.n	801563a <__sflush_r+0xae>
 80155ae:	2300      	movs	r3, #0
 80155b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80155b4:	682f      	ldr	r7, [r5, #0]
 80155b6:	6a21      	ldr	r1, [r4, #32]
 80155b8:	602b      	str	r3, [r5, #0]
 80155ba:	d030      	beq.n	801561e <__sflush_r+0x92>
 80155bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80155be:	89a3      	ldrh	r3, [r4, #12]
 80155c0:	0759      	lsls	r1, r3, #29
 80155c2:	d505      	bpl.n	80155d0 <__sflush_r+0x44>
 80155c4:	6863      	ldr	r3, [r4, #4]
 80155c6:	1ad2      	subs	r2, r2, r3
 80155c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80155ca:	b10b      	cbz	r3, 80155d0 <__sflush_r+0x44>
 80155cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80155ce:	1ad2      	subs	r2, r2, r3
 80155d0:	2300      	movs	r3, #0
 80155d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80155d4:	6a21      	ldr	r1, [r4, #32]
 80155d6:	4628      	mov	r0, r5
 80155d8:	47b0      	blx	r6
 80155da:	1c43      	adds	r3, r0, #1
 80155dc:	89a3      	ldrh	r3, [r4, #12]
 80155de:	d106      	bne.n	80155ee <__sflush_r+0x62>
 80155e0:	6829      	ldr	r1, [r5, #0]
 80155e2:	291d      	cmp	r1, #29
 80155e4:	d82b      	bhi.n	801563e <__sflush_r+0xb2>
 80155e6:	4a2a      	ldr	r2, [pc, #168]	@ (8015690 <__sflush_r+0x104>)
 80155e8:	410a      	asrs	r2, r1
 80155ea:	07d6      	lsls	r6, r2, #31
 80155ec:	d427      	bmi.n	801563e <__sflush_r+0xb2>
 80155ee:	2200      	movs	r2, #0
 80155f0:	6062      	str	r2, [r4, #4]
 80155f2:	04d9      	lsls	r1, r3, #19
 80155f4:	6922      	ldr	r2, [r4, #16]
 80155f6:	6022      	str	r2, [r4, #0]
 80155f8:	d504      	bpl.n	8015604 <__sflush_r+0x78>
 80155fa:	1c42      	adds	r2, r0, #1
 80155fc:	d101      	bne.n	8015602 <__sflush_r+0x76>
 80155fe:	682b      	ldr	r3, [r5, #0]
 8015600:	b903      	cbnz	r3, 8015604 <__sflush_r+0x78>
 8015602:	6560      	str	r0, [r4, #84]	@ 0x54
 8015604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015606:	602f      	str	r7, [r5, #0]
 8015608:	b1b9      	cbz	r1, 801563a <__sflush_r+0xae>
 801560a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801560e:	4299      	cmp	r1, r3
 8015610:	d002      	beq.n	8015618 <__sflush_r+0x8c>
 8015612:	4628      	mov	r0, r5
 8015614:	f7ff fb40 	bl	8014c98 <_free_r>
 8015618:	2300      	movs	r3, #0
 801561a:	6363      	str	r3, [r4, #52]	@ 0x34
 801561c:	e00d      	b.n	801563a <__sflush_r+0xae>
 801561e:	2301      	movs	r3, #1
 8015620:	4628      	mov	r0, r5
 8015622:	47b0      	blx	r6
 8015624:	4602      	mov	r2, r0
 8015626:	1c50      	adds	r0, r2, #1
 8015628:	d1c9      	bne.n	80155be <__sflush_r+0x32>
 801562a:	682b      	ldr	r3, [r5, #0]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d0c6      	beq.n	80155be <__sflush_r+0x32>
 8015630:	2b1d      	cmp	r3, #29
 8015632:	d001      	beq.n	8015638 <__sflush_r+0xac>
 8015634:	2b16      	cmp	r3, #22
 8015636:	d11e      	bne.n	8015676 <__sflush_r+0xea>
 8015638:	602f      	str	r7, [r5, #0]
 801563a:	2000      	movs	r0, #0
 801563c:	e022      	b.n	8015684 <__sflush_r+0xf8>
 801563e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015642:	b21b      	sxth	r3, r3
 8015644:	e01b      	b.n	801567e <__sflush_r+0xf2>
 8015646:	690f      	ldr	r7, [r1, #16]
 8015648:	2f00      	cmp	r7, #0
 801564a:	d0f6      	beq.n	801563a <__sflush_r+0xae>
 801564c:	0793      	lsls	r3, r2, #30
 801564e:	680e      	ldr	r6, [r1, #0]
 8015650:	bf08      	it	eq
 8015652:	694b      	ldreq	r3, [r1, #20]
 8015654:	600f      	str	r7, [r1, #0]
 8015656:	bf18      	it	ne
 8015658:	2300      	movne	r3, #0
 801565a:	eba6 0807 	sub.w	r8, r6, r7
 801565e:	608b      	str	r3, [r1, #8]
 8015660:	f1b8 0f00 	cmp.w	r8, #0
 8015664:	dde9      	ble.n	801563a <__sflush_r+0xae>
 8015666:	6a21      	ldr	r1, [r4, #32]
 8015668:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801566a:	4643      	mov	r3, r8
 801566c:	463a      	mov	r2, r7
 801566e:	4628      	mov	r0, r5
 8015670:	47b0      	blx	r6
 8015672:	2800      	cmp	r0, #0
 8015674:	dc08      	bgt.n	8015688 <__sflush_r+0xfc>
 8015676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801567a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801567e:	81a3      	strh	r3, [r4, #12]
 8015680:	f04f 30ff 	mov.w	r0, #4294967295
 8015684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015688:	4407      	add	r7, r0
 801568a:	eba8 0800 	sub.w	r8, r8, r0
 801568e:	e7e7      	b.n	8015660 <__sflush_r+0xd4>
 8015690:	dfbffffe 	.word	0xdfbffffe

08015694 <_fflush_r>:
 8015694:	b538      	push	{r3, r4, r5, lr}
 8015696:	690b      	ldr	r3, [r1, #16]
 8015698:	4605      	mov	r5, r0
 801569a:	460c      	mov	r4, r1
 801569c:	b913      	cbnz	r3, 80156a4 <_fflush_r+0x10>
 801569e:	2500      	movs	r5, #0
 80156a0:	4628      	mov	r0, r5
 80156a2:	bd38      	pop	{r3, r4, r5, pc}
 80156a4:	b118      	cbz	r0, 80156ae <_fflush_r+0x1a>
 80156a6:	6a03      	ldr	r3, [r0, #32]
 80156a8:	b90b      	cbnz	r3, 80156ae <_fflush_r+0x1a>
 80156aa:	f7ff f8fd 	bl	80148a8 <__sinit>
 80156ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d0f3      	beq.n	801569e <_fflush_r+0xa>
 80156b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80156b8:	07d0      	lsls	r0, r2, #31
 80156ba:	d404      	bmi.n	80156c6 <_fflush_r+0x32>
 80156bc:	0599      	lsls	r1, r3, #22
 80156be:	d402      	bmi.n	80156c6 <_fflush_r+0x32>
 80156c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156c2:	f7ff faba 	bl	8014c3a <__retarget_lock_acquire_recursive>
 80156c6:	4628      	mov	r0, r5
 80156c8:	4621      	mov	r1, r4
 80156ca:	f7ff ff5f 	bl	801558c <__sflush_r>
 80156ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80156d0:	07da      	lsls	r2, r3, #31
 80156d2:	4605      	mov	r5, r0
 80156d4:	d4e4      	bmi.n	80156a0 <_fflush_r+0xc>
 80156d6:	89a3      	ldrh	r3, [r4, #12]
 80156d8:	059b      	lsls	r3, r3, #22
 80156da:	d4e1      	bmi.n	80156a0 <_fflush_r+0xc>
 80156dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156de:	f7ff faad 	bl	8014c3c <__retarget_lock_release_recursive>
 80156e2:	e7dd      	b.n	80156a0 <_fflush_r+0xc>

080156e4 <fiprintf>:
 80156e4:	b40e      	push	{r1, r2, r3}
 80156e6:	b503      	push	{r0, r1, lr}
 80156e8:	4601      	mov	r1, r0
 80156ea:	ab03      	add	r3, sp, #12
 80156ec:	4805      	ldr	r0, [pc, #20]	@ (8015704 <fiprintf+0x20>)
 80156ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80156f2:	6800      	ldr	r0, [r0, #0]
 80156f4:	9301      	str	r3, [sp, #4]
 80156f6:	f7ff fca3 	bl	8015040 <_vfiprintf_r>
 80156fa:	b002      	add	sp, #8
 80156fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015700:	b003      	add	sp, #12
 8015702:	4770      	bx	lr
 8015704:	2400009c 	.word	0x2400009c

08015708 <__swbuf_r>:
 8015708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801570a:	460e      	mov	r6, r1
 801570c:	4614      	mov	r4, r2
 801570e:	4605      	mov	r5, r0
 8015710:	b118      	cbz	r0, 801571a <__swbuf_r+0x12>
 8015712:	6a03      	ldr	r3, [r0, #32]
 8015714:	b90b      	cbnz	r3, 801571a <__swbuf_r+0x12>
 8015716:	f7ff f8c7 	bl	80148a8 <__sinit>
 801571a:	69a3      	ldr	r3, [r4, #24]
 801571c:	60a3      	str	r3, [r4, #8]
 801571e:	89a3      	ldrh	r3, [r4, #12]
 8015720:	071a      	lsls	r2, r3, #28
 8015722:	d501      	bpl.n	8015728 <__swbuf_r+0x20>
 8015724:	6923      	ldr	r3, [r4, #16]
 8015726:	b943      	cbnz	r3, 801573a <__swbuf_r+0x32>
 8015728:	4621      	mov	r1, r4
 801572a:	4628      	mov	r0, r5
 801572c:	f000 f82a 	bl	8015784 <__swsetup_r>
 8015730:	b118      	cbz	r0, 801573a <__swbuf_r+0x32>
 8015732:	f04f 37ff 	mov.w	r7, #4294967295
 8015736:	4638      	mov	r0, r7
 8015738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801573a:	6823      	ldr	r3, [r4, #0]
 801573c:	6922      	ldr	r2, [r4, #16]
 801573e:	1a98      	subs	r0, r3, r2
 8015740:	6963      	ldr	r3, [r4, #20]
 8015742:	b2f6      	uxtb	r6, r6
 8015744:	4283      	cmp	r3, r0
 8015746:	4637      	mov	r7, r6
 8015748:	dc05      	bgt.n	8015756 <__swbuf_r+0x4e>
 801574a:	4621      	mov	r1, r4
 801574c:	4628      	mov	r0, r5
 801574e:	f7ff ffa1 	bl	8015694 <_fflush_r>
 8015752:	2800      	cmp	r0, #0
 8015754:	d1ed      	bne.n	8015732 <__swbuf_r+0x2a>
 8015756:	68a3      	ldr	r3, [r4, #8]
 8015758:	3b01      	subs	r3, #1
 801575a:	60a3      	str	r3, [r4, #8]
 801575c:	6823      	ldr	r3, [r4, #0]
 801575e:	1c5a      	adds	r2, r3, #1
 8015760:	6022      	str	r2, [r4, #0]
 8015762:	701e      	strb	r6, [r3, #0]
 8015764:	6962      	ldr	r2, [r4, #20]
 8015766:	1c43      	adds	r3, r0, #1
 8015768:	429a      	cmp	r2, r3
 801576a:	d004      	beq.n	8015776 <__swbuf_r+0x6e>
 801576c:	89a3      	ldrh	r3, [r4, #12]
 801576e:	07db      	lsls	r3, r3, #31
 8015770:	d5e1      	bpl.n	8015736 <__swbuf_r+0x2e>
 8015772:	2e0a      	cmp	r6, #10
 8015774:	d1df      	bne.n	8015736 <__swbuf_r+0x2e>
 8015776:	4621      	mov	r1, r4
 8015778:	4628      	mov	r0, r5
 801577a:	f7ff ff8b 	bl	8015694 <_fflush_r>
 801577e:	2800      	cmp	r0, #0
 8015780:	d0d9      	beq.n	8015736 <__swbuf_r+0x2e>
 8015782:	e7d6      	b.n	8015732 <__swbuf_r+0x2a>

08015784 <__swsetup_r>:
 8015784:	b538      	push	{r3, r4, r5, lr}
 8015786:	4b29      	ldr	r3, [pc, #164]	@ (801582c <__swsetup_r+0xa8>)
 8015788:	4605      	mov	r5, r0
 801578a:	6818      	ldr	r0, [r3, #0]
 801578c:	460c      	mov	r4, r1
 801578e:	b118      	cbz	r0, 8015798 <__swsetup_r+0x14>
 8015790:	6a03      	ldr	r3, [r0, #32]
 8015792:	b90b      	cbnz	r3, 8015798 <__swsetup_r+0x14>
 8015794:	f7ff f888 	bl	80148a8 <__sinit>
 8015798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801579c:	0719      	lsls	r1, r3, #28
 801579e:	d422      	bmi.n	80157e6 <__swsetup_r+0x62>
 80157a0:	06da      	lsls	r2, r3, #27
 80157a2:	d407      	bmi.n	80157b4 <__swsetup_r+0x30>
 80157a4:	2209      	movs	r2, #9
 80157a6:	602a      	str	r2, [r5, #0]
 80157a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157ac:	81a3      	strh	r3, [r4, #12]
 80157ae:	f04f 30ff 	mov.w	r0, #4294967295
 80157b2:	e033      	b.n	801581c <__swsetup_r+0x98>
 80157b4:	0758      	lsls	r0, r3, #29
 80157b6:	d512      	bpl.n	80157de <__swsetup_r+0x5a>
 80157b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80157ba:	b141      	cbz	r1, 80157ce <__swsetup_r+0x4a>
 80157bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80157c0:	4299      	cmp	r1, r3
 80157c2:	d002      	beq.n	80157ca <__swsetup_r+0x46>
 80157c4:	4628      	mov	r0, r5
 80157c6:	f7ff fa67 	bl	8014c98 <_free_r>
 80157ca:	2300      	movs	r3, #0
 80157cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80157ce:	89a3      	ldrh	r3, [r4, #12]
 80157d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80157d4:	81a3      	strh	r3, [r4, #12]
 80157d6:	2300      	movs	r3, #0
 80157d8:	6063      	str	r3, [r4, #4]
 80157da:	6923      	ldr	r3, [r4, #16]
 80157dc:	6023      	str	r3, [r4, #0]
 80157de:	89a3      	ldrh	r3, [r4, #12]
 80157e0:	f043 0308 	orr.w	r3, r3, #8
 80157e4:	81a3      	strh	r3, [r4, #12]
 80157e6:	6923      	ldr	r3, [r4, #16]
 80157e8:	b94b      	cbnz	r3, 80157fe <__swsetup_r+0x7a>
 80157ea:	89a3      	ldrh	r3, [r4, #12]
 80157ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80157f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80157f4:	d003      	beq.n	80157fe <__swsetup_r+0x7a>
 80157f6:	4621      	mov	r1, r4
 80157f8:	4628      	mov	r0, r5
 80157fa:	f000 f846 	bl	801588a <__smakebuf_r>
 80157fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015802:	f013 0201 	ands.w	r2, r3, #1
 8015806:	d00a      	beq.n	801581e <__swsetup_r+0x9a>
 8015808:	2200      	movs	r2, #0
 801580a:	60a2      	str	r2, [r4, #8]
 801580c:	6962      	ldr	r2, [r4, #20]
 801580e:	4252      	negs	r2, r2
 8015810:	61a2      	str	r2, [r4, #24]
 8015812:	6922      	ldr	r2, [r4, #16]
 8015814:	b942      	cbnz	r2, 8015828 <__swsetup_r+0xa4>
 8015816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801581a:	d1c5      	bne.n	80157a8 <__swsetup_r+0x24>
 801581c:	bd38      	pop	{r3, r4, r5, pc}
 801581e:	0799      	lsls	r1, r3, #30
 8015820:	bf58      	it	pl
 8015822:	6962      	ldrpl	r2, [r4, #20]
 8015824:	60a2      	str	r2, [r4, #8]
 8015826:	e7f4      	b.n	8015812 <__swsetup_r+0x8e>
 8015828:	2000      	movs	r0, #0
 801582a:	e7f7      	b.n	801581c <__swsetup_r+0x98>
 801582c:	2400009c 	.word	0x2400009c

08015830 <abort>:
 8015830:	b508      	push	{r3, lr}
 8015832:	2006      	movs	r0, #6
 8015834:	f000 f88e 	bl	8015954 <raise>
 8015838:	2001      	movs	r0, #1
 801583a:	f7eb faa5 	bl	8000d88 <_exit>

0801583e <__swhatbuf_r>:
 801583e:	b570      	push	{r4, r5, r6, lr}
 8015840:	460c      	mov	r4, r1
 8015842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015846:	2900      	cmp	r1, #0
 8015848:	b096      	sub	sp, #88	@ 0x58
 801584a:	4615      	mov	r5, r2
 801584c:	461e      	mov	r6, r3
 801584e:	da0d      	bge.n	801586c <__swhatbuf_r+0x2e>
 8015850:	89a3      	ldrh	r3, [r4, #12]
 8015852:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015856:	f04f 0100 	mov.w	r1, #0
 801585a:	bf14      	ite	ne
 801585c:	2340      	movne	r3, #64	@ 0x40
 801585e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015862:	2000      	movs	r0, #0
 8015864:	6031      	str	r1, [r6, #0]
 8015866:	602b      	str	r3, [r5, #0]
 8015868:	b016      	add	sp, #88	@ 0x58
 801586a:	bd70      	pop	{r4, r5, r6, pc}
 801586c:	466a      	mov	r2, sp
 801586e:	f000 f879 	bl	8015964 <_fstat_r>
 8015872:	2800      	cmp	r0, #0
 8015874:	dbec      	blt.n	8015850 <__swhatbuf_r+0x12>
 8015876:	9901      	ldr	r1, [sp, #4]
 8015878:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801587c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015880:	4259      	negs	r1, r3
 8015882:	4159      	adcs	r1, r3
 8015884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015888:	e7eb      	b.n	8015862 <__swhatbuf_r+0x24>

0801588a <__smakebuf_r>:
 801588a:	898b      	ldrh	r3, [r1, #12]
 801588c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801588e:	079d      	lsls	r5, r3, #30
 8015890:	4606      	mov	r6, r0
 8015892:	460c      	mov	r4, r1
 8015894:	d507      	bpl.n	80158a6 <__smakebuf_r+0x1c>
 8015896:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801589a:	6023      	str	r3, [r4, #0]
 801589c:	6123      	str	r3, [r4, #16]
 801589e:	2301      	movs	r3, #1
 80158a0:	6163      	str	r3, [r4, #20]
 80158a2:	b003      	add	sp, #12
 80158a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158a6:	ab01      	add	r3, sp, #4
 80158a8:	466a      	mov	r2, sp
 80158aa:	f7ff ffc8 	bl	801583e <__swhatbuf_r>
 80158ae:	9f00      	ldr	r7, [sp, #0]
 80158b0:	4605      	mov	r5, r0
 80158b2:	4639      	mov	r1, r7
 80158b4:	4630      	mov	r0, r6
 80158b6:	f7fe fdef 	bl	8014498 <_malloc_r>
 80158ba:	b948      	cbnz	r0, 80158d0 <__smakebuf_r+0x46>
 80158bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158c0:	059a      	lsls	r2, r3, #22
 80158c2:	d4ee      	bmi.n	80158a2 <__smakebuf_r+0x18>
 80158c4:	f023 0303 	bic.w	r3, r3, #3
 80158c8:	f043 0302 	orr.w	r3, r3, #2
 80158cc:	81a3      	strh	r3, [r4, #12]
 80158ce:	e7e2      	b.n	8015896 <__smakebuf_r+0xc>
 80158d0:	89a3      	ldrh	r3, [r4, #12]
 80158d2:	6020      	str	r0, [r4, #0]
 80158d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158d8:	81a3      	strh	r3, [r4, #12]
 80158da:	9b01      	ldr	r3, [sp, #4]
 80158dc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80158e0:	b15b      	cbz	r3, 80158fa <__smakebuf_r+0x70>
 80158e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158e6:	4630      	mov	r0, r6
 80158e8:	f000 f84e 	bl	8015988 <_isatty_r>
 80158ec:	b128      	cbz	r0, 80158fa <__smakebuf_r+0x70>
 80158ee:	89a3      	ldrh	r3, [r4, #12]
 80158f0:	f023 0303 	bic.w	r3, r3, #3
 80158f4:	f043 0301 	orr.w	r3, r3, #1
 80158f8:	81a3      	strh	r3, [r4, #12]
 80158fa:	89a3      	ldrh	r3, [r4, #12]
 80158fc:	431d      	orrs	r5, r3
 80158fe:	81a5      	strh	r5, [r4, #12]
 8015900:	e7cf      	b.n	80158a2 <__smakebuf_r+0x18>

08015902 <_raise_r>:
 8015902:	291f      	cmp	r1, #31
 8015904:	b538      	push	{r3, r4, r5, lr}
 8015906:	4605      	mov	r5, r0
 8015908:	460c      	mov	r4, r1
 801590a:	d904      	bls.n	8015916 <_raise_r+0x14>
 801590c:	2316      	movs	r3, #22
 801590e:	6003      	str	r3, [r0, #0]
 8015910:	f04f 30ff 	mov.w	r0, #4294967295
 8015914:	bd38      	pop	{r3, r4, r5, pc}
 8015916:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015918:	b112      	cbz	r2, 8015920 <_raise_r+0x1e>
 801591a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801591e:	b94b      	cbnz	r3, 8015934 <_raise_r+0x32>
 8015920:	4628      	mov	r0, r5
 8015922:	f000 f853 	bl	80159cc <_getpid_r>
 8015926:	4622      	mov	r2, r4
 8015928:	4601      	mov	r1, r0
 801592a:	4628      	mov	r0, r5
 801592c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015930:	f000 b83a 	b.w	80159a8 <_kill_r>
 8015934:	2b01      	cmp	r3, #1
 8015936:	d00a      	beq.n	801594e <_raise_r+0x4c>
 8015938:	1c59      	adds	r1, r3, #1
 801593a:	d103      	bne.n	8015944 <_raise_r+0x42>
 801593c:	2316      	movs	r3, #22
 801593e:	6003      	str	r3, [r0, #0]
 8015940:	2001      	movs	r0, #1
 8015942:	e7e7      	b.n	8015914 <_raise_r+0x12>
 8015944:	2100      	movs	r1, #0
 8015946:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801594a:	4620      	mov	r0, r4
 801594c:	4798      	blx	r3
 801594e:	2000      	movs	r0, #0
 8015950:	e7e0      	b.n	8015914 <_raise_r+0x12>
	...

08015954 <raise>:
 8015954:	4b02      	ldr	r3, [pc, #8]	@ (8015960 <raise+0xc>)
 8015956:	4601      	mov	r1, r0
 8015958:	6818      	ldr	r0, [r3, #0]
 801595a:	f7ff bfd2 	b.w	8015902 <_raise_r>
 801595e:	bf00      	nop
 8015960:	2400009c 	.word	0x2400009c

08015964 <_fstat_r>:
 8015964:	b538      	push	{r3, r4, r5, lr}
 8015966:	4d07      	ldr	r5, [pc, #28]	@ (8015984 <_fstat_r+0x20>)
 8015968:	2300      	movs	r3, #0
 801596a:	4604      	mov	r4, r0
 801596c:	4608      	mov	r0, r1
 801596e:	4611      	mov	r1, r2
 8015970:	602b      	str	r3, [r5, #0]
 8015972:	f7eb fa2f 	bl	8000dd4 <_fstat>
 8015976:	1c43      	adds	r3, r0, #1
 8015978:	d102      	bne.n	8015980 <_fstat_r+0x1c>
 801597a:	682b      	ldr	r3, [r5, #0]
 801597c:	b103      	cbz	r3, 8015980 <_fstat_r+0x1c>
 801597e:	6023      	str	r3, [r4, #0]
 8015980:	bd38      	pop	{r3, r4, r5, pc}
 8015982:	bf00      	nop
 8015984:	240109dc 	.word	0x240109dc

08015988 <_isatty_r>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	4d06      	ldr	r5, [pc, #24]	@ (80159a4 <_isatty_r+0x1c>)
 801598c:	2300      	movs	r3, #0
 801598e:	4604      	mov	r4, r0
 8015990:	4608      	mov	r0, r1
 8015992:	602b      	str	r3, [r5, #0]
 8015994:	f7eb fa24 	bl	8000de0 <_isatty>
 8015998:	1c43      	adds	r3, r0, #1
 801599a:	d102      	bne.n	80159a2 <_isatty_r+0x1a>
 801599c:	682b      	ldr	r3, [r5, #0]
 801599e:	b103      	cbz	r3, 80159a2 <_isatty_r+0x1a>
 80159a0:	6023      	str	r3, [r4, #0]
 80159a2:	bd38      	pop	{r3, r4, r5, pc}
 80159a4:	240109dc 	.word	0x240109dc

080159a8 <_kill_r>:
 80159a8:	b538      	push	{r3, r4, r5, lr}
 80159aa:	4d07      	ldr	r5, [pc, #28]	@ (80159c8 <_kill_r+0x20>)
 80159ac:	2300      	movs	r3, #0
 80159ae:	4604      	mov	r4, r0
 80159b0:	4608      	mov	r0, r1
 80159b2:	4611      	mov	r1, r2
 80159b4:	602b      	str	r3, [r5, #0]
 80159b6:	f7eb f9df 	bl	8000d78 <_kill>
 80159ba:	1c43      	adds	r3, r0, #1
 80159bc:	d102      	bne.n	80159c4 <_kill_r+0x1c>
 80159be:	682b      	ldr	r3, [r5, #0]
 80159c0:	b103      	cbz	r3, 80159c4 <_kill_r+0x1c>
 80159c2:	6023      	str	r3, [r4, #0]
 80159c4:	bd38      	pop	{r3, r4, r5, pc}
 80159c6:	bf00      	nop
 80159c8:	240109dc 	.word	0x240109dc

080159cc <_getpid_r>:
 80159cc:	f7eb b9d2 	b.w	8000d74 <_getpid>

080159d0 <_init>:
 80159d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159d2:	bf00      	nop
 80159d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159d6:	bc08      	pop	{r3}
 80159d8:	469e      	mov	lr, r3
 80159da:	4770      	bx	lr

080159dc <_fini>:
 80159dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159de:	bf00      	nop
 80159e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159e2:	bc08      	pop	{r3}
 80159e4:	469e      	mov	lr, r3
 80159e6:	4770      	bx	lr
