
TLA2528_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008978  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008c48  08008c48  00009c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080090e4  080090e4  0000a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080090e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  240001d8  080092c0  0000b1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000430  080092c0  0000b430  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000135db  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002599  00000000  00000000  0001e7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e60  00000000  00000000  00020d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b1f  00000000  00000000  00021be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003344d  00000000  00000000  000226ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000143de  00000000  00000000  00055b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144dcc  00000000  00000000  00069f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001aecf6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a14  00000000  00000000  001aed3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  001b3750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008c30 	.word	0x08008c30

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08008c30 	.word	0x08008c30

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_write>:
I2C_HandleTypeDef hi2c5;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <_write+0x28>)
 80006c8:	f004 fc90 	bl	8004fec <HAL_UART_Transmit>
	return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	24000248 	.word	0x24000248

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e2:	f000 f9c1 	bl	8000a68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fd13 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f829 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f923 	bl	8000938 <MX_GPIO_Init>
  MX_I2C5_Init();
 80006f2:	f000 f895 	bl	8000820 <MX_I2C5_Init>
  MX_USART3_UART_Init();
 80006f6:	f000 f8d3 	bl	80008a0 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */
	    // Read_Register_And_Print(GENERAL_CFG_ADDRESS);
	 // Read_Register_OPCODE(SYSTEM_STATUS_ADDRESS);
//	  Read_All_Registers();
	  uint16_t adc_value = TLA2528_Read_ADC_SingleChannel(0); // อ่านค่า ADC จากช่อง AIN2
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fc56 	bl	8000fac <TLA2528_Read_ADC_SingleChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	80fb      	strh	r3, [r7, #6]
	  float voltage = TLA2528_Convert_To_Voltage(adc_value, 3.3, 12); // ใช้ VREF = 2.5V, 12-bit ADC
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	210c      	movs	r1, #12
 8000708:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000738 <main+0x5c>
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fca9 	bl	8001064 <TLA2528_Convert_To_Voltage>
 8000712:	ed87 0a00 	vstr	s0, [r7]
	  printf("ADC Channel 0: %u -> Voltage: %.3fV\n", adc_value, voltage);
 8000716:	88f9      	ldrh	r1, [r7, #6]
 8000718:	edd7 7a00 	vldr	s15, [r7]
 800071c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000720:	ec53 2b17 	vmov	r2, r3, d7
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <main+0x60>)
 8000726:	f006 fb79 	bl	8006e1c <iprintf>
//	  for (uint8_t i = 0; i < 8; i++)
//	  {
//	      float v = TLA2528_Convert_To_Voltage(adc_all[i], 3.3, 12);
//	      printf("ADC Channel %u: %u -> Voltage: %.3fV\n", i, adc_all[i], v);
//	  }
	     HAL_Delay(1000); // หน่วงเวลา 1 วินาทีเพื่อดูค่าที่เปลี่ยนแปลง
 800072a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072e:	f000 fd81 	bl	8001234 <HAL_Delay>
  {
 8000732:	bf00      	nop
 8000734:	e7e1      	b.n	80006fa <main+0x1e>
 8000736:	bf00      	nop
 8000738:	40533333 	.word	0x40533333
 800073c:	08008c48 	.word	0x08008c48

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074a:	224c      	movs	r2, #76	@ 0x4c
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fbb9 	bl	8006ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2220      	movs	r2, #32
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fbb3 	bl	8006ec6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000760:	2002      	movs	r0, #2
 8000762:	f001 fe91 	bl	8002488 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <SystemClock_Config+0xdc>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a2b      	ldr	r2, [pc, #172]	@ (800081c <SystemClock_Config+0xdc>)
 8000770:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b29      	ldr	r3, [pc, #164]	@ (800081c <SystemClock_Config+0xdc>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000782:	bf00      	nop
 8000784:	4b25      	ldr	r3, [pc, #148]	@ (800081c <SystemClock_Config+0xdc>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800078c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000790:	d1f8      	bne.n	8000784 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000796:	2301      	movs	r3, #1
 8000798:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800079a:	2340      	movs	r3, #64	@ 0x40
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a2:	2300      	movs	r3, #0
 80007a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80007aa:	231f      	movs	r3, #31
 80007ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ba:	230c      	movs	r3, #12
 80007bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007be:	2300      	movs	r3, #0
 80007c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 80007c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fe95 	bl	80024fc <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007d8:	f000 f972 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	233f      	movs	r3, #63	@ 0x3f
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2303      	movs	r3, #3
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007e8:	2308      	movs	r3, #8
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ec:	2340      	movs	r3, #64	@ 0x40
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2103      	movs	r1, #3
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fa54 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800080e:	f000 f957 	bl	8000ac0 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3770      	adds	r7, #112	@ 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58024800 	.word	0x58024800

08000820 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_I2C5_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_I2C5_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x20A0A3F6;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_I2C5_Init+0x74>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <MX_I2C5_Init+0x7c>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_I2C5_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_I2C5_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_I2C5_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_I2C5_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_I2C5_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_I2C5_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_I2C5_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 800085a:	480e      	ldr	r0, [pc, #56]	@ (8000894 <MX_I2C5_Init+0x74>)
 800085c:	f001 f82c 	bl	80018b8 <HAL_I2C_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000866:	f000 f92b 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4809      	ldr	r0, [pc, #36]	@ (8000894 <MX_I2C5_Init+0x74>)
 800086e:	f001 fd73 	bl	8002358 <HAL_I2CEx_ConfigAnalogFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 f922 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_I2C5_Init+0x74>)
 8000880:	f001 fdb5 	bl	80023ee <HAL_I2CEx_ConfigDigitalFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f919 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	240001f4 	.word	0x240001f4
 8000898:	40006400 	.word	0x40006400
 800089c:	20a0a3f6 	.word	0x20a0a3f6

080008a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <MX_USART3_UART_Init+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008ea:	f004 fb2f 	bl	8004f4c <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008f4:	f000 f8e4 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008fc:	f005 fcc9 	bl	8006292 <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000906:	f000 f8db 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 800090e:	f005 fcfe 	bl	800630e <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000918:	f000 f8d2 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 800091e:	f005 fc7f 	bl	8006220 <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f8ca 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000248 	.word	0x24000248
 8000934:	40004800 	.word	0x40004800

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b42      	ldr	r3, [pc, #264]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a40      	ldr	r2, [pc, #256]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a39      	ldr	r2, [pc, #228]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b33      	ldr	r3, [pc, #204]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a31      	ldr	r2, [pc, #196]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a58 <MX_GPIO_Init+0x120>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000a58 <MX_GPIO_Init+0x120>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <MX_GPIO_Init+0x120>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c6:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_GPIO_Init+0x120>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a22      	ldr	r2, [pc, #136]	@ (8000a58 <MX_GPIO_Init+0x120>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_GPIO_Init+0x120>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009ea:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <MX_GPIO_Init+0x124>)
 80009ec:	f000 ff4a 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2102      	movs	r1, #2
 80009f4:	481a      	ldr	r0, [pc, #104]	@ (8000a60 <MX_GPIO_Init+0x128>)
 80009f6:	f000 ff45 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4815      	ldr	r0, [pc, #84]	@ (8000a64 <MX_GPIO_Init+0x12c>)
 8000a10:	f000 fd90 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a14:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000a2e:	f000 fd81 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_GPIO_Init+0x128>)
 8000a4a:	f000 fd73 	bl	8001534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	58020400 	.word	0x58020400
 8000a60:	58021000 	.word	0x58021000
 8000a64:	58020800 	.word	0x58020800

08000a68 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a7a:	f000 fce3 	bl	8001444 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a8a:	231f      	movs	r3, #31
 8000a8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a8e:	2387      	movs	r3, #135	@ 0x87
 8000a90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a96:	2300      	movs	r3, #0
 8000a98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fd01 	bl	80014b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f000 fcde 	bl	8001474 <HAL_MPU_Enable>

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_MspInit+0x30>)
 8000ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad8:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x30>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x30>)
 8000ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	58024400 	.word	0x58024400

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0b8      	sub	sp, #224	@ 0xe0
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	22b8      	movs	r2, #184	@ 0xb8
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f006 f9d0 	bl	8006ec6 <memset>
  if(hi2c->Instance==I2C5)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a27      	ldr	r2, [pc, #156]	@ (8000bc8 <HAL_I2C_MspInit+0xc8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d146      	bne.n	8000bbe <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8000b30:	f04f 0208 	mov.w	r2, #8
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fc3e 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b52:	f7ff ffb5 	bl	8000ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <HAL_I2C_MspInit+0xcc>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <HAL_I2C_MspInit+0xcc>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_I2C_MspInit+0xcc>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <HAL_I2C_MspInit+0xd0>)
 8000b9c:	f000 fcca 	bl	8001534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_I2C_MspInit+0xcc>)
 8000ba2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <HAL_I2C_MspInit+0xcc>)
 8000ba8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_I2C_MspInit+0xcc>)
 8000bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C5_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	37e0      	adds	r7, #224	@ 0xe0
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40006400 	.word	0x40006400
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020800 	.word	0x58020800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0b8      	sub	sp, #224	@ 0xe0
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	22b8      	movs	r2, #184	@ 0xb8
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f006 f966 	bl	8006ec6 <memset>
  if(huart->Instance==USART3)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a27      	ldr	r2, [pc, #156]	@ (8000c9c <HAL_UART_MspInit+0xc8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d146      	bne.n	8000c92 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c04:	f04f 0202 	mov.w	r2, #2
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fbd4 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c26:	f7ff ff4b 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000c66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c86:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_UART_MspInit+0xd0>)
 8000c8e:	f000 fc51 	bl	8001534 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	37e0      	adds	r7, #224	@ 0xe0
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004800 	.word	0x40004800
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	58020c00 	.word	0x58020c00

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfe:	f000 fa79 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_kill>:

int _kill(int pid, int sig)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d20:	f006 f924 	bl	8006f6c <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2216      	movs	r2, #22
 8000d28:	601a      	str	r2, [r3, #0]
  return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_exit>:

void _exit (int status)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffe7 	bl	8000d16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <_exit+0x12>

08000d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e00a      	b.n	8000d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5e:	f3af 8000 	nop.w
 8000d62:	4601      	mov	r1, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf0      	blt.n	8000d5e <_read+0x12>
  }

  return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dae:	605a      	str	r2, [r3, #4]
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_isatty>:

int _isatty(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	@ (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f006 f8a4 	bl	8006f6c <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	24050000 	.word	0x24050000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	240002dc 	.word	0x240002dc
 8000e58:	24000430 	.word	0x24000430

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e60:	4b3e      	ldr	r3, [pc, #248]	@ (8000f5c <SystemInit+0x100>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e66:	4a3d      	ldr	r2, [pc, #244]	@ (8000f5c <SystemInit+0x100>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e70:	4b3b      	ldr	r3, [pc, #236]	@ (8000f60 <SystemInit+0x104>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	d807      	bhi.n	8000e8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7c:	4b38      	ldr	r3, [pc, #224]	@ (8000f60 <SystemInit+0x104>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f023 030f 	bic.w	r3, r3, #15
 8000e84:	4a36      	ldr	r2, [pc, #216]	@ (8000f60 <SystemInit+0x104>)
 8000e86:	f043 0307 	orr.w	r3, r3, #7
 8000e8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e8c:	4b35      	ldr	r3, [pc, #212]	@ (8000f64 <SystemInit+0x108>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a34      	ldr	r2, [pc, #208]	@ (8000f64 <SystemInit+0x108>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e98:	4b32      	ldr	r3, [pc, #200]	@ (8000f64 <SystemInit+0x108>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <SystemInit+0x108>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4930      	ldr	r1, [pc, #192]	@ (8000f64 <SystemInit+0x108>)
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <SystemInit+0x10c>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <SystemInit+0x104>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <SystemInit+0x104>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 030f 	bic.w	r3, r3, #15
 8000ebe:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <SystemInit+0x104>)
 8000ec0:	f043 0307 	orr.w	r3, r3, #7
 8000ec4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec6:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <SystemInit+0x108>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <SystemInit+0x108>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <SystemInit+0x108>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <SystemInit+0x108>)
 8000eda:	4a24      	ldr	r2, [pc, #144]	@ (8000f6c <SystemInit+0x110>)
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <SystemInit+0x108>)
 8000ee0:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <SystemInit+0x114>)
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <SystemInit+0x108>)
 8000ee6:	4a23      	ldr	r2, [pc, #140]	@ (8000f74 <SystemInit+0x118>)
 8000ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <SystemInit+0x108>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <SystemInit+0x108>)
 8000ef2:	4a20      	ldr	r2, [pc, #128]	@ (8000f74 <SystemInit+0x118>)
 8000ef4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <SystemInit+0x108>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000efc:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <SystemInit+0x108>)
 8000efe:	4a1d      	ldr	r2, [pc, #116]	@ (8000f74 <SystemInit+0x118>)
 8000f00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <SystemInit+0x108>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f08:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <SystemInit+0x108>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <SystemInit+0x108>)
 8000f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <SystemInit+0x108>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f1a:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <SystemInit+0x108>)
 8000f1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d113      	bne.n	8000f50 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <SystemInit+0x108>)
 8000f2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <SystemInit+0x108>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <SystemInit+0x11c>)
 8000f3a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <SystemInit+0x108>)
 8000f42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <SystemInit+0x108>)
 8000f48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	52002000 	.word	0x52002000
 8000f64:	58024400 	.word	0x58024400
 8000f68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f6c:	02020200 	.word	0x02020200
 8000f70:	01ff0000 	.word	0x01ff0000
 8000f74:	01010280 	.word	0x01010280
 8000f78:	52004000 	.word	0x52004000

08000f7c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <ExitRun0Mode+0x2c>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <ExitRun0Mode+0x2c>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f8c:	bf00      	nop
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <ExitRun0Mode+0x2c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	58024800 	.word	0x58024800

08000fac <TLA2528_Read_ADC_SingleChannel>:

        HAL_Delay(200);  // ปล่อยเวลาให้กับ I2C
    }
}

uint16_t TLA2528_Read_ADC_SingleChannel(uint8_t channel) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
    if (channel > 7) return 0xFFFF; // ตรวจสอบว่าช่องถูกต้อง (0-7)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d902      	bls.n	8000fc2 <TLA2528_Read_ADC_SingleChannel+0x16>
 8000fbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fc0:	e045      	b.n	800104e <TLA2528_Read_ADC_SingleChannel+0xa2>

    uint8_t reg_value = channel & MANUAL_CHID_MASK; // ตั้งค่าช่อง
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDRESS << 1,
                                                       (uint8_t[]){MANUAL_CH_SEL_ADDRESS, reg_value}, 2, 1000);
 8000fca:	2311      	movs	r3, #17
 8000fcc:	743b      	strb	r3, [r7, #16]
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	747b      	strb	r3, [r7, #17]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDRESS << 1,
 8000fd2:	f107 0210 	add.w	r2, r7, #16
 8000fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	2120      	movs	r1, #32
 8000fe0:	481d      	ldr	r0, [pc, #116]	@ (8001058 <TLA2528_Read_ADC_SingleChannel+0xac>)
 8000fe2:	f000 fd05 	bl	80019f0 <HAL_I2C_Master_Transmit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75bb      	strb	r3, [r7, #22]
    HAL_Delay(5); // รอ ADC เปลี่ยนช่อง
 8000fea:	2005      	movs	r0, #5
 8000fec:	f000 f922 	bl	8001234 <HAL_Delay>

    if (status != HAL_OK) {
 8000ff0:	7dbb      	ldrb	r3, [r7, #22]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <TLA2528_Read_ADC_SingleChannel+0x58>
        printf("I2C Write Error: 0x%02X\n", MANUAL_CH_SEL_ADDRESS);
 8000ff6:	2111      	movs	r1, #17
 8000ff8:	4818      	ldr	r0, [pc, #96]	@ (800105c <TLA2528_Read_ADC_SingleChannel+0xb0>)
 8000ffa:	f005 ff0f 	bl	8006e1c <iprintf>
        return 0xFFFF;
 8000ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001002:	e024      	b.n	800104e <TLA2528_Read_ADC_SingleChannel+0xa2>
    }

    // รอให้ ADC ทำงานเสร็จ (ขึ้นอยู่กับความเร็ว I2C และอัตราการแปลงของ ADC)
    HAL_Delay(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f000 f915 	bl	8001234 <HAL_Delay>

    // อ่านค่าจาก ADC (ค่า 16-bit)
    uint8_t adc_data[2] = {0};
 800100a:	2300      	movs	r3, #0
 800100c:	81bb      	strh	r3, [r7, #12]
    status = HAL_I2C_Master_Receive(&hi2c5, TLA2528_I2C_ADDRESS << 1, adc_data, 2, 1000);
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2302      	movs	r3, #2
 800101a:	2120      	movs	r1, #32
 800101c:	480e      	ldr	r0, [pc, #56]	@ (8001058 <TLA2528_Read_ADC_SingleChannel+0xac>)
 800101e:	f000 fdff 	bl	8001c20 <HAL_I2C_Master_Receive>
 8001022:	4603      	mov	r3, r0
 8001024:	75bb      	strb	r3, [r7, #22]

    if (status != HAL_OK) {
 8001026:	7dbb      	ldrb	r3, [r7, #22]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d007      	beq.n	800103c <TLA2528_Read_ADC_SingleChannel+0x90>
        printf("I2C Read Error: ADC Channel %u\n", channel);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4619      	mov	r1, r3
 8001030:	480b      	ldr	r0, [pc, #44]	@ (8001060 <TLA2528_Read_ADC_SingleChannel+0xb4>)
 8001032:	f005 fef3 	bl	8006e1c <iprintf>
        return 0xFFFF;
 8001036:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103a:	e008      	b.n	800104e <TLA2528_Read_ADC_SingleChannel+0xa2>
    }

    // รวมค่าจาก 2 ไบต์ให้เป็น 16-bit
    uint16_t adc_value = (adc_data[0] << 8) | adc_data[1];
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	82bb      	strh	r3, [r7, #20]

    return adc_value;
 800104c:	8abb      	ldrh	r3, [r7, #20]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	240001f4 	.word	0x240001f4
 800105c:	08008c70 	.word	0x08008c70
 8001060:	08008d0c 	.word	0x08008d0c

08001064 <TLA2528_Convert_To_Voltage>:
    for (uint8_t ch = 0; ch < 8; ch++) {
        adc_values[ch] = TLA2528_Read_ADC_SingleChannel(ch);
    }
}

float TLA2528_Convert_To_Voltage(uint16_t adc_value, float vref, uint8_t resolution) {
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	ed87 0a00 	vstr	s0, [r7]
 8001070:	460a      	mov	r2, r1
 8001072:	80fb      	strh	r3, [r7, #6]
 8001074:	4613      	mov	r3, r2
 8001076:	717b      	strb	r3, [r7, #5]
    uint16_t max_adc = (1 << resolution) - 1; // คำนวณค่ามากสุดของ ADC (2^resolution - 1)
 8001078:	797b      	ldrb	r3, [r7, #5]
 800107a:	2201      	movs	r2, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	81fb      	strh	r3, [r7, #14]
    return ((float)adc_value * vref) / max_adc;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001090:	edd7 7a00 	vldr	s15, [r7]
 8001094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010a6:	eef0 7a66 	vmov.f32	s15, s13
}
 80010aa:	eeb0 0a67 	vmov.f32	s0, s15
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010f4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010bc:	f7ff ff5e 	bl	8000f7c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fecc 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	@ (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f005 ff45 	bl	8006f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff faf5 	bl	80006dc <main>
  bx  lr
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010fc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001100:	080090e8 	.word	0x080090e8
  ldr r2, =_sbss
 8001104:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001108:	24000430 	.word	0x24000430

0800110c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC3_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 f962 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800111c:	f001 ff7e 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8001120:	4602      	mov	r2, r0
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_Init+0x68>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	4913      	ldr	r1, [pc, #76]	@ (800117c <HAL_Init+0x6c>)
 800112e:	5ccb      	ldrb	r3, [r1, r3]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <HAL_Init+0x68>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <HAL_Init+0x6c>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <HAL_Init+0x70>)
 8001152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001154:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <HAL_Init+0x74>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f814 	bl	8001188 <HAL_InitTick>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e002      	b.n	8001170 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800116a:	f7ff fcaf 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	58024400 	.word	0x58024400
 800117c:	08008d2c 	.word	0x08008d2c
 8001180:	24000004 	.word	0x24000004
 8001184:	24000000 	.word	0x24000000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_InitTick+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e021      	b.n	80011e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_InitTick+0x64>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <HAL_InitTick+0x60>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f939 	bl	800142a <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f911 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <HAL_InitTick+0x68>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2400000c 	.word	0x2400000c
 80011ec:	24000000 	.word	0x24000000
 80011f0:	24000008 	.word	0x24000008

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2400000c 	.word	0x2400000c
 8001218:	240002e0 	.word	0x240002e0

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	240002e0 	.word	0x240002e0

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2400000c 	.word	0x2400000c

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <__NVIC_SetPriorityGrouping+0x40>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <__NVIC_SetPriorityGrouping+0x40>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	05fa0000 	.word	0x05fa0000

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	@ (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	@ (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	@ 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	@ 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff8e 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff47 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb2 	bl	800139c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001448:	f3bf 8f5f 	dmb	sy
}
 800144c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <HAL_MPU_Disable+0x28>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_MPU_Disable+0x28>)
 8001454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001458:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_MPU_Disable+0x2c>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	e000ed90 	.word	0xe000ed90

08001474 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800147c:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <HAL_MPU_Enable+0x38>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_MPU_Enable+0x3c>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148a:	4a09      	ldr	r2, [pc, #36]	@ (80014b0 <HAL_MPU_Enable+0x3c>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001492:	f3bf 8f4f 	dsb	sy
}
 8001496:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001498:	f3bf 8f6f 	isb	sy
}
 800149c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed90 	.word	0xe000ed90
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	785a      	ldrb	r2, [r3, #1]
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_MPU_ConfigRegion+0x7c>)
 80014c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <HAL_MPU_ConfigRegion+0x7c>)
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <HAL_MPU_ConfigRegion+0x7c>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014d0:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_MPU_ConfigRegion+0x7c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7b1b      	ldrb	r3, [r3, #12]
 80014dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7adb      	ldrb	r3, [r3, #11]
 80014e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7a9b      	ldrb	r3, [r3, #10]
 80014ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7b5b      	ldrb	r3, [r3, #13]
 80014f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7b9b      	ldrb	r3, [r3, #14]
 80014fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7bdb      	ldrb	r3, [r3, #15]
 8001502:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001504:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7a5b      	ldrb	r3, [r3, #9]
 800150a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800150c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7a1b      	ldrb	r3, [r3, #8]
 8001512:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001514:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800151e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001520:	6113      	str	r3, [r2, #16]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed90 	.word	0xe000ed90

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	@ 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001542:	4b86      	ldr	r3, [pc, #536]	@ (800175c <HAL_GPIO_Init+0x228>)
 8001544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001546:	e18c      	b.n	8001862 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 817e 	beq.w	800185c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d005      	beq.n	8001578 <HAL_GPIO_Init+0x44>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d130      	bne.n	80015da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ae:	2201      	movs	r2, #1
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	f003 0201 	and.w	r2, r3, #1
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d017      	beq.n	8001616 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d123      	bne.n	800166a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	69b9      	ldr	r1, [r7, #24]
 8001666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0203 	and.w	r2, r3, #3
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80d8 	beq.w	800185c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001760 <HAL_GPIO_Init+0x22c>)
 80016ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <HAL_GPIO_Init+0x22c>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016bc:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <HAL_GPIO_Init+0x22c>)
 80016be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a26      	ldr	r2, [pc, #152]	@ (8001764 <HAL_GPIO_Init+0x230>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001768 <HAL_GPIO_Init+0x234>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d04a      	beq.n	800178c <HAL_GPIO_Init+0x258>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <HAL_GPIO_Init+0x238>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d02b      	beq.n	8001756 <HAL_GPIO_Init+0x222>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <HAL_GPIO_Init+0x23c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d025      	beq.n	8001752 <HAL_GPIO_Init+0x21e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a1a      	ldr	r2, [pc, #104]	@ (8001774 <HAL_GPIO_Init+0x240>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01f      	beq.n	800174e <HAL_GPIO_Init+0x21a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_GPIO_Init+0x244>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x216>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a18      	ldr	r2, [pc, #96]	@ (800177c <HAL_GPIO_Init+0x248>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x212>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a17      	ldr	r2, [pc, #92]	@ (8001780 <HAL_GPIO_Init+0x24c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x20e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a16      	ldr	r2, [pc, #88]	@ (8001784 <HAL_GPIO_Init+0x250>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x20a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a15      	ldr	r2, [pc, #84]	@ (8001788 <HAL_GPIO_Init+0x254>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x206>
 8001736:	2309      	movs	r3, #9
 8001738:	e029      	b.n	800178e <HAL_GPIO_Init+0x25a>
 800173a:	230a      	movs	r3, #10
 800173c:	e027      	b.n	800178e <HAL_GPIO_Init+0x25a>
 800173e:	2307      	movs	r3, #7
 8001740:	e025      	b.n	800178e <HAL_GPIO_Init+0x25a>
 8001742:	2306      	movs	r3, #6
 8001744:	e023      	b.n	800178e <HAL_GPIO_Init+0x25a>
 8001746:	2305      	movs	r3, #5
 8001748:	e021      	b.n	800178e <HAL_GPIO_Init+0x25a>
 800174a:	2304      	movs	r3, #4
 800174c:	e01f      	b.n	800178e <HAL_GPIO_Init+0x25a>
 800174e:	2303      	movs	r3, #3
 8001750:	e01d      	b.n	800178e <HAL_GPIO_Init+0x25a>
 8001752:	2302      	movs	r3, #2
 8001754:	e01b      	b.n	800178e <HAL_GPIO_Init+0x25a>
 8001756:	2301      	movs	r3, #1
 8001758:	e019      	b.n	800178e <HAL_GPIO_Init+0x25a>
 800175a:	bf00      	nop
 800175c:	58000080 	.word	0x58000080
 8001760:	58024400 	.word	0x58024400
 8001764:	58000400 	.word	0x58000400
 8001768:	58020000 	.word	0x58020000
 800176c:	58020400 	.word	0x58020400
 8001770:	58020800 	.word	0x58020800
 8001774:	58020c00 	.word	0x58020c00
 8001778:	58021000 	.word	0x58021000
 800177c:	58021400 	.word	0x58021400
 8001780:	58021800 	.word	0x58021800
 8001784:	58021c00 	.word	0x58021c00
 8001788:	58022400 	.word	0x58022400
 800178c:	2300      	movs	r3, #0
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f002 0203 	and.w	r2, r2, #3
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	4093      	lsls	r3, r2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800179e:	4938      	ldr	r1, [pc, #224]	@ (8001880 <HAL_GPIO_Init+0x34c>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	3301      	adds	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f ae6b 	bne.w	8001548 <HAL_GPIO_Init+0x14>
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	3724      	adds	r7, #36	@ 0x24
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	58000400 	.word	0x58000400

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e08b      	b.n	80019e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff f90e 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2224      	movs	r2, #36	@ 0x24
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e006      	b.n	8001940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800193e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d108      	bne.n	800195a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	e007      	b.n	800196a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001968:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <HAL_I2C_Init+0x134>)
 8001976:	430b      	orrs	r3, r1
 8001978:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001988:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69d9      	ldr	r1, [r3, #28]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	02008000 	.word	0x02008000

080019f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	461a      	mov	r2, r3
 80019fc:	460b      	mov	r3, r1
 80019fe:	817b      	strh	r3, [r7, #10]
 8001a00:	4613      	mov	r3, r2
 8001a02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	f040 80fd 	bne.w	8001c0c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_I2C_Master_Transmit+0x30>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0f6      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x21e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a28:	f7ff fbf8 	bl	800121c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2319      	movs	r3, #25
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fa0a 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0e1      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2221      	movs	r2, #33	@ 0x21
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2210      	movs	r2, #16
 8001a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	893a      	ldrh	r2, [r7, #8]
 8001a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2bff      	cmp	r3, #255	@ 0xff
 8001a7a:	d906      	bls.n	8001a8a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	22ff      	movs	r2, #255	@ 0xff
 8001a80:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e007      	b.n	8001a9a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d024      	beq.n	8001aec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	8979      	ldrh	r1, [r7, #10]
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <HAL_I2C_Master_Transmit+0x228>)
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fc05 	bl	80022f4 <I2C_TransferConfig>
 8001aea:	e066      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	8979      	ldrh	r1, [r7, #10]
 8001af4:	4b48      	ldr	r3, [pc, #288]	@ (8001c18 <HAL_I2C_Master_Transmit+0x228>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fbfa 	bl	80022f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b00:	e05b      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	6a39      	ldr	r1, [r7, #32]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f9fd 	bl	8001f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07b      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d034      	beq.n	8001bba <HAL_I2C_Master_Transmit+0x1ca>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d130      	bne.n	8001bba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f976 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e04d      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2bff      	cmp	r3, #255	@ 0xff
 8001b7a:	d90e      	bls.n	8001b9a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	22ff      	movs	r2, #255	@ 0xff
 8001b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	8979      	ldrh	r1, [r7, #10]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fbae 	bl	80022f4 <I2C_TransferConfig>
 8001b98:	e00f      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	8979      	ldrh	r1, [r7, #10]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fb9d 	bl	80022f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d19e      	bne.n	8001b02 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	6a39      	ldr	r1, [r7, #32]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f9e3 	bl	8001f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e01a      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6859      	ldr	r1, [r3, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_I2C_Master_Transmit+0x22c>)
 8001bec:	400b      	ands	r3, r1
 8001bee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	80002000 	.word	0x80002000
 8001c1c:	fe00e800 	.word	0xfe00e800

08001c20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	817b      	strh	r3, [r7, #10]
 8001c30:	4613      	mov	r3, r2
 8001c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	f040 80db 	bne.w	8001df8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_I2C_Master_Receive+0x30>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e0d4      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c58:	f7ff fae0 	bl	800121c <HAL_GetTick>
 8001c5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2319      	movs	r3, #25
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f8f2 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0bf      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2222      	movs	r2, #34	@ 0x22
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2210      	movs	r2, #16
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	893a      	ldrh	r2, [r7, #8]
 8001c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2bff      	cmp	r3, #255	@ 0xff
 8001caa:	d90e      	bls.n	8001cca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	22ff      	movs	r2, #255	@ 0xff
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	8979      	ldrh	r1, [r7, #10]
 8001cba:	4b52      	ldr	r3, [pc, #328]	@ (8001e04 <HAL_I2C_Master_Receive+0x1e4>)
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fb16 	bl	80022f4 <I2C_TransferConfig>
 8001cc8:	e06d      	b.n	8001da6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	8979      	ldrh	r1, [r7, #10]
 8001cdc:	4b49      	ldr	r3, [pc, #292]	@ (8001e04 <HAL_I2C_Master_Receive+0x1e4>)
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fb05 	bl	80022f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cea:	e05c      	b.n	8001da6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	6a39      	ldr	r1, [r7, #32]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f993 	bl	800201c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e07c      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d034      	beq.n	8001da6 <HAL_I2C_Master_Receive+0x186>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d130      	bne.n	8001da6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f880 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e04d      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2bff      	cmp	r3, #255	@ 0xff
 8001d66:	d90e      	bls.n	8001d86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	22ff      	movs	r2, #255	@ 0xff
 8001d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	8979      	ldrh	r1, [r7, #10]
 8001d76:	2300      	movs	r3, #0
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fab8 	bl	80022f4 <I2C_TransferConfig>
 8001d84:	e00f      	b.n	8001da6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	8979      	ldrh	r1, [r7, #10]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 faa7 	bl	80022f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d19d      	bne.n	8001cec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	6a39      	ldr	r1, [r7, #32]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f8ed 	bl	8001f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e01a      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <HAL_I2C_Master_Receive+0x1e8>)
 8001dd8:	400b      	ands	r3, r1
 8001dda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001df8:	2302      	movs	r3, #2
  }
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	80002400 	.word	0x80002400
 8001e08:	fe00e800 	.word	0xfe00e800

08001e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d103      	bne.n	8001e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d007      	beq.n	8001e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	619a      	str	r2, [r3, #24]
  }
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e64:	e03b      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f962 	bl	8002134 <I2C_IsErrorOccurred>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e041      	b.n	8001efe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d02d      	beq.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e82:	f7ff f9cb 	bl	800121c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d302      	bcc.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d122      	bne.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d113      	bne.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f043 0220 	orr.w	r2, r3, #32
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d0b4      	beq.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f12:	e033      	b.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f90b 	bl	8002134 <I2C_IsErrorOccurred>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e031      	b.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d025      	beq.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f30:	f7ff f974 	bl	800121c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d302      	bcc.n	8001f46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11a      	bne.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d013      	beq.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e007      	b.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d1c4      	bne.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa0:	e02f      	b.n	8002002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f8c4 	bl	8002134 <I2C_IsErrorOccurred>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e02d      	b.n	8002012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb6:	f7ff f931 	bl	800121c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d302      	bcc.n	8001fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11a      	bne.n	8002002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d013      	beq.n	8002002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b20      	cmp	r3, #32
 800200e:	d1c8      	bne.n	8001fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800202c:	e071      	b.n	8002112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f87e 	bl	8002134 <I2C_IsErrorOccurred>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b20      	cmp	r3, #32
 800204e:	d13b      	bne.n	80020c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d138      	bne.n	80020c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d105      	bne.n	8002070 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b10      	cmp	r3, #16
 800207c:	d121      	bne.n	80020c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2210      	movs	r2, #16
 8002084:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2204      	movs	r2, #4
 800208a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2220      	movs	r2, #32
 8002092:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80020a0:	400b      	ands	r3, r1
 80020a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	75fb      	strb	r3, [r7, #23]
 80020c0:	e002      	b.n	80020c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80020c8:	f7ff f8a8 	bl	800121c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d302      	bcc.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d116      	bne.n	8002112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d00f      	beq.n	8002112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f043 0220 	orr.w	r2, r3, #32
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b04      	cmp	r3, #4
 800211e:	d002      	beq.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d083      	beq.n	800202e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	fe00e800 	.word	0xfe00e800

08002134 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	d068      	beq.n	8002232 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002168:	e049      	b.n	80021fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d045      	beq.n	80021fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002172:	f7ff f853 	bl	800121c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	d302      	bcc.n	8002188 <I2C_IsErrorOccurred+0x54>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d13a      	bne.n	80021fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002192:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800219a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021aa:	d121      	bne.n	80021f0 <I2C_IsErrorOccurred+0xbc>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021b2:	d01d      	beq.n	80021f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d01a      	beq.n	80021f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021ca:	f7ff f827 	bl	800121c <HAL_GetTick>
 80021ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d0:	e00e      	b.n	80021f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021d2:	f7ff f823 	bl	800121c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b19      	cmp	r3, #25
 80021de:	d907      	bls.n	80021f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f043 0320 	orr.w	r3, r3, #32
 80021e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80021ee:	e006      	b.n	80021fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d1e9      	bne.n	80021d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b20      	cmp	r3, #32
 800220a:	d003      	beq.n	8002214 <I2C_IsErrorOccurred+0xe0>
 800220c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0aa      	beq.n	800216a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2220      	movs	r2, #32
 8002222:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00b      	beq.n	800225c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002254:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002276:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00b      	beq.n	80022a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80022a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01c      	beq.n	80022e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff fdaf 	bl	8001e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <I2C_IsErrorOccurred+0x1bc>)
 80022ba:	400b      	ands	r3, r1
 80022bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80022e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3728      	adds	r7, #40	@ 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	fe00e800 	.word	0xfe00e800

080022f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	4613      	mov	r3, r2
 8002304:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002306:	897b      	ldrh	r3, [r7, #10]
 8002308:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800230c:	7a7b      	ldrb	r3, [r7, #9]
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002314:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	4313      	orrs	r3, r2
 800231e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002322:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	0d5b      	lsrs	r3, r3, #21
 800232e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <I2C_TransferConfig+0x60>)
 8002334:	430b      	orrs	r3, r1
 8002336:	43db      	mvns	r3, r3
 8002338:	ea02 0103 	and.w	r1, r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	03ff63ff 	.word	0x03ff63ff

08002358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	d138      	bne.n	80023e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002378:	2302      	movs	r3, #2
 800237a:	e032      	b.n	80023e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	@ 0x24
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e000      	b.n	80023e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
  }
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	d139      	bne.n	8002478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800240e:	2302      	movs	r3, #2
 8002410:	e033      	b.n	800247a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2224      	movs	r2, #36	@ 0x24
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00a      	beq.n	80024b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800249c:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <HAL_PWREx_ConfigSupply+0x70>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e01f      	b.n	80024ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e01d      	b.n	80024ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_PWREx_ConfigSupply+0x70>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	490f      	ldr	r1, [pc, #60]	@ (80024f8 <HAL_PWREx_ConfigSupply+0x70>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024c2:	f7fe feab 	bl	800121c <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024c8:	e009      	b.n	80024de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024ca:	f7fe fea7 	bl	800121c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024d8:	d901      	bls.n	80024de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e007      	b.n	80024ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_PWREx_ConfigSupply+0x70>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ea:	d1ee      	bne.n	80024ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	58024800 	.word	0x58024800

080024fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	@ 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e3c8      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8087 	beq.w	800262a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251c:	4b88      	ldr	r3, [pc, #544]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002526:	4b86      	ldr	r3, [pc, #536]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800252c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252e:	2b10      	cmp	r3, #16
 8002530:	d007      	beq.n	8002542 <HAL_RCC_OscConfig+0x46>
 8002532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002534:	2b18      	cmp	r3, #24
 8002536:	d110      	bne.n	800255a <HAL_RCC_OscConfig+0x5e>
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d10b      	bne.n	800255a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002542:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d06c      	beq.n	8002628 <HAL_RCC_OscConfig+0x12c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d168      	bne.n	8002628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e3a2      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x76>
 8002564:	4b76      	ldr	r3, [pc, #472]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a75      	ldr	r2, [pc, #468]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e02e      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x98>
 800257a:	4b71      	ldr	r3, [pc, #452]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a70      	ldr	r2, [pc, #448]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b6e      	ldr	r3, [pc, #440]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6d      	ldr	r2, [pc, #436]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0xbc>
 800259e:	4b68      	ldr	r3, [pc, #416]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a67      	ldr	r2, [pc, #412]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b65      	ldr	r3, [pc, #404]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a64      	ldr	r2, [pc, #400]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 80025b8:	4b61      	ldr	r3, [pc, #388]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a60      	ldr	r2, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe20 	bl	800121c <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fe1c 	bl	800121c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e356      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f2:	4b53      	ldr	r3, [pc, #332]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe4>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fe0c 	bl	800121c <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fe08 	bl	800121c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e342      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800261a:	4b49      	ldr	r3, [pc, #292]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x10c>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 808c 	beq.w	8002750 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002638:	4b41      	ldr	r3, [pc, #260]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002640:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002642:	4b3f      	ldr	r3, [pc, #252]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_RCC_OscConfig+0x162>
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2b18      	cmp	r3, #24
 8002652:	d137      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1c8>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d132      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265e:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x17a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e314      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002676:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0219 	bic.w	r2, r3, #25
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	492f      	ldr	r1, [pc, #188]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fdc8 	bl	800121c <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fdc4 	bl	800121c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e2fe      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a2:	4b27      	ldr	r3, [pc, #156]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	4920      	ldr	r1, [pc, #128]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c2:	e045      	b.n	8002750 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d026      	beq.n	800271a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 0219 	bic.w	r2, r3, #25
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4919      	ldr	r1, [pc, #100]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fd9d 	bl	800121c <HAL_GetTick>
 80026e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fd99 	bl	800121c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e2d3      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	490b      	ldr	r1, [pc, #44]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	e01a      	b.n	8002750 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a08      	ldr	r2, [pc, #32]	@ (8002740 <HAL_RCC_OscConfig+0x244>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fd79 	bl	800121c <HAL_GetTick>
 800272a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe fd75 	bl	800121c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d903      	bls.n	8002744 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e2af      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
 8002740:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002744:	4b96      	ldr	r3, [pc, #600]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ee      	bne.n	800272e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d06a      	beq.n	8002832 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275c:	4b90      	ldr	r3, [pc, #576]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002764:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002766:	4b8e      	ldr	r3, [pc, #568]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b08      	cmp	r3, #8
 8002770:	d007      	beq.n	8002782 <HAL_RCC_OscConfig+0x286>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b18      	cmp	r3, #24
 8002776:	d11b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2b4>
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002782:	4b87      	ldr	r3, [pc, #540]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x29e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	2b80      	cmp	r3, #128	@ 0x80
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e282      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800279a:	4b81      	ldr	r3, [pc, #516]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	497d      	ldr	r1, [pc, #500]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ae:	e040      	b.n	8002832 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027b8:	4b79      	ldr	r3, [pc, #484]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a78      	ldr	r2, [pc, #480]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80027be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fd2a 	bl	800121c <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027cc:	f7fe fd26 	bl	800121c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e260      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027de:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ea:	4b6d      	ldr	r3, [pc, #436]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	4969      	ldr	r1, [pc, #420]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60cb      	str	r3, [r1, #12]
 80027fe:	e018      	b.n	8002832 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002800:	4b67      	ldr	r3, [pc, #412]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a66      	ldr	r2, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800280a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fd06 	bl	800121c <HAL_GetTick>
 8002810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002814:	f7fe fd02 	bl	800121c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e23c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002826:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d036      	beq.n	80028ac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d019      	beq.n	800287a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002846:	4b56      	ldr	r3, [pc, #344]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284a:	4a55      	ldr	r2, [pc, #340]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fce3 	bl	800121c <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe fcdf 	bl	800121c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e219      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800286c:	4b4c      	ldr	r3, [pc, #304]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x35e>
 8002878:	e018      	b.n	80028ac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287a:	4b49      	ldr	r3, [pc, #292]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287e:	4a48      	ldr	r2, [pc, #288]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fcc9 	bl	800121c <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fcc5 	bl	800121c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1ff      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a0:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80028a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d036      	beq.n	8002926 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d019      	beq.n	80028f4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c0:	4b37      	ldr	r3, [pc, #220]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a36      	ldr	r2, [pc, #216]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80028c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fca6 	bl	800121c <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d4:	f7fe fca2 	bl	800121c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1dc      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028e6:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x3d8>
 80028f2:	e018      	b.n	8002926 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028f4:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a29      	ldr	r2, [pc, #164]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 80028fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002900:	f7fe fc8c 	bl	800121c <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002908:	f7fe fc88 	bl	800121c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1c2      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800291a:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8086 	beq.w	8002a40 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002934:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_RCC_OscConfig+0x4a8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <HAL_RCC_OscConfig+0x4a8>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002940:	f7fe fc6c 	bl	800121c <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fe fc68 	bl	800121c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1a2      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295a:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <HAL_RCC_OscConfig+0x4a8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x480>
 800296e:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	4a0b      	ldr	r2, [pc, #44]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6713      	str	r3, [r2, #112]	@ 0x70
 800297a:	e032      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4ac>
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a02      	ldr	r2, [pc, #8]	@ (80029a0 <HAL_RCC_OscConfig+0x4a4>)
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
 800299c:	e021      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e6>
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400
 80029a4:	58024800 	.word	0x58024800
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_OscConfig+0x4ce>
 80029b0:	4b83      	ldr	r3, [pc, #524]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a82      	ldr	r2, [pc, #520]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	4b80      	ldr	r3, [pc, #512]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c0:	4a7f      	ldr	r2, [pc, #508]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e6>
 80029ca:	4b7d      	ldr	r3, [pc, #500]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ce:	4a7c      	ldr	r2, [pc, #496]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	4a79      	ldr	r2, [pc, #484]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7fe fc17 	bl	800121c <HAL_GetTick>
 80029ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe fc13 	bl	800121c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e14b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a08:	4b6d      	ldr	r3, [pc, #436]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCC_OscConfig+0x4f6>
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe fc01 	bl	800121c <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fbfd 	bl	800121c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e135      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a34:	4b62      	ldr	r3, [pc, #392]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 812a 	beq.w	8002c9e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a52:	2b18      	cmp	r3, #24
 8002a54:	f000 80ba 	beq.w	8002bcc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	f040 8095 	bne.w	8002b8c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b57      	ldr	r3, [pc, #348]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a56      	ldr	r2, [pc, #344]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fbd5 	bl	800121c <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe fbd1 	bl	800121c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e10b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a88:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a94:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002a96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a98:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc4 <HAL_RCC_OscConfig+0x6c8>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	4945      	ldr	r1, [pc, #276]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	628b      	str	r3, [r1, #40]	@ 0x28
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abc:	3b01      	subs	r3, #1
 8002abe:	025b      	lsls	r3, r3, #9
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ade:	4938      	ldr	r1, [pc, #224]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ae4:	4b36      	ldr	r3, [pc, #216]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	4a35      	ldr	r2, [pc, #212]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af4:	4b34      	ldr	r3, [pc, #208]	@ (8002bc8 <HAL_RCC_OscConfig+0x6cc>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002afc:	00d2      	lsls	r2, r2, #3
 8002afe:	4930      	ldr	r1, [pc, #192]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b04:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f023 020c 	bic.w	r2, r3, #12
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	492b      	ldr	r1, [pc, #172]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b16:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1a:	f023 0202 	bic.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4927      	ldr	r1, [pc, #156]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b28:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	4a24      	ldr	r2, [pc, #144]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b40:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b58:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fb5a 	bl	800121c <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fb56 	bl	800121c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e090      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7e:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x670>
 8002b8a:	e088      	b.n	8002c9e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fb40 	bl	800121c <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fb3c 	bl	800121c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e076      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <HAL_RCC_OscConfig+0x6c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x6a4>
 8002bbe:	e06e      	b.n	8002c9e <HAL_RCC_OscConfig+0x7a2>
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	fffffc0c 	.word	0xfffffc0c
 8002bc8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bd2:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d031      	beq.n	8002c44 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d12a      	bne.n	8002c44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d122      	bne.n	8002c44 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d11a      	bne.n	8002c44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d111      	bne.n	8002c44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	0c1b      	lsrs	r3, r3, #16
 8002c24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0e1b      	lsrs	r3, r3, #24
 8002c36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e02b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c48:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	08db      	lsrs	r3, r3, #3
 8002c4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d01f      	beq.n	8002c9e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4a11      	ldr	r2, [pc, #68]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c6a:	f7fe fad7 	bl	800121c <HAL_GetTick>
 8002c6e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c70:	bf00      	nop
 8002c72:	f7fe fad3 	bl	800121c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d0f9      	beq.n	8002c72 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_RCC_OscConfig+0x7b0>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c8a:	00d2      	lsls	r2, r2, #3
 8002c8c:	4906      	ldr	r1, [pc, #24]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c92:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <HAL_RCC_OscConfig+0x7ac>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3730      	adds	r7, #48	@ 0x30
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	ffff0007 	.word	0xffff0007

08002cb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e19c      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d910      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b87      	ldr	r3, [pc, #540]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 020f 	bic.w	r2, r3, #15
 8002cda:	4985      	ldr	r1, [pc, #532]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b83      	ldr	r3, [pc, #524]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e184      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d908      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d10:	4b78      	ldr	r3, [pc, #480]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4975      	ldr	r1, [pc, #468]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	4b70      	ldr	r3, [pc, #448]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d908      	bls.n	8002d50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	496a      	ldr	r1, [pc, #424]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	4b64      	ldr	r3, [pc, #400]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d908      	bls.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d6c:	4b61      	ldr	r3, [pc, #388]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	495e      	ldr	r1, [pc, #376]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d908      	bls.n	8002dac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d9a:	4b56      	ldr	r3, [pc, #344]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4953      	ldr	r1, [pc, #332]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d010      	beq.n	8002dda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d908      	bls.n	8002dda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f023 020f 	bic.w	r2, r3, #15
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4947      	ldr	r1, [pc, #284]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d055      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002de6:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	4940      	ldr	r1, [pc, #256]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e00:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d121      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0f6      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e18:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d115      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0ea      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0de      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0d6      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e50:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f023 0207 	bic.w	r2, r3, #7
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4925      	ldr	r1, [pc, #148]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e62:	f7fe f9db 	bl	800121c <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7fe f9d7 	bl	800121c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0be      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e80:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d1eb      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d208      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eae:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f023 020f 	bic.w	r2, r3, #15
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	490e      	ldr	r1, [pc, #56]	@ (8002ef4 <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d214      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 020f 	bic.w	r2, r3, #15
 8002ed6:	4906      	ldr	r1, [pc, #24]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <HAL_RCC_ClockConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e086      	b.n	8002ffe <HAL_RCC_ClockConfig+0x34e>
 8002ef0:	52002000 	.word	0x52002000
 8002ef4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	4b3f      	ldr	r3, [pc, #252]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d208      	bcs.n	8002f26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f14:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	4939      	ldr	r1, [pc, #228]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	4b34      	ldr	r3, [pc, #208]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d208      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f42:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	492e      	ldr	r1, [pc, #184]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d208      	bcs.n	8002f82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f70:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4922      	ldr	r1, [pc, #136]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d010      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d208      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4917      	ldr	r1, [pc, #92]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fb0:	f000 f834 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	4912      	ldr	r1, [pc, #72]	@ (800300c <HAL_RCC_ClockConfig+0x35c>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fce:	4b0e      	ldr	r3, [pc, #56]	@ (8003008 <HAL_RCC_ClockConfig+0x358>)
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800300c <HAL_RCC_ClockConfig+0x35c>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x360>)
 8002fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <HAL_RCC_ClockConfig+0x364>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x368>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe f8c8 	bl	8001188 <HAL_InitTick>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	58024400 	.word	0x58024400
 800300c:	08008d2c 	.word	0x08008d2c
 8003010:	24000004 	.word	0x24000004
 8003014:	24000000 	.word	0x24000000
 8003018:	24000008 	.word	0x24000008

0800301c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003022:	4bb3      	ldr	r3, [pc, #716]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800302a:	2b18      	cmp	r3, #24
 800302c:	f200 8155 	bhi.w	80032da <HAL_RCC_GetSysClockFreq+0x2be>
 8003030:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	0800309d 	.word	0x0800309d
 800303c:	080032db 	.word	0x080032db
 8003040:	080032db 	.word	0x080032db
 8003044:	080032db 	.word	0x080032db
 8003048:	080032db 	.word	0x080032db
 800304c:	080032db 	.word	0x080032db
 8003050:	080032db 	.word	0x080032db
 8003054:	080032db 	.word	0x080032db
 8003058:	080030c3 	.word	0x080030c3
 800305c:	080032db 	.word	0x080032db
 8003060:	080032db 	.word	0x080032db
 8003064:	080032db 	.word	0x080032db
 8003068:	080032db 	.word	0x080032db
 800306c:	080032db 	.word	0x080032db
 8003070:	080032db 	.word	0x080032db
 8003074:	080032db 	.word	0x080032db
 8003078:	080030c9 	.word	0x080030c9
 800307c:	080032db 	.word	0x080032db
 8003080:	080032db 	.word	0x080032db
 8003084:	080032db 	.word	0x080032db
 8003088:	080032db 	.word	0x080032db
 800308c:	080032db 	.word	0x080032db
 8003090:	080032db 	.word	0x080032db
 8003094:	080032db 	.word	0x080032db
 8003098:	080030cf 	.word	0x080030cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800309c:	4b94      	ldr	r3, [pc, #592]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030a8:	4b91      	ldr	r3, [pc, #580]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	4a90      	ldr	r2, [pc, #576]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030ba:	e111      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030bc:	4b8d      	ldr	r3, [pc, #564]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030be:	61bb      	str	r3, [r7, #24]
      break;
 80030c0:	e10e      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030c2:	4b8d      	ldr	r3, [pc, #564]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c4:	61bb      	str	r3, [r7, #24]
      break;
 80030c6:	e10b      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030c8:	4b8c      	ldr	r3, [pc, #560]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030ca:	61bb      	str	r3, [r7, #24]
      break;
 80030cc:	e108      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ce:	4b88      	ldr	r3, [pc, #544]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030d8:	4b85      	ldr	r3, [pc, #532]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030e4:	4b82      	ldr	r3, [pc, #520]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030ee:	4b80      	ldr	r3, [pc, #512]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003106:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80e1 	beq.w	80032d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b02      	cmp	r3, #2
 8003116:	f000 8083 	beq.w	8003220 <HAL_RCC_GetSysClockFreq+0x204>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b02      	cmp	r3, #2
 800311e:	f200 80a1 	bhi.w	8003264 <HAL_RCC_GetSysClockFreq+0x248>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x114>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d056      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800312e:	e099      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003130:	4b6f      	ldr	r3, [pc, #444]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02d      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800313c:	4b6c      	ldr	r3, [pc, #432]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	4a6b      	ldr	r2, [pc, #428]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003166:	4b62      	ldr	r3, [pc, #392]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003176:	ed97 6a02 	vldr	s12, [r7, #8]
 800317a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003300 <HAL_RCC_GetSysClockFreq+0x2e4>
 800317e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800318a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003196:	e087      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031aa:	4b51      	ldr	r3, [pc, #324]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80031be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003300 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031da:	e065      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ee:	4b40      	ldr	r3, [pc, #256]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003202:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003300 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800321e:	e043      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2f0>
 800322e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003232:	4b2f      	ldr	r3, [pc, #188]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003242:	ed97 6a02 	vldr	s12, [r7, #8]
 8003246:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003300 <HAL_RCC_GetSysClockFreq+0x2e4>
 800324a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003262:	e021      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003276:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003286:	ed97 6a02 	vldr	s12, [r7, #8]
 800328a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003300 <HAL_RCC_GetSysClockFreq+0x2e4>
 800328e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800329a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032a8:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	0a5b      	lsrs	r3, r3, #9
 80032ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b2:	3301      	adds	r3, #1
 80032b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032cc:	ee17 3a90 	vmov	r3, s15
 80032d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032d2:	e005      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
      break;
 80032d8:	e002      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032da:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032dc:	61bb      	str	r3, [r7, #24]
      break;
 80032de:	bf00      	nop
  }

  return sysclockfreq;
 80032e0:	69bb      	ldr	r3, [r7, #24]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	58024400 	.word	0x58024400
 80032f4:	03d09000 	.word	0x03d09000
 80032f8:	003d0900 	.word	0x003d0900
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	46000000 	.word	0x46000000
 8003304:	4c742400 	.word	0x4c742400
 8003308:	4a742400 	.word	0x4a742400
 800330c:	4af42400 	.word	0x4af42400

08003310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003316:	f7ff fe81 	bl	800301c <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x50>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490f      	ldr	r1, [pc, #60]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x54>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003334:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x50>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	4a09      	ldr	r2, [pc, #36]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x54>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a07      	ldr	r2, [pc, #28]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x58>)
 800334c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800334e:	4a07      	ldr	r2, [pc, #28]	@ (800336c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003354:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x58>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	58024400 	.word	0x58024400
 8003364:	08008d2c 	.word	0x08008d2c
 8003368:	24000004 	.word	0x24000004
 800336c:	24000000 	.word	0x24000000

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003374:	f7ff ffcc 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4904      	ldr	r1, [pc, #16]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58024400 	.word	0x58024400
 8003398:	08008d2c 	.word	0x08008d2c

0800339c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033a0:	f7ff ffb6 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4904      	ldr	r1, [pc, #16]	@ (80033c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	58024400 	.word	0x58024400
 80033c4:	08008d2c 	.word	0x08008d2c

080033c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c6      	sub	sp, #280	@ 0x118
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033ec:	2500      	movs	r5, #0
 80033ee:	ea54 0305 	orrs.w	r3, r4, r5
 80033f2:	d049      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033fe:	d02f      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003400:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003404:	d828      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800340a:	d01a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800340c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003410:	d822      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800341a:	d007      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800341c:	e01c      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341e:	4bab      	ldr	r3, [pc, #684]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	4aaa      	ldr	r2, [pc, #680]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800342a:	e01a      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800342c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003430:	3308      	adds	r3, #8
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fc25 	bl	8004c84 <RCCEx_PLL2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003440:	e00f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003446:	3328      	adds	r3, #40	@ 0x28
 8003448:	2102      	movs	r1, #2
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fccc 	bl	8004de8 <RCCEx_PLL3_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003456:	e004      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800346a:	4b98      	ldr	r3, [pc, #608]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800346c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003478:	4a94      	ldr	r2, [pc, #592]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800347a:	430b      	orrs	r3, r1
 800347c:	6513      	str	r3, [r2, #80]	@ 0x50
 800347e:	e003      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003484:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003494:	f04f 0900 	mov.w	r9, #0
 8003498:	ea58 0309 	orrs.w	r3, r8, r9
 800349c:	d047      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800349e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d82a      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034c5 	.word	0x080034c5
 80034b4:	080034d3 	.word	0x080034d3
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	08003507 	.word	0x08003507
 80034c0:	08003507 	.word	0x08003507
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c4:	4b81      	ldr	r3, [pc, #516]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	4a80      	ldr	r2, [pc, #512]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d0:	e01a      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d6:	3308      	adds	r3, #8
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fbd2 	bl	8004c84 <RCCEx_PLL2_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e6:	e00f      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ec:	3328      	adds	r3, #40	@ 0x28
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fc79 	bl	8004de8 <RCCEx_PLL3_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034fc:	e004      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003510:	4b6e      	ldr	r3, [pc, #440]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003514:	f023 0107 	bic.w	r1, r3, #7
 8003518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	4a6b      	ldr	r2, [pc, #428]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003520:	430b      	orrs	r3, r1
 8003522:	6513      	str	r3, [r2, #80]	@ 0x50
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800352a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800352e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800353a:	f04f 0b00 	mov.w	fp, #0
 800353e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003542:	d05b      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800354c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003550:	d03b      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003552:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003556:	d834      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003558:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800355c:	d037      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 800355e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003562:	d82e      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003564:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003568:	d033      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800356a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800356e:	d828      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d01a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003576:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800357a:	d822      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003580:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003584:	d007      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003586:	e01c      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003588:	4b50      	ldr	r3, [pc, #320]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	4a4f      	ldr	r2, [pc, #316]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003594:	e01e      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359a:	3308      	adds	r3, #8
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fb70 	bl	8004c84 <RCCEx_PLL2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035aa:	e013      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b0:	3328      	adds	r3, #40	@ 0x28
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fc17 	bl	8004de8 <RCCEx_PLL3_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c0:	e008      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035c8:	e004      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035dc:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035ec:	4a37      	ldr	r2, [pc, #220]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f2:	e003      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003608:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003612:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003616:	460b      	mov	r3, r1
 8003618:	4313      	orrs	r3, r2
 800361a:	d05d      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800361c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003620:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003624:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003628:	d03b      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800362a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800362e:	d834      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003630:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003634:	d037      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800363a:	d82e      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800363c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003640:	d033      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003642:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003646:	d828      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003648:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800364c:	d01a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800364e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003652:	d822      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800365c:	d007      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800365e:	e01c      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003660:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	4a19      	ldr	r2, [pc, #100]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800366c:	e01e      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800366e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003672:	3308      	adds	r3, #8
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fb04 	bl	8004c84 <RCCEx_PLL2_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003682:	e013      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003688:	3328      	adds	r3, #40	@ 0x28
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f001 fbab 	bl	8004de8 <RCCEx_PLL3_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003698:	e008      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036a0:	e004      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036c4:	4a01      	ldr	r2, [pc, #4]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036c6:	430b      	orrs	r3, r1
 80036c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ca:	e005      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036ee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d03a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fe:	2b30      	cmp	r3, #48	@ 0x30
 8003700:	d01f      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003702:	2b30      	cmp	r3, #48	@ 0x30
 8003704:	d819      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003706:	2b20      	cmp	r3, #32
 8003708:	d00c      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800370a:	2b20      	cmp	r3, #32
 800370c:	d815      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d019      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003712:	2b10      	cmp	r3, #16
 8003714:	d111      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003716:	4baa      	ldr	r3, [pc, #680]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	4aa9      	ldr	r2, [pc, #676]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800371c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003728:	3308      	adds	r3, #8
 800372a:	2102      	movs	r1, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f001 faa9 	bl	8004c84 <RCCEx_PLL2_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003738:	e006      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003740:	e002      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003748:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003750:	4b9b      	ldr	r3, [pc, #620]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003754:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375e:	4a98      	ldr	r2, [pc, #608]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003760:	430b      	orrs	r3, r1
 8003762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800376a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800377a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003784:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d051      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800378e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003798:	d035      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800379a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800379e:	d82e      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037a4:	d031      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80037a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037aa:	d828      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b0:	d01a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b6:	d822      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c0:	d007      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80037c2:	e01c      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b7e      	ldr	r3, [pc, #504]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	4a7d      	ldr	r2, [pc, #500]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037d0:	e01c      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d6:	3308      	adds	r3, #8
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fa52 	bl	8004c84 <RCCEx_PLL2_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037e6:	e011      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ec:	3328      	adds	r3, #40	@ 0x28
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 faf9 	bl	8004de8 <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037fc:	e006      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003804:	e002      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800380a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003814:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003818:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800381c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	4a67      	ldr	r2, [pc, #412]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003824:	430b      	orrs	r3, r1
 8003826:	6513      	str	r3, [r2, #80]	@ 0x50
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800383e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003848:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d053      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800385c:	d033      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800385e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003862:	d82c      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003864:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003868:	d02f      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x502>
 800386a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800386e:	d826      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003870:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003874:	d02b      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003876:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800387a:	d820      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800387c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003880:	d012      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003886:	d81a      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d022      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d115      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003896:	3308      	adds	r3, #8
 8003898:	2101      	movs	r1, #1
 800389a:	4618      	mov	r0, r3
 800389c:	f001 f9f2 	bl	8004c84 <RCCEx_PLL2_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038a6:	e015      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ac:	3328      	adds	r3, #40	@ 0x28
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fa99 	bl	8004de8 <RCCEx_PLL3_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038bc:	e00a      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038dc:	4b38      	ldr	r3, [pc, #224]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	4a35      	ldr	r2, [pc, #212]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80038f0:	e003      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003906:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003910:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d058      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003926:	d033      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800392c:	d82c      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003932:	d02f      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003938:	d826      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800393a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800393e:	d02b      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003944:	d820      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800394a:	d012      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003950:	d81a      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d022      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800395a:	d115      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800395c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003960:	3308      	adds	r3, #8
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f001 f98d 	bl	8004c84 <RCCEx_PLL2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003970:	e015      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003976:	3328      	adds	r3, #40	@ 0x28
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fa34 	bl	8004de8 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003986:	e00a      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800398e:	e006      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003990:	bf00      	nop
 8003992:	e004      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003994:	bf00      	nop
 8003996:	e002      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10e      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039a6:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039b6:	4a02      	ldr	r2, [pc, #8]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80039bc:	e006      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4313      	orrs	r3, r2
 80039ea:	d037      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f6:	d00e      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fc:	d816      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d018      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a06:	d111      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a08:	4bc4      	ldr	r3, [pc, #784]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	4ac3      	ldr	r2, [pc, #780]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a14:	e00f      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 f930 	bl	8004c84 <RCCEx_PLL2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a2a:	e004      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a3e:	4bb7      	ldr	r3, [pc, #732]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a4c:	4ab3      	ldr	r2, [pc, #716]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a52:	e003      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a76:	460b      	mov	r3, r1
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	d039      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d81c      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a86:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ac9 	.word	0x08003ac9
 8003a90:	08003a9d 	.word	0x08003a9d
 8003a94:	08003aab 	.word	0x08003aab
 8003a98:	08003ac9 	.word	0x08003ac9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9c:	4b9f      	ldr	r3, [pc, #636]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	4a9e      	ldr	r2, [pc, #632]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003aa8:	e00f      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aae:	3308      	adds	r3, #8
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f8e6 	bl	8004c84 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003abe:	e004      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ad2:	4b92      	ldr	r3, [pc, #584]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad6:	f023 0103 	bic.w	r1, r3, #3
 8003ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae0:	4a8e      	ldr	r2, [pc, #568]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae6:	e003      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f000 8099 	beq.w	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b12:	4b83      	ldr	r3, [pc, #524]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a82      	ldr	r2, [pc, #520]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b1e:	f7fd fb7d 	bl	800121c <HAL_GetTick>
 8003b22:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b26:	e00b      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fd fb78 	bl	800121c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b64      	cmp	r3, #100	@ 0x64
 8003b36:	d903      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b3e:	e005      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b40:	4b77      	ldr	r3, [pc, #476]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ed      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d173      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b54:	4b71      	ldr	r3, [pc, #452]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b60:	4053      	eors	r3, r2
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d015      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b72:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b76:	4b69      	ldr	r3, [pc, #420]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	4a68      	ldr	r2, [pc, #416]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b82:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	4a65      	ldr	r2, [pc, #404]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b8e:	4a63      	ldr	r2, [pc, #396]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba2:	d118      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fb3a 	bl	800121c <HAL_GetTick>
 8003ba8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bac:	e00d      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd fb35 	bl	800121c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d903      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bca:	4b54      	ldr	r3, [pc, #336]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0eb      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d129      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bee:	d10e      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c00:	091a      	lsrs	r2, r3, #4
 8003c02:	4b48      	ldr	r3, [pc, #288]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	4a45      	ldr	r2, [pc, #276]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6113      	str	r3, [r2, #16]
 8003c0c:	e005      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c0e:	4b43      	ldr	r3, [pc, #268]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	4a42      	ldr	r2, [pc, #264]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c18:	6113      	str	r3, [r2, #16]
 8003c1a:	4b40      	ldr	r3, [pc, #256]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c30:	e008      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f002 0301 	and.w	r3, r2, #1
 8003c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f000 808f 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c6c:	2b28      	cmp	r3, #40	@ 0x28
 8003c6e:	d871      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c70:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003d5d 	.word	0x08003d5d
 8003c7c:	08003d55 	.word	0x08003d55
 8003c80:	08003d55 	.word	0x08003d55
 8003c84:	08003d55 	.word	0x08003d55
 8003c88:	08003d55 	.word	0x08003d55
 8003c8c:	08003d55 	.word	0x08003d55
 8003c90:	08003d55 	.word	0x08003d55
 8003c94:	08003d55 	.word	0x08003d55
 8003c98:	08003d29 	.word	0x08003d29
 8003c9c:	08003d55 	.word	0x08003d55
 8003ca0:	08003d55 	.word	0x08003d55
 8003ca4:	08003d55 	.word	0x08003d55
 8003ca8:	08003d55 	.word	0x08003d55
 8003cac:	08003d55 	.word	0x08003d55
 8003cb0:	08003d55 	.word	0x08003d55
 8003cb4:	08003d55 	.word	0x08003d55
 8003cb8:	08003d3f 	.word	0x08003d3f
 8003cbc:	08003d55 	.word	0x08003d55
 8003cc0:	08003d55 	.word	0x08003d55
 8003cc4:	08003d55 	.word	0x08003d55
 8003cc8:	08003d55 	.word	0x08003d55
 8003ccc:	08003d55 	.word	0x08003d55
 8003cd0:	08003d55 	.word	0x08003d55
 8003cd4:	08003d55 	.word	0x08003d55
 8003cd8:	08003d5d 	.word	0x08003d5d
 8003cdc:	08003d55 	.word	0x08003d55
 8003ce0:	08003d55 	.word	0x08003d55
 8003ce4:	08003d55 	.word	0x08003d55
 8003ce8:	08003d55 	.word	0x08003d55
 8003cec:	08003d55 	.word	0x08003d55
 8003cf0:	08003d55 	.word	0x08003d55
 8003cf4:	08003d55 	.word	0x08003d55
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	08003d55 	.word	0x08003d55
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003d55 	.word	0x08003d55
 8003d0c:	08003d55 	.word	0x08003d55
 8003d10:	08003d55 	.word	0x08003d55
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d5d 	.word	0x08003d5d
 8003d1c:	58024400 	.word	0x58024400
 8003d20:	58024800 	.word	0x58024800
 8003d24:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 ffa7 	bl	8004c84 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d3c:	e00f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d42:	3328      	adds	r3, #40	@ 0x28
 8003d44:	2101      	movs	r1, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 f84e 	bl	8004de8 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d52:	e004      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d66:	4bbf      	ldr	r3, [pc, #764]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d74:	4abb      	ldr	r2, [pc, #748]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d76:	430b      	orrs	r3, r1
 8003d78:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d7a:	e003      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f002 0302 	and.w	r3, r2, #2
 8003d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4313      	orrs	r3, r2
 8003da2:	d041      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d824      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003e01 	.word	0x08003e01
 8003db8:	08003dcd 	.word	0x08003dcd
 8003dbc:	08003de3 	.word	0x08003de3
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003e01 	.word	0x08003e01
 8003dc8:	08003e01 	.word	0x08003e01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 ff55 	bl	8004c84 <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003de0:	e00f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de6:	3328      	adds	r3, #40	@ 0x28
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fffc 	bl	8004de8 <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e0a:	4b96      	ldr	r3, [pc, #600]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f023 0107 	bic.w	r1, r3, #7
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e18:	4a92      	ldr	r2, [pc, #584]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e1e:	e003      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f002 0304 	and.w	r3, r2, #4
 8003e34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e3e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e42:	460b      	mov	r3, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d044      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d825      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003e54:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003ea9 	.word	0x08003ea9
 8003e60:	08003e75 	.word	0x08003e75
 8003e64:	08003e8b 	.word	0x08003e8b
 8003e68:	08003ea9 	.word	0x08003ea9
 8003e6c:	08003ea9 	.word	0x08003ea9
 8003e70:	08003ea9 	.word	0x08003ea9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e78:	3308      	adds	r3, #8
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 ff01 	bl	8004c84 <RCCEx_PLL2_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e88:	e00f      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8e:	3328      	adds	r3, #40	@ 0x28
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 ffa8 	bl	8004de8 <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e004      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ea6:	e000      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	f023 0107 	bic.w	r1, r3, #7
 8003eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	4a68      	ldr	r2, [pc, #416]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ece:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f002 0320 	and.w	r3, r2, #32
 8003ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ee8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d055      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003efe:	d033      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f04:	d82c      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0a:	d02f      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f10:	d826      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f16:	d02b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f1c:	d820      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f22:	d012      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f28:	d81a      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d022      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f32:	d115      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f38:	3308      	adds	r3, #8
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fea1 	bl	8004c84 <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f48:	e015      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4e:	3328      	adds	r3, #40	@ 0x28
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 ff48 	bl	8004de8 <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f66:	e006      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f68:	bf00      	nop
 8003f6a:	e004      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e002      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7e:	4b39      	ldr	r3, [pc, #228]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f8e:	4a35      	ldr	r2, [pc, #212]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003faa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fb4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d058      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fca:	d033      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fcc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fd0:	d82c      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd6:	d02f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fdc:	d826      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe2:	d02b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003fe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe8:	d820      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fee:	d012      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff4:	d81a      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d022      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffe:	d115      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004004:	3308      	adds	r3, #8
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fe3b 	bl	8004c84 <RCCEx_PLL2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004014:	e015      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401a:	3328      	adds	r3, #40	@ 0x28
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fee2 	bl	8004de8 <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800402a:	e00a      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004032:	e006      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004034:	bf00      	nop
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10e      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800404a:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800405a:	4a02      	ldr	r2, [pc, #8]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800405c:	430b      	orrs	r3, r1
 800405e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800406c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800407c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004086:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d055      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004094:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004098:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800409c:	d033      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800409e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040a2:	d82c      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a8:	d02f      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ae:	d826      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040b4:	d02b      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040ba:	d820      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c0:	d012      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80040c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c6:	d81a      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d022      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d0:	d115      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d6:	3308      	adds	r3, #8
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fdd2 	bl	8004c84 <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040e6:	e015      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fe79 	bl	8004de8 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040fc:	e00a      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800411c:	4ba0      	ldr	r3, [pc, #640]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800412c:	4a9c      	ldr	r2, [pc, #624]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800412e:	430b      	orrs	r3, r1
 8004130:	6593      	str	r3, [r2, #88]	@ 0x58
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f002 0308 	and.w	r3, r2, #8
 8004148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004152:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004156:	460b      	mov	r3, r1
 8004158:	4313      	orrs	r3, r2
 800415a:	d01e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004168:	d10c      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800416a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416e:	3328      	adds	r3, #40	@ 0x28
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fe38 	bl	8004de8 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004184:	4b86      	ldr	r3, [pc, #536]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004188:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800418c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004194:	4a82      	ldr	r2, [pc, #520]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004196:	430b      	orrs	r3, r1
 8004198:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800419a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f002 0310 	and.w	r3, r2, #16
 80041a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041b4:	460b      	mov	r3, r1
 80041b6:	4313      	orrs	r3, r2
 80041b8:	d01e      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c6:	d10c      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041cc:	3328      	adds	r3, #40	@ 0x28
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fe09 	bl	8004de8 <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041e2:	4b6f      	ldr	r3, [pc, #444]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f2:	4a6b      	ldr	r2, [pc, #428]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004204:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004206:	2300      	movs	r3, #0
 8004208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800420a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800420e:	460b      	mov	r3, r1
 8004210:	4313      	orrs	r3, r2
 8004212:	d03e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004218:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800421c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004220:	d022      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004226:	d81b      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004230:	d00b      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004232:	e015      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004238:	3308      	adds	r3, #8
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd21 	bl	8004c84 <RCCEx_PLL2_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424e:	3328      	adds	r3, #40	@ 0x28
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fdc8 	bl	8004de8 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800425e:	e004      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004272:	4b4b      	ldr	r3, [pc, #300]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004282:	4a47      	ldr	r2, [pc, #284]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004284:	430b      	orrs	r3, r1
 8004286:	6593      	str	r3, [r2, #88]	@ 0x58
 8004288:	e003      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800428e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800429e:	673b      	str	r3, [r7, #112]	@ 0x70
 80042a0:	2300      	movs	r3, #0
 80042a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80042a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042a8:	460b      	mov	r3, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	d03b      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042ba:	d01f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042c0:	d818      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c6:	d003      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80042c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042cc:	d007      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80042ce:	e011      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d0:	4b33      	ldr	r3, [pc, #204]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4a32      	ldr	r2, [pc, #200]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042dc:	e00f      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e2:	3328      	adds	r3, #40	@ 0x28
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fd7e 	bl	8004de8 <RCCEx_PLL3_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80042f2:	e004      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042fa:	e000      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80042fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004306:	4b26      	ldr	r3, [pc, #152]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800430e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004316:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004318:	430b      	orrs	r3, r1
 800431a:	6553      	str	r3, [r2, #84]	@ 0x54
 800431c:	e003      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004322:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004332:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004334:	2300      	movs	r3, #0
 8004336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004338:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800433c:	460b      	mov	r3, r1
 800433e:	4313      	orrs	r3, r2
 8004340:	d034      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004350:	d007      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004352:	e011      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004354:	4b12      	ldr	r3, [pc, #72]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	4a11      	ldr	r2, [pc, #68]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800435a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800435e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004360:	e00e      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004366:	3308      	adds	r3, #8
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fc8a 	bl	8004c84 <RCCEx_PLL2_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004376:	e003      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800437e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004388:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800438a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004396:	4a02      	ldr	r2, [pc, #8]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004398:	430b      	orrs	r3, r1
 800439a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800439c:	e006      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800439e:	bf00      	nop
 80043a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ba:	2300      	movs	r3, #0
 80043bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80043be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d00c      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043cc:	3328      	adds	r3, #40	@ 0x28
 80043ce:	2102      	movs	r1, #2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fd09 	bl	8004de8 <RCCEx_PLL3_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043f0:	2300      	movs	r3, #0
 80043f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d036      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004408:	d018      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800440a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800440e:	d811      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004414:	d014      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800441a:	d80b      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d011      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004424:	d106      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004426:	4bb7      	ldr	r3, [pc, #732]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	4ab6      	ldr	r2, [pc, #728]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800442c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800443a:	e004      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800443c:	bf00      	nop
 800443e:	e002      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004440:	bf00      	nop
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800444e:	4bad      	ldr	r3, [pc, #692]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800445c:	4aa9      	ldr	r2, [pc, #676]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800445e:	430b      	orrs	r3, r1
 8004460:	6553      	str	r3, [r2, #84]	@ 0x54
 8004462:	e003      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800446c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004478:	653b      	str	r3, [r7, #80]	@ 0x50
 800447a:	2300      	movs	r3, #0
 800447c:	657b      	str	r3, [r7, #84]	@ 0x54
 800447e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004488:	4b9e      	ldr	r3, [pc, #632]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800448a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	4a9b      	ldr	r2, [pc, #620]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004498:	430b      	orrs	r3, r1
 800449a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044aa:	2300      	movs	r3, #0
 80044ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b8:	4b92      	ldr	r3, [pc, #584]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044bc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044c6:	4a8f      	ldr	r2, [pc, #572]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044da:	2300      	movs	r3, #0
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044e8:	4b86      	ldr	r3, [pc, #536]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	4a85      	ldr	r2, [pc, #532]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044f2:	6113      	str	r3, [r2, #16]
 80044f4:	4b83      	ldr	r3, [pc, #524]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044f6:	6919      	ldr	r1, [r3, #16]
 80044f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004500:	4a80      	ldr	r2, [pc, #512]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004502:	430b      	orrs	r3, r1
 8004504:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004512:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004514:	2300      	movs	r3, #0
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004518:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800451c:	460b      	mov	r3, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004522:	4b78      	ldr	r3, [pc, #480]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004526:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	4a74      	ldr	r2, [pc, #464]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004532:	430b      	orrs	r3, r1
 8004534:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004542:	633b      	str	r3, [r7, #48]	@ 0x30
 8004544:	2300      	movs	r3, #0
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
 8004548:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004552:	4b6c      	ldr	r3, [pc, #432]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	4a68      	ldr	r2, [pc, #416]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	2100      	movs	r1, #0
 8004572:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800457a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800457e:	460b      	mov	r3, r1
 8004580:	4313      	orrs	r3, r2
 8004582:	d011      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004588:	3308      	adds	r3, #8
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fb79 	bl	8004c84 <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	2100      	movs	r1, #0
 80045b2:	6239      	str	r1, [r7, #32]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d011      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c8:	3308      	adds	r3, #8
 80045ca:	2101      	movs	r1, #1
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fb59 	bl	8004c84 <RCCEx_PLL2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	2100      	movs	r1, #0
 80045f2:	61b9      	str	r1, [r7, #24]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045fe:	460b      	mov	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	d011      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004608:	3308      	adds	r3, #8
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fb39 	bl	8004c84 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	2100      	movs	r1, #0
 8004632:	6139      	str	r1, [r7, #16]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	d011      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004648:	3328      	adds	r3, #40	@ 0x28
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fbcb 	bl	8004de8 <RCCEx_PLL3_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	2100      	movs	r1, #0
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d011      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004688:	3328      	adds	r3, #40	@ 0x28
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fbab 	bl	8004de8 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	2100      	movs	r1, #0
 80046b2:	6039      	str	r1, [r7, #0]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d011      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c8:	3328      	adds	r3, #40	@ 0x28
 80046ca:	2102      	movs	r1, #2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fb8b 	bl	8004de8 <RCCEx_PLL3_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80046e8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80046fc:	46bd      	mov	sp, r7
 80046fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004702:	bf00      	nop
 8004704:	58024400 	.word	0x58024400

08004708 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800470c:	f7fe fe00 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4904      	ldr	r1, [pc, #16]	@ (8004730 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	58024400 	.word	0x58024400
 8004730:	08008d2c 	.word	0x08008d2c

08004734 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	@ 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800473c:	4ba1      	ldr	r3, [pc, #644]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004746:	4b9f      	ldr	r3, [pc, #636]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	0b1b      	lsrs	r3, r3, #12
 800474c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004750:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004752:	4b9c      	ldr	r3, [pc, #624]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800475e:	4b99      	ldr	r3, [pc, #612]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004762:	08db      	lsrs	r3, r3, #3
 8004764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8111 	beq.w	80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b02      	cmp	r3, #2
 8004786:	f000 8083 	beq.w	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b02      	cmp	r3, #2
 800478e:	f200 80a1 	bhi.w	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d056      	beq.n	800484c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800479e:	e099      	b.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a0:	4b88      	ldr	r3, [pc, #544]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02d      	beq.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ac:	4b85      	ldr	r3, [pc, #532]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	4a84      	ldr	r2, [pc, #528]	@ (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b7b      	ldr	r3, [pc, #492]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004806:	e087      	b.n	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b6a      	ldr	r3, [pc, #424]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a03 	vldr	s12, [r7, #12]
 800482e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484a:	e065      	b.n	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488e:	e043      	b.n	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b48      	ldr	r3, [pc, #288]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d2:	e021      	b.n	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b37      	ldr	r3, [pc, #220]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004916:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004918:	4b2a      	ldr	r3, [pc, #168]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	0a5b      	lsrs	r3, r3, #9
 800491e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800492e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004932:	edd7 6a07 	vldr	s13, [r7, #28]
 8004936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493e:	ee17 2a90 	vmov	r2, s15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004946:	4b1f      	ldr	r3, [pc, #124]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	0c1b      	lsrs	r3, r3, #16
 800494c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004958:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800495c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004960:	edd7 6a07 	vldr	s13, [r7, #28]
 8004964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496c:	ee17 2a90 	vmov	r2, s15
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004978:	0e1b      	lsrs	r3, r3, #24
 800497a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800498a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800498e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499a:	ee17 2a90 	vmov	r2, s15
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049a2:	e008      	b.n	80049b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
}
 80049b6:	bf00      	nop
 80049b8:	3724      	adds	r7, #36	@ 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	58024400 	.word	0x58024400
 80049c8:	03d09000 	.word	0x03d09000
 80049cc:	46000000 	.word	0x46000000
 80049d0:	4c742400 	.word	0x4c742400
 80049d4:	4a742400 	.word	0x4a742400
 80049d8:	4af42400 	.word	0x4af42400

080049dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049dc:	b480      	push	{r7}
 80049de:	b089      	sub	sp, #36	@ 0x24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049e4:	4ba1      	ldr	r3, [pc, #644]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049ee:	4b9f      	ldr	r3, [pc, #636]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	0d1b      	lsrs	r3, r3, #20
 80049f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049fa:	4b9c      	ldr	r3, [pc, #624]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a06:	4b99      	ldr	r3, [pc, #612]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	08db      	lsrs	r3, r3, #3
 8004a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8111 	beq.w	8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	f000 8083 	beq.w	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	f200 80a1 	bhi.w	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d056      	beq.n	8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a46:	e099      	b.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a48:	4b88      	ldr	r3, [pc, #544]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02d      	beq.n	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a54:	4b85      	ldr	r3, [pc, #532]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	08db      	lsrs	r3, r3, #3
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	4a84      	ldr	r2, [pc, #528]	@ (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aae:	e087      	b.n	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af2:	e065      	b.n	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b59      	ldr	r3, [pc, #356]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b36:	e043      	b.n	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b48      	ldr	r3, [pc, #288]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7a:	e021      	b.n	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8e:	4b37      	ldr	r3, [pc, #220]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	0a5b      	lsrs	r3, r3, #9
 8004bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be6:	ee17 2a90 	vmov	r2, s15
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bee:	4b1f      	ldr	r3, [pc, #124]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c14:	ee17 2a90 	vmov	r2, s15
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c1c:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c20:	0e1b      	lsrs	r3, r3, #24
 8004c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c42:	ee17 2a90 	vmov	r2, s15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c4a:	e008      	b.n	8004c5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
}
 8004c5e:	bf00      	nop
 8004c60:	3724      	adds	r7, #36	@ 0x24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	03d09000 	.word	0x03d09000
 8004c74:	46000000 	.word	0x46000000
 8004c78:	4c742400 	.word	0x4c742400
 8004c7c:	4a742400 	.word	0x4a742400
 8004c80:	4af42400 	.word	0x4af42400

08004c84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c92:	4b53      	ldr	r3, [pc, #332]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d101      	bne.n	8004ca2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e099      	b.n	8004dd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a4e      	ldr	r2, [pc, #312]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cae:	f7fc fab5 	bl	800121c <HAL_GetTick>
 8004cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb4:	e008      	b.n	8004cc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cb6:	f7fc fab1 	bl	800121c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e086      	b.n	8004dd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc8:	4b45      	ldr	r3, [pc, #276]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cd4:	4b42      	ldr	r3, [pc, #264]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	493f      	ldr	r1, [pc, #252]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	025b      	lsls	r3, r3, #9
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d18:	4931      	ldr	r1, [pc, #196]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d1e:	4b30      	ldr	r3, [pc, #192]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	492d      	ldr	r1, [pc, #180]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d30:	4b2b      	ldr	r3, [pc, #172]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	f023 0220 	bic.w	r2, r3, #32
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	4928      	ldr	r1, [pc, #160]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d42:	4b27      	ldr	r3, [pc, #156]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	4a26      	ldr	r2, [pc, #152]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d4e:	4b24      	ldr	r3, [pc, #144]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d52:	4b24      	ldr	r3, [pc, #144]	@ (8004de4 <RCCEx_PLL2_Config+0x160>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	69d2      	ldr	r2, [r2, #28]
 8004d5a:	00d2      	lsls	r2, r2, #3
 8004d5c:	4920      	ldr	r1, [pc, #128]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d62:	4b1f      	ldr	r3, [pc, #124]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	f043 0310 	orr.w	r3, r3, #16
 8004d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d74:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	4a19      	ldr	r2, [pc, #100]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d80:	e00f      	b.n	8004da2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d106      	bne.n	8004d96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d88:	4b15      	ldr	r3, [pc, #84]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	4a14      	ldr	r2, [pc, #80]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d94:	e005      	b.n	8004da2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d96:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	4a11      	ldr	r2, [pc, #68]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004da0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004da2:	4b0f      	ldr	r3, [pc, #60]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a0e      	ldr	r2, [pc, #56]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dae:	f7fc fa35 	bl	800121c <HAL_GetTick>
 8004db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004db4:	e008      	b.n	8004dc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004db6:	f7fc fa31 	bl	800121c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e006      	b.n	8004dd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <RCCEx_PLL2_Config+0x15c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	58024400 	.word	0x58024400
 8004de4:	ffff0007 	.word	0xffff0007

08004de8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004df6:	4b53      	ldr	r3, [pc, #332]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d101      	bne.n	8004e06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e099      	b.n	8004f3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e06:	4b4f      	ldr	r3, [pc, #316]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e12:	f7fc fa03 	bl	800121c <HAL_GetTick>
 8004e16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e18:	e008      	b.n	8004e2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e1a:	f7fc f9ff 	bl	800121c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e086      	b.n	8004f3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e2c:	4b45      	ldr	r3, [pc, #276]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e38:	4b42      	ldr	r3, [pc, #264]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	051b      	lsls	r3, r3, #20
 8004e46:	493f      	ldr	r1, [pc, #252]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	025b      	lsls	r3, r3, #9
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e7c:	4931      	ldr	r1, [pc, #196]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e82:	4b30      	ldr	r3, [pc, #192]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	492d      	ldr	r1, [pc, #180]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e94:	4b2b      	ldr	r3, [pc, #172]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	4928      	ldr	r1, [pc, #160]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ea6:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	4a26      	ldr	r2, [pc, #152]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eb6:	4b24      	ldr	r3, [pc, #144]	@ (8004f48 <RCCEx_PLL3_Config+0x160>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	69d2      	ldr	r2, [r2, #28]
 8004ebe:	00d2      	lsls	r2, r2, #3
 8004ec0:	4920      	ldr	r1, [pc, #128]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	4a1e      	ldr	r2, [pc, #120]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	4a19      	ldr	r2, [pc, #100]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ee4:	e00f      	b.n	8004f06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d106      	bne.n	8004efa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004eec:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	4a14      	ldr	r2, [pc, #80]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ef8:	e005      	b.n	8004f06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004efa:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	4a11      	ldr	r2, [pc, #68]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004f00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f06:	4b0f      	ldr	r3, [pc, #60]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f12:	f7fc f983 	bl	800121c <HAL_GetTick>
 8004f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f18:	e008      	b.n	8004f2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f1a:	f7fc f97f 	bl	800121c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e006      	b.n	8004f3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	58024400 	.word	0x58024400
 8004f48:	ffff0007 	.word	0xffff0007

08004f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e042      	b.n	8004fe4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fb fe2f 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2224      	movs	r2, #36	@ 0x24
 8004f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 ff22 	bl	8005de0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8b3 	bl	8005108 <UART_SetConfig>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e01b      	b.n	8004fe4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 ffa1 	bl	8005f24 <UART_CheckIdleState>
 8004fe2:	4603      	mov	r3, r0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	@ 0x28
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	2b20      	cmp	r3, #32
 8005004:	d17b      	bne.n	80050fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_UART_Transmit+0x26>
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e074      	b.n	8005100 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2221      	movs	r2, #33	@ 0x21
 8005022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005026:	f7fc f8f9 	bl	800121c <HAL_GetTick>
 800502a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005044:	d108      	bne.n	8005058 <HAL_UART_Transmit+0x6c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e003      	b.n	8005060 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005060:	e030      	b.n	80050c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	@ 0x80
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f001 f803 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e03d      	b.n	8005100 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005098:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3302      	adds	r3, #2
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e007      	b.n	80050b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3301      	adds	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1c8      	bne.n	8005062 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	2140      	movs	r1, #64	@ 0x40
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 ffcc 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e006      	b.n	8005100 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b092      	sub	sp, #72	@ 0x48
 800510e:	af00      	add	r7, sp, #0
 8005110:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	431a      	orrs	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	431a      	orrs	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	4313      	orrs	r3, r2
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4bbe      	ldr	r3, [pc, #760]	@ (8005430 <UART_SetConfig+0x328>)
 8005138:	4013      	ands	r3, r2
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005140:	430b      	orrs	r3, r1
 8005142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4ab3      	ldr	r2, [pc, #716]	@ (8005434 <UART_SetConfig+0x32c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005170:	4313      	orrs	r3, r2
 8005172:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	4baf      	ldr	r3, [pc, #700]	@ (8005438 <UART_SetConfig+0x330>)
 800517c:	4013      	ands	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005184:	430b      	orrs	r3, r1
 8005186:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	f023 010f 	bic.w	r1, r3, #15
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4aa6      	ldr	r2, [pc, #664]	@ (800543c <UART_SetConfig+0x334>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d177      	bne.n	8005298 <UART_SetConfig+0x190>
 80051a8:	4ba5      	ldr	r3, [pc, #660]	@ (8005440 <UART_SetConfig+0x338>)
 80051aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051b0:	2b28      	cmp	r3, #40	@ 0x28
 80051b2:	d86d      	bhi.n	8005290 <UART_SetConfig+0x188>
 80051b4:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <UART_SetConfig+0xb4>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	08005261 	.word	0x08005261
 80051c0:	08005291 	.word	0x08005291
 80051c4:	08005291 	.word	0x08005291
 80051c8:	08005291 	.word	0x08005291
 80051cc:	08005291 	.word	0x08005291
 80051d0:	08005291 	.word	0x08005291
 80051d4:	08005291 	.word	0x08005291
 80051d8:	08005291 	.word	0x08005291
 80051dc:	08005269 	.word	0x08005269
 80051e0:	08005291 	.word	0x08005291
 80051e4:	08005291 	.word	0x08005291
 80051e8:	08005291 	.word	0x08005291
 80051ec:	08005291 	.word	0x08005291
 80051f0:	08005291 	.word	0x08005291
 80051f4:	08005291 	.word	0x08005291
 80051f8:	08005291 	.word	0x08005291
 80051fc:	08005271 	.word	0x08005271
 8005200:	08005291 	.word	0x08005291
 8005204:	08005291 	.word	0x08005291
 8005208:	08005291 	.word	0x08005291
 800520c:	08005291 	.word	0x08005291
 8005210:	08005291 	.word	0x08005291
 8005214:	08005291 	.word	0x08005291
 8005218:	08005291 	.word	0x08005291
 800521c:	08005279 	.word	0x08005279
 8005220:	08005291 	.word	0x08005291
 8005224:	08005291 	.word	0x08005291
 8005228:	08005291 	.word	0x08005291
 800522c:	08005291 	.word	0x08005291
 8005230:	08005291 	.word	0x08005291
 8005234:	08005291 	.word	0x08005291
 8005238:	08005291 	.word	0x08005291
 800523c:	08005281 	.word	0x08005281
 8005240:	08005291 	.word	0x08005291
 8005244:	08005291 	.word	0x08005291
 8005248:	08005291 	.word	0x08005291
 800524c:	08005291 	.word	0x08005291
 8005250:	08005291 	.word	0x08005291
 8005254:	08005291 	.word	0x08005291
 8005258:	08005291 	.word	0x08005291
 800525c:	08005289 	.word	0x08005289
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e326      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005268:	2304      	movs	r3, #4
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e322      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005270:	2308      	movs	r3, #8
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005276:	e31e      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005278:	2310      	movs	r3, #16
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527e:	e31a      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005280:	2320      	movs	r3, #32
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e316      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005288:	2340      	movs	r3, #64	@ 0x40
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e312      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005290:	2380      	movs	r3, #128	@ 0x80
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005296:	e30e      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a69      	ldr	r2, [pc, #420]	@ (8005444 <UART_SetConfig+0x33c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d130      	bne.n	8005304 <UART_SetConfig+0x1fc>
 80052a2:	4b67      	ldr	r3, [pc, #412]	@ (8005440 <UART_SetConfig+0x338>)
 80052a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d826      	bhi.n	80052fc <UART_SetConfig+0x1f4>
 80052ae:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <UART_SetConfig+0x1ac>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052d5 	.word	0x080052d5
 80052bc:	080052dd 	.word	0x080052dd
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e2f0      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052da:	e2ec      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e2:	e2e8      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ea:	e2e4      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80052ec:	2320      	movs	r3, #32
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f2:	e2e0      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80052f4:	2340      	movs	r3, #64	@ 0x40
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e2dc      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e2d8      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a4f      	ldr	r2, [pc, #316]	@ (8005448 <UART_SetConfig+0x340>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d130      	bne.n	8005370 <UART_SetConfig+0x268>
 800530e:	4b4c      	ldr	r3, [pc, #304]	@ (8005440 <UART_SetConfig+0x338>)
 8005310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	2b05      	cmp	r3, #5
 8005318:	d826      	bhi.n	8005368 <UART_SetConfig+0x260>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <UART_SetConfig+0x218>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005339 	.word	0x08005339
 8005324:	08005341 	.word	0x08005341
 8005328:	08005349 	.word	0x08005349
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	2300      	movs	r3, #0
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e2ba      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e2b6      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e2b2      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e2ae      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005358:	2320      	movs	r3, #32
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e2aa      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005360:	2340      	movs	r3, #64	@ 0x40
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e2a6      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e2a2      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a35      	ldr	r2, [pc, #212]	@ (800544c <UART_SetConfig+0x344>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d130      	bne.n	80053dc <UART_SetConfig+0x2d4>
 800537a:	4b31      	ldr	r3, [pc, #196]	@ (8005440 <UART_SetConfig+0x338>)
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b05      	cmp	r3, #5
 8005384:	d826      	bhi.n	80053d4 <UART_SetConfig+0x2cc>
 8005386:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <UART_SetConfig+0x284>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a5 	.word	0x080053a5
 8005390:	080053ad 	.word	0x080053ad
 8005394:	080053b5 	.word	0x080053b5
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053c5 	.word	0x080053c5
 80053a0:	080053cd 	.word	0x080053cd
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e284      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e280      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e27c      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e278      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80053c4:	2320      	movs	r3, #32
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e274      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80053cc:	2340      	movs	r3, #64	@ 0x40
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e270      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e26c      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <UART_SetConfig+0x348>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d142      	bne.n	800546c <UART_SetConfig+0x364>
 80053e6:	4b16      	ldr	r3, [pc, #88]	@ (8005440 <UART_SetConfig+0x338>)
 80053e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	d838      	bhi.n	8005464 <UART_SetConfig+0x35c>
 80053f2:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <UART_SetConfig+0x2f0>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	08005411 	.word	0x08005411
 80053fc:	08005419 	.word	0x08005419
 8005400:	08005421 	.word	0x08005421
 8005404:	08005429 	.word	0x08005429
 8005408:	08005455 	.word	0x08005455
 800540c:	0800545d 	.word	0x0800545d
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e24e      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005418:	2304      	movs	r3, #4
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e24a      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005420:	2308      	movs	r3, #8
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e246      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005428:	2310      	movs	r3, #16
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e242      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005430:	cfff69f3 	.word	0xcfff69f3
 8005434:	58000c00 	.word	0x58000c00
 8005438:	11fff4ff 	.word	0x11fff4ff
 800543c:	40011000 	.word	0x40011000
 8005440:	58024400 	.word	0x58024400
 8005444:	40004400 	.word	0x40004400
 8005448:	40004800 	.word	0x40004800
 800544c:	40004c00 	.word	0x40004c00
 8005450:	40005000 	.word	0x40005000
 8005454:	2320      	movs	r3, #32
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e22c      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800545c:	2340      	movs	r3, #64	@ 0x40
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e228      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005464:	2380      	movs	r3, #128	@ 0x80
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e224      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4ab1      	ldr	r2, [pc, #708]	@ (8005738 <UART_SetConfig+0x630>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d176      	bne.n	8005564 <UART_SetConfig+0x45c>
 8005476:	4bb1      	ldr	r3, [pc, #708]	@ (800573c <UART_SetConfig+0x634>)
 8005478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800547e:	2b28      	cmp	r3, #40	@ 0x28
 8005480:	d86c      	bhi.n	800555c <UART_SetConfig+0x454>
 8005482:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x380>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	0800552d 	.word	0x0800552d
 800548c:	0800555d 	.word	0x0800555d
 8005490:	0800555d 	.word	0x0800555d
 8005494:	0800555d 	.word	0x0800555d
 8005498:	0800555d 	.word	0x0800555d
 800549c:	0800555d 	.word	0x0800555d
 80054a0:	0800555d 	.word	0x0800555d
 80054a4:	0800555d 	.word	0x0800555d
 80054a8:	08005535 	.word	0x08005535
 80054ac:	0800555d 	.word	0x0800555d
 80054b0:	0800555d 	.word	0x0800555d
 80054b4:	0800555d 	.word	0x0800555d
 80054b8:	0800555d 	.word	0x0800555d
 80054bc:	0800555d 	.word	0x0800555d
 80054c0:	0800555d 	.word	0x0800555d
 80054c4:	0800555d 	.word	0x0800555d
 80054c8:	0800553d 	.word	0x0800553d
 80054cc:	0800555d 	.word	0x0800555d
 80054d0:	0800555d 	.word	0x0800555d
 80054d4:	0800555d 	.word	0x0800555d
 80054d8:	0800555d 	.word	0x0800555d
 80054dc:	0800555d 	.word	0x0800555d
 80054e0:	0800555d 	.word	0x0800555d
 80054e4:	0800555d 	.word	0x0800555d
 80054e8:	08005545 	.word	0x08005545
 80054ec:	0800555d 	.word	0x0800555d
 80054f0:	0800555d 	.word	0x0800555d
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	0800555d 	.word	0x0800555d
 8005500:	0800555d 	.word	0x0800555d
 8005504:	0800555d 	.word	0x0800555d
 8005508:	0800554d 	.word	0x0800554d
 800550c:	0800555d 	.word	0x0800555d
 8005510:	0800555d 	.word	0x0800555d
 8005514:	0800555d 	.word	0x0800555d
 8005518:	0800555d 	.word	0x0800555d
 800551c:	0800555d 	.word	0x0800555d
 8005520:	0800555d 	.word	0x0800555d
 8005524:	0800555d 	.word	0x0800555d
 8005528:	08005555 	.word	0x08005555
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e1c0      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005534:	2304      	movs	r3, #4
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e1bc      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800553c:	2308      	movs	r3, #8
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005542:	e1b8      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005544:	2310      	movs	r3, #16
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554a:	e1b4      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800554c:	2320      	movs	r3, #32
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005552:	e1b0      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005554:	2340      	movs	r3, #64	@ 0x40
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555a:	e1ac      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800555c:	2380      	movs	r3, #128	@ 0x80
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005562:	e1a8      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a75      	ldr	r2, [pc, #468]	@ (8005740 <UART_SetConfig+0x638>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d130      	bne.n	80055d0 <UART_SetConfig+0x4c8>
 800556e:	4b73      	ldr	r3, [pc, #460]	@ (800573c <UART_SetConfig+0x634>)
 8005570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b05      	cmp	r3, #5
 8005578:	d826      	bhi.n	80055c8 <UART_SetConfig+0x4c0>
 800557a:	a201      	add	r2, pc, #4	@ (adr r2, 8005580 <UART_SetConfig+0x478>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	08005599 	.word	0x08005599
 8005584:	080055a1 	.word	0x080055a1
 8005588:	080055a9 	.word	0x080055a9
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055b9 	.word	0x080055b9
 8005594:	080055c1 	.word	0x080055c1
 8005598:	2300      	movs	r3, #0
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e18a      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e186      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ae:	e182      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b6:	e17e      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80055b8:	2320      	movs	r3, #32
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055be:	e17a      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80055c0:	2340      	movs	r3, #64	@ 0x40
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e176      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ce:	e172      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a5b      	ldr	r2, [pc, #364]	@ (8005744 <UART_SetConfig+0x63c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d130      	bne.n	800563c <UART_SetConfig+0x534>
 80055da:	4b58      	ldr	r3, [pc, #352]	@ (800573c <UART_SetConfig+0x634>)
 80055dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	d826      	bhi.n	8005634 <UART_SetConfig+0x52c>
 80055e6:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <UART_SetConfig+0x4e4>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005605 	.word	0x08005605
 80055f0:	0800560d 	.word	0x0800560d
 80055f4:	08005615 	.word	0x08005615
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	08005625 	.word	0x08005625
 8005600:	0800562d 	.word	0x0800562d
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e154      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800560c:	2304      	movs	r3, #4
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e150      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005614:	2308      	movs	r3, #8
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e14c      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800561c:	2310      	movs	r3, #16
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e148      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005624:	2320      	movs	r3, #32
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562a:	e144      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800562c:	2340      	movs	r3, #64	@ 0x40
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e140      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e13c      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a41      	ldr	r2, [pc, #260]	@ (8005748 <UART_SetConfig+0x640>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f040 8082 	bne.w	800574c <UART_SetConfig+0x644>
 8005648:	4b3c      	ldr	r3, [pc, #240]	@ (800573c <UART_SetConfig+0x634>)
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005650:	2b28      	cmp	r3, #40	@ 0x28
 8005652:	d86d      	bhi.n	8005730 <UART_SetConfig+0x628>
 8005654:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <UART_SetConfig+0x554>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005701 	.word	0x08005701
 8005660:	08005731 	.word	0x08005731
 8005664:	08005731 	.word	0x08005731
 8005668:	08005731 	.word	0x08005731
 800566c:	08005731 	.word	0x08005731
 8005670:	08005731 	.word	0x08005731
 8005674:	08005731 	.word	0x08005731
 8005678:	08005731 	.word	0x08005731
 800567c:	08005709 	.word	0x08005709
 8005680:	08005731 	.word	0x08005731
 8005684:	08005731 	.word	0x08005731
 8005688:	08005731 	.word	0x08005731
 800568c:	08005731 	.word	0x08005731
 8005690:	08005731 	.word	0x08005731
 8005694:	08005731 	.word	0x08005731
 8005698:	08005731 	.word	0x08005731
 800569c:	08005711 	.word	0x08005711
 80056a0:	08005731 	.word	0x08005731
 80056a4:	08005731 	.word	0x08005731
 80056a8:	08005731 	.word	0x08005731
 80056ac:	08005731 	.word	0x08005731
 80056b0:	08005731 	.word	0x08005731
 80056b4:	08005731 	.word	0x08005731
 80056b8:	08005731 	.word	0x08005731
 80056bc:	08005719 	.word	0x08005719
 80056c0:	08005731 	.word	0x08005731
 80056c4:	08005731 	.word	0x08005731
 80056c8:	08005731 	.word	0x08005731
 80056cc:	08005731 	.word	0x08005731
 80056d0:	08005731 	.word	0x08005731
 80056d4:	08005731 	.word	0x08005731
 80056d8:	08005731 	.word	0x08005731
 80056dc:	08005721 	.word	0x08005721
 80056e0:	08005731 	.word	0x08005731
 80056e4:	08005731 	.word	0x08005731
 80056e8:	08005731 	.word	0x08005731
 80056ec:	08005731 	.word	0x08005731
 80056f0:	08005731 	.word	0x08005731
 80056f4:	08005731 	.word	0x08005731
 80056f8:	08005731 	.word	0x08005731
 80056fc:	08005729 	.word	0x08005729
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e0d6      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005708:	2304      	movs	r3, #4
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e0d2      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005710:	2308      	movs	r3, #8
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005716:	e0ce      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005718:	2310      	movs	r3, #16
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e0ca      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005720:	2320      	movs	r3, #32
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e0c6      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005728:	2340      	movs	r3, #64	@ 0x40
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e0c2      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e0be      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005738:	40011400 	.word	0x40011400
 800573c:	58024400 	.word	0x58024400
 8005740:	40007800 	.word	0x40007800
 8005744:	40007c00 	.word	0x40007c00
 8005748:	40011800 	.word	0x40011800
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4aad      	ldr	r2, [pc, #692]	@ (8005a08 <UART_SetConfig+0x900>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d176      	bne.n	8005844 <UART_SetConfig+0x73c>
 8005756:	4bad      	ldr	r3, [pc, #692]	@ (8005a0c <UART_SetConfig+0x904>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800575e:	2b28      	cmp	r3, #40	@ 0x28
 8005760:	d86c      	bhi.n	800583c <UART_SetConfig+0x734>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x660>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	0800580d 	.word	0x0800580d
 800576c:	0800583d 	.word	0x0800583d
 8005770:	0800583d 	.word	0x0800583d
 8005774:	0800583d 	.word	0x0800583d
 8005778:	0800583d 	.word	0x0800583d
 800577c:	0800583d 	.word	0x0800583d
 8005780:	0800583d 	.word	0x0800583d
 8005784:	0800583d 	.word	0x0800583d
 8005788:	08005815 	.word	0x08005815
 800578c:	0800583d 	.word	0x0800583d
 8005790:	0800583d 	.word	0x0800583d
 8005794:	0800583d 	.word	0x0800583d
 8005798:	0800583d 	.word	0x0800583d
 800579c:	0800583d 	.word	0x0800583d
 80057a0:	0800583d 	.word	0x0800583d
 80057a4:	0800583d 	.word	0x0800583d
 80057a8:	0800581d 	.word	0x0800581d
 80057ac:	0800583d 	.word	0x0800583d
 80057b0:	0800583d 	.word	0x0800583d
 80057b4:	0800583d 	.word	0x0800583d
 80057b8:	0800583d 	.word	0x0800583d
 80057bc:	0800583d 	.word	0x0800583d
 80057c0:	0800583d 	.word	0x0800583d
 80057c4:	0800583d 	.word	0x0800583d
 80057c8:	08005825 	.word	0x08005825
 80057cc:	0800583d 	.word	0x0800583d
 80057d0:	0800583d 	.word	0x0800583d
 80057d4:	0800583d 	.word	0x0800583d
 80057d8:	0800583d 	.word	0x0800583d
 80057dc:	0800583d 	.word	0x0800583d
 80057e0:	0800583d 	.word	0x0800583d
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	0800582d 	.word	0x0800582d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	0800583d 	.word	0x0800583d
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	08005835 	.word	0x08005835
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e050      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e04c      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e048      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582a:	e044      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800582c:	2320      	movs	r3, #32
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005832:	e040      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005834:	2340      	movs	r3, #64	@ 0x40
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583a:	e03c      	b.n	80058b6 <UART_SetConfig+0x7ae>
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005842:	e038      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a71      	ldr	r2, [pc, #452]	@ (8005a10 <UART_SetConfig+0x908>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d130      	bne.n	80058b0 <UART_SetConfig+0x7a8>
 800584e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a0c <UART_SetConfig+0x904>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	2b05      	cmp	r3, #5
 8005858:	d826      	bhi.n	80058a8 <UART_SetConfig+0x7a0>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <UART_SetConfig+0x758>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005879 	.word	0x08005879
 8005864:	08005881 	.word	0x08005881
 8005868:	08005889 	.word	0x08005889
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	2302      	movs	r3, #2
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e01a      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005880:	2304      	movs	r3, #4
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e016      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005888:	2308      	movs	r3, #8
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e012      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005890:	2310      	movs	r3, #16
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005896:	e00e      	b.n	80058b6 <UART_SetConfig+0x7ae>
 8005898:	2320      	movs	r3, #32
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589e:	e00a      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80058a0:	2340      	movs	r3, #64	@ 0x40
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a6:	e006      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ae:	e002      	b.n	80058b6 <UART_SetConfig+0x7ae>
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a55      	ldr	r2, [pc, #340]	@ (8005a10 <UART_SetConfig+0x908>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	f040 80f8 	bne.w	8005ab2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	dc46      	bgt.n	8005958 <UART_SetConfig+0x850>
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	db75      	blt.n	80059ba <UART_SetConfig+0x8b2>
 80058ce:	3b02      	subs	r3, #2
 80058d0:	2b1e      	cmp	r3, #30
 80058d2:	d872      	bhi.n	80059ba <UART_SetConfig+0x8b2>
 80058d4:	a201      	add	r2, pc, #4	@ (adr r2, 80058dc <UART_SetConfig+0x7d4>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	0800595f 	.word	0x0800595f
 80058e0:	080059bb 	.word	0x080059bb
 80058e4:	08005967 	.word	0x08005967
 80058e8:	080059bb 	.word	0x080059bb
 80058ec:	080059bb 	.word	0x080059bb
 80058f0:	080059bb 	.word	0x080059bb
 80058f4:	08005977 	.word	0x08005977
 80058f8:	080059bb 	.word	0x080059bb
 80058fc:	080059bb 	.word	0x080059bb
 8005900:	080059bb 	.word	0x080059bb
 8005904:	080059bb 	.word	0x080059bb
 8005908:	080059bb 	.word	0x080059bb
 800590c:	080059bb 	.word	0x080059bb
 8005910:	080059bb 	.word	0x080059bb
 8005914:	08005987 	.word	0x08005987
 8005918:	080059bb 	.word	0x080059bb
 800591c:	080059bb 	.word	0x080059bb
 8005920:	080059bb 	.word	0x080059bb
 8005924:	080059bb 	.word	0x080059bb
 8005928:	080059bb 	.word	0x080059bb
 800592c:	080059bb 	.word	0x080059bb
 8005930:	080059bb 	.word	0x080059bb
 8005934:	080059bb 	.word	0x080059bb
 8005938:	080059bb 	.word	0x080059bb
 800593c:	080059bb 	.word	0x080059bb
 8005940:	080059bb 	.word	0x080059bb
 8005944:	080059bb 	.word	0x080059bb
 8005948:	080059bb 	.word	0x080059bb
 800594c:	080059bb 	.word	0x080059bb
 8005950:	080059bb 	.word	0x080059bb
 8005954:	080059ad 	.word	0x080059ad
 8005958:	2b40      	cmp	r3, #64	@ 0x40
 800595a:	d02a      	beq.n	80059b2 <UART_SetConfig+0x8aa>
 800595c:	e02d      	b.n	80059ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800595e:	f7fe fed3 	bl	8004708 <HAL_RCCEx_GetD3PCLK1Freq>
 8005962:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005964:	e02f      	b.n	80059c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fee2 	bl	8004734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005974:	e027      	b.n	80059c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005976:	f107 0318 	add.w	r3, r7, #24
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff f82e 	bl	80049dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005984:	e01f      	b.n	80059c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005986:	4b21      	ldr	r3, [pc, #132]	@ (8005a0c <UART_SetConfig+0x904>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005992:	4b1e      	ldr	r3, [pc, #120]	@ (8005a0c <UART_SetConfig+0x904>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	08db      	lsrs	r3, r3, #3
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <UART_SetConfig+0x90c>)
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059a4:	e00f      	b.n	80059c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80059a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <UART_SetConfig+0x90c>)
 80059a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059aa:	e00c      	b.n	80059c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <UART_SetConfig+0x910>)
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b0:	e009      	b.n	80059c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b8:	e005      	b.n	80059c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 81ee 	beq.w	8005daa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	4a12      	ldr	r2, [pc, #72]	@ (8005a1c <UART_SetConfig+0x914>)
 80059d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d8:	461a      	mov	r2, r3
 80059da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d305      	bcc.n	80059fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d910      	bls.n	8005a20 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a04:	e1d1      	b.n	8005daa <UART_SetConfig+0xca2>
 8005a06:	bf00      	nop
 8005a08:	40011c00 	.word	0x40011c00
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	58000c00 	.word	0x58000c00
 8005a14:	03d09000 	.word	0x03d09000
 8005a18:	003d0900 	.word	0x003d0900
 8005a1c:	08008d3c 	.word	0x08008d3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a22:	2200      	movs	r2, #0
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	60fa      	str	r2, [r7, #12]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	4ac0      	ldr	r2, [pc, #768]	@ (8005d30 <UART_SetConfig+0xc28>)
 8005a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2200      	movs	r2, #0
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a42:	f7fa fcbd 	bl	80003c0 <__aeabi_uldivmod>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	020b      	lsls	r3, r1, #8
 8005a58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a5c:	0202      	lsls	r2, r0, #8
 8005a5e:	6979      	ldr	r1, [r7, #20]
 8005a60:	6849      	ldr	r1, [r1, #4]
 8005a62:	0849      	lsrs	r1, r1, #1
 8005a64:	2000      	movs	r0, #0
 8005a66:	460c      	mov	r4, r1
 8005a68:	4605      	mov	r5, r0
 8005a6a:	eb12 0804 	adds.w	r8, r2, r4
 8005a6e:	eb43 0905 	adc.w	r9, r3, r5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	469a      	mov	sl, r3
 8005a7a:	4693      	mov	fp, r2
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	465b      	mov	r3, fp
 8005a80:	4640      	mov	r0, r8
 8005a82:	4649      	mov	r1, r9
 8005a84:	f7fa fc9c 	bl	80003c0 <__aeabi_uldivmod>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a96:	d308      	bcc.n	8005aaa <UART_SetConfig+0x9a2>
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a9e:	d204      	bcs.n	8005aaa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aa6:	60da      	str	r2, [r3, #12]
 8005aa8:	e17f      	b.n	8005daa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ab0:	e17b      	b.n	8005daa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aba:	f040 80bd 	bne.w	8005c38 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005abe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	dc48      	bgt.n	8005b58 <UART_SetConfig+0xa50>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db7b      	blt.n	8005bc2 <UART_SetConfig+0xaba>
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d879      	bhi.n	8005bc2 <UART_SetConfig+0xaba>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <UART_SetConfig+0x9cc>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005b5f 	.word	0x08005b5f
 8005ad8:	08005b67 	.word	0x08005b67
 8005adc:	08005bc3 	.word	0x08005bc3
 8005ae0:	08005bc3 	.word	0x08005bc3
 8005ae4:	08005b6f 	.word	0x08005b6f
 8005ae8:	08005bc3 	.word	0x08005bc3
 8005aec:	08005bc3 	.word	0x08005bc3
 8005af0:	08005bc3 	.word	0x08005bc3
 8005af4:	08005b7f 	.word	0x08005b7f
 8005af8:	08005bc3 	.word	0x08005bc3
 8005afc:	08005bc3 	.word	0x08005bc3
 8005b00:	08005bc3 	.word	0x08005bc3
 8005b04:	08005bc3 	.word	0x08005bc3
 8005b08:	08005bc3 	.word	0x08005bc3
 8005b0c:	08005bc3 	.word	0x08005bc3
 8005b10:	08005bc3 	.word	0x08005bc3
 8005b14:	08005b8f 	.word	0x08005b8f
 8005b18:	08005bc3 	.word	0x08005bc3
 8005b1c:	08005bc3 	.word	0x08005bc3
 8005b20:	08005bc3 	.word	0x08005bc3
 8005b24:	08005bc3 	.word	0x08005bc3
 8005b28:	08005bc3 	.word	0x08005bc3
 8005b2c:	08005bc3 	.word	0x08005bc3
 8005b30:	08005bc3 	.word	0x08005bc3
 8005b34:	08005bc3 	.word	0x08005bc3
 8005b38:	08005bc3 	.word	0x08005bc3
 8005b3c:	08005bc3 	.word	0x08005bc3
 8005b40:	08005bc3 	.word	0x08005bc3
 8005b44:	08005bc3 	.word	0x08005bc3
 8005b48:	08005bc3 	.word	0x08005bc3
 8005b4c:	08005bc3 	.word	0x08005bc3
 8005b50:	08005bc3 	.word	0x08005bc3
 8005b54:	08005bb5 	.word	0x08005bb5
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d02e      	beq.n	8005bba <UART_SetConfig+0xab2>
 8005b5c:	e031      	b.n	8005bc2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b5e:	f7fd fc07 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8005b62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b64:	e033      	b.n	8005bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b66:	f7fd fc19 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 8005b6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b6c:	e02f      	b.n	8005bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fdde 	bl	8004734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b7c:	e027      	b.n	8005bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b7e:	f107 0318 	add.w	r3, r7, #24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe ff2a 	bl	80049dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b8c:	e01f      	b.n	8005bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b8e:	4b69      	ldr	r3, [pc, #420]	@ (8005d34 <UART_SetConfig+0xc2c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b9a:	4b66      	ldr	r3, [pc, #408]	@ (8005d34 <UART_SetConfig+0xc2c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	08db      	lsrs	r3, r3, #3
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	4a64      	ldr	r2, [pc, #400]	@ (8005d38 <UART_SetConfig+0xc30>)
 8005ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bac:	e00f      	b.n	8005bce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005bae:	4b62      	ldr	r3, [pc, #392]	@ (8005d38 <UART_SetConfig+0xc30>)
 8005bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb2:	e00c      	b.n	8005bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bb4:	4b61      	ldr	r3, [pc, #388]	@ (8005d3c <UART_SetConfig+0xc34>)
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb8:	e009      	b.n	8005bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc0:	e005      	b.n	8005bce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80ea 	beq.w	8005daa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bda:	4a55      	ldr	r2, [pc, #340]	@ (8005d30 <UART_SetConfig+0xc28>)
 8005bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be8:	005a      	lsls	r2, r3, #1
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	441a      	add	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfe:	2b0f      	cmp	r3, #15
 8005c00:	d916      	bls.n	8005c30 <UART_SetConfig+0xb28>
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c08:	d212      	bcs.n	8005c30 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f023 030f 	bic.w	r3, r3, #15
 8005c12:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c22:	4313      	orrs	r3, r2
 8005c24:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	e0bc      	b.n	8005daa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c36:	e0b8      	b.n	8005daa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	dc4b      	bgt.n	8005cd8 <UART_SetConfig+0xbd0>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f2c0 8087 	blt.w	8005d54 <UART_SetConfig+0xc4c>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	f200 8084 	bhi.w	8005d54 <UART_SetConfig+0xc4c>
 8005c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c54 <UART_SetConfig+0xb4c>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005cdf 	.word	0x08005cdf
 8005c58:	08005ce7 	.word	0x08005ce7
 8005c5c:	08005d55 	.word	0x08005d55
 8005c60:	08005d55 	.word	0x08005d55
 8005c64:	08005cef 	.word	0x08005cef
 8005c68:	08005d55 	.word	0x08005d55
 8005c6c:	08005d55 	.word	0x08005d55
 8005c70:	08005d55 	.word	0x08005d55
 8005c74:	08005cff 	.word	0x08005cff
 8005c78:	08005d55 	.word	0x08005d55
 8005c7c:	08005d55 	.word	0x08005d55
 8005c80:	08005d55 	.word	0x08005d55
 8005c84:	08005d55 	.word	0x08005d55
 8005c88:	08005d55 	.word	0x08005d55
 8005c8c:	08005d55 	.word	0x08005d55
 8005c90:	08005d55 	.word	0x08005d55
 8005c94:	08005d0f 	.word	0x08005d0f
 8005c98:	08005d55 	.word	0x08005d55
 8005c9c:	08005d55 	.word	0x08005d55
 8005ca0:	08005d55 	.word	0x08005d55
 8005ca4:	08005d55 	.word	0x08005d55
 8005ca8:	08005d55 	.word	0x08005d55
 8005cac:	08005d55 	.word	0x08005d55
 8005cb0:	08005d55 	.word	0x08005d55
 8005cb4:	08005d55 	.word	0x08005d55
 8005cb8:	08005d55 	.word	0x08005d55
 8005cbc:	08005d55 	.word	0x08005d55
 8005cc0:	08005d55 	.word	0x08005d55
 8005cc4:	08005d55 	.word	0x08005d55
 8005cc8:	08005d55 	.word	0x08005d55
 8005ccc:	08005d55 	.word	0x08005d55
 8005cd0:	08005d55 	.word	0x08005d55
 8005cd4:	08005d47 	.word	0x08005d47
 8005cd8:	2b40      	cmp	r3, #64	@ 0x40
 8005cda:	d037      	beq.n	8005d4c <UART_SetConfig+0xc44>
 8005cdc:	e03a      	b.n	8005d54 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cde:	f7fd fb47 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8005ce2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ce4:	e03c      	b.n	8005d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce6:	f7fd fb59 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 8005cea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cec:	e038      	b.n	8005d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe fd1e 	bl	8004734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e030      	b.n	8005d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cfe:	f107 0318 	add.w	r3, r7, #24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fe6a 	bl	80049dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d0c:	e028      	b.n	8005d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d0e:	4b09      	ldr	r3, [pc, #36]	@ (8005d34 <UART_SetConfig+0xc2c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d012      	beq.n	8005d40 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d1a:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <UART_SetConfig+0xc2c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	08db      	lsrs	r3, r3, #3
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	4a04      	ldr	r2, [pc, #16]	@ (8005d38 <UART_SetConfig+0xc30>)
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d2c:	e018      	b.n	8005d60 <UART_SetConfig+0xc58>
 8005d2e:	bf00      	nop
 8005d30:	08008d3c 	.word	0x08008d3c
 8005d34:	58024400 	.word	0x58024400
 8005d38:	03d09000 	.word	0x03d09000
 8005d3c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005d40:	4b24      	ldr	r3, [pc, #144]	@ (8005dd4 <UART_SetConfig+0xccc>)
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d44:	e00c      	b.n	8005d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d46:	4b24      	ldr	r3, [pc, #144]	@ (8005dd8 <UART_SetConfig+0xcd0>)
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d4a:	e009      	b.n	8005d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d52:	e005      	b.n	8005d60 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d5e:	bf00      	nop
    }

    if (pclk != 0U)
 8005d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d021      	beq.n	8005daa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <UART_SetConfig+0xcd4>)
 8005d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d74:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	441a      	add	r2, r3
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	2b0f      	cmp	r3, #15
 8005d8e:	d909      	bls.n	8005da4 <UART_SetConfig+0xc9c>
 8005d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d96:	d205      	bcs.n	8005da4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	e002      	b.n	8005daa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005dc6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3748      	adds	r7, #72	@ 0x48
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd4:	03d09000 	.word	0x03d09000
 8005dd8:	003d0900 	.word	0x003d0900
 8005ddc:	08008d3c 	.word	0x08008d3c

08005de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ede:	d10a      	bne.n	8005ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  }
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b098      	sub	sp, #96	@ 0x60
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f34:	f7fb f972 	bl	800121c <HAL_GetTick>
 8005f38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d12f      	bne.n	8005fa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f50:	2200      	movs	r2, #0
 8005f52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f88e 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d022      	beq.n	8005fa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e063      	b.n	8006070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d149      	bne.n	800604a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f857 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d03c      	beq.n	800604a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	60fb      	str	r3, [r7, #12]
   return(result);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006022:	61fa      	str	r2, [r7, #28]
 8006024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	617b      	str	r3, [r7, #20]
   return(result);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e5      	bne.n	8006002 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e012      	b.n	8006070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3758      	adds	r7, #88	@ 0x58
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006088:	e04f      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d04b      	beq.n	800612a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006092:	f7fb f8c3 	bl	800121c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d302      	bcc.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e04e      	b.n	800614a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d037      	beq.n	800612a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b80      	cmp	r3, #128	@ 0x80
 80060be:	d034      	beq.n	800612a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b40      	cmp	r3, #64	@ 0x40
 80060c4:	d031      	beq.n	800612a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d110      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2208      	movs	r2, #8
 80060da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f839 	bl	8006154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2208      	movs	r2, #8
 80060e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e029      	b.n	800614a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006104:	d111      	bne.n	800612a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800610e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f81f 	bl	8006154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e00f      	b.n	800614a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d0a0      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006154:	b480      	push	{r7}
 8006156:	b095      	sub	sp, #84	@ 0x54
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617a:	643b      	str	r3, [r7, #64]	@ 0x40
 800617c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006180:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e6      	bne.n	800615c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	61fb      	str	r3, [r7, #28]
   return(result);
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	4b1e      	ldr	r3, [pc, #120]	@ (800621c <UART_EndRxTransfer+0xc8>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d118      	bne.n	80061fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f023 0310 	bic.w	r3, r3, #16
 80061de:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6979      	ldr	r1, [r7, #20]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	613b      	str	r3, [r7, #16]
   return(result);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e6      	bne.n	80061ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006210:	bf00      	nop
 8006212:	3754      	adds	r7, #84	@ 0x54
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	effffffe 	.word	0xeffffffe

08006220 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UARTEx_DisableFifoMode+0x16>
 8006232:	2302      	movs	r3, #2
 8006234:	e027      	b.n	8006286 <HAL_UARTEx_DisableFifoMode+0x66>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	@ 0x24
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006264:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e02d      	b.n	8006306 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2224      	movs	r2, #36	@ 0x24
 80062b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f850 	bl	800638c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006322:	2302      	movs	r3, #2
 8006324:	e02d      	b.n	8006382 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2224      	movs	r2, #36	@ 0x24
 8006332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f812 	bl	800638c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063ac:	e031      	b.n	8006412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063ae:	2310      	movs	r3, #16
 80063b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063b2:	2310      	movs	r3, #16
 80063b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	0e5b      	lsrs	r3, r3, #25
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	0f5b      	lsrs	r3, r3, #29
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	7b3a      	ldrb	r2, [r7, #12]
 80063da:	4911      	ldr	r1, [pc, #68]	@ (8006420 <UARTEx_SetNbDataToProcess+0x94>)
 80063dc:	5c8a      	ldrb	r2, [r1, r2]
 80063de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063e2:	7b3a      	ldrb	r2, [r7, #12]
 80063e4:	490f      	ldr	r1, [pc, #60]	@ (8006424 <UARTEx_SetNbDataToProcess+0x98>)
 80063e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	7b7a      	ldrb	r2, [r7, #13]
 80063f8:	4909      	ldr	r1, [pc, #36]	@ (8006420 <UARTEx_SetNbDataToProcess+0x94>)
 80063fa:	5c8a      	ldrb	r2, [r1, r2]
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006400:	7b7a      	ldrb	r2, [r7, #13]
 8006402:	4908      	ldr	r1, [pc, #32]	@ (8006424 <UARTEx_SetNbDataToProcess+0x98>)
 8006404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006406:	fb93 f3f2 	sdiv	r3, r3, r2
 800640a:	b29a      	uxth	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	08008d54 	.word	0x08008d54
 8006424:	08008d5c 	.word	0x08008d5c

08006428 <__cvt>:
 8006428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642a:	ed2d 8b02 	vpush	{d8}
 800642e:	eeb0 8b40 	vmov.f64	d8, d0
 8006432:	b085      	sub	sp, #20
 8006434:	4617      	mov	r7, r2
 8006436:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006438:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800643a:	ee18 2a90 	vmov	r2, s17
 800643e:	f025 0520 	bic.w	r5, r5, #32
 8006442:	2a00      	cmp	r2, #0
 8006444:	bfb6      	itet	lt
 8006446:	222d      	movlt	r2, #45	@ 0x2d
 8006448:	2200      	movge	r2, #0
 800644a:	eeb1 8b40 	vneglt.f64	d8, d0
 800644e:	2d46      	cmp	r5, #70	@ 0x46
 8006450:	460c      	mov	r4, r1
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	d004      	beq.n	8006460 <__cvt+0x38>
 8006456:	2d45      	cmp	r5, #69	@ 0x45
 8006458:	d100      	bne.n	800645c <__cvt+0x34>
 800645a:	3401      	adds	r4, #1
 800645c:	2102      	movs	r1, #2
 800645e:	e000      	b.n	8006462 <__cvt+0x3a>
 8006460:	2103      	movs	r1, #3
 8006462:	ab03      	add	r3, sp, #12
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	ab02      	add	r3, sp, #8
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	4622      	mov	r2, r4
 800646c:	4633      	mov	r3, r6
 800646e:	eeb0 0b48 	vmov.f64	d0, d8
 8006472:	f000 fe31 	bl	80070d8 <_dtoa_r>
 8006476:	2d47      	cmp	r5, #71	@ 0x47
 8006478:	d114      	bne.n	80064a4 <__cvt+0x7c>
 800647a:	07fb      	lsls	r3, r7, #31
 800647c:	d50a      	bpl.n	8006494 <__cvt+0x6c>
 800647e:	1902      	adds	r2, r0, r4
 8006480:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006488:	bf08      	it	eq
 800648a:	9203      	streq	r2, [sp, #12]
 800648c:	2130      	movs	r1, #48	@ 0x30
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	4293      	cmp	r3, r2
 8006492:	d319      	bcc.n	80064c8 <__cvt+0xa0>
 8006494:	9b03      	ldr	r3, [sp, #12]
 8006496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006498:	1a1b      	subs	r3, r3, r0
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	b005      	add	sp, #20
 800649e:	ecbd 8b02 	vpop	{d8}
 80064a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a4:	2d46      	cmp	r5, #70	@ 0x46
 80064a6:	eb00 0204 	add.w	r2, r0, r4
 80064aa:	d1e9      	bne.n	8006480 <__cvt+0x58>
 80064ac:	7803      	ldrb	r3, [r0, #0]
 80064ae:	2b30      	cmp	r3, #48	@ 0x30
 80064b0:	d107      	bne.n	80064c2 <__cvt+0x9a>
 80064b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ba:	bf1c      	itt	ne
 80064bc:	f1c4 0401 	rsbne	r4, r4, #1
 80064c0:	6034      	strne	r4, [r6, #0]
 80064c2:	6833      	ldr	r3, [r6, #0]
 80064c4:	441a      	add	r2, r3
 80064c6:	e7db      	b.n	8006480 <__cvt+0x58>
 80064c8:	1c5c      	adds	r4, r3, #1
 80064ca:	9403      	str	r4, [sp, #12]
 80064cc:	7019      	strb	r1, [r3, #0]
 80064ce:	e7de      	b.n	800648e <__cvt+0x66>

080064d0 <__exponent>:
 80064d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d2:	2900      	cmp	r1, #0
 80064d4:	bfba      	itte	lt
 80064d6:	4249      	neglt	r1, r1
 80064d8:	232d      	movlt	r3, #45	@ 0x2d
 80064da:	232b      	movge	r3, #43	@ 0x2b
 80064dc:	2909      	cmp	r1, #9
 80064de:	7002      	strb	r2, [r0, #0]
 80064e0:	7043      	strb	r3, [r0, #1]
 80064e2:	dd29      	ble.n	8006538 <__exponent+0x68>
 80064e4:	f10d 0307 	add.w	r3, sp, #7
 80064e8:	461d      	mov	r5, r3
 80064ea:	270a      	movs	r7, #10
 80064ec:	461a      	mov	r2, r3
 80064ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80064f2:	fb07 1416 	mls	r4, r7, r6, r1
 80064f6:	3430      	adds	r4, #48	@ 0x30
 80064f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064fc:	460c      	mov	r4, r1
 80064fe:	2c63      	cmp	r4, #99	@ 0x63
 8006500:	f103 33ff 	add.w	r3, r3, #4294967295
 8006504:	4631      	mov	r1, r6
 8006506:	dcf1      	bgt.n	80064ec <__exponent+0x1c>
 8006508:	3130      	adds	r1, #48	@ 0x30
 800650a:	1e94      	subs	r4, r2, #2
 800650c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006510:	1c41      	adds	r1, r0, #1
 8006512:	4623      	mov	r3, r4
 8006514:	42ab      	cmp	r3, r5
 8006516:	d30a      	bcc.n	800652e <__exponent+0x5e>
 8006518:	f10d 0309 	add.w	r3, sp, #9
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	42ac      	cmp	r4, r5
 8006520:	bf88      	it	hi
 8006522:	2300      	movhi	r3, #0
 8006524:	3302      	adds	r3, #2
 8006526:	4403      	add	r3, r0
 8006528:	1a18      	subs	r0, r3, r0
 800652a:	b003      	add	sp, #12
 800652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006532:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006536:	e7ed      	b.n	8006514 <__exponent+0x44>
 8006538:	2330      	movs	r3, #48	@ 0x30
 800653a:	3130      	adds	r1, #48	@ 0x30
 800653c:	7083      	strb	r3, [r0, #2]
 800653e:	70c1      	strb	r1, [r0, #3]
 8006540:	1d03      	adds	r3, r0, #4
 8006542:	e7f1      	b.n	8006528 <__exponent+0x58>
 8006544:	0000      	movs	r0, r0
	...

08006548 <_printf_float>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	b08d      	sub	sp, #52	@ 0x34
 800654e:	460c      	mov	r4, r1
 8006550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006554:	4616      	mov	r6, r2
 8006556:	461f      	mov	r7, r3
 8006558:	4605      	mov	r5, r0
 800655a:	f000 fcbd 	bl	8006ed8 <_localeconv_r>
 800655e:	f8d0 b000 	ldr.w	fp, [r0]
 8006562:	4658      	mov	r0, fp
 8006564:	f7f9 ff24 	bl	80003b0 <strlen>
 8006568:	2300      	movs	r3, #0
 800656a:	930a      	str	r3, [sp, #40]	@ 0x28
 800656c:	f8d8 3000 	ldr.w	r3, [r8]
 8006570:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	9005      	str	r0, [sp, #20]
 8006578:	3307      	adds	r3, #7
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	f103 0108 	add.w	r1, r3, #8
 8006582:	f8c8 1000 	str.w	r1, [r8]
 8006586:	ed93 0b00 	vldr	d0, [r3]
 800658a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80067e8 <_printf_float+0x2a0>
 800658e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006592:	eeb4 7b46 	vcmp.f64	d7, d6
 8006596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800659e:	dd24      	ble.n	80065ea <_printf_float+0xa2>
 80065a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80065a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a8:	d502      	bpl.n	80065b0 <_printf_float+0x68>
 80065aa:	232d      	movs	r3, #45	@ 0x2d
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065b0:	498f      	ldr	r1, [pc, #572]	@ (80067f0 <_printf_float+0x2a8>)
 80065b2:	4b90      	ldr	r3, [pc, #576]	@ (80067f4 <_printf_float+0x2ac>)
 80065b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80065b8:	bf94      	ite	ls
 80065ba:	4688      	movls	r8, r1
 80065bc:	4698      	movhi	r8, r3
 80065be:	f022 0204 	bic.w	r2, r2, #4
 80065c2:	2303      	movs	r3, #3
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	6022      	str	r2, [r4, #0]
 80065c8:	f04f 0a00 	mov.w	sl, #0
 80065cc:	9700      	str	r7, [sp, #0]
 80065ce:	4633      	mov	r3, r6
 80065d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f000 f9d1 	bl	800697c <_printf_common>
 80065da:	3001      	adds	r0, #1
 80065dc:	f040 8089 	bne.w	80066f2 <_printf_float+0x1aa>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	b00d      	add	sp, #52	@ 0x34
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80065ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f2:	d709      	bvc.n	8006608 <_printf_float+0xc0>
 80065f4:	ee10 3a90 	vmov	r3, s1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfbc      	itt	lt
 80065fc:	232d      	movlt	r3, #45	@ 0x2d
 80065fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006602:	497d      	ldr	r1, [pc, #500]	@ (80067f8 <_printf_float+0x2b0>)
 8006604:	4b7d      	ldr	r3, [pc, #500]	@ (80067fc <_printf_float+0x2b4>)
 8006606:	e7d5      	b.n	80065b4 <_printf_float+0x6c>
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006610:	d139      	bne.n	8006686 <_printf_float+0x13e>
 8006612:	2306      	movs	r3, #6
 8006614:	6063      	str	r3, [r4, #4]
 8006616:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800661a:	2300      	movs	r3, #0
 800661c:	6022      	str	r2, [r4, #0]
 800661e:	9303      	str	r3, [sp, #12]
 8006620:	ab0a      	add	r3, sp, #40	@ 0x28
 8006622:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006626:	ab09      	add	r3, sp, #36	@ 0x24
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	6861      	ldr	r1, [r4, #4]
 800662c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006630:	4628      	mov	r0, r5
 8006632:	f7ff fef9 	bl	8006428 <__cvt>
 8006636:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800663a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800663c:	4680      	mov	r8, r0
 800663e:	d129      	bne.n	8006694 <_printf_float+0x14c>
 8006640:	1cc8      	adds	r0, r1, #3
 8006642:	db02      	blt.n	800664a <_printf_float+0x102>
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	4299      	cmp	r1, r3
 8006648:	dd41      	ble.n	80066ce <_printf_float+0x186>
 800664a:	f1a9 0902 	sub.w	r9, r9, #2
 800664e:	fa5f f989 	uxtb.w	r9, r9
 8006652:	3901      	subs	r1, #1
 8006654:	464a      	mov	r2, r9
 8006656:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800665a:	9109      	str	r1, [sp, #36]	@ 0x24
 800665c:	f7ff ff38 	bl	80064d0 <__exponent>
 8006660:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006662:	1813      	adds	r3, r2, r0
 8006664:	2a01      	cmp	r2, #1
 8006666:	4682      	mov	sl, r0
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	dc02      	bgt.n	8006672 <_printf_float+0x12a>
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	07d2      	lsls	r2, r2, #31
 8006670:	d501      	bpl.n	8006676 <_printf_float+0x12e>
 8006672:	3301      	adds	r3, #1
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0a6      	beq.n	80065cc <_printf_float+0x84>
 800667e:	232d      	movs	r3, #45	@ 0x2d
 8006680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006684:	e7a2      	b.n	80065cc <_printf_float+0x84>
 8006686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800668a:	d1c4      	bne.n	8006616 <_printf_float+0xce>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1c2      	bne.n	8006616 <_printf_float+0xce>
 8006690:	2301      	movs	r3, #1
 8006692:	e7bf      	b.n	8006614 <_printf_float+0xcc>
 8006694:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006698:	d9db      	bls.n	8006652 <_printf_float+0x10a>
 800669a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800669e:	d118      	bne.n	80066d2 <_printf_float+0x18a>
 80066a0:	2900      	cmp	r1, #0
 80066a2:	6863      	ldr	r3, [r4, #4]
 80066a4:	dd0b      	ble.n	80066be <_printf_float+0x176>
 80066a6:	6121      	str	r1, [r4, #16]
 80066a8:	b913      	cbnz	r3, 80066b0 <_printf_float+0x168>
 80066aa:	6822      	ldr	r2, [r4, #0]
 80066ac:	07d0      	lsls	r0, r2, #31
 80066ae:	d502      	bpl.n	80066b6 <_printf_float+0x16e>
 80066b0:	3301      	adds	r3, #1
 80066b2:	440b      	add	r3, r1
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066b8:	f04f 0a00 	mov.w	sl, #0
 80066bc:	e7db      	b.n	8006676 <_printf_float+0x12e>
 80066be:	b913      	cbnz	r3, 80066c6 <_printf_float+0x17e>
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	07d2      	lsls	r2, r2, #31
 80066c4:	d501      	bpl.n	80066ca <_printf_float+0x182>
 80066c6:	3302      	adds	r3, #2
 80066c8:	e7f4      	b.n	80066b4 <_printf_float+0x16c>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7f2      	b.n	80066b4 <_printf_float+0x16c>
 80066ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80066d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066d4:	4299      	cmp	r1, r3
 80066d6:	db05      	blt.n	80066e4 <_printf_float+0x19c>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	6121      	str	r1, [r4, #16]
 80066dc:	07d8      	lsls	r0, r3, #31
 80066de:	d5ea      	bpl.n	80066b6 <_printf_float+0x16e>
 80066e0:	1c4b      	adds	r3, r1, #1
 80066e2:	e7e7      	b.n	80066b4 <_printf_float+0x16c>
 80066e4:	2900      	cmp	r1, #0
 80066e6:	bfd4      	ite	le
 80066e8:	f1c1 0202 	rsble	r2, r1, #2
 80066ec:	2201      	movgt	r2, #1
 80066ee:	4413      	add	r3, r2
 80066f0:	e7e0      	b.n	80066b4 <_printf_float+0x16c>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	055a      	lsls	r2, r3, #21
 80066f6:	d407      	bmi.n	8006708 <_printf_float+0x1c0>
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	4642      	mov	r2, r8
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	d12a      	bne.n	800675c <_printf_float+0x214>
 8006706:	e76b      	b.n	80065e0 <_printf_float+0x98>
 8006708:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800670c:	f240 80e0 	bls.w	80068d0 <_printf_float+0x388>
 8006710:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006714:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671c:	d133      	bne.n	8006786 <_printf_float+0x23e>
 800671e:	4a38      	ldr	r2, [pc, #224]	@ (8006800 <_printf_float+0x2b8>)
 8006720:	2301      	movs	r3, #1
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f af59 	beq.w	80065e0 <_printf_float+0x98>
 800672e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006732:	4543      	cmp	r3, r8
 8006734:	db02      	blt.n	800673c <_printf_float+0x1f4>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	07d8      	lsls	r0, r3, #31
 800673a:	d50f      	bpl.n	800675c <_printf_float+0x214>
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	465a      	mov	r2, fp
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f af4a 	beq.w	80065e0 <_printf_float+0x98>
 800674c:	f04f 0900 	mov.w	r9, #0
 8006750:	f108 38ff 	add.w	r8, r8, #4294967295
 8006754:	f104 0a1a 	add.w	sl, r4, #26
 8006758:	45c8      	cmp	r8, r9
 800675a:	dc09      	bgt.n	8006770 <_printf_float+0x228>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	079b      	lsls	r3, r3, #30
 8006760:	f100 8107 	bmi.w	8006972 <_printf_float+0x42a>
 8006764:	68e0      	ldr	r0, [r4, #12]
 8006766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006768:	4298      	cmp	r0, r3
 800676a:	bfb8      	it	lt
 800676c:	4618      	movlt	r0, r3
 800676e:	e739      	b.n	80065e4 <_printf_float+0x9c>
 8006770:	2301      	movs	r3, #1
 8006772:	4652      	mov	r2, sl
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af30 	beq.w	80065e0 <_printf_float+0x98>
 8006780:	f109 0901 	add.w	r9, r9, #1
 8006784:	e7e8      	b.n	8006758 <_printf_float+0x210>
 8006786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc3b      	bgt.n	8006804 <_printf_float+0x2bc>
 800678c:	4a1c      	ldr	r2, [pc, #112]	@ (8006800 <_printf_float+0x2b8>)
 800678e:	2301      	movs	r3, #1
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	f43f af22 	beq.w	80065e0 <_printf_float+0x98>
 800679c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067a0:	ea59 0303 	orrs.w	r3, r9, r3
 80067a4:	d102      	bne.n	80067ac <_printf_float+0x264>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	07d9      	lsls	r1, r3, #31
 80067aa:	d5d7      	bpl.n	800675c <_printf_float+0x214>
 80067ac:	9b05      	ldr	r3, [sp, #20]
 80067ae:	465a      	mov	r2, fp
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f af12 	beq.w	80065e0 <_printf_float+0x98>
 80067bc:	f04f 0a00 	mov.w	sl, #0
 80067c0:	f104 0b1a 	add.w	fp, r4, #26
 80067c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c6:	425b      	negs	r3, r3
 80067c8:	4553      	cmp	r3, sl
 80067ca:	dc01      	bgt.n	80067d0 <_printf_float+0x288>
 80067cc:	464b      	mov	r3, r9
 80067ce:	e794      	b.n	80066fa <_printf_float+0x1b2>
 80067d0:	2301      	movs	r3, #1
 80067d2:	465a      	mov	r2, fp
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f af00 	beq.w	80065e0 <_printf_float+0x98>
 80067e0:	f10a 0a01 	add.w	sl, sl, #1
 80067e4:	e7ee      	b.n	80067c4 <_printf_float+0x27c>
 80067e6:	bf00      	nop
 80067e8:	ffffffff 	.word	0xffffffff
 80067ec:	7fefffff 	.word	0x7fefffff
 80067f0:	08008d64 	.word	0x08008d64
 80067f4:	08008d68 	.word	0x08008d68
 80067f8:	08008d6c 	.word	0x08008d6c
 80067fc:	08008d70 	.word	0x08008d70
 8006800:	08008d74 	.word	0x08008d74
 8006804:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006806:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800680a:	4553      	cmp	r3, sl
 800680c:	bfa8      	it	ge
 800680e:	4653      	movge	r3, sl
 8006810:	2b00      	cmp	r3, #0
 8006812:	4699      	mov	r9, r3
 8006814:	dc37      	bgt.n	8006886 <_printf_float+0x33e>
 8006816:	2300      	movs	r3, #0
 8006818:	9307      	str	r3, [sp, #28]
 800681a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681e:	f104 021a 	add.w	r2, r4, #26
 8006822:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006824:	9907      	ldr	r1, [sp, #28]
 8006826:	9306      	str	r3, [sp, #24]
 8006828:	eba3 0309 	sub.w	r3, r3, r9
 800682c:	428b      	cmp	r3, r1
 800682e:	dc31      	bgt.n	8006894 <_printf_float+0x34c>
 8006830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006832:	459a      	cmp	sl, r3
 8006834:	dc3b      	bgt.n	80068ae <_printf_float+0x366>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	07da      	lsls	r2, r3, #31
 800683a:	d438      	bmi.n	80068ae <_printf_float+0x366>
 800683c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800683e:	ebaa 0903 	sub.w	r9, sl, r3
 8006842:	9b06      	ldr	r3, [sp, #24]
 8006844:	ebaa 0303 	sub.w	r3, sl, r3
 8006848:	4599      	cmp	r9, r3
 800684a:	bfa8      	it	ge
 800684c:	4699      	movge	r9, r3
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	dc34      	bgt.n	80068be <_printf_float+0x376>
 8006854:	f04f 0800 	mov.w	r8, #0
 8006858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800685c:	f104 0b1a 	add.w	fp, r4, #26
 8006860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006862:	ebaa 0303 	sub.w	r3, sl, r3
 8006866:	eba3 0309 	sub.w	r3, r3, r9
 800686a:	4543      	cmp	r3, r8
 800686c:	f77f af76 	ble.w	800675c <_printf_float+0x214>
 8006870:	2301      	movs	r3, #1
 8006872:	465a      	mov	r2, fp
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f aeb0 	beq.w	80065e0 <_printf_float+0x98>
 8006880:	f108 0801 	add.w	r8, r8, #1
 8006884:	e7ec      	b.n	8006860 <_printf_float+0x318>
 8006886:	4642      	mov	r2, r8
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	d1c1      	bne.n	8006816 <_printf_float+0x2ce>
 8006892:	e6a5      	b.n	80065e0 <_printf_float+0x98>
 8006894:	2301      	movs	r3, #1
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	9206      	str	r2, [sp, #24]
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f ae9e 	beq.w	80065e0 <_printf_float+0x98>
 80068a4:	9b07      	ldr	r3, [sp, #28]
 80068a6:	9a06      	ldr	r2, [sp, #24]
 80068a8:	3301      	adds	r3, #1
 80068aa:	9307      	str	r3, [sp, #28]
 80068ac:	e7b9      	b.n	8006822 <_printf_float+0x2da>
 80068ae:	9b05      	ldr	r3, [sp, #20]
 80068b0:	465a      	mov	r2, fp
 80068b2:	4631      	mov	r1, r6
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b8      	blx	r7
 80068b8:	3001      	adds	r0, #1
 80068ba:	d1bf      	bne.n	800683c <_printf_float+0x2f4>
 80068bc:	e690      	b.n	80065e0 <_printf_float+0x98>
 80068be:	9a06      	ldr	r2, [sp, #24]
 80068c0:	464b      	mov	r3, r9
 80068c2:	4442      	add	r2, r8
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	d1c2      	bne.n	8006854 <_printf_float+0x30c>
 80068ce:	e687      	b.n	80065e0 <_printf_float+0x98>
 80068d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80068d4:	f1b9 0f01 	cmp.w	r9, #1
 80068d8:	dc01      	bgt.n	80068de <_printf_float+0x396>
 80068da:	07db      	lsls	r3, r3, #31
 80068dc:	d536      	bpl.n	800694c <_printf_float+0x404>
 80068de:	2301      	movs	r3, #1
 80068e0:	4642      	mov	r2, r8
 80068e2:	4631      	mov	r1, r6
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b8      	blx	r7
 80068e8:	3001      	adds	r0, #1
 80068ea:	f43f ae79 	beq.w	80065e0 <_printf_float+0x98>
 80068ee:	9b05      	ldr	r3, [sp, #20]
 80068f0:	465a      	mov	r2, fp
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f ae71 	beq.w	80065e0 <_printf_float+0x98>
 80068fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006902:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800690a:	f109 39ff 	add.w	r9, r9, #4294967295
 800690e:	d018      	beq.n	8006942 <_printf_float+0x3fa>
 8006910:	464b      	mov	r3, r9
 8006912:	f108 0201 	add.w	r2, r8, #1
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	d10c      	bne.n	800693a <_printf_float+0x3f2>
 8006920:	e65e      	b.n	80065e0 <_printf_float+0x98>
 8006922:	2301      	movs	r3, #1
 8006924:	465a      	mov	r2, fp
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f ae57 	beq.w	80065e0 <_printf_float+0x98>
 8006932:	f108 0801 	add.w	r8, r8, #1
 8006936:	45c8      	cmp	r8, r9
 8006938:	dbf3      	blt.n	8006922 <_printf_float+0x3da>
 800693a:	4653      	mov	r3, sl
 800693c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006940:	e6dc      	b.n	80066fc <_printf_float+0x1b4>
 8006942:	f04f 0800 	mov.w	r8, #0
 8006946:	f104 0b1a 	add.w	fp, r4, #26
 800694a:	e7f4      	b.n	8006936 <_printf_float+0x3ee>
 800694c:	2301      	movs	r3, #1
 800694e:	4642      	mov	r2, r8
 8006950:	e7e1      	b.n	8006916 <_printf_float+0x3ce>
 8006952:	2301      	movs	r3, #1
 8006954:	464a      	mov	r2, r9
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f ae3f 	beq.w	80065e0 <_printf_float+0x98>
 8006962:	f108 0801 	add.w	r8, r8, #1
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800696a:	1a5b      	subs	r3, r3, r1
 800696c:	4543      	cmp	r3, r8
 800696e:	dcf0      	bgt.n	8006952 <_printf_float+0x40a>
 8006970:	e6f8      	b.n	8006764 <_printf_float+0x21c>
 8006972:	f04f 0800 	mov.w	r8, #0
 8006976:	f104 0919 	add.w	r9, r4, #25
 800697a:	e7f4      	b.n	8006966 <_printf_float+0x41e>

0800697c <_printf_common>:
 800697c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	4616      	mov	r6, r2
 8006982:	4698      	mov	r8, r3
 8006984:	688a      	ldr	r2, [r1, #8]
 8006986:	690b      	ldr	r3, [r1, #16]
 8006988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800698c:	4293      	cmp	r3, r2
 800698e:	bfb8      	it	lt
 8006990:	4613      	movlt	r3, r2
 8006992:	6033      	str	r3, [r6, #0]
 8006994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006998:	4607      	mov	r7, r0
 800699a:	460c      	mov	r4, r1
 800699c:	b10a      	cbz	r2, 80069a2 <_printf_common+0x26>
 800699e:	3301      	adds	r3, #1
 80069a0:	6033      	str	r3, [r6, #0]
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	0699      	lsls	r1, r3, #26
 80069a6:	bf42      	ittt	mi
 80069a8:	6833      	ldrmi	r3, [r6, #0]
 80069aa:	3302      	addmi	r3, #2
 80069ac:	6033      	strmi	r3, [r6, #0]
 80069ae:	6825      	ldr	r5, [r4, #0]
 80069b0:	f015 0506 	ands.w	r5, r5, #6
 80069b4:	d106      	bne.n	80069c4 <_printf_common+0x48>
 80069b6:	f104 0a19 	add.w	sl, r4, #25
 80069ba:	68e3      	ldr	r3, [r4, #12]
 80069bc:	6832      	ldr	r2, [r6, #0]
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	42ab      	cmp	r3, r5
 80069c2:	dc26      	bgt.n	8006a12 <_printf_common+0x96>
 80069c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	3b00      	subs	r3, #0
 80069cc:	bf18      	it	ne
 80069ce:	2301      	movne	r3, #1
 80069d0:	0692      	lsls	r2, r2, #26
 80069d2:	d42b      	bmi.n	8006a2c <_printf_common+0xb0>
 80069d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069d8:	4641      	mov	r1, r8
 80069da:	4638      	mov	r0, r7
 80069dc:	47c8      	blx	r9
 80069de:	3001      	adds	r0, #1
 80069e0:	d01e      	beq.n	8006a20 <_printf_common+0xa4>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	6922      	ldr	r2, [r4, #16]
 80069e6:	f003 0306 	and.w	r3, r3, #6
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	bf02      	ittt	eq
 80069ee:	68e5      	ldreq	r5, [r4, #12]
 80069f0:	6833      	ldreq	r3, [r6, #0]
 80069f2:	1aed      	subeq	r5, r5, r3
 80069f4:	68a3      	ldr	r3, [r4, #8]
 80069f6:	bf0c      	ite	eq
 80069f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069fc:	2500      	movne	r5, #0
 80069fe:	4293      	cmp	r3, r2
 8006a00:	bfc4      	itt	gt
 8006a02:	1a9b      	subgt	r3, r3, r2
 8006a04:	18ed      	addgt	r5, r5, r3
 8006a06:	2600      	movs	r6, #0
 8006a08:	341a      	adds	r4, #26
 8006a0a:	42b5      	cmp	r5, r6
 8006a0c:	d11a      	bne.n	8006a44 <_printf_common+0xc8>
 8006a0e:	2000      	movs	r0, #0
 8006a10:	e008      	b.n	8006a24 <_printf_common+0xa8>
 8006a12:	2301      	movs	r3, #1
 8006a14:	4652      	mov	r2, sl
 8006a16:	4641      	mov	r1, r8
 8006a18:	4638      	mov	r0, r7
 8006a1a:	47c8      	blx	r9
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d103      	bne.n	8006a28 <_printf_common+0xac>
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a28:	3501      	adds	r5, #1
 8006a2a:	e7c6      	b.n	80069ba <_printf_common+0x3e>
 8006a2c:	18e1      	adds	r1, r4, r3
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	2030      	movs	r0, #48	@ 0x30
 8006a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a36:	4422      	add	r2, r4
 8006a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a40:	3302      	adds	r3, #2
 8006a42:	e7c7      	b.n	80069d4 <_printf_common+0x58>
 8006a44:	2301      	movs	r3, #1
 8006a46:	4622      	mov	r2, r4
 8006a48:	4641      	mov	r1, r8
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	47c8      	blx	r9
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d0e6      	beq.n	8006a20 <_printf_common+0xa4>
 8006a52:	3601      	adds	r6, #1
 8006a54:	e7d9      	b.n	8006a0a <_printf_common+0x8e>
	...

08006a58 <_printf_i>:
 8006a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	7e0f      	ldrb	r7, [r1, #24]
 8006a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a60:	2f78      	cmp	r7, #120	@ 0x78
 8006a62:	4691      	mov	r9, r2
 8006a64:	4680      	mov	r8, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	469a      	mov	sl, r3
 8006a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a6e:	d807      	bhi.n	8006a80 <_printf_i+0x28>
 8006a70:	2f62      	cmp	r7, #98	@ 0x62
 8006a72:	d80a      	bhi.n	8006a8a <_printf_i+0x32>
 8006a74:	2f00      	cmp	r7, #0
 8006a76:	f000 80d2 	beq.w	8006c1e <_printf_i+0x1c6>
 8006a7a:	2f58      	cmp	r7, #88	@ 0x58
 8006a7c:	f000 80b9 	beq.w	8006bf2 <_printf_i+0x19a>
 8006a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a88:	e03a      	b.n	8006b00 <_printf_i+0xa8>
 8006a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a8e:	2b15      	cmp	r3, #21
 8006a90:	d8f6      	bhi.n	8006a80 <_printf_i+0x28>
 8006a92:	a101      	add	r1, pc, #4	@ (adr r1, 8006a98 <_printf_i+0x40>)
 8006a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a98:	08006af1 	.word	0x08006af1
 8006a9c:	08006b05 	.word	0x08006b05
 8006aa0:	08006a81 	.word	0x08006a81
 8006aa4:	08006a81 	.word	0x08006a81
 8006aa8:	08006a81 	.word	0x08006a81
 8006aac:	08006a81 	.word	0x08006a81
 8006ab0:	08006b05 	.word	0x08006b05
 8006ab4:	08006a81 	.word	0x08006a81
 8006ab8:	08006a81 	.word	0x08006a81
 8006abc:	08006a81 	.word	0x08006a81
 8006ac0:	08006a81 	.word	0x08006a81
 8006ac4:	08006c05 	.word	0x08006c05
 8006ac8:	08006b2f 	.word	0x08006b2f
 8006acc:	08006bbf 	.word	0x08006bbf
 8006ad0:	08006a81 	.word	0x08006a81
 8006ad4:	08006a81 	.word	0x08006a81
 8006ad8:	08006c27 	.word	0x08006c27
 8006adc:	08006a81 	.word	0x08006a81
 8006ae0:	08006b2f 	.word	0x08006b2f
 8006ae4:	08006a81 	.word	0x08006a81
 8006ae8:	08006a81 	.word	0x08006a81
 8006aec:	08006bc7 	.word	0x08006bc7
 8006af0:	6833      	ldr	r3, [r6, #0]
 8006af2:	1d1a      	adds	r2, r3, #4
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6032      	str	r2, [r6, #0]
 8006af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b00:	2301      	movs	r3, #1
 8006b02:	e09d      	b.n	8006c40 <_printf_i+0x1e8>
 8006b04:	6833      	ldr	r3, [r6, #0]
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	1d19      	adds	r1, r3, #4
 8006b0a:	6031      	str	r1, [r6, #0]
 8006b0c:	0606      	lsls	r6, r0, #24
 8006b0e:	d501      	bpl.n	8006b14 <_printf_i+0xbc>
 8006b10:	681d      	ldr	r5, [r3, #0]
 8006b12:	e003      	b.n	8006b1c <_printf_i+0xc4>
 8006b14:	0645      	lsls	r5, r0, #25
 8006b16:	d5fb      	bpl.n	8006b10 <_printf_i+0xb8>
 8006b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	da03      	bge.n	8006b28 <_printf_i+0xd0>
 8006b20:	232d      	movs	r3, #45	@ 0x2d
 8006b22:	426d      	negs	r5, r5
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b28:	4859      	ldr	r0, [pc, #356]	@ (8006c90 <_printf_i+0x238>)
 8006b2a:	230a      	movs	r3, #10
 8006b2c:	e011      	b.n	8006b52 <_printf_i+0xfa>
 8006b2e:	6821      	ldr	r1, [r4, #0]
 8006b30:	6833      	ldr	r3, [r6, #0]
 8006b32:	0608      	lsls	r0, r1, #24
 8006b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b38:	d402      	bmi.n	8006b40 <_printf_i+0xe8>
 8006b3a:	0649      	lsls	r1, r1, #25
 8006b3c:	bf48      	it	mi
 8006b3e:	b2ad      	uxthmi	r5, r5
 8006b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b42:	4853      	ldr	r0, [pc, #332]	@ (8006c90 <_printf_i+0x238>)
 8006b44:	6033      	str	r3, [r6, #0]
 8006b46:	bf14      	ite	ne
 8006b48:	230a      	movne	r3, #10
 8006b4a:	2308      	moveq	r3, #8
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b52:	6866      	ldr	r6, [r4, #4]
 8006b54:	60a6      	str	r6, [r4, #8]
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	bfa2      	ittt	ge
 8006b5a:	6821      	ldrge	r1, [r4, #0]
 8006b5c:	f021 0104 	bicge.w	r1, r1, #4
 8006b60:	6021      	strge	r1, [r4, #0]
 8006b62:	b90d      	cbnz	r5, 8006b68 <_printf_i+0x110>
 8006b64:	2e00      	cmp	r6, #0
 8006b66:	d04b      	beq.n	8006c00 <_printf_i+0x1a8>
 8006b68:	4616      	mov	r6, r2
 8006b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b72:	5dc7      	ldrb	r7, [r0, r7]
 8006b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b78:	462f      	mov	r7, r5
 8006b7a:	42bb      	cmp	r3, r7
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	d9f4      	bls.n	8006b6a <_printf_i+0x112>
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d10b      	bne.n	8006b9c <_printf_i+0x144>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	07df      	lsls	r7, r3, #31
 8006b88:	d508      	bpl.n	8006b9c <_printf_i+0x144>
 8006b8a:	6923      	ldr	r3, [r4, #16]
 8006b8c:	6861      	ldr	r1, [r4, #4]
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	bfde      	ittt	le
 8006b92:	2330      	movle	r3, #48	@ 0x30
 8006b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b9c:	1b92      	subs	r2, r2, r6
 8006b9e:	6122      	str	r2, [r4, #16]
 8006ba0:	f8cd a000 	str.w	sl, [sp]
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	aa03      	add	r2, sp, #12
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4640      	mov	r0, r8
 8006bac:	f7ff fee6 	bl	800697c <_printf_common>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d14a      	bne.n	8006c4a <_printf_i+0x1f2>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	b004      	add	sp, #16
 8006bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	f043 0320 	orr.w	r3, r3, #32
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	4833      	ldr	r0, [pc, #204]	@ (8006c94 <_printf_i+0x23c>)
 8006bc8:	2778      	movs	r7, #120	@ 0x78
 8006bca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	6831      	ldr	r1, [r6, #0]
 8006bd2:	061f      	lsls	r7, r3, #24
 8006bd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bd8:	d402      	bmi.n	8006be0 <_printf_i+0x188>
 8006bda:	065f      	lsls	r7, r3, #25
 8006bdc:	bf48      	it	mi
 8006bde:	b2ad      	uxthmi	r5, r5
 8006be0:	6031      	str	r1, [r6, #0]
 8006be2:	07d9      	lsls	r1, r3, #31
 8006be4:	bf44      	itt	mi
 8006be6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bea:	6023      	strmi	r3, [r4, #0]
 8006bec:	b11d      	cbz	r5, 8006bf6 <_printf_i+0x19e>
 8006bee:	2310      	movs	r3, #16
 8006bf0:	e7ac      	b.n	8006b4c <_printf_i+0xf4>
 8006bf2:	4827      	ldr	r0, [pc, #156]	@ (8006c90 <_printf_i+0x238>)
 8006bf4:	e7e9      	b.n	8006bca <_printf_i+0x172>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f023 0320 	bic.w	r3, r3, #32
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	e7f6      	b.n	8006bee <_printf_i+0x196>
 8006c00:	4616      	mov	r6, r2
 8006c02:	e7bd      	b.n	8006b80 <_printf_i+0x128>
 8006c04:	6833      	ldr	r3, [r6, #0]
 8006c06:	6825      	ldr	r5, [r4, #0]
 8006c08:	6961      	ldr	r1, [r4, #20]
 8006c0a:	1d18      	adds	r0, r3, #4
 8006c0c:	6030      	str	r0, [r6, #0]
 8006c0e:	062e      	lsls	r6, r5, #24
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0x1c0>
 8006c14:	6019      	str	r1, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <_printf_i+0x1c6>
 8006c18:	0668      	lsls	r0, r5, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0x1bc>
 8006c1c:	8019      	strh	r1, [r3, #0]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	6123      	str	r3, [r4, #16]
 8006c22:	4616      	mov	r6, r2
 8006c24:	e7bc      	b.n	8006ba0 <_printf_i+0x148>
 8006c26:	6833      	ldr	r3, [r6, #0]
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	6032      	str	r2, [r6, #0]
 8006c2c:	681e      	ldr	r6, [r3, #0]
 8006c2e:	6862      	ldr	r2, [r4, #4]
 8006c30:	2100      	movs	r1, #0
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7f9 fb6c 	bl	8000310 <memchr>
 8006c38:	b108      	cbz	r0, 8006c3e <_printf_i+0x1e6>
 8006c3a:	1b80      	subs	r0, r0, r6
 8006c3c:	6060      	str	r0, [r4, #4]
 8006c3e:	6863      	ldr	r3, [r4, #4]
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	2300      	movs	r3, #0
 8006c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c48:	e7aa      	b.n	8006ba0 <_printf_i+0x148>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	4632      	mov	r2, r6
 8006c4e:	4649      	mov	r1, r9
 8006c50:	4640      	mov	r0, r8
 8006c52:	47d0      	blx	sl
 8006c54:	3001      	adds	r0, #1
 8006c56:	d0ad      	beq.n	8006bb4 <_printf_i+0x15c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	079b      	lsls	r3, r3, #30
 8006c5c:	d413      	bmi.n	8006c86 <_printf_i+0x22e>
 8006c5e:	68e0      	ldr	r0, [r4, #12]
 8006c60:	9b03      	ldr	r3, [sp, #12]
 8006c62:	4298      	cmp	r0, r3
 8006c64:	bfb8      	it	lt
 8006c66:	4618      	movlt	r0, r3
 8006c68:	e7a6      	b.n	8006bb8 <_printf_i+0x160>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	4649      	mov	r1, r9
 8006c70:	4640      	mov	r0, r8
 8006c72:	47d0      	blx	sl
 8006c74:	3001      	adds	r0, #1
 8006c76:	d09d      	beq.n	8006bb4 <_printf_i+0x15c>
 8006c78:	3501      	adds	r5, #1
 8006c7a:	68e3      	ldr	r3, [r4, #12]
 8006c7c:	9903      	ldr	r1, [sp, #12]
 8006c7e:	1a5b      	subs	r3, r3, r1
 8006c80:	42ab      	cmp	r3, r5
 8006c82:	dcf2      	bgt.n	8006c6a <_printf_i+0x212>
 8006c84:	e7eb      	b.n	8006c5e <_printf_i+0x206>
 8006c86:	2500      	movs	r5, #0
 8006c88:	f104 0619 	add.w	r6, r4, #25
 8006c8c:	e7f5      	b.n	8006c7a <_printf_i+0x222>
 8006c8e:	bf00      	nop
 8006c90:	08008d76 	.word	0x08008d76
 8006c94:	08008d87 	.word	0x08008d87

08006c98 <std>:
 8006c98:	2300      	movs	r3, #0
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ca6:	6083      	str	r3, [r0, #8]
 8006ca8:	8181      	strh	r1, [r0, #12]
 8006caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cac:	81c2      	strh	r2, [r0, #14]
 8006cae:	6183      	str	r3, [r0, #24]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	305c      	adds	r0, #92	@ 0x5c
 8006cb6:	f000 f906 	bl	8006ec6 <memset>
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <std+0x58>)
 8006cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf4 <std+0x5c>)
 8006cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <std+0x60>)
 8006cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <std+0x64>)
 8006cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <std+0x68>)
 8006ccc:	6224      	str	r4, [r4, #32]
 8006cce:	429c      	cmp	r4, r3
 8006cd0:	d006      	beq.n	8006ce0 <std+0x48>
 8006cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cd6:	4294      	cmp	r4, r2
 8006cd8:	d002      	beq.n	8006ce0 <std+0x48>
 8006cda:	33d0      	adds	r3, #208	@ 0xd0
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	d105      	bne.n	8006cec <std+0x54>
 8006ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce8:	f000 b96a 	b.w	8006fc0 <__retarget_lock_init_recursive>
 8006cec:	bd10      	pop	{r4, pc}
 8006cee:	bf00      	nop
 8006cf0:	08006e41 	.word	0x08006e41
 8006cf4:	08006e63 	.word	0x08006e63
 8006cf8:	08006e9b 	.word	0x08006e9b
 8006cfc:	08006ebf 	.word	0x08006ebf
 8006d00:	240002e4 	.word	0x240002e4

08006d04 <stdio_exit_handler>:
 8006d04:	4a02      	ldr	r2, [pc, #8]	@ (8006d10 <stdio_exit_handler+0xc>)
 8006d06:	4903      	ldr	r1, [pc, #12]	@ (8006d14 <stdio_exit_handler+0x10>)
 8006d08:	4803      	ldr	r0, [pc, #12]	@ (8006d18 <stdio_exit_handler+0x14>)
 8006d0a:	f000 b869 	b.w	8006de0 <_fwalk_sglue>
 8006d0e:	bf00      	nop
 8006d10:	24000010 	.word	0x24000010
 8006d14:	08008815 	.word	0x08008815
 8006d18:	24000020 	.word	0x24000020

08006d1c <cleanup_stdio>:
 8006d1c:	6841      	ldr	r1, [r0, #4]
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <cleanup_stdio+0x34>)
 8006d20:	4299      	cmp	r1, r3
 8006d22:	b510      	push	{r4, lr}
 8006d24:	4604      	mov	r4, r0
 8006d26:	d001      	beq.n	8006d2c <cleanup_stdio+0x10>
 8006d28:	f001 fd74 	bl	8008814 <_fflush_r>
 8006d2c:	68a1      	ldr	r1, [r4, #8]
 8006d2e:	4b09      	ldr	r3, [pc, #36]	@ (8006d54 <cleanup_stdio+0x38>)
 8006d30:	4299      	cmp	r1, r3
 8006d32:	d002      	beq.n	8006d3a <cleanup_stdio+0x1e>
 8006d34:	4620      	mov	r0, r4
 8006d36:	f001 fd6d 	bl	8008814 <_fflush_r>
 8006d3a:	68e1      	ldr	r1, [r4, #12]
 8006d3c:	4b06      	ldr	r3, [pc, #24]	@ (8006d58 <cleanup_stdio+0x3c>)
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	d004      	beq.n	8006d4c <cleanup_stdio+0x30>
 8006d42:	4620      	mov	r0, r4
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d48:	f001 bd64 	b.w	8008814 <_fflush_r>
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	bf00      	nop
 8006d50:	240002e4 	.word	0x240002e4
 8006d54:	2400034c 	.word	0x2400034c
 8006d58:	240003b4 	.word	0x240003b4

08006d5c <global_stdio_init.part.0>:
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d8c <global_stdio_init.part.0+0x30>)
 8006d60:	4c0b      	ldr	r4, [pc, #44]	@ (8006d90 <global_stdio_init.part.0+0x34>)
 8006d62:	4a0c      	ldr	r2, [pc, #48]	@ (8006d94 <global_stdio_init.part.0+0x38>)
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	4620      	mov	r0, r4
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2104      	movs	r1, #4
 8006d6c:	f7ff ff94 	bl	8006c98 <std>
 8006d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d74:	2201      	movs	r2, #1
 8006d76:	2109      	movs	r1, #9
 8006d78:	f7ff ff8e 	bl	8006c98 <std>
 8006d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d80:	2202      	movs	r2, #2
 8006d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d86:	2112      	movs	r1, #18
 8006d88:	f7ff bf86 	b.w	8006c98 <std>
 8006d8c:	2400041c 	.word	0x2400041c
 8006d90:	240002e4 	.word	0x240002e4
 8006d94:	08006d05 	.word	0x08006d05

08006d98 <__sfp_lock_acquire>:
 8006d98:	4801      	ldr	r0, [pc, #4]	@ (8006da0 <__sfp_lock_acquire+0x8>)
 8006d9a:	f000 b912 	b.w	8006fc2 <__retarget_lock_acquire_recursive>
 8006d9e:	bf00      	nop
 8006da0:	24000425 	.word	0x24000425

08006da4 <__sfp_lock_release>:
 8006da4:	4801      	ldr	r0, [pc, #4]	@ (8006dac <__sfp_lock_release+0x8>)
 8006da6:	f000 b90d 	b.w	8006fc4 <__retarget_lock_release_recursive>
 8006daa:	bf00      	nop
 8006dac:	24000425 	.word	0x24000425

08006db0 <__sinit>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	4604      	mov	r4, r0
 8006db4:	f7ff fff0 	bl	8006d98 <__sfp_lock_acquire>
 8006db8:	6a23      	ldr	r3, [r4, #32]
 8006dba:	b11b      	cbz	r3, 8006dc4 <__sinit+0x14>
 8006dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc0:	f7ff bff0 	b.w	8006da4 <__sfp_lock_release>
 8006dc4:	4b04      	ldr	r3, [pc, #16]	@ (8006dd8 <__sinit+0x28>)
 8006dc6:	6223      	str	r3, [r4, #32]
 8006dc8:	4b04      	ldr	r3, [pc, #16]	@ (8006ddc <__sinit+0x2c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f5      	bne.n	8006dbc <__sinit+0xc>
 8006dd0:	f7ff ffc4 	bl	8006d5c <global_stdio_init.part.0>
 8006dd4:	e7f2      	b.n	8006dbc <__sinit+0xc>
 8006dd6:	bf00      	nop
 8006dd8:	08006d1d 	.word	0x08006d1d
 8006ddc:	2400041c 	.word	0x2400041c

08006de0 <_fwalk_sglue>:
 8006de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de4:	4607      	mov	r7, r0
 8006de6:	4688      	mov	r8, r1
 8006de8:	4614      	mov	r4, r2
 8006dea:	2600      	movs	r6, #0
 8006dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006df0:	f1b9 0901 	subs.w	r9, r9, #1
 8006df4:	d505      	bpl.n	8006e02 <_fwalk_sglue+0x22>
 8006df6:	6824      	ldr	r4, [r4, #0]
 8006df8:	2c00      	cmp	r4, #0
 8006dfa:	d1f7      	bne.n	8006dec <_fwalk_sglue+0xc>
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d907      	bls.n	8006e18 <_fwalk_sglue+0x38>
 8006e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	d003      	beq.n	8006e18 <_fwalk_sglue+0x38>
 8006e10:	4629      	mov	r1, r5
 8006e12:	4638      	mov	r0, r7
 8006e14:	47c0      	blx	r8
 8006e16:	4306      	orrs	r6, r0
 8006e18:	3568      	adds	r5, #104	@ 0x68
 8006e1a:	e7e9      	b.n	8006df0 <_fwalk_sglue+0x10>

08006e1c <iprintf>:
 8006e1c:	b40f      	push	{r0, r1, r2, r3}
 8006e1e:	b507      	push	{r0, r1, r2, lr}
 8006e20:	4906      	ldr	r1, [pc, #24]	@ (8006e3c <iprintf+0x20>)
 8006e22:	ab04      	add	r3, sp, #16
 8006e24:	6808      	ldr	r0, [r1, #0]
 8006e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e2a:	6881      	ldr	r1, [r0, #8]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	f001 fb55 	bl	80084dc <_vfiprintf_r>
 8006e32:	b003      	add	sp, #12
 8006e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e38:	b004      	add	sp, #16
 8006e3a:	4770      	bx	lr
 8006e3c:	2400001c 	.word	0x2400001c

08006e40 <__sread>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	460c      	mov	r4, r1
 8006e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e48:	f000 f86c 	bl	8006f24 <_read_r>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	bfab      	itete	ge
 8006e50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e52:	89a3      	ldrhlt	r3, [r4, #12]
 8006e54:	181b      	addge	r3, r3, r0
 8006e56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e5a:	bfac      	ite	ge
 8006e5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e5e:	81a3      	strhlt	r3, [r4, #12]
 8006e60:	bd10      	pop	{r4, pc}

08006e62 <__swrite>:
 8006e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e66:	461f      	mov	r7, r3
 8006e68:	898b      	ldrh	r3, [r1, #12]
 8006e6a:	05db      	lsls	r3, r3, #23
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	4616      	mov	r6, r2
 8006e72:	d505      	bpl.n	8006e80 <__swrite+0x1e>
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	2302      	movs	r3, #2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f000 f840 	bl	8006f00 <_lseek_r>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	4628      	mov	r0, r5
 8006e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	f000 b857 	b.w	8006f48 <_write_r>

08006e9a <__sseek>:
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea2:	f000 f82d 	bl	8006f00 <_lseek_r>
 8006ea6:	1c43      	adds	r3, r0, #1
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	bf15      	itete	ne
 8006eac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eb6:	81a3      	strheq	r3, [r4, #12]
 8006eb8:	bf18      	it	ne
 8006eba:	81a3      	strhne	r3, [r4, #12]
 8006ebc:	bd10      	pop	{r4, pc}

08006ebe <__sclose>:
 8006ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec2:	f000 b80d 	b.w	8006ee0 <_close_r>

08006ec6 <memset>:
 8006ec6:	4402      	add	r2, r0
 8006ec8:	4603      	mov	r3, r0
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d100      	bne.n	8006ed0 <memset+0xa>
 8006ece:	4770      	bx	lr
 8006ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed4:	e7f9      	b.n	8006eca <memset+0x4>
	...

08006ed8 <_localeconv_r>:
 8006ed8:	4800      	ldr	r0, [pc, #0]	@ (8006edc <_localeconv_r+0x4>)
 8006eda:	4770      	bx	lr
 8006edc:	2400015c 	.word	0x2400015c

08006ee0 <_close_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d06      	ldr	r5, [pc, #24]	@ (8006efc <_close_r+0x1c>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	f7f9 ff4b 	bl	8000d86 <_close>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_close_r+0x1a>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_close_r+0x1a>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	24000420 	.word	0x24000420

08006f00 <_lseek_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	@ (8006f20 <_lseek_r+0x20>)
 8006f04:	4604      	mov	r4, r0
 8006f06:	4608      	mov	r0, r1
 8006f08:	4611      	mov	r1, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	602a      	str	r2, [r5, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7f9 ff60 	bl	8000dd4 <_lseek>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_lseek_r+0x1e>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_lseek_r+0x1e>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	24000420 	.word	0x24000420

08006f24 <_read_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	@ (8006f44 <_read_r+0x20>)
 8006f28:	4604      	mov	r4, r0
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	602a      	str	r2, [r5, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f7f9 ff0a 	bl	8000d4c <_read>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_read_r+0x1e>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_read_r+0x1e>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	24000420 	.word	0x24000420

08006f48 <_write_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d07      	ldr	r5, [pc, #28]	@ (8006f68 <_write_r+0x20>)
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7f9 fbaa 	bl	80006b0 <_write>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_write_r+0x1e>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_write_r+0x1e>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	24000420 	.word	0x24000420

08006f6c <__errno>:
 8006f6c:	4b01      	ldr	r3, [pc, #4]	@ (8006f74 <__errno+0x8>)
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	2400001c 	.word	0x2400001c

08006f78 <__libc_init_array>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fb0 <__libc_init_array+0x38>)
 8006f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fb4 <__libc_init_array+0x3c>)
 8006f7e:	1b64      	subs	r4, r4, r5
 8006f80:	10a4      	asrs	r4, r4, #2
 8006f82:	2600      	movs	r6, #0
 8006f84:	42a6      	cmp	r6, r4
 8006f86:	d109      	bne.n	8006f9c <__libc_init_array+0x24>
 8006f88:	4d0b      	ldr	r5, [pc, #44]	@ (8006fb8 <__libc_init_array+0x40>)
 8006f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006fbc <__libc_init_array+0x44>)
 8006f8c:	f001 fe50 	bl	8008c30 <_init>
 8006f90:	1b64      	subs	r4, r4, r5
 8006f92:	10a4      	asrs	r4, r4, #2
 8006f94:	2600      	movs	r6, #0
 8006f96:	42a6      	cmp	r6, r4
 8006f98:	d105      	bne.n	8006fa6 <__libc_init_array+0x2e>
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa0:	4798      	blx	r3
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7ee      	b.n	8006f84 <__libc_init_array+0xc>
 8006fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006faa:	4798      	blx	r3
 8006fac:	3601      	adds	r6, #1
 8006fae:	e7f2      	b.n	8006f96 <__libc_init_array+0x1e>
 8006fb0:	080090e0 	.word	0x080090e0
 8006fb4:	080090e0 	.word	0x080090e0
 8006fb8:	080090e0 	.word	0x080090e0
 8006fbc:	080090e4 	.word	0x080090e4

08006fc0 <__retarget_lock_init_recursive>:
 8006fc0:	4770      	bx	lr

08006fc2 <__retarget_lock_acquire_recursive>:
 8006fc2:	4770      	bx	lr

08006fc4 <__retarget_lock_release_recursive>:
 8006fc4:	4770      	bx	lr

08006fc6 <quorem>:
 8006fc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	6903      	ldr	r3, [r0, #16]
 8006fcc:	690c      	ldr	r4, [r1, #16]
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	db7e      	blt.n	80070d2 <quorem+0x10c>
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	f101 0814 	add.w	r8, r1, #20
 8006fda:	00a3      	lsls	r3, r4, #2
 8006fdc:	f100 0514 	add.w	r5, r0, #20
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ffc:	d32e      	bcc.n	800705c <quorem+0x96>
 8006ffe:	f04f 0a00 	mov.w	sl, #0
 8007002:	46c4      	mov	ip, r8
 8007004:	46ae      	mov	lr, r5
 8007006:	46d3      	mov	fp, sl
 8007008:	f85c 3b04 	ldr.w	r3, [ip], #4
 800700c:	b298      	uxth	r0, r3
 800700e:	fb06 a000 	mla	r0, r6, r0, sl
 8007012:	0c02      	lsrs	r2, r0, #16
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	fb06 2303 	mla	r3, r6, r3, r2
 800701a:	f8de 2000 	ldr.w	r2, [lr]
 800701e:	b280      	uxth	r0, r0
 8007020:	b292      	uxth	r2, r2
 8007022:	1a12      	subs	r2, r2, r0
 8007024:	445a      	add	r2, fp
 8007026:	f8de 0000 	ldr.w	r0, [lr]
 800702a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800702e:	b29b      	uxth	r3, r3
 8007030:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007034:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007038:	b292      	uxth	r2, r2
 800703a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800703e:	45e1      	cmp	r9, ip
 8007040:	f84e 2b04 	str.w	r2, [lr], #4
 8007044:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007048:	d2de      	bcs.n	8007008 <quorem+0x42>
 800704a:	9b00      	ldr	r3, [sp, #0]
 800704c:	58eb      	ldr	r3, [r5, r3]
 800704e:	b92b      	cbnz	r3, 800705c <quorem+0x96>
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	3b04      	subs	r3, #4
 8007054:	429d      	cmp	r5, r3
 8007056:	461a      	mov	r2, r3
 8007058:	d32f      	bcc.n	80070ba <quorem+0xf4>
 800705a:	613c      	str	r4, [r7, #16]
 800705c:	4638      	mov	r0, r7
 800705e:	f001 f90b 	bl	8008278 <__mcmp>
 8007062:	2800      	cmp	r0, #0
 8007064:	db25      	blt.n	80070b2 <quorem+0xec>
 8007066:	4629      	mov	r1, r5
 8007068:	2000      	movs	r0, #0
 800706a:	f858 2b04 	ldr.w	r2, [r8], #4
 800706e:	f8d1 c000 	ldr.w	ip, [r1]
 8007072:	fa1f fe82 	uxth.w	lr, r2
 8007076:	fa1f f38c 	uxth.w	r3, ip
 800707a:	eba3 030e 	sub.w	r3, r3, lr
 800707e:	4403      	add	r3, r0
 8007080:	0c12      	lsrs	r2, r2, #16
 8007082:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007086:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800708a:	b29b      	uxth	r3, r3
 800708c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007090:	45c1      	cmp	r9, r8
 8007092:	f841 3b04 	str.w	r3, [r1], #4
 8007096:	ea4f 4022 	mov.w	r0, r2, asr #16
 800709a:	d2e6      	bcs.n	800706a <quorem+0xa4>
 800709c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a4:	b922      	cbnz	r2, 80070b0 <quorem+0xea>
 80070a6:	3b04      	subs	r3, #4
 80070a8:	429d      	cmp	r5, r3
 80070aa:	461a      	mov	r2, r3
 80070ac:	d30b      	bcc.n	80070c6 <quorem+0x100>
 80070ae:	613c      	str	r4, [r7, #16]
 80070b0:	3601      	adds	r6, #1
 80070b2:	4630      	mov	r0, r6
 80070b4:	b003      	add	sp, #12
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	3b04      	subs	r3, #4
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d1cb      	bne.n	800705a <quorem+0x94>
 80070c2:	3c01      	subs	r4, #1
 80070c4:	e7c6      	b.n	8007054 <quorem+0x8e>
 80070c6:	6812      	ldr	r2, [r2, #0]
 80070c8:	3b04      	subs	r3, #4
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	d1ef      	bne.n	80070ae <quorem+0xe8>
 80070ce:	3c01      	subs	r4, #1
 80070d0:	e7ea      	b.n	80070a8 <quorem+0xe2>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e7ee      	b.n	80070b4 <quorem+0xee>
	...

080070d8 <_dtoa_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	ed2d 8b02 	vpush	{d8}
 80070e0:	69c7      	ldr	r7, [r0, #28]
 80070e2:	b091      	sub	sp, #68	@ 0x44
 80070e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070e8:	ec55 4b10 	vmov	r4, r5, d0
 80070ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80070ee:	9107      	str	r1, [sp, #28]
 80070f0:	4681      	mov	r9, r0
 80070f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80070f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80070f6:	b97f      	cbnz	r7, 8007118 <_dtoa_r+0x40>
 80070f8:	2010      	movs	r0, #16
 80070fa:	f000 fd8d 	bl	8007c18 <malloc>
 80070fe:	4602      	mov	r2, r0
 8007100:	f8c9 001c 	str.w	r0, [r9, #28]
 8007104:	b920      	cbnz	r0, 8007110 <_dtoa_r+0x38>
 8007106:	4ba0      	ldr	r3, [pc, #640]	@ (8007388 <_dtoa_r+0x2b0>)
 8007108:	21ef      	movs	r1, #239	@ 0xef
 800710a:	48a0      	ldr	r0, [pc, #640]	@ (800738c <_dtoa_r+0x2b4>)
 800710c:	f001 fc5c 	bl	80089c8 <__assert_func>
 8007110:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007114:	6007      	str	r7, [r0, #0]
 8007116:	60c7      	str	r7, [r0, #12]
 8007118:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800711c:	6819      	ldr	r1, [r3, #0]
 800711e:	b159      	cbz	r1, 8007138 <_dtoa_r+0x60>
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	604a      	str	r2, [r1, #4]
 8007124:	2301      	movs	r3, #1
 8007126:	4093      	lsls	r3, r2
 8007128:	608b      	str	r3, [r1, #8]
 800712a:	4648      	mov	r0, r9
 800712c:	f000 fe6a 	bl	8007e04 <_Bfree>
 8007130:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	1e2b      	subs	r3, r5, #0
 800713a:	bfbb      	ittet	lt
 800713c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007140:	9303      	strlt	r3, [sp, #12]
 8007142:	2300      	movge	r3, #0
 8007144:	2201      	movlt	r2, #1
 8007146:	bfac      	ite	ge
 8007148:	6033      	strge	r3, [r6, #0]
 800714a:	6032      	strlt	r2, [r6, #0]
 800714c:	4b90      	ldr	r3, [pc, #576]	@ (8007390 <_dtoa_r+0x2b8>)
 800714e:	9e03      	ldr	r6, [sp, #12]
 8007150:	43b3      	bics	r3, r6
 8007152:	d110      	bne.n	8007176 <_dtoa_r+0x9e>
 8007154:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007156:	f242 730f 	movw	r3, #9999	@ 0x270f
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007160:	4323      	orrs	r3, r4
 8007162:	f000 84de 	beq.w	8007b22 <_dtoa_r+0xa4a>
 8007166:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007168:	4f8a      	ldr	r7, [pc, #552]	@ (8007394 <_dtoa_r+0x2bc>)
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 84e0 	beq.w	8007b30 <_dtoa_r+0xa58>
 8007170:	1cfb      	adds	r3, r7, #3
 8007172:	f000 bcdb 	b.w	8007b2c <_dtoa_r+0xa54>
 8007176:	ed9d 8b02 	vldr	d8, [sp, #8]
 800717a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800717e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007182:	d10a      	bne.n	800719a <_dtoa_r+0xc2>
 8007184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007186:	2301      	movs	r3, #1
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800718c:	b113      	cbz	r3, 8007194 <_dtoa_r+0xbc>
 800718e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007190:	4b81      	ldr	r3, [pc, #516]	@ (8007398 <_dtoa_r+0x2c0>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4f81      	ldr	r7, [pc, #516]	@ (800739c <_dtoa_r+0x2c4>)
 8007196:	f000 bccb 	b.w	8007b30 <_dtoa_r+0xa58>
 800719a:	aa0e      	add	r2, sp, #56	@ 0x38
 800719c:	a90f      	add	r1, sp, #60	@ 0x3c
 800719e:	4648      	mov	r0, r9
 80071a0:	eeb0 0b48 	vmov.f64	d0, d8
 80071a4:	f001 f918 	bl	80083d8 <__d2b>
 80071a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80071ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071ae:	9001      	str	r0, [sp, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d045      	beq.n	8007240 <_dtoa_r+0x168>
 80071b4:	eeb0 7b48 	vmov.f64	d7, d8
 80071b8:	ee18 1a90 	vmov	r1, s17
 80071bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80071c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80071c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80071c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80071cc:	2500      	movs	r5, #0
 80071ce:	ee07 1a90 	vmov	s15, r1
 80071d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80071d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007370 <_dtoa_r+0x298>
 80071da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80071de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007378 <_dtoa_r+0x2a0>
 80071e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80071e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007380 <_dtoa_r+0x2a8>
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80071f2:	eeb0 7b46 	vmov.f64	d7, d6
 80071f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80071fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80071fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007206:	ee16 8a90 	vmov	r8, s13
 800720a:	d508      	bpl.n	800721e <_dtoa_r+0x146>
 800720c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007210:	eeb4 6b47 	vcmp.f64	d6, d7
 8007214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007218:	bf18      	it	ne
 800721a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800721e:	f1b8 0f16 	cmp.w	r8, #22
 8007222:	d82b      	bhi.n	800727c <_dtoa_r+0x1a4>
 8007224:	495e      	ldr	r1, [pc, #376]	@ (80073a0 <_dtoa_r+0x2c8>)
 8007226:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800722a:	ed91 7b00 	vldr	d7, [r1]
 800722e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007236:	d501      	bpl.n	800723c <_dtoa_r+0x164>
 8007238:	f108 38ff 	add.w	r8, r8, #4294967295
 800723c:	2100      	movs	r1, #0
 800723e:	e01e      	b.n	800727e <_dtoa_r+0x1a6>
 8007240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007242:	4413      	add	r3, r2
 8007244:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007248:	2920      	cmp	r1, #32
 800724a:	bfc1      	itttt	gt
 800724c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007250:	408e      	lslgt	r6, r1
 8007252:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007256:	fa24 f101 	lsrgt.w	r1, r4, r1
 800725a:	bfd6      	itet	le
 800725c:	f1c1 0120 	rsble	r1, r1, #32
 8007260:	4331      	orrgt	r1, r6
 8007262:	fa04 f101 	lslle.w	r1, r4, r1
 8007266:	ee07 1a90 	vmov	s15, r1
 800726a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800726e:	3b01      	subs	r3, #1
 8007270:	ee17 1a90 	vmov	r1, s15
 8007274:	2501      	movs	r5, #1
 8007276:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800727a:	e7a8      	b.n	80071ce <_dtoa_r+0xf6>
 800727c:	2101      	movs	r1, #1
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	1e53      	subs	r3, r2, #1
 8007282:	9306      	str	r3, [sp, #24]
 8007284:	bf45      	ittet	mi
 8007286:	f1c2 0301 	rsbmi	r3, r2, #1
 800728a:	9305      	strmi	r3, [sp, #20]
 800728c:	2300      	movpl	r3, #0
 800728e:	2300      	movmi	r3, #0
 8007290:	bf4c      	ite	mi
 8007292:	9306      	strmi	r3, [sp, #24]
 8007294:	9305      	strpl	r3, [sp, #20]
 8007296:	f1b8 0f00 	cmp.w	r8, #0
 800729a:	910c      	str	r1, [sp, #48]	@ 0x30
 800729c:	db18      	blt.n	80072d0 <_dtoa_r+0x1f8>
 800729e:	9b06      	ldr	r3, [sp, #24]
 80072a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80072a4:	4443      	add	r3, r8
 80072a6:	9306      	str	r3, [sp, #24]
 80072a8:	2300      	movs	r3, #0
 80072aa:	9a07      	ldr	r2, [sp, #28]
 80072ac:	2a09      	cmp	r2, #9
 80072ae:	d849      	bhi.n	8007344 <_dtoa_r+0x26c>
 80072b0:	2a05      	cmp	r2, #5
 80072b2:	bfc4      	itt	gt
 80072b4:	3a04      	subgt	r2, #4
 80072b6:	9207      	strgt	r2, [sp, #28]
 80072b8:	9a07      	ldr	r2, [sp, #28]
 80072ba:	f1a2 0202 	sub.w	r2, r2, #2
 80072be:	bfcc      	ite	gt
 80072c0:	2400      	movgt	r4, #0
 80072c2:	2401      	movle	r4, #1
 80072c4:	2a03      	cmp	r2, #3
 80072c6:	d848      	bhi.n	800735a <_dtoa_r+0x282>
 80072c8:	e8df f002 	tbb	[pc, r2]
 80072cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80072d0:	9b05      	ldr	r3, [sp, #20]
 80072d2:	2200      	movs	r2, #0
 80072d4:	eba3 0308 	sub.w	r3, r3, r8
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	920a      	str	r2, [sp, #40]	@ 0x28
 80072dc:	f1c8 0300 	rsb	r3, r8, #0
 80072e0:	e7e3      	b.n	80072aa <_dtoa_r+0x1d2>
 80072e2:	2200      	movs	r2, #0
 80072e4:	9208      	str	r2, [sp, #32]
 80072e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e8:	2a00      	cmp	r2, #0
 80072ea:	dc39      	bgt.n	8007360 <_dtoa_r+0x288>
 80072ec:	f04f 0b01 	mov.w	fp, #1
 80072f0:	46da      	mov	sl, fp
 80072f2:	465a      	mov	r2, fp
 80072f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80072f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80072fc:	2100      	movs	r1, #0
 80072fe:	2004      	movs	r0, #4
 8007300:	f100 0614 	add.w	r6, r0, #20
 8007304:	4296      	cmp	r6, r2
 8007306:	d930      	bls.n	800736a <_dtoa_r+0x292>
 8007308:	6079      	str	r1, [r7, #4]
 800730a:	4648      	mov	r0, r9
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	f000 fd39 	bl	8007d84 <_Balloc>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	4607      	mov	r7, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d146      	bne.n	80073a8 <_dtoa_r+0x2d0>
 800731a:	4b22      	ldr	r3, [pc, #136]	@ (80073a4 <_dtoa_r+0x2cc>)
 800731c:	4602      	mov	r2, r0
 800731e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007322:	e6f2      	b.n	800710a <_dtoa_r+0x32>
 8007324:	2201      	movs	r2, #1
 8007326:	e7dd      	b.n	80072e4 <_dtoa_r+0x20c>
 8007328:	2200      	movs	r2, #0
 800732a:	9208      	str	r2, [sp, #32]
 800732c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800732e:	eb08 0b02 	add.w	fp, r8, r2
 8007332:	f10b 0a01 	add.w	sl, fp, #1
 8007336:	4652      	mov	r2, sl
 8007338:	2a01      	cmp	r2, #1
 800733a:	bfb8      	it	lt
 800733c:	2201      	movlt	r2, #1
 800733e:	e7db      	b.n	80072f8 <_dtoa_r+0x220>
 8007340:	2201      	movs	r2, #1
 8007342:	e7f2      	b.n	800732a <_dtoa_r+0x252>
 8007344:	2401      	movs	r4, #1
 8007346:	2200      	movs	r2, #0
 8007348:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800734c:	f04f 3bff 	mov.w	fp, #4294967295
 8007350:	2100      	movs	r1, #0
 8007352:	46da      	mov	sl, fp
 8007354:	2212      	movs	r2, #18
 8007356:	9109      	str	r1, [sp, #36]	@ 0x24
 8007358:	e7ce      	b.n	80072f8 <_dtoa_r+0x220>
 800735a:	2201      	movs	r2, #1
 800735c:	9208      	str	r2, [sp, #32]
 800735e:	e7f5      	b.n	800734c <_dtoa_r+0x274>
 8007360:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007364:	46da      	mov	sl, fp
 8007366:	465a      	mov	r2, fp
 8007368:	e7c6      	b.n	80072f8 <_dtoa_r+0x220>
 800736a:	3101      	adds	r1, #1
 800736c:	0040      	lsls	r0, r0, #1
 800736e:	e7c7      	b.n	8007300 <_dtoa_r+0x228>
 8007370:	636f4361 	.word	0x636f4361
 8007374:	3fd287a7 	.word	0x3fd287a7
 8007378:	8b60c8b3 	.word	0x8b60c8b3
 800737c:	3fc68a28 	.word	0x3fc68a28
 8007380:	509f79fb 	.word	0x509f79fb
 8007384:	3fd34413 	.word	0x3fd34413
 8007388:	08008da5 	.word	0x08008da5
 800738c:	08008dbc 	.word	0x08008dbc
 8007390:	7ff00000 	.word	0x7ff00000
 8007394:	08008da1 	.word	0x08008da1
 8007398:	08008d75 	.word	0x08008d75
 800739c:	08008d74 	.word	0x08008d74
 80073a0:	08008eb8 	.word	0x08008eb8
 80073a4:	08008e14 	.word	0x08008e14
 80073a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80073ac:	f1ba 0f0e 	cmp.w	sl, #14
 80073b0:	6010      	str	r0, [r2, #0]
 80073b2:	d86f      	bhi.n	8007494 <_dtoa_r+0x3bc>
 80073b4:	2c00      	cmp	r4, #0
 80073b6:	d06d      	beq.n	8007494 <_dtoa_r+0x3bc>
 80073b8:	f1b8 0f00 	cmp.w	r8, #0
 80073bc:	f340 80c2 	ble.w	8007544 <_dtoa_r+0x46c>
 80073c0:	4aca      	ldr	r2, [pc, #808]	@ (80076ec <_dtoa_r+0x614>)
 80073c2:	f008 010f 	and.w	r1, r8, #15
 80073c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80073ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80073ce:	ed92 7b00 	vldr	d7, [r2]
 80073d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80073d6:	f000 80a9 	beq.w	800752c <_dtoa_r+0x454>
 80073da:	4ac5      	ldr	r2, [pc, #788]	@ (80076f0 <_dtoa_r+0x618>)
 80073dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80073e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80073e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80073e8:	f001 010f 	and.w	r1, r1, #15
 80073ec:	2203      	movs	r2, #3
 80073ee:	48c0      	ldr	r0, [pc, #768]	@ (80076f0 <_dtoa_r+0x618>)
 80073f0:	2900      	cmp	r1, #0
 80073f2:	f040 809d 	bne.w	8007530 <_dtoa_r+0x458>
 80073f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80073fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80073fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007402:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007408:	2900      	cmp	r1, #0
 800740a:	f000 80c1 	beq.w	8007590 <_dtoa_r+0x4b8>
 800740e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007412:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741a:	f140 80b9 	bpl.w	8007590 <_dtoa_r+0x4b8>
 800741e:	f1ba 0f00 	cmp.w	sl, #0
 8007422:	f000 80b5 	beq.w	8007590 <_dtoa_r+0x4b8>
 8007426:	f1bb 0f00 	cmp.w	fp, #0
 800742a:	dd31      	ble.n	8007490 <_dtoa_r+0x3b8>
 800742c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007430:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007434:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007438:	f108 31ff 	add.w	r1, r8, #4294967295
 800743c:	9104      	str	r1, [sp, #16]
 800743e:	3201      	adds	r2, #1
 8007440:	465c      	mov	r4, fp
 8007442:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007446:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800744a:	ee07 2a90 	vmov	s15, r2
 800744e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007452:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007456:	ee15 2a90 	vmov	r2, s11
 800745a:	ec51 0b15 	vmov	r0, r1, d5
 800745e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007462:	2c00      	cmp	r4, #0
 8007464:	f040 8098 	bne.w	8007598 <_dtoa_r+0x4c0>
 8007468:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800746c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007470:	ec41 0b17 	vmov	d7, r0, r1
 8007474:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747c:	f300 8261 	bgt.w	8007942 <_dtoa_r+0x86a>
 8007480:	eeb1 7b47 	vneg.f64	d7, d7
 8007484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748c:	f100 80f5 	bmi.w	800767a <_dtoa_r+0x5a2>
 8007490:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007494:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007496:	2a00      	cmp	r2, #0
 8007498:	f2c0 812c 	blt.w	80076f4 <_dtoa_r+0x61c>
 800749c:	f1b8 0f0e 	cmp.w	r8, #14
 80074a0:	f300 8128 	bgt.w	80076f4 <_dtoa_r+0x61c>
 80074a4:	4b91      	ldr	r3, [pc, #580]	@ (80076ec <_dtoa_r+0x614>)
 80074a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074aa:	ed93 6b00 	vldr	d6, [r3]
 80074ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	da03      	bge.n	80074bc <_dtoa_r+0x3e4>
 80074b4:	f1ba 0f00 	cmp.w	sl, #0
 80074b8:	f340 80d2 	ble.w	8007660 <_dtoa_r+0x588>
 80074bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80074c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074c4:	463e      	mov	r6, r7
 80074c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80074ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80074ce:	ee15 3a10 	vmov	r3, s10
 80074d2:	3330      	adds	r3, #48	@ 0x30
 80074d4:	f806 3b01 	strb.w	r3, [r6], #1
 80074d8:	1bf3      	subs	r3, r6, r7
 80074da:	459a      	cmp	sl, r3
 80074dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80074e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80074e4:	f040 80f8 	bne.w	80076d8 <_dtoa_r+0x600>
 80074e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80074ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	f300 80dd 	bgt.w	80076b2 <_dtoa_r+0x5da>
 80074f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80074fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007500:	d104      	bne.n	800750c <_dtoa_r+0x434>
 8007502:	ee15 3a10 	vmov	r3, s10
 8007506:	07db      	lsls	r3, r3, #31
 8007508:	f100 80d3 	bmi.w	80076b2 <_dtoa_r+0x5da>
 800750c:	9901      	ldr	r1, [sp, #4]
 800750e:	4648      	mov	r0, r9
 8007510:	f000 fc78 	bl	8007e04 <_Bfree>
 8007514:	2300      	movs	r3, #0
 8007516:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007518:	7033      	strb	r3, [r6, #0]
 800751a:	f108 0301 	add.w	r3, r8, #1
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8304 	beq.w	8007b30 <_dtoa_r+0xa58>
 8007528:	601e      	str	r6, [r3, #0]
 800752a:	e301      	b.n	8007b30 <_dtoa_r+0xa58>
 800752c:	2202      	movs	r2, #2
 800752e:	e75e      	b.n	80073ee <_dtoa_r+0x316>
 8007530:	07cc      	lsls	r4, r1, #31
 8007532:	d504      	bpl.n	800753e <_dtoa_r+0x466>
 8007534:	ed90 6b00 	vldr	d6, [r0]
 8007538:	3201      	adds	r2, #1
 800753a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800753e:	1049      	asrs	r1, r1, #1
 8007540:	3008      	adds	r0, #8
 8007542:	e755      	b.n	80073f0 <_dtoa_r+0x318>
 8007544:	d022      	beq.n	800758c <_dtoa_r+0x4b4>
 8007546:	f1c8 0100 	rsb	r1, r8, #0
 800754a:	4a68      	ldr	r2, [pc, #416]	@ (80076ec <_dtoa_r+0x614>)
 800754c:	f001 000f 	and.w	r0, r1, #15
 8007550:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007554:	ed92 7b00 	vldr	d7, [r2]
 8007558:	ee28 7b07 	vmul.f64	d7, d8, d7
 800755c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007560:	4863      	ldr	r0, [pc, #396]	@ (80076f0 <_dtoa_r+0x618>)
 8007562:	1109      	asrs	r1, r1, #4
 8007564:	2400      	movs	r4, #0
 8007566:	2202      	movs	r2, #2
 8007568:	b929      	cbnz	r1, 8007576 <_dtoa_r+0x49e>
 800756a:	2c00      	cmp	r4, #0
 800756c:	f43f af49 	beq.w	8007402 <_dtoa_r+0x32a>
 8007570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007574:	e745      	b.n	8007402 <_dtoa_r+0x32a>
 8007576:	07ce      	lsls	r6, r1, #31
 8007578:	d505      	bpl.n	8007586 <_dtoa_r+0x4ae>
 800757a:	ed90 6b00 	vldr	d6, [r0]
 800757e:	3201      	adds	r2, #1
 8007580:	2401      	movs	r4, #1
 8007582:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007586:	1049      	asrs	r1, r1, #1
 8007588:	3008      	adds	r0, #8
 800758a:	e7ed      	b.n	8007568 <_dtoa_r+0x490>
 800758c:	2202      	movs	r2, #2
 800758e:	e738      	b.n	8007402 <_dtoa_r+0x32a>
 8007590:	f8cd 8010 	str.w	r8, [sp, #16]
 8007594:	4654      	mov	r4, sl
 8007596:	e754      	b.n	8007442 <_dtoa_r+0x36a>
 8007598:	4a54      	ldr	r2, [pc, #336]	@ (80076ec <_dtoa_r+0x614>)
 800759a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800759e:	ed12 4b02 	vldr	d4, [r2, #-8]
 80075a2:	9a08      	ldr	r2, [sp, #32]
 80075a4:	ec41 0b17 	vmov	d7, r0, r1
 80075a8:	443c      	add	r4, r7
 80075aa:	b34a      	cbz	r2, 8007600 <_dtoa_r+0x528>
 80075ac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80075b0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80075b4:	463e      	mov	r6, r7
 80075b6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80075ba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80075be:	ee35 7b47 	vsub.f64	d7, d5, d7
 80075c2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80075c6:	ee14 2a90 	vmov	r2, s9
 80075ca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80075ce:	3230      	adds	r2, #48	@ 0x30
 80075d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80075d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075dc:	f806 2b01 	strb.w	r2, [r6], #1
 80075e0:	d438      	bmi.n	8007654 <_dtoa_r+0x57c>
 80075e2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80075e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	d462      	bmi.n	80076b6 <_dtoa_r+0x5de>
 80075f0:	42a6      	cmp	r6, r4
 80075f2:	f43f af4d 	beq.w	8007490 <_dtoa_r+0x3b8>
 80075f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80075fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80075fe:	e7e0      	b.n	80075c2 <_dtoa_r+0x4ea>
 8007600:	4621      	mov	r1, r4
 8007602:	463e      	mov	r6, r7
 8007604:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007608:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800760c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007610:	ee14 2a90 	vmov	r2, s9
 8007614:	3230      	adds	r2, #48	@ 0x30
 8007616:	f806 2b01 	strb.w	r2, [r6], #1
 800761a:	42a6      	cmp	r6, r4
 800761c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007620:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007624:	d119      	bne.n	800765a <_dtoa_r+0x582>
 8007626:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800762a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800762e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007636:	dc3e      	bgt.n	80076b6 <_dtoa_r+0x5de>
 8007638:	ee35 5b47 	vsub.f64	d5, d5, d7
 800763c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	f57f af24 	bpl.w	8007490 <_dtoa_r+0x3b8>
 8007648:	460e      	mov	r6, r1
 800764a:	3901      	subs	r1, #1
 800764c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007650:	2b30      	cmp	r3, #48	@ 0x30
 8007652:	d0f9      	beq.n	8007648 <_dtoa_r+0x570>
 8007654:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007658:	e758      	b.n	800750c <_dtoa_r+0x434>
 800765a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800765e:	e7d5      	b.n	800760c <_dtoa_r+0x534>
 8007660:	d10b      	bne.n	800767a <_dtoa_r+0x5a2>
 8007662:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007666:	ee26 6b07 	vmul.f64	d6, d6, d7
 800766a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800766e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007676:	f2c0 8161 	blt.w	800793c <_dtoa_r+0x864>
 800767a:	2400      	movs	r4, #0
 800767c:	4625      	mov	r5, r4
 800767e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007680:	43db      	mvns	r3, r3
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	463e      	mov	r6, r7
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	4621      	mov	r1, r4
 800768c:	4648      	mov	r0, r9
 800768e:	f000 fbb9 	bl	8007e04 <_Bfree>
 8007692:	2d00      	cmp	r5, #0
 8007694:	d0de      	beq.n	8007654 <_dtoa_r+0x57c>
 8007696:	f1b8 0f00 	cmp.w	r8, #0
 800769a:	d005      	beq.n	80076a8 <_dtoa_r+0x5d0>
 800769c:	45a8      	cmp	r8, r5
 800769e:	d003      	beq.n	80076a8 <_dtoa_r+0x5d0>
 80076a0:	4641      	mov	r1, r8
 80076a2:	4648      	mov	r0, r9
 80076a4:	f000 fbae 	bl	8007e04 <_Bfree>
 80076a8:	4629      	mov	r1, r5
 80076aa:	4648      	mov	r0, r9
 80076ac:	f000 fbaa 	bl	8007e04 <_Bfree>
 80076b0:	e7d0      	b.n	8007654 <_dtoa_r+0x57c>
 80076b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80076b6:	4633      	mov	r3, r6
 80076b8:	461e      	mov	r6, r3
 80076ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076be:	2a39      	cmp	r2, #57	@ 0x39
 80076c0:	d106      	bne.n	80076d0 <_dtoa_r+0x5f8>
 80076c2:	429f      	cmp	r7, r3
 80076c4:	d1f8      	bne.n	80076b8 <_dtoa_r+0x5e0>
 80076c6:	9a04      	ldr	r2, [sp, #16]
 80076c8:	3201      	adds	r2, #1
 80076ca:	9204      	str	r2, [sp, #16]
 80076cc:	2230      	movs	r2, #48	@ 0x30
 80076ce:	703a      	strb	r2, [r7, #0]
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	3201      	adds	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e7bd      	b.n	8007654 <_dtoa_r+0x57c>
 80076d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e4:	f47f aeef 	bne.w	80074c6 <_dtoa_r+0x3ee>
 80076e8:	e710      	b.n	800750c <_dtoa_r+0x434>
 80076ea:	bf00      	nop
 80076ec:	08008eb8 	.word	0x08008eb8
 80076f0:	08008e90 	.word	0x08008e90
 80076f4:	9908      	ldr	r1, [sp, #32]
 80076f6:	2900      	cmp	r1, #0
 80076f8:	f000 80e3 	beq.w	80078c2 <_dtoa_r+0x7ea>
 80076fc:	9907      	ldr	r1, [sp, #28]
 80076fe:	2901      	cmp	r1, #1
 8007700:	f300 80c8 	bgt.w	8007894 <_dtoa_r+0x7bc>
 8007704:	2d00      	cmp	r5, #0
 8007706:	f000 80c1 	beq.w	800788c <_dtoa_r+0x7b4>
 800770a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800770e:	9e05      	ldr	r6, [sp, #20]
 8007710:	461c      	mov	r4, r3
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	4413      	add	r3, r2
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	2101      	movs	r1, #1
 800771e:	4413      	add	r3, r2
 8007720:	4648      	mov	r0, r9
 8007722:	9306      	str	r3, [sp, #24]
 8007724:	f000 fc22 	bl	8007f6c <__i2b>
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	4605      	mov	r5, r0
 800772c:	b166      	cbz	r6, 8007748 <_dtoa_r+0x670>
 800772e:	9a06      	ldr	r2, [sp, #24]
 8007730:	2a00      	cmp	r2, #0
 8007732:	dd09      	ble.n	8007748 <_dtoa_r+0x670>
 8007734:	42b2      	cmp	r2, r6
 8007736:	9905      	ldr	r1, [sp, #20]
 8007738:	bfa8      	it	ge
 800773a:	4632      	movge	r2, r6
 800773c:	1a89      	subs	r1, r1, r2
 800773e:	9105      	str	r1, [sp, #20]
 8007740:	9906      	ldr	r1, [sp, #24]
 8007742:	1ab6      	subs	r6, r6, r2
 8007744:	1a8a      	subs	r2, r1, r2
 8007746:	9206      	str	r2, [sp, #24]
 8007748:	b1fb      	cbz	r3, 800778a <_dtoa_r+0x6b2>
 800774a:	9a08      	ldr	r2, [sp, #32]
 800774c:	2a00      	cmp	r2, #0
 800774e:	f000 80bc 	beq.w	80078ca <_dtoa_r+0x7f2>
 8007752:	b19c      	cbz	r4, 800777c <_dtoa_r+0x6a4>
 8007754:	4629      	mov	r1, r5
 8007756:	4622      	mov	r2, r4
 8007758:	4648      	mov	r0, r9
 800775a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800775c:	f000 fcc6 	bl	80080ec <__pow5mult>
 8007760:	9a01      	ldr	r2, [sp, #4]
 8007762:	4601      	mov	r1, r0
 8007764:	4605      	mov	r5, r0
 8007766:	4648      	mov	r0, r9
 8007768:	f000 fc16 	bl	8007f98 <__multiply>
 800776c:	9901      	ldr	r1, [sp, #4]
 800776e:	9004      	str	r0, [sp, #16]
 8007770:	4648      	mov	r0, r9
 8007772:	f000 fb47 	bl	8007e04 <_Bfree>
 8007776:	9a04      	ldr	r2, [sp, #16]
 8007778:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800777a:	9201      	str	r2, [sp, #4]
 800777c:	1b1a      	subs	r2, r3, r4
 800777e:	d004      	beq.n	800778a <_dtoa_r+0x6b2>
 8007780:	9901      	ldr	r1, [sp, #4]
 8007782:	4648      	mov	r0, r9
 8007784:	f000 fcb2 	bl	80080ec <__pow5mult>
 8007788:	9001      	str	r0, [sp, #4]
 800778a:	2101      	movs	r1, #1
 800778c:	4648      	mov	r0, r9
 800778e:	f000 fbed 	bl	8007f6c <__i2b>
 8007792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007794:	4604      	mov	r4, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 81d0 	beq.w	8007b3c <_dtoa_r+0xa64>
 800779c:	461a      	mov	r2, r3
 800779e:	4601      	mov	r1, r0
 80077a0:	4648      	mov	r0, r9
 80077a2:	f000 fca3 	bl	80080ec <__pow5mult>
 80077a6:	9b07      	ldr	r3, [sp, #28]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	4604      	mov	r4, r0
 80077ac:	f300 8095 	bgt.w	80078da <_dtoa_r+0x802>
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f040 808b 	bne.w	80078ce <_dtoa_r+0x7f6>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80077be:	2a00      	cmp	r2, #0
 80077c0:	f040 8087 	bne.w	80078d2 <_dtoa_r+0x7fa>
 80077c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80077c8:	0d12      	lsrs	r2, r2, #20
 80077ca:	0512      	lsls	r2, r2, #20
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	f000 8082 	beq.w	80078d6 <_dtoa_r+0x7fe>
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	3301      	adds	r3, #1
 80077d6:	9305      	str	r3, [sp, #20]
 80077d8:	9b06      	ldr	r3, [sp, #24]
 80077da:	3301      	adds	r3, #1
 80077dc:	9306      	str	r3, [sp, #24]
 80077de:	2301      	movs	r3, #1
 80077e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 81af 	beq.w	8007b48 <_dtoa_r+0xa70>
 80077ea:	6922      	ldr	r2, [r4, #16]
 80077ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80077f0:	6910      	ldr	r0, [r2, #16]
 80077f2:	f000 fb6f 	bl	8007ed4 <__hi0bits>
 80077f6:	f1c0 0020 	rsb	r0, r0, #32
 80077fa:	9b06      	ldr	r3, [sp, #24]
 80077fc:	4418      	add	r0, r3
 80077fe:	f010 001f 	ands.w	r0, r0, #31
 8007802:	d076      	beq.n	80078f2 <_dtoa_r+0x81a>
 8007804:	f1c0 0220 	rsb	r2, r0, #32
 8007808:	2a04      	cmp	r2, #4
 800780a:	dd69      	ble.n	80078e0 <_dtoa_r+0x808>
 800780c:	9b05      	ldr	r3, [sp, #20]
 800780e:	f1c0 001c 	rsb	r0, r0, #28
 8007812:	4403      	add	r3, r0
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	9b06      	ldr	r3, [sp, #24]
 8007818:	4406      	add	r6, r0
 800781a:	4403      	add	r3, r0
 800781c:	9306      	str	r3, [sp, #24]
 800781e:	9b05      	ldr	r3, [sp, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	dd05      	ble.n	8007830 <_dtoa_r+0x758>
 8007824:	9901      	ldr	r1, [sp, #4]
 8007826:	461a      	mov	r2, r3
 8007828:	4648      	mov	r0, r9
 800782a:	f000 fcb9 	bl	80081a0 <__lshift>
 800782e:	9001      	str	r0, [sp, #4]
 8007830:	9b06      	ldr	r3, [sp, #24]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dd05      	ble.n	8007842 <_dtoa_r+0x76a>
 8007836:	4621      	mov	r1, r4
 8007838:	461a      	mov	r2, r3
 800783a:	4648      	mov	r0, r9
 800783c:	f000 fcb0 	bl	80081a0 <__lshift>
 8007840:	4604      	mov	r4, r0
 8007842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007844:	2b00      	cmp	r3, #0
 8007846:	d056      	beq.n	80078f6 <_dtoa_r+0x81e>
 8007848:	9801      	ldr	r0, [sp, #4]
 800784a:	4621      	mov	r1, r4
 800784c:	f000 fd14 	bl	8008278 <__mcmp>
 8007850:	2800      	cmp	r0, #0
 8007852:	da50      	bge.n	80078f6 <_dtoa_r+0x81e>
 8007854:	f108 33ff 	add.w	r3, r8, #4294967295
 8007858:	9304      	str	r3, [sp, #16]
 800785a:	9901      	ldr	r1, [sp, #4]
 800785c:	2300      	movs	r3, #0
 800785e:	220a      	movs	r2, #10
 8007860:	4648      	mov	r0, r9
 8007862:	f000 faf1 	bl	8007e48 <__multadd>
 8007866:	9b08      	ldr	r3, [sp, #32]
 8007868:	9001      	str	r0, [sp, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 816e 	beq.w	8007b4c <_dtoa_r+0xa74>
 8007870:	4629      	mov	r1, r5
 8007872:	2300      	movs	r3, #0
 8007874:	220a      	movs	r2, #10
 8007876:	4648      	mov	r0, r9
 8007878:	f000 fae6 	bl	8007e48 <__multadd>
 800787c:	f1bb 0f00 	cmp.w	fp, #0
 8007880:	4605      	mov	r5, r0
 8007882:	dc64      	bgt.n	800794e <_dtoa_r+0x876>
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	2b02      	cmp	r3, #2
 8007888:	dc3e      	bgt.n	8007908 <_dtoa_r+0x830>
 800788a:	e060      	b.n	800794e <_dtoa_r+0x876>
 800788c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800788e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007892:	e73c      	b.n	800770e <_dtoa_r+0x636>
 8007894:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007898:	42a3      	cmp	r3, r4
 800789a:	bfbf      	itttt	lt
 800789c:	1ae2      	sublt	r2, r4, r3
 800789e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80078a0:	189b      	addlt	r3, r3, r2
 80078a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80078a4:	bfae      	itee	ge
 80078a6:	1b1c      	subge	r4, r3, r4
 80078a8:	4623      	movlt	r3, r4
 80078aa:	2400      	movlt	r4, #0
 80078ac:	f1ba 0f00 	cmp.w	sl, #0
 80078b0:	bfb5      	itete	lt
 80078b2:	9a05      	ldrlt	r2, [sp, #20]
 80078b4:	9e05      	ldrge	r6, [sp, #20]
 80078b6:	eba2 060a 	sublt.w	r6, r2, sl
 80078ba:	4652      	movge	r2, sl
 80078bc:	bfb8      	it	lt
 80078be:	2200      	movlt	r2, #0
 80078c0:	e727      	b.n	8007712 <_dtoa_r+0x63a>
 80078c2:	9e05      	ldr	r6, [sp, #20]
 80078c4:	9d08      	ldr	r5, [sp, #32]
 80078c6:	461c      	mov	r4, r3
 80078c8:	e730      	b.n	800772c <_dtoa_r+0x654>
 80078ca:	461a      	mov	r2, r3
 80078cc:	e758      	b.n	8007780 <_dtoa_r+0x6a8>
 80078ce:	2300      	movs	r3, #0
 80078d0:	e786      	b.n	80077e0 <_dtoa_r+0x708>
 80078d2:	9b02      	ldr	r3, [sp, #8]
 80078d4:	e784      	b.n	80077e0 <_dtoa_r+0x708>
 80078d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80078d8:	e783      	b.n	80077e2 <_dtoa_r+0x70a>
 80078da:	2300      	movs	r3, #0
 80078dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078de:	e784      	b.n	80077ea <_dtoa_r+0x712>
 80078e0:	d09d      	beq.n	800781e <_dtoa_r+0x746>
 80078e2:	9b05      	ldr	r3, [sp, #20]
 80078e4:	321c      	adds	r2, #28
 80078e6:	4413      	add	r3, r2
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	9b06      	ldr	r3, [sp, #24]
 80078ec:	4416      	add	r6, r2
 80078ee:	4413      	add	r3, r2
 80078f0:	e794      	b.n	800781c <_dtoa_r+0x744>
 80078f2:	4602      	mov	r2, r0
 80078f4:	e7f5      	b.n	80078e2 <_dtoa_r+0x80a>
 80078f6:	f1ba 0f00 	cmp.w	sl, #0
 80078fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80078fe:	46d3      	mov	fp, sl
 8007900:	dc21      	bgt.n	8007946 <_dtoa_r+0x86e>
 8007902:	9b07      	ldr	r3, [sp, #28]
 8007904:	2b02      	cmp	r3, #2
 8007906:	dd1e      	ble.n	8007946 <_dtoa_r+0x86e>
 8007908:	f1bb 0f00 	cmp.w	fp, #0
 800790c:	f47f aeb7 	bne.w	800767e <_dtoa_r+0x5a6>
 8007910:	4621      	mov	r1, r4
 8007912:	465b      	mov	r3, fp
 8007914:	2205      	movs	r2, #5
 8007916:	4648      	mov	r0, r9
 8007918:	f000 fa96 	bl	8007e48 <__multadd>
 800791c:	4601      	mov	r1, r0
 800791e:	4604      	mov	r4, r0
 8007920:	9801      	ldr	r0, [sp, #4]
 8007922:	f000 fca9 	bl	8008278 <__mcmp>
 8007926:	2800      	cmp	r0, #0
 8007928:	f77f aea9 	ble.w	800767e <_dtoa_r+0x5a6>
 800792c:	463e      	mov	r6, r7
 800792e:	2331      	movs	r3, #49	@ 0x31
 8007930:	f806 3b01 	strb.w	r3, [r6], #1
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	3301      	adds	r3, #1
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	e6a4      	b.n	8007686 <_dtoa_r+0x5ae>
 800793c:	f8cd 8010 	str.w	r8, [sp, #16]
 8007940:	4654      	mov	r4, sl
 8007942:	4625      	mov	r5, r4
 8007944:	e7f2      	b.n	800792c <_dtoa_r+0x854>
 8007946:	9b08      	ldr	r3, [sp, #32]
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 8103 	beq.w	8007b54 <_dtoa_r+0xa7c>
 800794e:	2e00      	cmp	r6, #0
 8007950:	dd05      	ble.n	800795e <_dtoa_r+0x886>
 8007952:	4629      	mov	r1, r5
 8007954:	4632      	mov	r2, r6
 8007956:	4648      	mov	r0, r9
 8007958:	f000 fc22 	bl	80081a0 <__lshift>
 800795c:	4605      	mov	r5, r0
 800795e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d058      	beq.n	8007a16 <_dtoa_r+0x93e>
 8007964:	6869      	ldr	r1, [r5, #4]
 8007966:	4648      	mov	r0, r9
 8007968:	f000 fa0c 	bl	8007d84 <_Balloc>
 800796c:	4606      	mov	r6, r0
 800796e:	b928      	cbnz	r0, 800797c <_dtoa_r+0x8a4>
 8007970:	4b82      	ldr	r3, [pc, #520]	@ (8007b7c <_dtoa_r+0xaa4>)
 8007972:	4602      	mov	r2, r0
 8007974:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007978:	f7ff bbc7 	b.w	800710a <_dtoa_r+0x32>
 800797c:	692a      	ldr	r2, [r5, #16]
 800797e:	3202      	adds	r2, #2
 8007980:	0092      	lsls	r2, r2, #2
 8007982:	f105 010c 	add.w	r1, r5, #12
 8007986:	300c      	adds	r0, #12
 8007988:	f001 f810 	bl	80089ac <memcpy>
 800798c:	2201      	movs	r2, #1
 800798e:	4631      	mov	r1, r6
 8007990:	4648      	mov	r0, r9
 8007992:	f000 fc05 	bl	80081a0 <__lshift>
 8007996:	1c7b      	adds	r3, r7, #1
 8007998:	9305      	str	r3, [sp, #20]
 800799a:	eb07 030b 	add.w	r3, r7, fp
 800799e:	9309      	str	r3, [sp, #36]	@ 0x24
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	46a8      	mov	r8, r5
 80079a8:	9308      	str	r3, [sp, #32]
 80079aa:	4605      	mov	r5, r0
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	9801      	ldr	r0, [sp, #4]
 80079b0:	4621      	mov	r1, r4
 80079b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80079b6:	f7ff fb06 	bl	8006fc6 <quorem>
 80079ba:	4641      	mov	r1, r8
 80079bc:	9002      	str	r0, [sp, #8]
 80079be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80079c2:	9801      	ldr	r0, [sp, #4]
 80079c4:	f000 fc58 	bl	8008278 <__mcmp>
 80079c8:	462a      	mov	r2, r5
 80079ca:	9006      	str	r0, [sp, #24]
 80079cc:	4621      	mov	r1, r4
 80079ce:	4648      	mov	r0, r9
 80079d0:	f000 fc6e 	bl	80082b0 <__mdiff>
 80079d4:	68c2      	ldr	r2, [r0, #12]
 80079d6:	4606      	mov	r6, r0
 80079d8:	b9fa      	cbnz	r2, 8007a1a <_dtoa_r+0x942>
 80079da:	4601      	mov	r1, r0
 80079dc:	9801      	ldr	r0, [sp, #4]
 80079de:	f000 fc4b 	bl	8008278 <__mcmp>
 80079e2:	4602      	mov	r2, r0
 80079e4:	4631      	mov	r1, r6
 80079e6:	4648      	mov	r0, r9
 80079e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80079ea:	f000 fa0b 	bl	8007e04 <_Bfree>
 80079ee:	9b07      	ldr	r3, [sp, #28]
 80079f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079f2:	9e05      	ldr	r6, [sp, #20]
 80079f4:	ea43 0102 	orr.w	r1, r3, r2
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	4319      	orrs	r1, r3
 80079fc:	d10f      	bne.n	8007a1e <_dtoa_r+0x946>
 80079fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007a02:	d028      	beq.n	8007a56 <_dtoa_r+0x97e>
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd02      	ble.n	8007a10 <_dtoa_r+0x938>
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007a10:	f88b a000 	strb.w	sl, [fp]
 8007a14:	e639      	b.n	800768a <_dtoa_r+0x5b2>
 8007a16:	4628      	mov	r0, r5
 8007a18:	e7bd      	b.n	8007996 <_dtoa_r+0x8be>
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	e7e2      	b.n	80079e4 <_dtoa_r+0x90c>
 8007a1e:	9b06      	ldr	r3, [sp, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db04      	blt.n	8007a2e <_dtoa_r+0x956>
 8007a24:	9907      	ldr	r1, [sp, #28]
 8007a26:	430b      	orrs	r3, r1
 8007a28:	9908      	ldr	r1, [sp, #32]
 8007a2a:	430b      	orrs	r3, r1
 8007a2c:	d120      	bne.n	8007a70 <_dtoa_r+0x998>
 8007a2e:	2a00      	cmp	r2, #0
 8007a30:	ddee      	ble.n	8007a10 <_dtoa_r+0x938>
 8007a32:	9901      	ldr	r1, [sp, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	4648      	mov	r0, r9
 8007a38:	f000 fbb2 	bl	80081a0 <__lshift>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	9001      	str	r0, [sp, #4]
 8007a40:	f000 fc1a 	bl	8008278 <__mcmp>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	dc03      	bgt.n	8007a50 <_dtoa_r+0x978>
 8007a48:	d1e2      	bne.n	8007a10 <_dtoa_r+0x938>
 8007a4a:	f01a 0f01 	tst.w	sl, #1
 8007a4e:	d0df      	beq.n	8007a10 <_dtoa_r+0x938>
 8007a50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007a54:	d1d9      	bne.n	8007a0a <_dtoa_r+0x932>
 8007a56:	2339      	movs	r3, #57	@ 0x39
 8007a58:	f88b 3000 	strb.w	r3, [fp]
 8007a5c:	4633      	mov	r3, r6
 8007a5e:	461e      	mov	r6, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a66:	2a39      	cmp	r2, #57	@ 0x39
 8007a68:	d053      	beq.n	8007b12 <_dtoa_r+0xa3a>
 8007a6a:	3201      	adds	r2, #1
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e60c      	b.n	800768a <_dtoa_r+0x5b2>
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	dd07      	ble.n	8007a84 <_dtoa_r+0x9ac>
 8007a74:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007a78:	d0ed      	beq.n	8007a56 <_dtoa_r+0x97e>
 8007a7a:	f10a 0301 	add.w	r3, sl, #1
 8007a7e:	f88b 3000 	strb.w	r3, [fp]
 8007a82:	e602      	b.n	800768a <_dtoa_r+0x5b2>
 8007a84:	9b05      	ldr	r3, [sp, #20]
 8007a86:	9a05      	ldr	r2, [sp, #20]
 8007a88:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d029      	beq.n	8007ae6 <_dtoa_r+0xa0e>
 8007a92:	9901      	ldr	r1, [sp, #4]
 8007a94:	2300      	movs	r3, #0
 8007a96:	220a      	movs	r2, #10
 8007a98:	4648      	mov	r0, r9
 8007a9a:	f000 f9d5 	bl	8007e48 <__multadd>
 8007a9e:	45a8      	cmp	r8, r5
 8007aa0:	9001      	str	r0, [sp, #4]
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	f04f 020a 	mov.w	r2, #10
 8007aaa:	4641      	mov	r1, r8
 8007aac:	4648      	mov	r0, r9
 8007aae:	d107      	bne.n	8007ac0 <_dtoa_r+0x9e8>
 8007ab0:	f000 f9ca 	bl	8007e48 <__multadd>
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	9b05      	ldr	r3, [sp, #20]
 8007aba:	3301      	adds	r3, #1
 8007abc:	9305      	str	r3, [sp, #20]
 8007abe:	e775      	b.n	80079ac <_dtoa_r+0x8d4>
 8007ac0:	f000 f9c2 	bl	8007e48 <__multadd>
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4680      	mov	r8, r0
 8007ac8:	2300      	movs	r3, #0
 8007aca:	220a      	movs	r2, #10
 8007acc:	4648      	mov	r0, r9
 8007ace:	f000 f9bb 	bl	8007e48 <__multadd>
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	e7f0      	b.n	8007ab8 <_dtoa_r+0x9e0>
 8007ad6:	f1bb 0f00 	cmp.w	fp, #0
 8007ada:	bfcc      	ite	gt
 8007adc:	465e      	movgt	r6, fp
 8007ade:	2601      	movle	r6, #1
 8007ae0:	443e      	add	r6, r7
 8007ae2:	f04f 0800 	mov.w	r8, #0
 8007ae6:	9901      	ldr	r1, [sp, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	4648      	mov	r0, r9
 8007aec:	f000 fb58 	bl	80081a0 <__lshift>
 8007af0:	4621      	mov	r1, r4
 8007af2:	9001      	str	r0, [sp, #4]
 8007af4:	f000 fbc0 	bl	8008278 <__mcmp>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	dcaf      	bgt.n	8007a5c <_dtoa_r+0x984>
 8007afc:	d102      	bne.n	8007b04 <_dtoa_r+0xa2c>
 8007afe:	f01a 0f01 	tst.w	sl, #1
 8007b02:	d1ab      	bne.n	8007a5c <_dtoa_r+0x984>
 8007b04:	4633      	mov	r3, r6
 8007b06:	461e      	mov	r6, r3
 8007b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b0c:	2a30      	cmp	r2, #48	@ 0x30
 8007b0e:	d0fa      	beq.n	8007b06 <_dtoa_r+0xa2e>
 8007b10:	e5bb      	b.n	800768a <_dtoa_r+0x5b2>
 8007b12:	429f      	cmp	r7, r3
 8007b14:	d1a3      	bne.n	8007a5e <_dtoa_r+0x986>
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	2331      	movs	r3, #49	@ 0x31
 8007b1e:	703b      	strb	r3, [r7, #0]
 8007b20:	e5b3      	b.n	800768a <_dtoa_r+0x5b2>
 8007b22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b24:	4f16      	ldr	r7, [pc, #88]	@ (8007b80 <_dtoa_r+0xaa8>)
 8007b26:	b11b      	cbz	r3, 8007b30 <_dtoa_r+0xa58>
 8007b28:	f107 0308 	add.w	r3, r7, #8
 8007b2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4638      	mov	r0, r7
 8007b32:	b011      	add	sp, #68	@ 0x44
 8007b34:	ecbd 8b02 	vpop	{d8}
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	f77f ae36 	ble.w	80077b0 <_dtoa_r+0x6d8>
 8007b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b48:	2001      	movs	r0, #1
 8007b4a:	e656      	b.n	80077fa <_dtoa_r+0x722>
 8007b4c:	f1bb 0f00 	cmp.w	fp, #0
 8007b50:	f77f aed7 	ble.w	8007902 <_dtoa_r+0x82a>
 8007b54:	463e      	mov	r6, r7
 8007b56:	9801      	ldr	r0, [sp, #4]
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f7ff fa34 	bl	8006fc6 <quorem>
 8007b5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007b62:	f806 ab01 	strb.w	sl, [r6], #1
 8007b66:	1bf2      	subs	r2, r6, r7
 8007b68:	4593      	cmp	fp, r2
 8007b6a:	ddb4      	ble.n	8007ad6 <_dtoa_r+0x9fe>
 8007b6c:	9901      	ldr	r1, [sp, #4]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	220a      	movs	r2, #10
 8007b72:	4648      	mov	r0, r9
 8007b74:	f000 f968 	bl	8007e48 <__multadd>
 8007b78:	9001      	str	r0, [sp, #4]
 8007b7a:	e7ec      	b.n	8007b56 <_dtoa_r+0xa7e>
 8007b7c:	08008e14 	.word	0x08008e14
 8007b80:	08008d98 	.word	0x08008d98

08007b84 <_free_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4605      	mov	r5, r0
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	d041      	beq.n	8007c10 <_free_r+0x8c>
 8007b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b90:	1f0c      	subs	r4, r1, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfb8      	it	lt
 8007b96:	18e4      	addlt	r4, r4, r3
 8007b98:	f000 f8e8 	bl	8007d6c <__malloc_lock>
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c14 <_free_r+0x90>)
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	b933      	cbnz	r3, 8007bb0 <_free_r+0x2c>
 8007ba2:	6063      	str	r3, [r4, #4]
 8007ba4:	6014      	str	r4, [r2, #0]
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bac:	f000 b8e4 	b.w	8007d78 <__malloc_unlock>
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d908      	bls.n	8007bc6 <_free_r+0x42>
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	1821      	adds	r1, r4, r0
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	bf01      	itttt	eq
 8007bbc:	6819      	ldreq	r1, [r3, #0]
 8007bbe:	685b      	ldreq	r3, [r3, #4]
 8007bc0:	1809      	addeq	r1, r1, r0
 8007bc2:	6021      	streq	r1, [r4, #0]
 8007bc4:	e7ed      	b.n	8007ba2 <_free_r+0x1e>
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	b10b      	cbz	r3, 8007bd0 <_free_r+0x4c>
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d9fa      	bls.n	8007bc6 <_free_r+0x42>
 8007bd0:	6811      	ldr	r1, [r2, #0]
 8007bd2:	1850      	adds	r0, r2, r1
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d10b      	bne.n	8007bf0 <_free_r+0x6c>
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	4401      	add	r1, r0
 8007bdc:	1850      	adds	r0, r2, r1
 8007bde:	4283      	cmp	r3, r0
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	d1e0      	bne.n	8007ba6 <_free_r+0x22>
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	6053      	str	r3, [r2, #4]
 8007bea:	4408      	add	r0, r1
 8007bec:	6010      	str	r0, [r2, #0]
 8007bee:	e7da      	b.n	8007ba6 <_free_r+0x22>
 8007bf0:	d902      	bls.n	8007bf8 <_free_r+0x74>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	602b      	str	r3, [r5, #0]
 8007bf6:	e7d6      	b.n	8007ba6 <_free_r+0x22>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	1821      	adds	r1, r4, r0
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	bf04      	itt	eq
 8007c00:	6819      	ldreq	r1, [r3, #0]
 8007c02:	685b      	ldreq	r3, [r3, #4]
 8007c04:	6063      	str	r3, [r4, #4]
 8007c06:	bf04      	itt	eq
 8007c08:	1809      	addeq	r1, r1, r0
 8007c0a:	6021      	streq	r1, [r4, #0]
 8007c0c:	6054      	str	r4, [r2, #4]
 8007c0e:	e7ca      	b.n	8007ba6 <_free_r+0x22>
 8007c10:	bd38      	pop	{r3, r4, r5, pc}
 8007c12:	bf00      	nop
 8007c14:	2400042c 	.word	0x2400042c

08007c18 <malloc>:
 8007c18:	4b02      	ldr	r3, [pc, #8]	@ (8007c24 <malloc+0xc>)
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f000 b825 	b.w	8007c6c <_malloc_r>
 8007c22:	bf00      	nop
 8007c24:	2400001c 	.word	0x2400001c

08007c28 <sbrk_aligned>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8007c68 <sbrk_aligned+0x40>)
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	6831      	ldr	r1, [r6, #0]
 8007c30:	4605      	mov	r5, r0
 8007c32:	b911      	cbnz	r1, 8007c3a <sbrk_aligned+0x12>
 8007c34:	f000 feaa 	bl	800898c <_sbrk_r>
 8007c38:	6030      	str	r0, [r6, #0]
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 fea5 	bl	800898c <_sbrk_r>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	d103      	bne.n	8007c4e <sbrk_aligned+0x26>
 8007c46:	f04f 34ff 	mov.w	r4, #4294967295
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
 8007c4e:	1cc4      	adds	r4, r0, #3
 8007c50:	f024 0403 	bic.w	r4, r4, #3
 8007c54:	42a0      	cmp	r0, r4
 8007c56:	d0f8      	beq.n	8007c4a <sbrk_aligned+0x22>
 8007c58:	1a21      	subs	r1, r4, r0
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fe96 	bl	800898c <_sbrk_r>
 8007c60:	3001      	adds	r0, #1
 8007c62:	d1f2      	bne.n	8007c4a <sbrk_aligned+0x22>
 8007c64:	e7ef      	b.n	8007c46 <sbrk_aligned+0x1e>
 8007c66:	bf00      	nop
 8007c68:	24000428 	.word	0x24000428

08007c6c <_malloc_r>:
 8007c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	1ccd      	adds	r5, r1, #3
 8007c72:	f025 0503 	bic.w	r5, r5, #3
 8007c76:	3508      	adds	r5, #8
 8007c78:	2d0c      	cmp	r5, #12
 8007c7a:	bf38      	it	cc
 8007c7c:	250c      	movcc	r5, #12
 8007c7e:	2d00      	cmp	r5, #0
 8007c80:	4606      	mov	r6, r0
 8007c82:	db01      	blt.n	8007c88 <_malloc_r+0x1c>
 8007c84:	42a9      	cmp	r1, r5
 8007c86:	d904      	bls.n	8007c92 <_malloc_r+0x26>
 8007c88:	230c      	movs	r3, #12
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d68 <_malloc_r+0xfc>
 8007c96:	f000 f869 	bl	8007d6c <__malloc_lock>
 8007c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c9e:	461c      	mov	r4, r3
 8007ca0:	bb44      	cbnz	r4, 8007cf4 <_malloc_r+0x88>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f7ff ffbf 	bl	8007c28 <sbrk_aligned>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	4604      	mov	r4, r0
 8007cae:	d158      	bne.n	8007d62 <_malloc_r+0xf6>
 8007cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8007cb4:	4627      	mov	r7, r4
 8007cb6:	2f00      	cmp	r7, #0
 8007cb8:	d143      	bne.n	8007d42 <_malloc_r+0xd6>
 8007cba:	2c00      	cmp	r4, #0
 8007cbc:	d04b      	beq.n	8007d56 <_malloc_r+0xea>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	eb04 0903 	add.w	r9, r4, r3
 8007cc8:	f000 fe60 	bl	800898c <_sbrk_r>
 8007ccc:	4581      	cmp	r9, r0
 8007cce:	d142      	bne.n	8007d56 <_malloc_r+0xea>
 8007cd0:	6821      	ldr	r1, [r4, #0]
 8007cd2:	1a6d      	subs	r5, r5, r1
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7ff ffa6 	bl	8007c28 <sbrk_aligned>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d03a      	beq.n	8007d56 <_malloc_r+0xea>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	442b      	add	r3, r5
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	bb62      	cbnz	r2, 8007d48 <_malloc_r+0xdc>
 8007cee:	f8c8 7000 	str.w	r7, [r8]
 8007cf2:	e00f      	b.n	8007d14 <_malloc_r+0xa8>
 8007cf4:	6822      	ldr	r2, [r4, #0]
 8007cf6:	1b52      	subs	r2, r2, r5
 8007cf8:	d420      	bmi.n	8007d3c <_malloc_r+0xd0>
 8007cfa:	2a0b      	cmp	r2, #11
 8007cfc:	d917      	bls.n	8007d2e <_malloc_r+0xc2>
 8007cfe:	1961      	adds	r1, r4, r5
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	6025      	str	r5, [r4, #0]
 8007d04:	bf18      	it	ne
 8007d06:	6059      	strne	r1, [r3, #4]
 8007d08:	6863      	ldr	r3, [r4, #4]
 8007d0a:	bf08      	it	eq
 8007d0c:	f8c8 1000 	streq.w	r1, [r8]
 8007d10:	5162      	str	r2, [r4, r5]
 8007d12:	604b      	str	r3, [r1, #4]
 8007d14:	4630      	mov	r0, r6
 8007d16:	f000 f82f 	bl	8007d78 <__malloc_unlock>
 8007d1a:	f104 000b 	add.w	r0, r4, #11
 8007d1e:	1d23      	adds	r3, r4, #4
 8007d20:	f020 0007 	bic.w	r0, r0, #7
 8007d24:	1ac2      	subs	r2, r0, r3
 8007d26:	bf1c      	itt	ne
 8007d28:	1a1b      	subne	r3, r3, r0
 8007d2a:	50a3      	strne	r3, [r4, r2]
 8007d2c:	e7af      	b.n	8007c8e <_malloc_r+0x22>
 8007d2e:	6862      	ldr	r2, [r4, #4]
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	bf0c      	ite	eq
 8007d34:	f8c8 2000 	streq.w	r2, [r8]
 8007d38:	605a      	strne	r2, [r3, #4]
 8007d3a:	e7eb      	b.n	8007d14 <_malloc_r+0xa8>
 8007d3c:	4623      	mov	r3, r4
 8007d3e:	6864      	ldr	r4, [r4, #4]
 8007d40:	e7ae      	b.n	8007ca0 <_malloc_r+0x34>
 8007d42:	463c      	mov	r4, r7
 8007d44:	687f      	ldr	r7, [r7, #4]
 8007d46:	e7b6      	b.n	8007cb6 <_malloc_r+0x4a>
 8007d48:	461a      	mov	r2, r3
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d1fb      	bne.n	8007d48 <_malloc_r+0xdc>
 8007d50:	2300      	movs	r3, #0
 8007d52:	6053      	str	r3, [r2, #4]
 8007d54:	e7de      	b.n	8007d14 <_malloc_r+0xa8>
 8007d56:	230c      	movs	r3, #12
 8007d58:	6033      	str	r3, [r6, #0]
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f80c 	bl	8007d78 <__malloc_unlock>
 8007d60:	e794      	b.n	8007c8c <_malloc_r+0x20>
 8007d62:	6005      	str	r5, [r0, #0]
 8007d64:	e7d6      	b.n	8007d14 <_malloc_r+0xa8>
 8007d66:	bf00      	nop
 8007d68:	2400042c 	.word	0x2400042c

08007d6c <__malloc_lock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	@ (8007d74 <__malloc_lock+0x8>)
 8007d6e:	f7ff b928 	b.w	8006fc2 <__retarget_lock_acquire_recursive>
 8007d72:	bf00      	nop
 8007d74:	24000424 	.word	0x24000424

08007d78 <__malloc_unlock>:
 8007d78:	4801      	ldr	r0, [pc, #4]	@ (8007d80 <__malloc_unlock+0x8>)
 8007d7a:	f7ff b923 	b.w	8006fc4 <__retarget_lock_release_recursive>
 8007d7e:	bf00      	nop
 8007d80:	24000424 	.word	0x24000424

08007d84 <_Balloc>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	69c6      	ldr	r6, [r0, #28]
 8007d88:	4604      	mov	r4, r0
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	b976      	cbnz	r6, 8007dac <_Balloc+0x28>
 8007d8e:	2010      	movs	r0, #16
 8007d90:	f7ff ff42 	bl	8007c18 <malloc>
 8007d94:	4602      	mov	r2, r0
 8007d96:	61e0      	str	r0, [r4, #28]
 8007d98:	b920      	cbnz	r0, 8007da4 <_Balloc+0x20>
 8007d9a:	4b18      	ldr	r3, [pc, #96]	@ (8007dfc <_Balloc+0x78>)
 8007d9c:	4818      	ldr	r0, [pc, #96]	@ (8007e00 <_Balloc+0x7c>)
 8007d9e:	216b      	movs	r1, #107	@ 0x6b
 8007da0:	f000 fe12 	bl	80089c8 <__assert_func>
 8007da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007da8:	6006      	str	r6, [r0, #0]
 8007daa:	60c6      	str	r6, [r0, #12]
 8007dac:	69e6      	ldr	r6, [r4, #28]
 8007dae:	68f3      	ldr	r3, [r6, #12]
 8007db0:	b183      	cbz	r3, 8007dd4 <_Balloc+0x50>
 8007db2:	69e3      	ldr	r3, [r4, #28]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dba:	b9b8      	cbnz	r0, 8007dec <_Balloc+0x68>
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8007dc2:	1d72      	adds	r2, r6, #5
 8007dc4:	0092      	lsls	r2, r2, #2
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fe1c 	bl	8008a04 <_calloc_r>
 8007dcc:	b160      	cbz	r0, 8007de8 <_Balloc+0x64>
 8007dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dd2:	e00e      	b.n	8007df2 <_Balloc+0x6e>
 8007dd4:	2221      	movs	r2, #33	@ 0x21
 8007dd6:	2104      	movs	r1, #4
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 fe13 	bl	8008a04 <_calloc_r>
 8007dde:	69e3      	ldr	r3, [r4, #28]
 8007de0:	60f0      	str	r0, [r6, #12]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e4      	bne.n	8007db2 <_Balloc+0x2e>
 8007de8:	2000      	movs	r0, #0
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	6802      	ldr	r2, [r0, #0]
 8007dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007df2:	2300      	movs	r3, #0
 8007df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007df8:	e7f7      	b.n	8007dea <_Balloc+0x66>
 8007dfa:	bf00      	nop
 8007dfc:	08008da5 	.word	0x08008da5
 8007e00:	08008e25 	.word	0x08008e25

08007e04 <_Bfree>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	69c6      	ldr	r6, [r0, #28]
 8007e08:	4605      	mov	r5, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	b976      	cbnz	r6, 8007e2c <_Bfree+0x28>
 8007e0e:	2010      	movs	r0, #16
 8007e10:	f7ff ff02 	bl	8007c18 <malloc>
 8007e14:	4602      	mov	r2, r0
 8007e16:	61e8      	str	r0, [r5, #28]
 8007e18:	b920      	cbnz	r0, 8007e24 <_Bfree+0x20>
 8007e1a:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <_Bfree+0x3c>)
 8007e1c:	4809      	ldr	r0, [pc, #36]	@ (8007e44 <_Bfree+0x40>)
 8007e1e:	218f      	movs	r1, #143	@ 0x8f
 8007e20:	f000 fdd2 	bl	80089c8 <__assert_func>
 8007e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e28:	6006      	str	r6, [r0, #0]
 8007e2a:	60c6      	str	r6, [r0, #12]
 8007e2c:	b13c      	cbz	r4, 8007e3e <_Bfree+0x3a>
 8007e2e:	69eb      	ldr	r3, [r5, #28]
 8007e30:	6862      	ldr	r2, [r4, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e38:	6021      	str	r1, [r4, #0]
 8007e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	08008da5 	.word	0x08008da5
 8007e44:	08008e25 	.word	0x08008e25

08007e48 <__multadd>:
 8007e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4c:	690d      	ldr	r5, [r1, #16]
 8007e4e:	4607      	mov	r7, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	461e      	mov	r6, r3
 8007e54:	f101 0c14 	add.w	ip, r1, #20
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e5e:	b299      	uxth	r1, r3
 8007e60:	fb02 6101 	mla	r1, r2, r1, r6
 8007e64:	0c1e      	lsrs	r6, r3, #16
 8007e66:	0c0b      	lsrs	r3, r1, #16
 8007e68:	fb02 3306 	mla	r3, r2, r6, r3
 8007e6c:	b289      	uxth	r1, r1
 8007e6e:	3001      	adds	r0, #1
 8007e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e74:	4285      	cmp	r5, r0
 8007e76:	f84c 1b04 	str.w	r1, [ip], #4
 8007e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e7e:	dcec      	bgt.n	8007e5a <__multadd+0x12>
 8007e80:	b30e      	cbz	r6, 8007ec6 <__multadd+0x7e>
 8007e82:	68a3      	ldr	r3, [r4, #8]
 8007e84:	42ab      	cmp	r3, r5
 8007e86:	dc19      	bgt.n	8007ebc <__multadd+0x74>
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	3101      	adds	r1, #1
 8007e8e:	f7ff ff79 	bl	8007d84 <_Balloc>
 8007e92:	4680      	mov	r8, r0
 8007e94:	b928      	cbnz	r0, 8007ea2 <__multadd+0x5a>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b0c      	ldr	r3, [pc, #48]	@ (8007ecc <__multadd+0x84>)
 8007e9a:	480d      	ldr	r0, [pc, #52]	@ (8007ed0 <__multadd+0x88>)
 8007e9c:	21ba      	movs	r1, #186	@ 0xba
 8007e9e:	f000 fd93 	bl	80089c8 <__assert_func>
 8007ea2:	6922      	ldr	r2, [r4, #16]
 8007ea4:	3202      	adds	r2, #2
 8007ea6:	f104 010c 	add.w	r1, r4, #12
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	300c      	adds	r0, #12
 8007eae:	f000 fd7d 	bl	80089ac <memcpy>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff ffa5 	bl	8007e04 <_Bfree>
 8007eba:	4644      	mov	r4, r8
 8007ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ec0:	3501      	adds	r5, #1
 8007ec2:	615e      	str	r6, [r3, #20]
 8007ec4:	6125      	str	r5, [r4, #16]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ecc:	08008e14 	.word	0x08008e14
 8007ed0:	08008e25 	.word	0x08008e25

08007ed4 <__hi0bits>:
 8007ed4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ed8:	4603      	mov	r3, r0
 8007eda:	bf36      	itet	cc
 8007edc:	0403      	lslcc	r3, r0, #16
 8007ede:	2000      	movcs	r0, #0
 8007ee0:	2010      	movcc	r0, #16
 8007ee2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ee6:	bf3c      	itt	cc
 8007ee8:	021b      	lslcc	r3, r3, #8
 8007eea:	3008      	addcc	r0, #8
 8007eec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef0:	bf3c      	itt	cc
 8007ef2:	011b      	lslcc	r3, r3, #4
 8007ef4:	3004      	addcc	r0, #4
 8007ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007efa:	bf3c      	itt	cc
 8007efc:	009b      	lslcc	r3, r3, #2
 8007efe:	3002      	addcc	r0, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	db05      	blt.n	8007f10 <__hi0bits+0x3c>
 8007f04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f08:	f100 0001 	add.w	r0, r0, #1
 8007f0c:	bf08      	it	eq
 8007f0e:	2020      	moveq	r0, #32
 8007f10:	4770      	bx	lr

08007f12 <__lo0bits>:
 8007f12:	6803      	ldr	r3, [r0, #0]
 8007f14:	4602      	mov	r2, r0
 8007f16:	f013 0007 	ands.w	r0, r3, #7
 8007f1a:	d00b      	beq.n	8007f34 <__lo0bits+0x22>
 8007f1c:	07d9      	lsls	r1, r3, #31
 8007f1e:	d421      	bmi.n	8007f64 <__lo0bits+0x52>
 8007f20:	0798      	lsls	r0, r3, #30
 8007f22:	bf49      	itett	mi
 8007f24:	085b      	lsrmi	r3, r3, #1
 8007f26:	089b      	lsrpl	r3, r3, #2
 8007f28:	2001      	movmi	r0, #1
 8007f2a:	6013      	strmi	r3, [r2, #0]
 8007f2c:	bf5c      	itt	pl
 8007f2e:	6013      	strpl	r3, [r2, #0]
 8007f30:	2002      	movpl	r0, #2
 8007f32:	4770      	bx	lr
 8007f34:	b299      	uxth	r1, r3
 8007f36:	b909      	cbnz	r1, 8007f3c <__lo0bits+0x2a>
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	2010      	movs	r0, #16
 8007f3c:	b2d9      	uxtb	r1, r3
 8007f3e:	b909      	cbnz	r1, 8007f44 <__lo0bits+0x32>
 8007f40:	3008      	adds	r0, #8
 8007f42:	0a1b      	lsrs	r3, r3, #8
 8007f44:	0719      	lsls	r1, r3, #28
 8007f46:	bf04      	itt	eq
 8007f48:	091b      	lsreq	r3, r3, #4
 8007f4a:	3004      	addeq	r0, #4
 8007f4c:	0799      	lsls	r1, r3, #30
 8007f4e:	bf04      	itt	eq
 8007f50:	089b      	lsreq	r3, r3, #2
 8007f52:	3002      	addeq	r0, #2
 8007f54:	07d9      	lsls	r1, r3, #31
 8007f56:	d403      	bmi.n	8007f60 <__lo0bits+0x4e>
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	f100 0001 	add.w	r0, r0, #1
 8007f5e:	d003      	beq.n	8007f68 <__lo0bits+0x56>
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	4770      	bx	lr
 8007f64:	2000      	movs	r0, #0
 8007f66:	4770      	bx	lr
 8007f68:	2020      	movs	r0, #32
 8007f6a:	4770      	bx	lr

08007f6c <__i2b>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	460c      	mov	r4, r1
 8007f70:	2101      	movs	r1, #1
 8007f72:	f7ff ff07 	bl	8007d84 <_Balloc>
 8007f76:	4602      	mov	r2, r0
 8007f78:	b928      	cbnz	r0, 8007f86 <__i2b+0x1a>
 8007f7a:	4b05      	ldr	r3, [pc, #20]	@ (8007f90 <__i2b+0x24>)
 8007f7c:	4805      	ldr	r0, [pc, #20]	@ (8007f94 <__i2b+0x28>)
 8007f7e:	f240 1145 	movw	r1, #325	@ 0x145
 8007f82:	f000 fd21 	bl	80089c8 <__assert_func>
 8007f86:	2301      	movs	r3, #1
 8007f88:	6144      	str	r4, [r0, #20]
 8007f8a:	6103      	str	r3, [r0, #16]
 8007f8c:	bd10      	pop	{r4, pc}
 8007f8e:	bf00      	nop
 8007f90:	08008e14 	.word	0x08008e14
 8007f94:	08008e25 	.word	0x08008e25

08007f98 <__multiply>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	690a      	ldr	r2, [r1, #16]
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	bfa8      	it	ge
 8007fa6:	4623      	movge	r3, r4
 8007fa8:	460f      	mov	r7, r1
 8007faa:	bfa4      	itt	ge
 8007fac:	460c      	movge	r4, r1
 8007fae:	461f      	movge	r7, r3
 8007fb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007fb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007fb8:	68a3      	ldr	r3, [r4, #8]
 8007fba:	6861      	ldr	r1, [r4, #4]
 8007fbc:	eb0a 0609 	add.w	r6, sl, r9
 8007fc0:	42b3      	cmp	r3, r6
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	bfb8      	it	lt
 8007fc6:	3101      	addlt	r1, #1
 8007fc8:	f7ff fedc 	bl	8007d84 <_Balloc>
 8007fcc:	b930      	cbnz	r0, 8007fdc <__multiply+0x44>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	4b44      	ldr	r3, [pc, #272]	@ (80080e4 <__multiply+0x14c>)
 8007fd2:	4845      	ldr	r0, [pc, #276]	@ (80080e8 <__multiply+0x150>)
 8007fd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fd8:	f000 fcf6 	bl	80089c8 <__assert_func>
 8007fdc:	f100 0514 	add.w	r5, r0, #20
 8007fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4543      	cmp	r3, r8
 8007fea:	d321      	bcc.n	8008030 <__multiply+0x98>
 8007fec:	f107 0114 	add.w	r1, r7, #20
 8007ff0:	f104 0214 	add.w	r2, r4, #20
 8007ff4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ff8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ffc:	9302      	str	r3, [sp, #8]
 8007ffe:	1b13      	subs	r3, r2, r4
 8008000:	3b15      	subs	r3, #21
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	3304      	adds	r3, #4
 8008008:	f104 0715 	add.w	r7, r4, #21
 800800c:	42ba      	cmp	r2, r7
 800800e:	bf38      	it	cc
 8008010:	2304      	movcc	r3, #4
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	9103      	str	r1, [sp, #12]
 8008018:	428b      	cmp	r3, r1
 800801a:	d80c      	bhi.n	8008036 <__multiply+0x9e>
 800801c:	2e00      	cmp	r6, #0
 800801e:	dd03      	ble.n	8008028 <__multiply+0x90>
 8008020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05b      	beq.n	80080e0 <__multiply+0x148>
 8008028:	6106      	str	r6, [r0, #16]
 800802a:	b005      	add	sp, #20
 800802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008030:	f843 2b04 	str.w	r2, [r3], #4
 8008034:	e7d8      	b.n	8007fe8 <__multiply+0x50>
 8008036:	f8b1 a000 	ldrh.w	sl, [r1]
 800803a:	f1ba 0f00 	cmp.w	sl, #0
 800803e:	d024      	beq.n	800808a <__multiply+0xf2>
 8008040:	f104 0e14 	add.w	lr, r4, #20
 8008044:	46a9      	mov	r9, r5
 8008046:	f04f 0c00 	mov.w	ip, #0
 800804a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800804e:	f8d9 3000 	ldr.w	r3, [r9]
 8008052:	fa1f fb87 	uxth.w	fp, r7
 8008056:	b29b      	uxth	r3, r3
 8008058:	fb0a 330b 	mla	r3, sl, fp, r3
 800805c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008060:	f8d9 7000 	ldr.w	r7, [r9]
 8008064:	4463      	add	r3, ip
 8008066:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800806a:	fb0a c70b 	mla	r7, sl, fp, ip
 800806e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008072:	b29b      	uxth	r3, r3
 8008074:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008078:	4572      	cmp	r2, lr
 800807a:	f849 3b04 	str.w	r3, [r9], #4
 800807e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008082:	d8e2      	bhi.n	800804a <__multiply+0xb2>
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	f845 c003 	str.w	ip, [r5, r3]
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008090:	3104      	adds	r1, #4
 8008092:	f1b9 0f00 	cmp.w	r9, #0
 8008096:	d021      	beq.n	80080dc <__multiply+0x144>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	f104 0c14 	add.w	ip, r4, #20
 800809e:	46ae      	mov	lr, r5
 80080a0:	f04f 0a00 	mov.w	sl, #0
 80080a4:	f8bc b000 	ldrh.w	fp, [ip]
 80080a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80080ac:	fb09 770b 	mla	r7, r9, fp, r7
 80080b0:	4457      	add	r7, sl
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080b8:	f84e 3b04 	str.w	r3, [lr], #4
 80080bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080c4:	f8be 3000 	ldrh.w	r3, [lr]
 80080c8:	fb09 330a 	mla	r3, r9, sl, r3
 80080cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80080d0:	4562      	cmp	r2, ip
 80080d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080d6:	d8e5      	bhi.n	80080a4 <__multiply+0x10c>
 80080d8:	9f01      	ldr	r7, [sp, #4]
 80080da:	51eb      	str	r3, [r5, r7]
 80080dc:	3504      	adds	r5, #4
 80080de:	e799      	b.n	8008014 <__multiply+0x7c>
 80080e0:	3e01      	subs	r6, #1
 80080e2:	e79b      	b.n	800801c <__multiply+0x84>
 80080e4:	08008e14 	.word	0x08008e14
 80080e8:	08008e25 	.word	0x08008e25

080080ec <__pow5mult>:
 80080ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f0:	4615      	mov	r5, r2
 80080f2:	f012 0203 	ands.w	r2, r2, #3
 80080f6:	4607      	mov	r7, r0
 80080f8:	460e      	mov	r6, r1
 80080fa:	d007      	beq.n	800810c <__pow5mult+0x20>
 80080fc:	4c25      	ldr	r4, [pc, #148]	@ (8008194 <__pow5mult+0xa8>)
 80080fe:	3a01      	subs	r2, #1
 8008100:	2300      	movs	r3, #0
 8008102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008106:	f7ff fe9f 	bl	8007e48 <__multadd>
 800810a:	4606      	mov	r6, r0
 800810c:	10ad      	asrs	r5, r5, #2
 800810e:	d03d      	beq.n	800818c <__pow5mult+0xa0>
 8008110:	69fc      	ldr	r4, [r7, #28]
 8008112:	b97c      	cbnz	r4, 8008134 <__pow5mult+0x48>
 8008114:	2010      	movs	r0, #16
 8008116:	f7ff fd7f 	bl	8007c18 <malloc>
 800811a:	4602      	mov	r2, r0
 800811c:	61f8      	str	r0, [r7, #28]
 800811e:	b928      	cbnz	r0, 800812c <__pow5mult+0x40>
 8008120:	4b1d      	ldr	r3, [pc, #116]	@ (8008198 <__pow5mult+0xac>)
 8008122:	481e      	ldr	r0, [pc, #120]	@ (800819c <__pow5mult+0xb0>)
 8008124:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008128:	f000 fc4e 	bl	80089c8 <__assert_func>
 800812c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008130:	6004      	str	r4, [r0, #0]
 8008132:	60c4      	str	r4, [r0, #12]
 8008134:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800813c:	b94c      	cbnz	r4, 8008152 <__pow5mult+0x66>
 800813e:	f240 2171 	movw	r1, #625	@ 0x271
 8008142:	4638      	mov	r0, r7
 8008144:	f7ff ff12 	bl	8007f6c <__i2b>
 8008148:	2300      	movs	r3, #0
 800814a:	f8c8 0008 	str.w	r0, [r8, #8]
 800814e:	4604      	mov	r4, r0
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	f04f 0900 	mov.w	r9, #0
 8008156:	07eb      	lsls	r3, r5, #31
 8008158:	d50a      	bpl.n	8008170 <__pow5mult+0x84>
 800815a:	4631      	mov	r1, r6
 800815c:	4622      	mov	r2, r4
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff ff1a 	bl	8007f98 <__multiply>
 8008164:	4631      	mov	r1, r6
 8008166:	4680      	mov	r8, r0
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff fe4b 	bl	8007e04 <_Bfree>
 800816e:	4646      	mov	r6, r8
 8008170:	106d      	asrs	r5, r5, #1
 8008172:	d00b      	beq.n	800818c <__pow5mult+0xa0>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	b938      	cbnz	r0, 8008188 <__pow5mult+0x9c>
 8008178:	4622      	mov	r2, r4
 800817a:	4621      	mov	r1, r4
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff ff0b 	bl	8007f98 <__multiply>
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	f8c0 9000 	str.w	r9, [r0]
 8008188:	4604      	mov	r4, r0
 800818a:	e7e4      	b.n	8008156 <__pow5mult+0x6a>
 800818c:	4630      	mov	r0, r6
 800818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008192:	bf00      	nop
 8008194:	08008e80 	.word	0x08008e80
 8008198:	08008da5 	.word	0x08008da5
 800819c:	08008e25 	.word	0x08008e25

080081a0 <__lshift>:
 80081a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a4:	460c      	mov	r4, r1
 80081a6:	6849      	ldr	r1, [r1, #4]
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	4607      	mov	r7, r0
 80081b2:	4691      	mov	r9, r2
 80081b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081b8:	f108 0601 	add.w	r6, r8, #1
 80081bc:	42b3      	cmp	r3, r6
 80081be:	db0b      	blt.n	80081d8 <__lshift+0x38>
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff fddf 	bl	8007d84 <_Balloc>
 80081c6:	4605      	mov	r5, r0
 80081c8:	b948      	cbnz	r0, 80081de <__lshift+0x3e>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4b28      	ldr	r3, [pc, #160]	@ (8008270 <__lshift+0xd0>)
 80081ce:	4829      	ldr	r0, [pc, #164]	@ (8008274 <__lshift+0xd4>)
 80081d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081d4:	f000 fbf8 	bl	80089c8 <__assert_func>
 80081d8:	3101      	adds	r1, #1
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	e7ee      	b.n	80081bc <__lshift+0x1c>
 80081de:	2300      	movs	r3, #0
 80081e0:	f100 0114 	add.w	r1, r0, #20
 80081e4:	f100 0210 	add.w	r2, r0, #16
 80081e8:	4618      	mov	r0, r3
 80081ea:	4553      	cmp	r3, sl
 80081ec:	db33      	blt.n	8008256 <__lshift+0xb6>
 80081ee:	6920      	ldr	r0, [r4, #16]
 80081f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081f4:	f104 0314 	add.w	r3, r4, #20
 80081f8:	f019 091f 	ands.w	r9, r9, #31
 80081fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008200:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008204:	d02b      	beq.n	800825e <__lshift+0xbe>
 8008206:	f1c9 0e20 	rsb	lr, r9, #32
 800820a:	468a      	mov	sl, r1
 800820c:	2200      	movs	r2, #0
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	fa00 f009 	lsl.w	r0, r0, r9
 8008214:	4310      	orrs	r0, r2
 8008216:	f84a 0b04 	str.w	r0, [sl], #4
 800821a:	f853 2b04 	ldr.w	r2, [r3], #4
 800821e:	459c      	cmp	ip, r3
 8008220:	fa22 f20e 	lsr.w	r2, r2, lr
 8008224:	d8f3      	bhi.n	800820e <__lshift+0x6e>
 8008226:	ebac 0304 	sub.w	r3, ip, r4
 800822a:	3b15      	subs	r3, #21
 800822c:	f023 0303 	bic.w	r3, r3, #3
 8008230:	3304      	adds	r3, #4
 8008232:	f104 0015 	add.w	r0, r4, #21
 8008236:	4584      	cmp	ip, r0
 8008238:	bf38      	it	cc
 800823a:	2304      	movcc	r3, #4
 800823c:	50ca      	str	r2, [r1, r3]
 800823e:	b10a      	cbz	r2, 8008244 <__lshift+0xa4>
 8008240:	f108 0602 	add.w	r6, r8, #2
 8008244:	3e01      	subs	r6, #1
 8008246:	4638      	mov	r0, r7
 8008248:	612e      	str	r6, [r5, #16]
 800824a:	4621      	mov	r1, r4
 800824c:	f7ff fdda 	bl	8007e04 <_Bfree>
 8008250:	4628      	mov	r0, r5
 8008252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008256:	f842 0f04 	str.w	r0, [r2, #4]!
 800825a:	3301      	adds	r3, #1
 800825c:	e7c5      	b.n	80081ea <__lshift+0x4a>
 800825e:	3904      	subs	r1, #4
 8008260:	f853 2b04 	ldr.w	r2, [r3], #4
 8008264:	f841 2f04 	str.w	r2, [r1, #4]!
 8008268:	459c      	cmp	ip, r3
 800826a:	d8f9      	bhi.n	8008260 <__lshift+0xc0>
 800826c:	e7ea      	b.n	8008244 <__lshift+0xa4>
 800826e:	bf00      	nop
 8008270:	08008e14 	.word	0x08008e14
 8008274:	08008e25 	.word	0x08008e25

08008278 <__mcmp>:
 8008278:	690a      	ldr	r2, [r1, #16]
 800827a:	4603      	mov	r3, r0
 800827c:	6900      	ldr	r0, [r0, #16]
 800827e:	1a80      	subs	r0, r0, r2
 8008280:	b530      	push	{r4, r5, lr}
 8008282:	d10e      	bne.n	80082a2 <__mcmp+0x2a>
 8008284:	3314      	adds	r3, #20
 8008286:	3114      	adds	r1, #20
 8008288:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800828c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008290:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008294:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008298:	4295      	cmp	r5, r2
 800829a:	d003      	beq.n	80082a4 <__mcmp+0x2c>
 800829c:	d205      	bcs.n	80082aa <__mcmp+0x32>
 800829e:	f04f 30ff 	mov.w	r0, #4294967295
 80082a2:	bd30      	pop	{r4, r5, pc}
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	d3f3      	bcc.n	8008290 <__mcmp+0x18>
 80082a8:	e7fb      	b.n	80082a2 <__mcmp+0x2a>
 80082aa:	2001      	movs	r0, #1
 80082ac:	e7f9      	b.n	80082a2 <__mcmp+0x2a>
	...

080082b0 <__mdiff>:
 80082b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	4689      	mov	r9, r1
 80082b6:	4606      	mov	r6, r0
 80082b8:	4611      	mov	r1, r2
 80082ba:	4648      	mov	r0, r9
 80082bc:	4614      	mov	r4, r2
 80082be:	f7ff ffdb 	bl	8008278 <__mcmp>
 80082c2:	1e05      	subs	r5, r0, #0
 80082c4:	d112      	bne.n	80082ec <__mdiff+0x3c>
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff fd5b 	bl	8007d84 <_Balloc>
 80082ce:	4602      	mov	r2, r0
 80082d0:	b928      	cbnz	r0, 80082de <__mdiff+0x2e>
 80082d2:	4b3f      	ldr	r3, [pc, #252]	@ (80083d0 <__mdiff+0x120>)
 80082d4:	f240 2137 	movw	r1, #567	@ 0x237
 80082d8:	483e      	ldr	r0, [pc, #248]	@ (80083d4 <__mdiff+0x124>)
 80082da:	f000 fb75 	bl	80089c8 <__assert_func>
 80082de:	2301      	movs	r3, #1
 80082e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082e4:	4610      	mov	r0, r2
 80082e6:	b003      	add	sp, #12
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ec:	bfbc      	itt	lt
 80082ee:	464b      	movlt	r3, r9
 80082f0:	46a1      	movlt	r9, r4
 80082f2:	4630      	mov	r0, r6
 80082f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082f8:	bfba      	itte	lt
 80082fa:	461c      	movlt	r4, r3
 80082fc:	2501      	movlt	r5, #1
 80082fe:	2500      	movge	r5, #0
 8008300:	f7ff fd40 	bl	8007d84 <_Balloc>
 8008304:	4602      	mov	r2, r0
 8008306:	b918      	cbnz	r0, 8008310 <__mdiff+0x60>
 8008308:	4b31      	ldr	r3, [pc, #196]	@ (80083d0 <__mdiff+0x120>)
 800830a:	f240 2145 	movw	r1, #581	@ 0x245
 800830e:	e7e3      	b.n	80082d8 <__mdiff+0x28>
 8008310:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008314:	6926      	ldr	r6, [r4, #16]
 8008316:	60c5      	str	r5, [r0, #12]
 8008318:	f109 0310 	add.w	r3, r9, #16
 800831c:	f109 0514 	add.w	r5, r9, #20
 8008320:	f104 0e14 	add.w	lr, r4, #20
 8008324:	f100 0b14 	add.w	fp, r0, #20
 8008328:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800832c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	46d9      	mov	r9, fp
 8008334:	f04f 0c00 	mov.w	ip, #0
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800833e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	fa1f f38a 	uxth.w	r3, sl
 8008348:	4619      	mov	r1, r3
 800834a:	b283      	uxth	r3, r0
 800834c:	1acb      	subs	r3, r1, r3
 800834e:	0c00      	lsrs	r0, r0, #16
 8008350:	4463      	add	r3, ip
 8008352:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008356:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800835a:	b29b      	uxth	r3, r3
 800835c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008360:	4576      	cmp	r6, lr
 8008362:	f849 3b04 	str.w	r3, [r9], #4
 8008366:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800836a:	d8e5      	bhi.n	8008338 <__mdiff+0x88>
 800836c:	1b33      	subs	r3, r6, r4
 800836e:	3b15      	subs	r3, #21
 8008370:	f023 0303 	bic.w	r3, r3, #3
 8008374:	3415      	adds	r4, #21
 8008376:	3304      	adds	r3, #4
 8008378:	42a6      	cmp	r6, r4
 800837a:	bf38      	it	cc
 800837c:	2304      	movcc	r3, #4
 800837e:	441d      	add	r5, r3
 8008380:	445b      	add	r3, fp
 8008382:	461e      	mov	r6, r3
 8008384:	462c      	mov	r4, r5
 8008386:	4544      	cmp	r4, r8
 8008388:	d30e      	bcc.n	80083a8 <__mdiff+0xf8>
 800838a:	f108 0103 	add.w	r1, r8, #3
 800838e:	1b49      	subs	r1, r1, r5
 8008390:	f021 0103 	bic.w	r1, r1, #3
 8008394:	3d03      	subs	r5, #3
 8008396:	45a8      	cmp	r8, r5
 8008398:	bf38      	it	cc
 800839a:	2100      	movcc	r1, #0
 800839c:	440b      	add	r3, r1
 800839e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083a2:	b191      	cbz	r1, 80083ca <__mdiff+0x11a>
 80083a4:	6117      	str	r7, [r2, #16]
 80083a6:	e79d      	b.n	80082e4 <__mdiff+0x34>
 80083a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80083ac:	46e6      	mov	lr, ip
 80083ae:	0c08      	lsrs	r0, r1, #16
 80083b0:	fa1c fc81 	uxtah	ip, ip, r1
 80083b4:	4471      	add	r1, lr
 80083b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80083ba:	b289      	uxth	r1, r1
 80083bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80083c0:	f846 1b04 	str.w	r1, [r6], #4
 80083c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083c8:	e7dd      	b.n	8008386 <__mdiff+0xd6>
 80083ca:	3f01      	subs	r7, #1
 80083cc:	e7e7      	b.n	800839e <__mdiff+0xee>
 80083ce:	bf00      	nop
 80083d0:	08008e14 	.word	0x08008e14
 80083d4:	08008e25 	.word	0x08008e25

080083d8 <__d2b>:
 80083d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	460f      	mov	r7, r1
 80083de:	2101      	movs	r1, #1
 80083e0:	ec59 8b10 	vmov	r8, r9, d0
 80083e4:	4616      	mov	r6, r2
 80083e6:	f7ff fccd 	bl	8007d84 <_Balloc>
 80083ea:	4604      	mov	r4, r0
 80083ec:	b930      	cbnz	r0, 80083fc <__d2b+0x24>
 80083ee:	4602      	mov	r2, r0
 80083f0:	4b23      	ldr	r3, [pc, #140]	@ (8008480 <__d2b+0xa8>)
 80083f2:	4824      	ldr	r0, [pc, #144]	@ (8008484 <__d2b+0xac>)
 80083f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80083f8:	f000 fae6 	bl	80089c8 <__assert_func>
 80083fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008404:	b10d      	cbz	r5, 800840a <__d2b+0x32>
 8008406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	f1b8 0300 	subs.w	r3, r8, #0
 8008410:	d023      	beq.n	800845a <__d2b+0x82>
 8008412:	4668      	mov	r0, sp
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	f7ff fd7c 	bl	8007f12 <__lo0bits>
 800841a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800841e:	b1d0      	cbz	r0, 8008456 <__d2b+0x7e>
 8008420:	f1c0 0320 	rsb	r3, r0, #32
 8008424:	fa02 f303 	lsl.w	r3, r2, r3
 8008428:	430b      	orrs	r3, r1
 800842a:	40c2      	lsrs	r2, r0
 800842c:	6163      	str	r3, [r4, #20]
 800842e:	9201      	str	r2, [sp, #4]
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	61a3      	str	r3, [r4, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	bf0c      	ite	eq
 8008438:	2201      	moveq	r2, #1
 800843a:	2202      	movne	r2, #2
 800843c:	6122      	str	r2, [r4, #16]
 800843e:	b1a5      	cbz	r5, 800846a <__d2b+0x92>
 8008440:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008444:	4405      	add	r5, r0
 8008446:	603d      	str	r5, [r7, #0]
 8008448:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800844c:	6030      	str	r0, [r6, #0]
 800844e:	4620      	mov	r0, r4
 8008450:	b003      	add	sp, #12
 8008452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008456:	6161      	str	r1, [r4, #20]
 8008458:	e7ea      	b.n	8008430 <__d2b+0x58>
 800845a:	a801      	add	r0, sp, #4
 800845c:	f7ff fd59 	bl	8007f12 <__lo0bits>
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	6163      	str	r3, [r4, #20]
 8008464:	3020      	adds	r0, #32
 8008466:	2201      	movs	r2, #1
 8008468:	e7e8      	b.n	800843c <__d2b+0x64>
 800846a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800846e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008472:	6038      	str	r0, [r7, #0]
 8008474:	6918      	ldr	r0, [r3, #16]
 8008476:	f7ff fd2d 	bl	8007ed4 <__hi0bits>
 800847a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800847e:	e7e5      	b.n	800844c <__d2b+0x74>
 8008480:	08008e14 	.word	0x08008e14
 8008484:	08008e25 	.word	0x08008e25

08008488 <__sfputc_r>:
 8008488:	6893      	ldr	r3, [r2, #8]
 800848a:	3b01      	subs	r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	b410      	push	{r4}
 8008490:	6093      	str	r3, [r2, #8]
 8008492:	da08      	bge.n	80084a6 <__sfputc_r+0x1e>
 8008494:	6994      	ldr	r4, [r2, #24]
 8008496:	42a3      	cmp	r3, r4
 8008498:	db01      	blt.n	800849e <__sfputc_r+0x16>
 800849a:	290a      	cmp	r1, #10
 800849c:	d103      	bne.n	80084a6 <__sfputc_r+0x1e>
 800849e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a2:	f000 b9df 	b.w	8008864 <__swbuf_r>
 80084a6:	6813      	ldr	r3, [r2, #0]
 80084a8:	1c58      	adds	r0, r3, #1
 80084aa:	6010      	str	r0, [r2, #0]
 80084ac:	7019      	strb	r1, [r3, #0]
 80084ae:	4608      	mov	r0, r1
 80084b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <__sfputs_r>:
 80084b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b8:	4606      	mov	r6, r0
 80084ba:	460f      	mov	r7, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	18d5      	adds	r5, r2, r3
 80084c0:	42ac      	cmp	r4, r5
 80084c2:	d101      	bne.n	80084c8 <__sfputs_r+0x12>
 80084c4:	2000      	movs	r0, #0
 80084c6:	e007      	b.n	80084d8 <__sfputs_r+0x22>
 80084c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084cc:	463a      	mov	r2, r7
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ffda 	bl	8008488 <__sfputc_r>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d1f3      	bne.n	80084c0 <__sfputs_r+0xa>
 80084d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084dc <_vfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	b09d      	sub	sp, #116	@ 0x74
 80084e4:	4614      	mov	r4, r2
 80084e6:	4698      	mov	r8, r3
 80084e8:	4606      	mov	r6, r0
 80084ea:	b118      	cbz	r0, 80084f4 <_vfiprintf_r+0x18>
 80084ec:	6a03      	ldr	r3, [r0, #32]
 80084ee:	b90b      	cbnz	r3, 80084f4 <_vfiprintf_r+0x18>
 80084f0:	f7fe fc5e 	bl	8006db0 <__sinit>
 80084f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084f6:	07d9      	lsls	r1, r3, #31
 80084f8:	d405      	bmi.n	8008506 <_vfiprintf_r+0x2a>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_vfiprintf_r+0x2a>
 8008500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008502:	f7fe fd5e 	bl	8006fc2 <__retarget_lock_acquire_recursive>
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	071b      	lsls	r3, r3, #28
 800850a:	d501      	bpl.n	8008510 <_vfiprintf_r+0x34>
 800850c:	692b      	ldr	r3, [r5, #16]
 800850e:	b99b      	cbnz	r3, 8008538 <_vfiprintf_r+0x5c>
 8008510:	4629      	mov	r1, r5
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f9e4 	bl	80088e0 <__swsetup_r>
 8008518:	b170      	cbz	r0, 8008538 <_vfiprintf_r+0x5c>
 800851a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800851c:	07dc      	lsls	r4, r3, #31
 800851e:	d504      	bpl.n	800852a <_vfiprintf_r+0x4e>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	b01d      	add	sp, #116	@ 0x74
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	0598      	lsls	r0, r3, #22
 800852e:	d4f7      	bmi.n	8008520 <_vfiprintf_r+0x44>
 8008530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008532:	f7fe fd47 	bl	8006fc4 <__retarget_lock_release_recursive>
 8008536:	e7f3      	b.n	8008520 <_vfiprintf_r+0x44>
 8008538:	2300      	movs	r3, #0
 800853a:	9309      	str	r3, [sp, #36]	@ 0x24
 800853c:	2320      	movs	r3, #32
 800853e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008542:	f8cd 800c 	str.w	r8, [sp, #12]
 8008546:	2330      	movs	r3, #48	@ 0x30
 8008548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086f8 <_vfiprintf_r+0x21c>
 800854c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008550:	f04f 0901 	mov.w	r9, #1
 8008554:	4623      	mov	r3, r4
 8008556:	469a      	mov	sl, r3
 8008558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855c:	b10a      	cbz	r2, 8008562 <_vfiprintf_r+0x86>
 800855e:	2a25      	cmp	r2, #37	@ 0x25
 8008560:	d1f9      	bne.n	8008556 <_vfiprintf_r+0x7a>
 8008562:	ebba 0b04 	subs.w	fp, sl, r4
 8008566:	d00b      	beq.n	8008580 <_vfiprintf_r+0xa4>
 8008568:	465b      	mov	r3, fp
 800856a:	4622      	mov	r2, r4
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ffa1 	bl	80084b6 <__sfputs_r>
 8008574:	3001      	adds	r0, #1
 8008576:	f000 80a7 	beq.w	80086c8 <_vfiprintf_r+0x1ec>
 800857a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800857c:	445a      	add	r2, fp
 800857e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 809f 	beq.w	80086c8 <_vfiprintf_r+0x1ec>
 800858a:	2300      	movs	r3, #0
 800858c:	f04f 32ff 	mov.w	r2, #4294967295
 8008590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80085a2:	4654      	mov	r4, sl
 80085a4:	2205      	movs	r2, #5
 80085a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085aa:	4853      	ldr	r0, [pc, #332]	@ (80086f8 <_vfiprintf_r+0x21c>)
 80085ac:	f7f7 feb0 	bl	8000310 <memchr>
 80085b0:	9a04      	ldr	r2, [sp, #16]
 80085b2:	b9d8      	cbnz	r0, 80085ec <_vfiprintf_r+0x110>
 80085b4:	06d1      	lsls	r1, r2, #27
 80085b6:	bf44      	itt	mi
 80085b8:	2320      	movmi	r3, #32
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085be:	0713      	lsls	r3, r2, #28
 80085c0:	bf44      	itt	mi
 80085c2:	232b      	movmi	r3, #43	@ 0x2b
 80085c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ce:	d015      	beq.n	80085fc <_vfiprintf_r+0x120>
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	4654      	mov	r4, sl
 80085d4:	2000      	movs	r0, #0
 80085d6:	f04f 0c0a 	mov.w	ip, #10
 80085da:	4621      	mov	r1, r4
 80085dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e0:	3b30      	subs	r3, #48	@ 0x30
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d94b      	bls.n	800867e <_vfiprintf_r+0x1a2>
 80085e6:	b1b0      	cbz	r0, 8008616 <_vfiprintf_r+0x13a>
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	e014      	b.n	8008616 <_vfiprintf_r+0x13a>
 80085ec:	eba0 0308 	sub.w	r3, r0, r8
 80085f0:	fa09 f303 	lsl.w	r3, r9, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	46a2      	mov	sl, r4
 80085fa:	e7d2      	b.n	80085a2 <_vfiprintf_r+0xc6>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d19      	adds	r1, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9103      	str	r1, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	425b      	neglt	r3, r3
 800860a:	f042 0202 	orrlt.w	r2, r2, #2
 800860e:	9307      	strge	r3, [sp, #28]
 8008610:	9307      	strlt	r3, [sp, #28]
 8008612:	bfb8      	it	lt
 8008614:	9204      	strlt	r2, [sp, #16]
 8008616:	7823      	ldrb	r3, [r4, #0]
 8008618:	2b2e      	cmp	r3, #46	@ 0x2e
 800861a:	d10a      	bne.n	8008632 <_vfiprintf_r+0x156>
 800861c:	7863      	ldrb	r3, [r4, #1]
 800861e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008620:	d132      	bne.n	8008688 <_vfiprintf_r+0x1ac>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9203      	str	r2, [sp, #12]
 800862a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800862e:	3402      	adds	r4, #2
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008708 <_vfiprintf_r+0x22c>
 8008636:	7821      	ldrb	r1, [r4, #0]
 8008638:	2203      	movs	r2, #3
 800863a:	4650      	mov	r0, sl
 800863c:	f7f7 fe68 	bl	8000310 <memchr>
 8008640:	b138      	cbz	r0, 8008652 <_vfiprintf_r+0x176>
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	eba0 000a 	sub.w	r0, r0, sl
 8008648:	2240      	movs	r2, #64	@ 0x40
 800864a:	4082      	lsls	r2, r0
 800864c:	4313      	orrs	r3, r2
 800864e:	3401      	adds	r4, #1
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008656:	4829      	ldr	r0, [pc, #164]	@ (80086fc <_vfiprintf_r+0x220>)
 8008658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800865c:	2206      	movs	r2, #6
 800865e:	f7f7 fe57 	bl	8000310 <memchr>
 8008662:	2800      	cmp	r0, #0
 8008664:	d03f      	beq.n	80086e6 <_vfiprintf_r+0x20a>
 8008666:	4b26      	ldr	r3, [pc, #152]	@ (8008700 <_vfiprintf_r+0x224>)
 8008668:	bb1b      	cbnz	r3, 80086b2 <_vfiprintf_r+0x1d6>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	3307      	adds	r3, #7
 800866e:	f023 0307 	bic.w	r3, r3, #7
 8008672:	3308      	adds	r3, #8
 8008674:	9303      	str	r3, [sp, #12]
 8008676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008678:	443b      	add	r3, r7
 800867a:	9309      	str	r3, [sp, #36]	@ 0x24
 800867c:	e76a      	b.n	8008554 <_vfiprintf_r+0x78>
 800867e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008682:	460c      	mov	r4, r1
 8008684:	2001      	movs	r0, #1
 8008686:	e7a8      	b.n	80085da <_vfiprintf_r+0xfe>
 8008688:	2300      	movs	r3, #0
 800868a:	3401      	adds	r4, #1
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	4619      	mov	r1, r3
 8008690:	f04f 0c0a 	mov.w	ip, #10
 8008694:	4620      	mov	r0, r4
 8008696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869a:	3a30      	subs	r2, #48	@ 0x30
 800869c:	2a09      	cmp	r2, #9
 800869e:	d903      	bls.n	80086a8 <_vfiprintf_r+0x1cc>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0c6      	beq.n	8008632 <_vfiprintf_r+0x156>
 80086a4:	9105      	str	r1, [sp, #20]
 80086a6:	e7c4      	b.n	8008632 <_vfiprintf_r+0x156>
 80086a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ac:	4604      	mov	r4, r0
 80086ae:	2301      	movs	r3, #1
 80086b0:	e7f0      	b.n	8008694 <_vfiprintf_r+0x1b8>
 80086b2:	ab03      	add	r3, sp, #12
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	462a      	mov	r2, r5
 80086b8:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <_vfiprintf_r+0x228>)
 80086ba:	a904      	add	r1, sp, #16
 80086bc:	4630      	mov	r0, r6
 80086be:	f7fd ff43 	bl	8006548 <_printf_float>
 80086c2:	4607      	mov	r7, r0
 80086c4:	1c78      	adds	r0, r7, #1
 80086c6:	d1d6      	bne.n	8008676 <_vfiprintf_r+0x19a>
 80086c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ca:	07d9      	lsls	r1, r3, #31
 80086cc:	d405      	bmi.n	80086da <_vfiprintf_r+0x1fe>
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	059a      	lsls	r2, r3, #22
 80086d2:	d402      	bmi.n	80086da <_vfiprintf_r+0x1fe>
 80086d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086d6:	f7fe fc75 	bl	8006fc4 <__retarget_lock_release_recursive>
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	065b      	lsls	r3, r3, #25
 80086de:	f53f af1f 	bmi.w	8008520 <_vfiprintf_r+0x44>
 80086e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e4:	e71e      	b.n	8008524 <_vfiprintf_r+0x48>
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	462a      	mov	r2, r5
 80086ec:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <_vfiprintf_r+0x228>)
 80086ee:	a904      	add	r1, sp, #16
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7fe f9b1 	bl	8006a58 <_printf_i>
 80086f6:	e7e4      	b.n	80086c2 <_vfiprintf_r+0x1e6>
 80086f8:	08008f80 	.word	0x08008f80
 80086fc:	08008f8a 	.word	0x08008f8a
 8008700:	08006549 	.word	0x08006549
 8008704:	080084b7 	.word	0x080084b7
 8008708:	08008f86 	.word	0x08008f86

0800870c <__sflush_r>:
 800870c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008714:	0716      	lsls	r6, r2, #28
 8008716:	4605      	mov	r5, r0
 8008718:	460c      	mov	r4, r1
 800871a:	d454      	bmi.n	80087c6 <__sflush_r+0xba>
 800871c:	684b      	ldr	r3, [r1, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	dc02      	bgt.n	8008728 <__sflush_r+0x1c>
 8008722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd48      	ble.n	80087ba <__sflush_r+0xae>
 8008728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800872a:	2e00      	cmp	r6, #0
 800872c:	d045      	beq.n	80087ba <__sflush_r+0xae>
 800872e:	2300      	movs	r3, #0
 8008730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008734:	682f      	ldr	r7, [r5, #0]
 8008736:	6a21      	ldr	r1, [r4, #32]
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	d030      	beq.n	800879e <__sflush_r+0x92>
 800873c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	0759      	lsls	r1, r3, #29
 8008742:	d505      	bpl.n	8008750 <__sflush_r+0x44>
 8008744:	6863      	ldr	r3, [r4, #4]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800874a:	b10b      	cbz	r3, 8008750 <__sflush_r+0x44>
 800874c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	2300      	movs	r3, #0
 8008752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008754:	6a21      	ldr	r1, [r4, #32]
 8008756:	4628      	mov	r0, r5
 8008758:	47b0      	blx	r6
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	d106      	bne.n	800876e <__sflush_r+0x62>
 8008760:	6829      	ldr	r1, [r5, #0]
 8008762:	291d      	cmp	r1, #29
 8008764:	d82b      	bhi.n	80087be <__sflush_r+0xb2>
 8008766:	4a2a      	ldr	r2, [pc, #168]	@ (8008810 <__sflush_r+0x104>)
 8008768:	410a      	asrs	r2, r1
 800876a:	07d6      	lsls	r6, r2, #31
 800876c:	d427      	bmi.n	80087be <__sflush_r+0xb2>
 800876e:	2200      	movs	r2, #0
 8008770:	6062      	str	r2, [r4, #4]
 8008772:	04d9      	lsls	r1, r3, #19
 8008774:	6922      	ldr	r2, [r4, #16]
 8008776:	6022      	str	r2, [r4, #0]
 8008778:	d504      	bpl.n	8008784 <__sflush_r+0x78>
 800877a:	1c42      	adds	r2, r0, #1
 800877c:	d101      	bne.n	8008782 <__sflush_r+0x76>
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	b903      	cbnz	r3, 8008784 <__sflush_r+0x78>
 8008782:	6560      	str	r0, [r4, #84]	@ 0x54
 8008784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008786:	602f      	str	r7, [r5, #0]
 8008788:	b1b9      	cbz	r1, 80087ba <__sflush_r+0xae>
 800878a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800878e:	4299      	cmp	r1, r3
 8008790:	d002      	beq.n	8008798 <__sflush_r+0x8c>
 8008792:	4628      	mov	r0, r5
 8008794:	f7ff f9f6 	bl	8007b84 <_free_r>
 8008798:	2300      	movs	r3, #0
 800879a:	6363      	str	r3, [r4, #52]	@ 0x34
 800879c:	e00d      	b.n	80087ba <__sflush_r+0xae>
 800879e:	2301      	movs	r3, #1
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b0      	blx	r6
 80087a4:	4602      	mov	r2, r0
 80087a6:	1c50      	adds	r0, r2, #1
 80087a8:	d1c9      	bne.n	800873e <__sflush_r+0x32>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0c6      	beq.n	800873e <__sflush_r+0x32>
 80087b0:	2b1d      	cmp	r3, #29
 80087b2:	d001      	beq.n	80087b8 <__sflush_r+0xac>
 80087b4:	2b16      	cmp	r3, #22
 80087b6:	d11e      	bne.n	80087f6 <__sflush_r+0xea>
 80087b8:	602f      	str	r7, [r5, #0]
 80087ba:	2000      	movs	r0, #0
 80087bc:	e022      	b.n	8008804 <__sflush_r+0xf8>
 80087be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	e01b      	b.n	80087fe <__sflush_r+0xf2>
 80087c6:	690f      	ldr	r7, [r1, #16]
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	d0f6      	beq.n	80087ba <__sflush_r+0xae>
 80087cc:	0793      	lsls	r3, r2, #30
 80087ce:	680e      	ldr	r6, [r1, #0]
 80087d0:	bf08      	it	eq
 80087d2:	694b      	ldreq	r3, [r1, #20]
 80087d4:	600f      	str	r7, [r1, #0]
 80087d6:	bf18      	it	ne
 80087d8:	2300      	movne	r3, #0
 80087da:	eba6 0807 	sub.w	r8, r6, r7
 80087de:	608b      	str	r3, [r1, #8]
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	dde9      	ble.n	80087ba <__sflush_r+0xae>
 80087e6:	6a21      	ldr	r1, [r4, #32]
 80087e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087ea:	4643      	mov	r3, r8
 80087ec:	463a      	mov	r2, r7
 80087ee:	4628      	mov	r0, r5
 80087f0:	47b0      	blx	r6
 80087f2:	2800      	cmp	r0, #0
 80087f4:	dc08      	bgt.n	8008808 <__sflush_r+0xfc>
 80087f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	4407      	add	r7, r0
 800880a:	eba8 0800 	sub.w	r8, r8, r0
 800880e:	e7e7      	b.n	80087e0 <__sflush_r+0xd4>
 8008810:	dfbffffe 	.word	0xdfbffffe

08008814 <_fflush_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	690b      	ldr	r3, [r1, #16]
 8008818:	4605      	mov	r5, r0
 800881a:	460c      	mov	r4, r1
 800881c:	b913      	cbnz	r3, 8008824 <_fflush_r+0x10>
 800881e:	2500      	movs	r5, #0
 8008820:	4628      	mov	r0, r5
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	b118      	cbz	r0, 800882e <_fflush_r+0x1a>
 8008826:	6a03      	ldr	r3, [r0, #32]
 8008828:	b90b      	cbnz	r3, 800882e <_fflush_r+0x1a>
 800882a:	f7fe fac1 	bl	8006db0 <__sinit>
 800882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f3      	beq.n	800881e <_fflush_r+0xa>
 8008836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008838:	07d0      	lsls	r0, r2, #31
 800883a:	d404      	bmi.n	8008846 <_fflush_r+0x32>
 800883c:	0599      	lsls	r1, r3, #22
 800883e:	d402      	bmi.n	8008846 <_fflush_r+0x32>
 8008840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008842:	f7fe fbbe 	bl	8006fc2 <__retarget_lock_acquire_recursive>
 8008846:	4628      	mov	r0, r5
 8008848:	4621      	mov	r1, r4
 800884a:	f7ff ff5f 	bl	800870c <__sflush_r>
 800884e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008850:	07da      	lsls	r2, r3, #31
 8008852:	4605      	mov	r5, r0
 8008854:	d4e4      	bmi.n	8008820 <_fflush_r+0xc>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	059b      	lsls	r3, r3, #22
 800885a:	d4e1      	bmi.n	8008820 <_fflush_r+0xc>
 800885c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800885e:	f7fe fbb1 	bl	8006fc4 <__retarget_lock_release_recursive>
 8008862:	e7dd      	b.n	8008820 <_fflush_r+0xc>

08008864 <__swbuf_r>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	460e      	mov	r6, r1
 8008868:	4614      	mov	r4, r2
 800886a:	4605      	mov	r5, r0
 800886c:	b118      	cbz	r0, 8008876 <__swbuf_r+0x12>
 800886e:	6a03      	ldr	r3, [r0, #32]
 8008870:	b90b      	cbnz	r3, 8008876 <__swbuf_r+0x12>
 8008872:	f7fe fa9d 	bl	8006db0 <__sinit>
 8008876:	69a3      	ldr	r3, [r4, #24]
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	071a      	lsls	r2, r3, #28
 800887e:	d501      	bpl.n	8008884 <__swbuf_r+0x20>
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	b943      	cbnz	r3, 8008896 <__swbuf_r+0x32>
 8008884:	4621      	mov	r1, r4
 8008886:	4628      	mov	r0, r5
 8008888:	f000 f82a 	bl	80088e0 <__swsetup_r>
 800888c:	b118      	cbz	r0, 8008896 <__swbuf_r+0x32>
 800888e:	f04f 37ff 	mov.w	r7, #4294967295
 8008892:	4638      	mov	r0, r7
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	6922      	ldr	r2, [r4, #16]
 800889a:	1a98      	subs	r0, r3, r2
 800889c:	6963      	ldr	r3, [r4, #20]
 800889e:	b2f6      	uxtb	r6, r6
 80088a0:	4283      	cmp	r3, r0
 80088a2:	4637      	mov	r7, r6
 80088a4:	dc05      	bgt.n	80088b2 <__swbuf_r+0x4e>
 80088a6:	4621      	mov	r1, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7ff ffb3 	bl	8008814 <_fflush_r>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d1ed      	bne.n	800888e <__swbuf_r+0x2a>
 80088b2:	68a3      	ldr	r3, [r4, #8]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	60a3      	str	r3, [r4, #8]
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	701e      	strb	r6, [r3, #0]
 80088c0:	6962      	ldr	r2, [r4, #20]
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d004      	beq.n	80088d2 <__swbuf_r+0x6e>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	07db      	lsls	r3, r3, #31
 80088cc:	d5e1      	bpl.n	8008892 <__swbuf_r+0x2e>
 80088ce:	2e0a      	cmp	r6, #10
 80088d0:	d1df      	bne.n	8008892 <__swbuf_r+0x2e>
 80088d2:	4621      	mov	r1, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	f7ff ff9d 	bl	8008814 <_fflush_r>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d0d9      	beq.n	8008892 <__swbuf_r+0x2e>
 80088de:	e7d6      	b.n	800888e <__swbuf_r+0x2a>

080088e0 <__swsetup_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4b29      	ldr	r3, [pc, #164]	@ (8008988 <__swsetup_r+0xa8>)
 80088e4:	4605      	mov	r5, r0
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	460c      	mov	r4, r1
 80088ea:	b118      	cbz	r0, 80088f4 <__swsetup_r+0x14>
 80088ec:	6a03      	ldr	r3, [r0, #32]
 80088ee:	b90b      	cbnz	r3, 80088f4 <__swsetup_r+0x14>
 80088f0:	f7fe fa5e 	bl	8006db0 <__sinit>
 80088f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f8:	0719      	lsls	r1, r3, #28
 80088fa:	d422      	bmi.n	8008942 <__swsetup_r+0x62>
 80088fc:	06da      	lsls	r2, r3, #27
 80088fe:	d407      	bmi.n	8008910 <__swsetup_r+0x30>
 8008900:	2209      	movs	r2, #9
 8008902:	602a      	str	r2, [r5, #0]
 8008904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	f04f 30ff 	mov.w	r0, #4294967295
 800890e:	e033      	b.n	8008978 <__swsetup_r+0x98>
 8008910:	0758      	lsls	r0, r3, #29
 8008912:	d512      	bpl.n	800893a <__swsetup_r+0x5a>
 8008914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008916:	b141      	cbz	r1, 800892a <__swsetup_r+0x4a>
 8008918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800891c:	4299      	cmp	r1, r3
 800891e:	d002      	beq.n	8008926 <__swsetup_r+0x46>
 8008920:	4628      	mov	r0, r5
 8008922:	f7ff f92f 	bl	8007b84 <_free_r>
 8008926:	2300      	movs	r3, #0
 8008928:	6363      	str	r3, [r4, #52]	@ 0x34
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	2300      	movs	r3, #0
 8008934:	6063      	str	r3, [r4, #4]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f043 0308 	orr.w	r3, r3, #8
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	b94b      	cbnz	r3, 800895a <__swsetup_r+0x7a>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800894c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008950:	d003      	beq.n	800895a <__swsetup_r+0x7a>
 8008952:	4621      	mov	r1, r4
 8008954:	4628      	mov	r0, r5
 8008956:	f000 f8c1 	bl	8008adc <__smakebuf_r>
 800895a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895e:	f013 0201 	ands.w	r2, r3, #1
 8008962:	d00a      	beq.n	800897a <__swsetup_r+0x9a>
 8008964:	2200      	movs	r2, #0
 8008966:	60a2      	str	r2, [r4, #8]
 8008968:	6962      	ldr	r2, [r4, #20]
 800896a:	4252      	negs	r2, r2
 800896c:	61a2      	str	r2, [r4, #24]
 800896e:	6922      	ldr	r2, [r4, #16]
 8008970:	b942      	cbnz	r2, 8008984 <__swsetup_r+0xa4>
 8008972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008976:	d1c5      	bne.n	8008904 <__swsetup_r+0x24>
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	0799      	lsls	r1, r3, #30
 800897c:	bf58      	it	pl
 800897e:	6962      	ldrpl	r2, [r4, #20]
 8008980:	60a2      	str	r2, [r4, #8]
 8008982:	e7f4      	b.n	800896e <__swsetup_r+0x8e>
 8008984:	2000      	movs	r0, #0
 8008986:	e7f7      	b.n	8008978 <__swsetup_r+0x98>
 8008988:	2400001c 	.word	0x2400001c

0800898c <_sbrk_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d06      	ldr	r5, [pc, #24]	@ (80089a8 <_sbrk_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7f8 fa2a 	bl	8000df0 <_sbrk>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_sbrk_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_sbrk_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	24000420 	.word	0x24000420

080089ac <memcpy>:
 80089ac:	440a      	add	r2, r1
 80089ae:	4291      	cmp	r1, r2
 80089b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089b4:	d100      	bne.n	80089b8 <memcpy+0xc>
 80089b6:	4770      	bx	lr
 80089b8:	b510      	push	{r4, lr}
 80089ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089c2:	4291      	cmp	r1, r2
 80089c4:	d1f9      	bne.n	80089ba <memcpy+0xe>
 80089c6:	bd10      	pop	{r4, pc}

080089c8 <__assert_func>:
 80089c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ca:	4614      	mov	r4, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <__assert_func+0x2c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4605      	mov	r5, r0
 80089d4:	68d8      	ldr	r0, [r3, #12]
 80089d6:	b954      	cbnz	r4, 80089ee <__assert_func+0x26>
 80089d8:	4b07      	ldr	r3, [pc, #28]	@ (80089f8 <__assert_func+0x30>)
 80089da:	461c      	mov	r4, r3
 80089dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089e0:	9100      	str	r1, [sp, #0]
 80089e2:	462b      	mov	r3, r5
 80089e4:	4905      	ldr	r1, [pc, #20]	@ (80089fc <__assert_func+0x34>)
 80089e6:	f000 f841 	bl	8008a6c <fiprintf>
 80089ea:	f000 f8d5 	bl	8008b98 <abort>
 80089ee:	4b04      	ldr	r3, [pc, #16]	@ (8008a00 <__assert_func+0x38>)
 80089f0:	e7f4      	b.n	80089dc <__assert_func+0x14>
 80089f2:	bf00      	nop
 80089f4:	2400001c 	.word	0x2400001c
 80089f8:	08008fd6 	.word	0x08008fd6
 80089fc:	08008fa8 	.word	0x08008fa8
 8008a00:	08008f9b 	.word	0x08008f9b

08008a04 <_calloc_r>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	fba1 5402 	umull	r5, r4, r1, r2
 8008a0a:	b93c      	cbnz	r4, 8008a1c <_calloc_r+0x18>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7ff f92d 	bl	8007c6c <_malloc_r>
 8008a12:	4606      	mov	r6, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <_calloc_r+0x1e>
 8008a16:	2600      	movs	r6, #0
 8008a18:	4630      	mov	r0, r6
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	220c      	movs	r2, #12
 8008a1e:	6002      	str	r2, [r0, #0]
 8008a20:	e7f9      	b.n	8008a16 <_calloc_r+0x12>
 8008a22:	462a      	mov	r2, r5
 8008a24:	4621      	mov	r1, r4
 8008a26:	f7fe fa4e 	bl	8006ec6 <memset>
 8008a2a:	e7f5      	b.n	8008a18 <_calloc_r+0x14>

08008a2c <__ascii_mbtowc>:
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	b901      	cbnz	r1, 8008a32 <__ascii_mbtowc+0x6>
 8008a30:	a901      	add	r1, sp, #4
 8008a32:	b142      	cbz	r2, 8008a46 <__ascii_mbtowc+0x1a>
 8008a34:	b14b      	cbz	r3, 8008a4a <__ascii_mbtowc+0x1e>
 8008a36:	7813      	ldrb	r3, [r2, #0]
 8008a38:	600b      	str	r3, [r1, #0]
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	1e10      	subs	r0, r2, #0
 8008a3e:	bf18      	it	ne
 8008a40:	2001      	movne	r0, #1
 8008a42:	b002      	add	sp, #8
 8008a44:	4770      	bx	lr
 8008a46:	4610      	mov	r0, r2
 8008a48:	e7fb      	b.n	8008a42 <__ascii_mbtowc+0x16>
 8008a4a:	f06f 0001 	mvn.w	r0, #1
 8008a4e:	e7f8      	b.n	8008a42 <__ascii_mbtowc+0x16>

08008a50 <__ascii_wctomb>:
 8008a50:	4603      	mov	r3, r0
 8008a52:	4608      	mov	r0, r1
 8008a54:	b141      	cbz	r1, 8008a68 <__ascii_wctomb+0x18>
 8008a56:	2aff      	cmp	r2, #255	@ 0xff
 8008a58:	d904      	bls.n	8008a64 <__ascii_wctomb+0x14>
 8008a5a:	228a      	movs	r2, #138	@ 0x8a
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a62:	4770      	bx	lr
 8008a64:	700a      	strb	r2, [r1, #0]
 8008a66:	2001      	movs	r0, #1
 8008a68:	4770      	bx	lr
	...

08008a6c <fiprintf>:
 8008a6c:	b40e      	push	{r1, r2, r3}
 8008a6e:	b503      	push	{r0, r1, lr}
 8008a70:	4601      	mov	r1, r0
 8008a72:	ab03      	add	r3, sp, #12
 8008a74:	4805      	ldr	r0, [pc, #20]	@ (8008a8c <fiprintf+0x20>)
 8008a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	f7ff fd2d 	bl	80084dc <_vfiprintf_r>
 8008a82:	b002      	add	sp, #8
 8008a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a88:	b003      	add	sp, #12
 8008a8a:	4770      	bx	lr
 8008a8c:	2400001c 	.word	0x2400001c

08008a90 <__swhatbuf_r>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	460c      	mov	r4, r1
 8008a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a98:	2900      	cmp	r1, #0
 8008a9a:	b096      	sub	sp, #88	@ 0x58
 8008a9c:	4615      	mov	r5, r2
 8008a9e:	461e      	mov	r6, r3
 8008aa0:	da0d      	bge.n	8008abe <__swhatbuf_r+0x2e>
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008aa8:	f04f 0100 	mov.w	r1, #0
 8008aac:	bf14      	ite	ne
 8008aae:	2340      	movne	r3, #64	@ 0x40
 8008ab0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	6031      	str	r1, [r6, #0]
 8008ab8:	602b      	str	r3, [r5, #0]
 8008aba:	b016      	add	sp, #88	@ 0x58
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
 8008abe:	466a      	mov	r2, sp
 8008ac0:	f000 f848 	bl	8008b54 <_fstat_r>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	dbec      	blt.n	8008aa2 <__swhatbuf_r+0x12>
 8008ac8:	9901      	ldr	r1, [sp, #4]
 8008aca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ace:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ad2:	4259      	negs	r1, r3
 8008ad4:	4159      	adcs	r1, r3
 8008ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ada:	e7eb      	b.n	8008ab4 <__swhatbuf_r+0x24>

08008adc <__smakebuf_r>:
 8008adc:	898b      	ldrh	r3, [r1, #12]
 8008ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ae0:	079d      	lsls	r5, r3, #30
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	d507      	bpl.n	8008af8 <__smakebuf_r+0x1c>
 8008ae8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	2301      	movs	r3, #1
 8008af2:	6163      	str	r3, [r4, #20]
 8008af4:	b003      	add	sp, #12
 8008af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af8:	ab01      	add	r3, sp, #4
 8008afa:	466a      	mov	r2, sp
 8008afc:	f7ff ffc8 	bl	8008a90 <__swhatbuf_r>
 8008b00:	9f00      	ldr	r7, [sp, #0]
 8008b02:	4605      	mov	r5, r0
 8008b04:	4639      	mov	r1, r7
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7ff f8b0 	bl	8007c6c <_malloc_r>
 8008b0c:	b948      	cbnz	r0, 8008b22 <__smakebuf_r+0x46>
 8008b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b12:	059a      	lsls	r2, r3, #22
 8008b14:	d4ee      	bmi.n	8008af4 <__smakebuf_r+0x18>
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	f043 0302 	orr.w	r3, r3, #2
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	e7e2      	b.n	8008ae8 <__smakebuf_r+0xc>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	6020      	str	r0, [r4, #0]
 8008b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b32:	b15b      	cbz	r3, 8008b4c <__smakebuf_r+0x70>
 8008b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 f81d 	bl	8008b78 <_isatty_r>
 8008b3e:	b128      	cbz	r0, 8008b4c <__smakebuf_r+0x70>
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f023 0303 	bic.w	r3, r3, #3
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	431d      	orrs	r5, r3
 8008b50:	81a5      	strh	r5, [r4, #12]
 8008b52:	e7cf      	b.n	8008af4 <__smakebuf_r+0x18>

08008b54 <_fstat_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4d07      	ldr	r5, [pc, #28]	@ (8008b74 <_fstat_r+0x20>)
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	602b      	str	r3, [r5, #0]
 8008b62:	f7f8 f91c 	bl	8000d9e <_fstat>
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	d102      	bne.n	8008b70 <_fstat_r+0x1c>
 8008b6a:	682b      	ldr	r3, [r5, #0]
 8008b6c:	b103      	cbz	r3, 8008b70 <_fstat_r+0x1c>
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	bd38      	pop	{r3, r4, r5, pc}
 8008b72:	bf00      	nop
 8008b74:	24000420 	.word	0x24000420

08008b78 <_isatty_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d06      	ldr	r5, [pc, #24]	@ (8008b94 <_isatty_r+0x1c>)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f7f8 f91b 	bl	8000dbe <_isatty>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_isatty_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_isatty_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	24000420 	.word	0x24000420

08008b98 <abort>:
 8008b98:	b508      	push	{r3, lr}
 8008b9a:	2006      	movs	r0, #6
 8008b9c:	f000 f82c 	bl	8008bf8 <raise>
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	f7f8 f8c8 	bl	8000d36 <_exit>

08008ba6 <_raise_r>:
 8008ba6:	291f      	cmp	r1, #31
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4605      	mov	r5, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	d904      	bls.n	8008bba <_raise_r+0x14>
 8008bb0:	2316      	movs	r3, #22
 8008bb2:	6003      	str	r3, [r0, #0]
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	bd38      	pop	{r3, r4, r5, pc}
 8008bba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bbc:	b112      	cbz	r2, 8008bc4 <_raise_r+0x1e>
 8008bbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bc2:	b94b      	cbnz	r3, 8008bd8 <_raise_r+0x32>
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f000 f831 	bl	8008c2c <_getpid_r>
 8008bca:	4622      	mov	r2, r4
 8008bcc:	4601      	mov	r1, r0
 8008bce:	4628      	mov	r0, r5
 8008bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bd4:	f000 b818 	b.w	8008c08 <_kill_r>
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d00a      	beq.n	8008bf2 <_raise_r+0x4c>
 8008bdc:	1c59      	adds	r1, r3, #1
 8008bde:	d103      	bne.n	8008be8 <_raise_r+0x42>
 8008be0:	2316      	movs	r3, #22
 8008be2:	6003      	str	r3, [r0, #0]
 8008be4:	2001      	movs	r0, #1
 8008be6:	e7e7      	b.n	8008bb8 <_raise_r+0x12>
 8008be8:	2100      	movs	r1, #0
 8008bea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4798      	blx	r3
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e7e0      	b.n	8008bb8 <_raise_r+0x12>
	...

08008bf8 <raise>:
 8008bf8:	4b02      	ldr	r3, [pc, #8]	@ (8008c04 <raise+0xc>)
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	f7ff bfd2 	b.w	8008ba6 <_raise_r>
 8008c02:	bf00      	nop
 8008c04:	2400001c 	.word	0x2400001c

08008c08 <_kill_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	@ (8008c28 <_kill_r+0x20>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f7f8 f87e 	bl	8000d16 <_kill>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d102      	bne.n	8008c24 <_kill_r+0x1c>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	b103      	cbz	r3, 8008c24 <_kill_r+0x1c>
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	24000420 	.word	0x24000420

08008c2c <_getpid_r>:
 8008c2c:	f7f8 b86b 	b.w	8000d06 <_getpid>

08008c30 <_init>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr

08008c3c <_fini>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr
