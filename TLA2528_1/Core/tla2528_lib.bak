/*
 * tla2528_liv.c
 *
 *  Created on: Mar 24, 2025
 *      Author: user
 */

#include "tla2528_lib.h"

#define TLA2528_ADDRESS 0x10 // Replace with the actual I2C address of the TLA2528
#define ADC_RESULT_REGISTER 0x00 // ที่อยู่ Register สำหรับผลลัพธ์ ADC




/*
 uint8_t TLA2528_read_from_register(uint8_t reg_addr) {
 uint8_t data = 0;
 HAL_I2C_Mem_Read(&hi2c5, TLA2528_ADDRESS << 1, reg_addr,I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 return data;
 }
 */

// ฟังก์ชันเริ่มต้นใช้งาน
void TLA2528_Init(void) {
    // รีเซ็ตอุปกรณ์
    TLA2528_write_to_register(GENERAL_CFG_ADDRESS, 0x01); // RST=1
    HAL_Delay(10);

    // ตั้งค่าพื้นฐาน
    TLA2528_write_to_register(PIN_CFG_ADDRESS, 0x00); // ทั้งหมดเป็น Analog Input
    TLA2528_write_to_register(OSR_CFG_ADDRESS, 0x00); // ไม่ใช้ Oversampling
}


uint8_t TLA2528_read_from_register(uint8_t reg_addr, uint8_t *data,
		uint8_t length) {
	// อ่านข้อมูลจาก TLA2528
	if (HAL_I2C_Mem_Read(&hi2c5, TLA2528_ADDRESS << 1, reg_addr,
			I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY) != HAL_OK) {
		// ถ้าเกิดข้อผิดพลาดในการอ่านข้อมูล
		return 0xFF;  // ค่าผิดพลาด
	}
	return 0;  // สำเร็จ
}

void TLA2528_write_to_register(uint8_t reg_addr, uint8_t data) {
	HAL_I2C_Mem_Write(&hi2c5, TLA2528_ADDRESS << 1, reg_addr,
	I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
	/*
    if (HAL_I2C_Mem_Write(&hi2c5, TLA2528_ADDRESS << 1, reg_addr,
            I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
        return 0xFF;  // เขียนไม่สำเร็จ
    }
    return 0;  // เขียนสำเร็จ*/
}

uint8_t TLA2528_read_continuous_register(uint8_t start_reg_addr, uint8_t *data, uint8_t length) {
    // อ่านข้อมูลจาก TLA2528 แบบต่อเนื่อง
    // start_reg_addr คือที่อยู่ของ register เริ่มต้นที่ต้องการอ่าน
    // data คือ buffer ที่จะเก็บข้อมูลที่อ่านได้
    // length คือจำนวน byte ที่ต้องการอ่าน

    // อ่านข้อมูลจาก register หลายๆ ตัว (block)
    if (HAL_I2C_Mem_Read(&hi2c5, TLA2528_ADDRESS << 1, start_reg_addr,
            I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY) != HAL_OK) {
        // ถ้าเกิดข้อผิดพลาดในการอ่านข้อมูล
        return 0xFF;  // ค่าผิดพลาด
    }
    return 0;  // สำเร็จ
}

void TLA2528_write_continuous_register(uint8_t start_reg_addr, uint8_t *data, uint8_t length) {
    // เขียนข้อมูลไปยัง TLA2528 แบบต่อเนื่อง
    // start_reg_addr คือที่อยู่ของ register เริ่มต้นที่ต้องการเขียน
    // data คือ buffer ที่เก็บข้อมูลที่จะเขียน
    // length คือจำนวน byte ที่ต้องการเขียน

    // เขียนข้อมูลจาก buffer ไปยัง register หลายๆ ตัว (block)
    if (HAL_I2C_Mem_Write(&hi2c5, TLA2528_ADDRESS << 1, start_reg_addr,
            I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY) != HAL_OK) {
        // ถ้าเกิดข้อผิดพลาดในการเขียนข้อมูล
        // ในกรณีนี้เราไม่ได้คืนค่าผลลัพธ์ จะต้องใช้การจัดการข้อผิดพลาดภายในฟังก์ชัน
        // เช่น การรีเซ็ตหรือแสดงข้อความเตือน
        return;  // สามารถใช้ return เพื่อออกจากฟังก์ชัน
    }
}


uint16_t TLA2528_read_one_channel_data(uint8_t channel_num) {
    uint8_t data[2] = {0};
    uint16_t result = 0;

    // เลือกช่องสัญญาณ
    TLA2528_write_to_register(MANUAL_CH_SEL_ADDRESS, channel_num);

    // อาจต้องเพิ่มเวลาหน่วงเพื่อให้ ADC พร้อม
    HAL_Delay(1);

    // อ่านข้อมูลจาก TLA2528 (สมมติว่าใช้ register 0x00 และ 0x01 สำหรับข้อมูล ADC)
    if (TLA2528_read_from_register(0x00, data, 2) == 0) {
        // รวมข้อมูลที่ได้เป็น 16-bit
        result = (data[0] << 8) | data[1];
    } else {
        // การอ่านข้อมูลผิดพลาด
        result = 0xFFFF;  // ค่าผิดพลาด
    }

    return result;
}

// ฟังก์ชันอ่านค่า ADC
uint16_t TLA2528_Read_ADC(uint8_t channel) {
    uint8_t data[2];

    // ตั้งค่าโหมด manual และเลือกช่อง
    //TLA2528_write_to_register(SEQUENCE_CFG_ADDRESS, 0x00); // Manual mode
    TLA2528_write_to_register(MANUAL_CH_SEL_ADDRESS, channel);

    // อ่านค่า ADC (จะ trigger การแปลงโดยอัตโนมัติ)
    if(TLA2528_read_from_register(0x00, data, 2) != 0) {
        return 0xFFFF; // ค่าผิดพลาด
    }

    // รวมข้อมูล 12-bit
    return ((data[0] << 8) | data[1]) >> 4;
}

uint16_t* TLA2528_read_all_channels(void) {
	static uint16_t channel_data[8]; // สำหรับ 8 ช่อง AIN
	for (uint8_t i = 0; i < 8; i++) {
		channel_data[i] = TLA2528_read_one_channel_data(i); // อ่านข้อมูลจากแต่ละช่อง
	}
	return channel_data;
}

ADC_Result TLA2528_read_one_channel(uint8_t channel) {
    uint8_t data[2];
    ADC_Result result = {0, 0.0f};

    // เลือกช่องสัญญาณ
//    TLA2528_write_to_register(0x01, channel);
    // ตั้งค่าโหมด manual และเลือกช่อง
    TLA2528_write_to_register(SEQUENCE_CFG_ADDRESS, 0x00);  // Manual mode
    TLA2528_write_to_register(MANUAL_CH_SEL_ADDRESS, channel & 0x07);  // เลือกช่อง 0-7
    HAL_Delay(1);  // รอให้ค่า ADC เสถียร

    // อ่านค่า ADC
    if (TLA2528_read_from_register(0x00, data, 2) == 0) {
//        result.adc_value = (data[0] << 8) | data[1];
//        result.voltage = (result.adc_value / 65536.0) * V_REF;
    	   result.adc_value = ((data[0] << 8) | data[1]) >> 4;
    	        result.voltage = (result.adc_value / 4095.0f) * V_REF;
    } else {
        result.adc_value = 0xFFFF;  // ค่าผิดพลาด
        result.voltage = -1.0;
    }
    return result;
}
void TLA2528_read_all_channels1(ADC_Result *results) {
	 // ตั้งค่าโหมด Auto-Sequence เพื่ออ่านแบบต่อเนื่อง
	    TLA2528_write_to_register(SEQUENCE_CFG_ADDRESS, 0x00); // 確保เป็น Manual mode ก่อน
	    TLA2528_write_to_register(AUTO_SEQ_CH_SEL_ADDRESS, 0xFF); // เปิดใช้งานทุกช่อง
	    TLA2528_write_to_register(SEQUENCE_CFG_ADDRESS, 0x11); // Auto-sequence mode + Start

	    for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
	        uint8_t data[2];
	        results[i].channel = i;
	        results[i].valid = false;

	        // อ่านค่า ADC (trigger conversion โดยอัตโนมัติ)
	        if (TLA2528_read_from_register(0x00, data, 2) == HAL_OK) {
	            results[i].adc_value = ((data[0] << 8) | data[1]) >> 4; // 12-bit data
	            results[i].voltage = (results[i].adc_value / 4095.0f) * V_REF;
	            results[i].valid = true;
	        } else {
	            results[i].adc_value = 0xFFFF;
	            results[i].voltage = -1.0f;
	        }

	        HAL_Delay(1); // รอให้ ADC พร้อมสำหรับการอ่านครั้งต่อไป
	    }

	    // หยุดโหมด Auto-Sequence
	    TLA2528_write_to_register(SEQUENCE_CFG_ADDRESS, 0x01); // Auto-sequence mode without start
}

// ฟังก์ชันทดสอบ
void test_read_adc() {
	  ADC_Result results[NUM_ADC_CHANNELS];
	    printf("\n--- Starting ADC Test ---\n");

	    TLA2528_read_all_channels1(results);

	    for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
	        if (results[i].valid) {
	            printf("CH%d: %4u (0x%03X) -> %.3fV %s\n",
	                  results[i].channel,
	                  results[i].adc_value,
	                  results[i].adc_value,
	                  results[i].voltage,
	                  (results[i].voltage > V_REF) ? "[OVER]" : "");
	        } else {
	            printf("CH%d: ERROR!\n", i);
	        }
	    }

	    printf("--- Test Complete ---\n\n");
}

