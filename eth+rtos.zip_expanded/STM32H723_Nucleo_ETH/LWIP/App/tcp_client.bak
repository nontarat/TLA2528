#include "lwip.h"
#include "lwip/sockets.h"
#include "lwip/inet.h"
#include <string.h>
#include <errno.h> // สำหรับ errno

extern UART_HandleTypeDef huart3;  // กำหนด UART_HandleTypeDef สำหรับ UART3
char json_data[] = "{\"temperature\":23.5,\"humidity\":60,\"measure\":888}";
// เพิ่มฟังก์ชันสำหรับตั้งค่า timeout
void set_socket_timeout(int sock) {
    struct timeval timeout;
    timeout.tv_sec = 5;  // 5 วินาที
    timeout.tv_usec = 0;

    // ตั้งค่า timeout สำหรับการเชื่อมต่อ
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (const char*)&timeout, sizeof(timeout));
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (const char*)&timeout, sizeof(timeout));
}

void send_post_request(int sock, const char *json_data) {

    char *http_request_template =
        "POST /onoffled/getTNK.php HTTP/1.1\r\n"
        "Host: tanakulgroup.com\r\n"
        "Content-Type: application/json\r\n"
        "Content-Length: %d\r\n"
        "Connection: close\r\n\r\n"
        "%s"; // JSON data จะถูกแทรกที่นี่

    // รับข้อมูลจาก server
    int json_length = strlen(json_data);
    char http_request[512]; // สร้าง buffer สำหรับ HTTP request
    snprintf(http_request, sizeof(http_request), http_request_template, json_length, json_data);

    // ส่งข้อมูลไปยังเซิร์ฟเวอร์
    if (send(sock, http_request, strlen(http_request), 0) < 0) {
        int err_code = errno; // รับรหัสข้อผิดพลาด
        char error_message[50];
        snprintf(error_message, sizeof(error_message), "Error %d sending data\r\n", err_code);
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
        closesocket(sock);
    }
}

void connect_to_server(void) {
    struct sockaddr_in server_addr;
    int sock;
    char *server_ip = "13.67.106.185";  // IP ของ server
    // char *server_ip = "104.26.10.187";  // IP ของ JSONPlaceholder
    // char *server_ip = "jsonplaceholder.typicode.com";  // ใช้ชื่อเซิร์ฟเวอร์แทน IP
    int server_port = 80;               // HTTP port

    // สร้าง socket ใหม่
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        char *error_message = "Error creating socket\r\n";
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
        return;
    }

    // ตั้งค่า server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(server_port);
    server_addr.sin_addr.s_addr = inet_addr(server_ip);

    set_socket_timeout(sock);    // ตั้งค่า timeout




    // เชื่อมต่อไปยัง server
//    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
//        int err_code = errno; // รับรหัสข้อผิดพลาด
//        char error_message[50];
//        snprintf(error_message, sizeof(error_message), "Error %d connecting to server\r\n", err_code);
//        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
//        closesocket(sock);
//        return;
//    }
    // เชื่อมต่อไปยัง server
       while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
           int err_code = errno; // รับรหัสข้อผิดพลาด
           char error_message[50];
           snprintf(error_message, sizeof(error_message), "Error %d connecting to server\r\n", err_code);
           HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
           closesocket(sock);

           // รอ 2 วินาทีก่อนลองเชื่อมต่อใหม่
           HAL_Delay(2000);

           // สร้าง socket ใหม่
           sock = socket(AF_INET, SOCK_STREAM, 0);
           if (sock < 0) {
               HAL_UART_Transmit(&huart3, (uint8_t *)"Error creating socket\r\n", 25, HAL_MAX_DELAY);
               return;
           }

           // ตั้งค่า timeout
           set_socket_timeout(sock);
       }

    // สร้าง JSON data

    // ส่ง POST request
    send_post_request(sock, json_data);

    char buffer[512];
    int len;
    while ((len = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0) {
        buffer[len] = '\0';  // Null terminate string
        // ส่งข้อมูลที่ได้รับผ่าน UART3
        HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, HAL_MAX_DELAY);
    }

    if (len < 0) {
        int err_code = errno; // รับรหัสข้อผิดพลาด
        char error_message[50];
        snprintf(error_message, sizeof(error_message), "Error %d receiving data\r\n", err_code);
        HAL_UART_Transmit(&huart3, (uint8_t *)error_message, strlen(error_message), HAL_MAX_DELAY);
    }

    // ปิด socket
    closesocket(sock);
}
