
TLA2528_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08009488  08009488  0000a488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099b8  080099b8  0000a9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099c0  080099c0  0000a9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080099c4  080099c4  0000a9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080099c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  240001d8  08009ba0  0000b1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000430  08009ba0  0000b430  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014431  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027aa  00000000  00000000  0001f637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f58  00000000  00000000  00021de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bd8  00000000  00000000  00022d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f19e  00000000  00000000  00023918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000549f  00000000  00000000  00032ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00037f55  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e64  00000000  00000000  00037f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000043  00000000  00000000  0003cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009470 	.word	0x08009470

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08009470 	.word	0x08009470

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_write>:
I2C_HandleTypeDef hi2c5;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <_write+0x28>)
 80006c8:	f005 f852 	bl	8005770 <HAL_UART_Transmit>
	return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	24000248 	.word	0x24000248

080006dc <check_i2c_connected>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void check_i2c_connected(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c5, 0x10 << 1, 3, HAL_MAX_DELAY) != HAL_OK) {
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2203      	movs	r2, #3
 80006e6:	2120      	movs	r1, #32
 80006e8:	4807      	ldr	r0, [pc, #28]	@ (8000708 <check_i2c_connected+0x2c>)
 80006ea:	f001 fd89 	bl	8002200 <HAL_I2C_IsDeviceReady>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <check_i2c_connected+0x20>
		printf("TLA2528 Not Found!\r\n");
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <check_i2c_connected+0x30>)
 80006f6:	f006 ffb9 	bl	800766c <puts>
	} else {
		printf("TLA2528 Detected!\r\n");
	}
}
 80006fa:	e002      	b.n	8000702 <check_i2c_connected+0x26>
		printf("TLA2528 Detected!\r\n");
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <check_i2c_connected+0x34>)
 80006fe:	f006 ffb5 	bl	800766c <puts>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	240001f4 	.word	0x240001f4
 800070c:	08009488 	.word	0x08009488
 8000710:	0800949c 	.word	0x0800949c

08000714 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000718:	f000 f9ae 	bl	8000a78 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800071c:	f000 fdb0 	bl	8001280 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000720:	f000 f816 	bl	8000750 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000724:	f000 f910 	bl	8000948 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000728:	f000 f8c2 	bl	80008b0 <MX_USART3_UART_Init>
	MX_I2C5_Init();
 800072c:	f000 f880 	bl	8000830 <MX_I2C5_Init>
	/* USER CODE BEGIN 2 */
	check_i2c_connected();
 8000730:	f7ff ffd4 	bl	80006dc <check_i2c_connected>
	HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000738:	f000 fe34 	bl	80013a4 <HAL_Delay>
	TLA2528_Init();
 800073c:	f000 fd62 	bl	8001204 <TLA2528_Init>

		//uint8_t ch=0;
		//uint16_t adc_value = TLA2528_Read_Channel(ch);  // อ่านค่าช่อง 3
		//printf("AIN %X Value: %u\r\n", ch,adc_value);

		TLA2528_Read_All_Channels();  // อ่านค่าทุกช่อง
 8000740:	f000 fce6 	bl	8001110 <TLA2528_Read_All_Channels>
//		printf("GPIO_CFG : %08b\n", GPIO_CFG );
//		uint8_t GPO_DRIVE_CFG = TLA2528_Read_Register(GPO_DRIVE_CFG_ADDRESS);
//		printf("GPO_DRIVE_CFG : %08b\n", GPO_DRIVE_CFG );
//		uint8_t GPO_VALUE  = TLA2528_Read_Register(GPO_VALUE_ADDRESS);
//		printf("GPO_VALUE : %08b\n", GPO_VALUE );
		HAL_Delay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000748:	f000 fe2c 	bl	80013a4 <HAL_Delay>
		TLA2528_Read_All_Channels();  // อ่านค่าทุกช่อง
 800074c:	bf00      	nop
 800074e:	e7f7      	b.n	8000740 <main+0x2c>

08000750 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	@ 0x70
 8000754:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075a:	224c      	movs	r2, #76	@ 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 f864 	bl	800782c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f007 f85e 	bl	800782c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000770:	2002      	movs	r0, #2
 8000772:	f002 fa4b 	bl	8002c0c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <SystemClock_Config+0xdc>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000782:	4a2a      	ldr	r2, [pc, #168]	@ (800082c <SystemClock_Config+0xdc>)
 8000784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b28      	ldr	r3, [pc, #160]	@ (800082c <SystemClock_Config+0xdc>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000796:	bf00      	nop
 8000798:	4b24      	ldr	r3, [pc, #144]	@ (800082c <SystemClock_Config+0xdc>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007a4:	d1f8      	bne.n	8000798 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	2302      	movs	r3, #2
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80007ae:	2340      	movs	r3, #64	@ 0x40
 80007b0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b6:	2300      	movs	r3, #0
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 80007be:	230c      	movs	r3, #12
 80007c0:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ce:	230c      	movs	r3, #12
 80007d0:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fa4e 	bl	8002c80 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x9e>
		Error_Handler();
 80007ea:	f000 f971 	bl	8000ad0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ee:	233f      	movs	r3, #63	@ 0x3f
 80007f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2303      	movs	r3, #3
 80007f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007fa:	2308      	movs	r3, #8
 80007fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007fe:	2340      	movs	r3, #64	@ 0x40
 8000800:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800080c:	2340      	movs	r3, #64	@ 0x40
 800080e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2101      	movs	r1, #1
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fe0d 	bl	8003434 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xd4>
		Error_Handler();
 8000820:	f000 f956 	bl	8000ad0 <Error_Handler>
	}
}
 8000824:	bf00      	nop
 8000826:	3770      	adds	r7, #112	@ 0x70
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	58024800 	.word	0x58024800

08000830 <MX_I2C5_Init>:
/**
 * @brief I2C5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C5_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	/* USER CODE END I2C5_Init 0 */

	/* USER CODE BEGIN I2C5_Init 1 */

	/* USER CODE END I2C5_Init 1 */
	hi2c5.Instance = I2C5;
 8000834:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_I2C5_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <MX_I2C5_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
	hi2c5.Init.Timing = 0x20303E5D;
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_I2C5_Init+0x74>)
 800083c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <MX_I2C5_Init+0x7c>)
 800083e:	605a      	str	r2, [r3, #4]
	hi2c5.Init.OwnAddress1 = 0;
 8000840:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_I2C5_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
	hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_I2C5_Init+0x74>)
 8000848:	2201      	movs	r2, #1
 800084a:	60da      	str	r2, [r3, #12]
	hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_I2C5_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
	hi2c5.Init.OwnAddress2 = 0;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_I2C5_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
	hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2C5_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
	hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2C5_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
	hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_I2C5_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c5) != HAL_OK) {
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <MX_I2C5_Init+0x74>)
 800086c:	f001 f908 	bl	8001a80 <HAL_I2C_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C5_Init+0x4a>
		Error_Handler();
 8000876:	f000 f92b 	bl	8000ad0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE)
 800087a:	2100      	movs	r1, #0
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <MX_I2C5_Init+0x74>)
 800087e:	f002 f92d 	bl	8002adc <HAL_I2CEx_ConfigAnalogFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C5_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000888:	f000 f922 	bl	8000ad0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK) {
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_I2C5_Init+0x74>)
 8000890:	f002 f96f 	bl	8002b72 <HAL_I2CEx_ConfigDigitalFilter>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C5_Init+0x6e>
		Error_Handler();
 800089a:	f000 f919 	bl	8000ad0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C5_Init 2 */

	/* USER CODE END I2C5_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	240001f4 	.word	0x240001f4
 80008a8:	40006400 	.word	0x40006400
 80008ac:	20303e5d 	.word	0x20303e5d

080008b0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008b6:	4a23      	ldr	r2, [pc, #140]	@ (8000944 <MX_USART3_UART_Init+0x94>)
 80008b8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80008f8:	4811      	ldr	r0, [pc, #68]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 80008fa:	f004 fee9 	bl	80056d0 <HAL_UART_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8000904:	f000 f8e4 	bl	8000ad0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000908:	2100      	movs	r1, #0
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 800090c:	f006 f883 	bl	8006a16 <HAL_UARTEx_SetTxFifoThreshold>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000916:	f000 f8db 	bl	8000ad0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800091a:	2100      	movs	r1, #0
 800091c:	4808      	ldr	r0, [pc, #32]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 800091e:	f006 f8b8 	bl	8006a92 <HAL_UARTEx_SetRxFifoThreshold>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000928:	f000 f8d2 	bl	8000ad0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_USART3_UART_Init+0x90>)
 800092e:	f006 f839 	bl	80069a4 <HAL_UARTEx_DisableFifoMode>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000938:	f000 f8ca 	bl	8000ad0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	24000248 	.word	0x24000248
 8000944:	40004800 	.word	0x40004800

08000948 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b42      	ldr	r3, [pc, #264]	@ (8000a68 <MX_GPIO_Init+0x120>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a40      	ldr	r2, [pc, #256]	@ (8000a68 <MX_GPIO_Init+0x120>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a68 <MX_GPIO_Init+0x120>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a68 <MX_GPIO_Init+0x120>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a39      	ldr	r2, [pc, #228]	@ (8000a68 <MX_GPIO_Init+0x120>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b36      	ldr	r3, [pc, #216]	@ (8000a68 <MX_GPIO_Init+0x120>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b33      	ldr	r3, [pc, #204]	@ (8000a68 <MX_GPIO_Init+0x120>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	4a31      	ldr	r2, [pc, #196]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	4a2a      	ldr	r2, [pc, #168]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_GPIO_Init+0x120>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin | LED_RED_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009fa:	481c      	ldr	r0, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009fc:	f001 f826 	bl	8001a4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	481a      	ldr	r0, [pc, #104]	@ (8000a70 <MX_GPIO_Init+0x128>)
 8000a06:	f001 f821 	bl	8001a4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4815      	ldr	r0, [pc, #84]	@ (8000a74 <MX_GPIO_Init+0x12c>)
 8000a20:	f000 fe6c 	bl	80016fc <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin | LED_RED_Pin;
 8000a24:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <MX_GPIO_Init+0x124>)
 8000a3e:	f000 fe5d 	bl	80016fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_YELLOW_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a42:	2302      	movs	r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_GPIO_Init+0x128>)
 8000a5a:	f000 fe4f 	bl	80016fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	58020400 	.word	0x58020400
 8000a70:	58021000 	.word	0x58021000
 8000a74:	58020800 	.word	0x58020800

08000a78 <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000a8a:	f000 fdbf 	bl	800160c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a9a:	231f      	movs	r3, #31
 8000a9c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000a9e:	2387      	movs	r3, #135	@ 0x87
 8000aa0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fddd 	bl	800167c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f000 fdba 	bl	800163c <HAL_MPU_Enable>

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_MspInit+0x30>)
 8000ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae8:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x30>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x30>)
 8000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	58024400 	.word	0x58024400

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0b8      	sub	sp, #224	@ 0xe0
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	22b8      	movs	r2, #184	@ 0xb8
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f006 fe7b 	bl	800782c <memset>
  if(hi2c->Instance==I2C5)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <HAL_I2C_MspInit+0xd8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d14e      	bne.n	8000bde <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8000b40:	f04f 0208 	mov.w	r2, #8
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fff8 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b62:	f7ff ffb5 	bl	8000ad0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <HAL_I2C_MspInit+0xdc>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bec <HAL_I2C_MspInit+0xdc>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <HAL_I2C_MspInit+0xdc>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000bac:	f000 fda6 	bl	80016fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <HAL_I2C_MspInit+0xdc>)
 8000bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <HAL_I2C_MspInit+0xdc>)
 8000bb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_I2C_MspInit+0xdc>)
 8000bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	209d      	movs	r0, #157	@ 0x9d
 8000bd4:	f000 fce5 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8000bd8:	209d      	movs	r0, #157	@ 0x9d
 8000bda:	f000 fcfc 	bl	80015d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C5_MspInit 1 */

  }

}
 8000bde:	bf00      	nop
 8000be0:	37e0      	adds	r7, #224	@ 0xe0
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40006400 	.word	0x40006400
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	58020800 	.word	0x58020800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0b8      	sub	sp, #224	@ 0xe0
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	22b8      	movs	r2, #184	@ 0xb8
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f006 fe09 	bl	800782c <memset>
  if(huart->Instance==USART3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a27      	ldr	r2, [pc, #156]	@ (8000cbc <HAL_UART_MspInit+0xc8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d146      	bne.n	8000cb2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c24:	f04f 0202 	mov.w	r2, #2
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 ff86 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c46:	f7ff ff43 	bl	8000ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c50:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000c86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <HAL_UART_MspInit+0xd0>)
 8000cae:	f000 fd25 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cb2:	bf00      	nop
 8000cb4:	37e0      	adds	r7, #224	@ 0xe0
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40004800 	.word	0x40004800
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58020c00 	.word	0x58020c00

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1e:	f000 fb21 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <I2C5_EV_IRQHandler+0x10>)
 8000d2e:	f001 fb6d 	bl	800240c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	240001f4 	.word	0x240001f4

08000d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return 1;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_kill>:

int _kill(int pid, int sig)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d56:	f006 fdbb 	bl	80078d0 <__errno>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2216      	movs	r2, #22
 8000d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_exit>:

void _exit (int status)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ffe7 	bl	8000d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d7e:	bf00      	nop
 8000d80:	e7fd      	b.n	8000d7e <_exit+0x12>

08000d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e00a      	b.n	8000daa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d94:	f3af 8000 	nop.w
 8000d98:	4601      	mov	r1, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	b2ca      	uxtb	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbf0      	blt.n	8000d94 <_read+0x12>
  }

  return len;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de4:	605a      	str	r2, [r3, #4]
  return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_isatty>:

int _isatty(int file)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f006 fd3c 	bl	80078d0 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	24050000 	.word	0x24050000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	240002dc 	.word	0x240002dc
 8000e8c:	24000430 	.word	0x24000430

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e94:	4b3e      	ldr	r3, [pc, #248]	@ (8000f90 <SystemInit+0x100>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f90 <SystemInit+0x100>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <SystemInit+0x104>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d807      	bhi.n	8000ec0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb0:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <SystemInit+0x104>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	4a36      	ldr	r2, [pc, #216]	@ (8000f94 <SystemInit+0x104>)
 8000eba:	f043 0307 	orr.w	r3, r3, #7
 8000ebe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <SystemInit+0x108>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <SystemInit+0x108>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ecc:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <SystemInit+0x108>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ed2:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <SystemInit+0x108>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4930      	ldr	r1, [pc, #192]	@ (8000f98 <SystemInit+0x108>)
 8000ed8:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <SystemInit+0x10c>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ede:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <SystemInit+0x104>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <SystemInit+0x104>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 030f 	bic.w	r3, r3, #15
 8000ef2:	4a28      	ldr	r2, [pc, #160]	@ (8000f94 <SystemInit+0x104>)
 8000ef4:	f043 0307 	orr.w	r3, r3, #7
 8000ef8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <SystemInit+0x108>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <SystemInit+0x108>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f06:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <SystemInit+0x108>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <SystemInit+0x108>)
 8000f0e:	4a24      	ldr	r2, [pc, #144]	@ (8000fa0 <SystemInit+0x110>)
 8000f10:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <SystemInit+0x108>)
 8000f14:	4a23      	ldr	r2, [pc, #140]	@ (8000fa4 <SystemInit+0x114>)
 8000f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <SystemInit+0x108>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <SystemInit+0x118>)
 8000f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <SystemInit+0x108>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <SystemInit+0x108>)
 8000f26:	4a20      	ldr	r2, [pc, #128]	@ (8000fa8 <SystemInit+0x118>)
 8000f28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <SystemInit+0x108>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <SystemInit+0x108>)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <SystemInit+0x118>)
 8000f34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <SystemInit+0x108>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <SystemInit+0x108>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a15      	ldr	r2, [pc, #84]	@ (8000f98 <SystemInit+0x108>)
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <SystemInit+0x108>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f4e:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <SystemInit+0x108>)
 8000f50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d113      	bne.n	8000f84 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <SystemInit+0x108>)
 8000f5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f62:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <SystemInit+0x108>)
 8000f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f68:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <SystemInit+0x11c>)
 8000f6e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f72:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <SystemInit+0x108>)
 8000f76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f7a:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <SystemInit+0x108>)
 8000f7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	52002000 	.word	0x52002000
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fa0:	02020200 	.word	0x02020200
 8000fa4:	01ff0000 	.word	0x01ff0000
 8000fa8:	01010280 	.word	0x01010280
 8000fac:	52004000 	.word	0x52004000

08000fb0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <ExitRun0Mode+0x2c>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <ExitRun0Mode+0x2c>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000fc0:	bf00      	nop
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <ExitRun0Mode+0x2c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	58024800 	.word	0x58024800

08000fe0 <TLA2528_Read_Register>:
 */
#include "tla2528_lib.h"
#define ADC_RESOLUTION  4096.0  // 12-bit ADC (0-4095)
#define V_REF           3.3     // แรงดันอ้างอิง (เปลี่ยนได้ตามจริง)
// ฟังก์ชันอ่านค่ารีจิสเตอร์
uint8_t TLA2528_Read_Register(uint8_t reg_address) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status;

	// Use HAL I2C to read the register value
	status = HAL_I2C_Mem_Read(&hi2c5, TLA2528_I2C_ADDRESS << 1, reg_address,
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 030e 	add.w	r3, r7, #14
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	2120      	movs	r1, #32
 8001006:	480a      	ldr	r0, [pc, #40]	@ (8001030 <TLA2528_Read_Register+0x50>)
 8001008:	f000 ffe0 	bl	8001fcc <HAL_I2C_Mem_Read>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
	I2C_MEMADD_SIZE_8BIT, &reg_value, 1, 1000);

	// Check the read status
	if (status != HAL_OK) {
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <TLA2528_Read_Register+0x44>
		// Print error message if read fails
		printf("I2C Read Error: 0x%02X\n", reg_address);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	@ (8001034 <TLA2528_Read_Register+0x54>)
 800101c:	f006 fabe 	bl	800759c <iprintf>
		return 0;  //  Return 0 if an error occurs
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <TLA2528_Read_Register+0x46>
	}

	// Return the value read from the register
	return reg_value;
 8001024:	7bbb      	ldrb	r3, [r7, #14]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	240001f4 	.word	0x240001f4
 8001034:	080094ec 	.word	0x080094ec

08001038 <TLA2528_Set_Channel>:

	return HAL_OK;
}

void TLA2528_Set_Channel(uint8_t channel)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af04      	add	r7, sp, #16
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    if (channel > 7) return;  // มีเพียง 8 ช่อง (0-7)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b07      	cmp	r3, #7
 8001046:	d812      	bhi.n	800106e <TLA2528_Set_Channel+0x36>

    uint8_t data = channel & MANUAL_CHID_MASK;  // กรองเฉพาะ 4 บิตล่าง
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	b2db      	uxtb	r3, r3
 8001050:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(&hi2c5, TLA2528_I2C_ADDRESS << 1, MANUAL_CH_SEL_ADDRESS, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001052:	2364      	movs	r3, #100	@ 0x64
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030f 	add.w	r3, r7, #15
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	2211      	movs	r2, #17
 8001064:	2120      	movs	r1, #32
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <TLA2528_Set_Channel+0x40>)
 8001068:	f000 fe9c 	bl	8001da4 <HAL_I2C_Mem_Write>
 800106c:	e000      	b.n	8001070 <TLA2528_Set_Channel+0x38>
    if (channel > 7) return;  // มีเพียง 8 ช่อง (0-7)
 800106e:	bf00      	nop
}
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	240001f4 	.word	0x240001f4

0800107c <TLA2528_Read_Channel>:

uint16_t TLA2528_Read_Channel(uint8_t channel)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];

    // ตั้งค่าช่องที่ต้องการอ่าน
    TLA2528_Set_Channel(channel);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffd5 	bl	8001038 <TLA2528_Set_Channel>

    // รอให้ ADC แปลงค่า
    HAL_Delay(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 f988 	bl	80013a4 <HAL_Delay>

    // อ่านค่า ADC 2 ไบต์
    HAL_I2C_Master_Receive(&hi2c5, TLA2528_I2C_ADDRESS << 1, buffer, 2, 100);
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	2364      	movs	r3, #100	@ 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2302      	movs	r3, #2
 800109e:	2120      	movs	r1, #32
 80010a0:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <TLA2528_Read_Channel+0x44>)
 80010a2:	f000 fd89 	bl	8001bb8 <HAL_I2C_Master_Receive>

    // รวมค่า 2 ไบต์เป็น 16-bit
    uint16_t data = (buffer[0] << 8) | buffer[1];
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	81fb      	strh	r3, [r7, #14]

    return data;
 80010b6:	89fb      	ldrh	r3, [r7, #14]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240001f4 	.word	0x240001f4
 80010c4:	00000000 	.word	0x00000000

080010c8 <TLA2528_Convert_To_Voltage>:
float TLA2528_Convert_To_Voltage(uint16_t adc_value)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
    return (adc_value / ADC_RESOLUTION) * V_REF;
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010dc:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8001100 <TLA2528_Convert_To_Voltage+0x38>
 80010e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010e4:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001108 <TLA2528_Convert_To_Voltage+0x40>
 80010e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	00000000 	.word	0x00000000
 8001104:	40b00000 	.word	0x40b00000
 8001108:	66666666 	.word	0x66666666
 800110c:	400a6666 	.word	0x400a6666

08001110 <TLA2528_Read_All_Channels>:


void TLA2528_Read_All_Channels()
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b091      	sub	sp, #68	@ 0x44
 8001114:	af02      	add	r7, sp, #8
    uint16_t adc_values[8];
    float voltages[8];

    for (uint8_t ch = 0; ch < 8; ch++)
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800111c:	e03f      	b.n	800119e <TLA2528_Read_All_Channels+0x8e>
    {
        adc_values[ch] = TLA2528_Read_Channel(ch); // อ่านค่า ADC
 800111e:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8001122:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ffa8 	bl	800107c <TLA2528_Read_Channel>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	0063      	lsls	r3, r4, #1
 8001132:	3338      	adds	r3, #56	@ 0x38
 8001134:	443b      	add	r3, r7
 8001136:	f823 2c14 	strh.w	r2, [r3, #-20]
        voltages[ch] = TLA2528_Convert_To_Voltage(adc_values[ch]); // แปลงเป็น V
 800113a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	3338      	adds	r3, #56	@ 0x38
 8001142:	443b      	add	r3, r7
 8001144:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001148:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffbb 	bl	80010c8 <TLA2528_Convert_To_Voltage>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	00a3      	lsls	r3, r4, #2
 8001158:	3338      	adds	r3, #56	@ 0x38
 800115a:	443b      	add	r3, r7
 800115c:	3b34      	subs	r3, #52	@ 0x34
 800115e:	edc3 7a00 	vstr	s15, [r3]
        printf("Channel %d: %u (%.3f V)\n", ch, adc_values[ch], voltages[ch]);
 8001162:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8001166:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	3338      	adds	r3, #56	@ 0x38
 800116e:	443b      	add	r3, r7
 8001170:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001174:	461a      	mov	r2, r3
 8001176:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	3338      	adds	r3, #56	@ 0x38
 800117e:	443b      	add	r3, r7
 8001180:	3b34      	subs	r3, #52	@ 0x34
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118a:	ed8d 7b00 	vstr	d7, [sp]
 800118e:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <TLA2528_Read_All_Channels+0xa0>)
 8001190:	f006 fa04 	bl	800759c <iprintf>
    for (uint8_t ch = 0; ch < 8; ch++)
 8001194:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001198:	3301      	adds	r3, #1
 800119a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800119e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d9bb      	bls.n	800111e <TLA2528_Read_All_Channels+0xe>
    }
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	373c      	adds	r7, #60	@ 0x3c
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	08009520 	.word	0x08009520

080011b4 <TLA2528_Check_Status>:
	printf("GENERAL_CFG (binary): %08b\n", general_cfg_value);
}

// Function to check the status of TLA2528

uint8_t TLA2528_Check_Status(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	uint8_t status;

	// Read the SYSTEM_STATUS register (0x00)
	status = TLA2528_Read_Register(SYSTEM_STATUS_ADDRESS);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ff10 	bl	8000fe0 <TLA2528_Read_Register>
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]

	// Check if the sequencer is running
	if (status & SEQ_STATUS_MASK) {
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <TLA2528_Check_Status+0x1e>
		// SEQ_STATUS_RUNNING (0x40), device is operational
		return 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e013      	b.n	80011fa <TLA2528_Check_Status+0x46>
	}

	// Check if there is a power loss error
	if (status & BOR_MASK) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <TLA2528_Check_Status+0x2c>
		// BOR_ERROR (0x01), device is not ready
		return 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	e00c      	b.n	80011fa <TLA2528_Check_Status+0x46>
	}

	// Check for CRC errors
	if (status & CRC_ERR_FUSE_MASK || status & CRC_ERR_IN_MASK) {
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d104      	bne.n	80011f4 <TLA2528_Check_Status+0x40>
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <TLA2528_Check_Status+0x44>
		// CRC error detected, device is not ready
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <TLA2528_Check_Status+0x46>
	}

	return 1;  // Device is ready
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <TLA2528_Init>:

void TLA2528_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	// ตั้งค่าโหมดการทำงาน
	HAL_Delay(100);  // Delay 100ms
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f000 f8cb 	bl	80013a4 <HAL_Delay>
	// Check if TLA2528 is ready
	if (TLA2528_Check_Status() == 0) {
 800120e:	f7ff ffd1 	bl	80011b4 <TLA2528_Check_Status>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <TLA2528_Init+0x1c>
		printf("TLA2528 not ready\n");
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <TLA2528_Init+0x20>)
 800121a:	f006 fa27 	bl	800766c <puts>
		return;
 800121e:	bf00      	nop
	}
	// TLA2528_Set_Output_Mode(0x02);  // สมมติว่า 0x02 คือโหมดที่ต้องการ

	// ทำการตั้งค่าพารามิเตอร์อื่นๆ ที่จำเป็น
	// ...
}
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	08009558 	.word	0x08009558

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001264 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800122c:	f7ff fec0 	bl	8000fb0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001230:	f7ff fe2e 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480c      	ldr	r0, [pc, #48]	@ (8001268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001236:	490d      	ldr	r1, [pc, #52]	@ (800126c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800124c:	4c0a      	ldr	r4, [pc, #40]	@ (8001278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125a:	f006 fb3f 	bl	80078dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fa59 	bl	8000714 <main>
  bx  lr
 8001262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001268:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800126c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001270:	080099c8 	.word	0x080099c8
  ldr r2, =_sbss
 8001274:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001278:	24000430 	.word	0x24000430

0800127c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC3_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001286:	2003      	movs	r0, #3
 8001288:	f000 f980 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800128c:	f002 fa88 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8001290:	4602      	mov	r2, r0
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_Init+0x68>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	4913      	ldr	r1, [pc, #76]	@ (80012ec <HAL_Init+0x6c>)
 800129e:	5ccb      	ldrb	r3, [r1, r3]
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <HAL_Init+0x68>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <HAL_Init+0x6c>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <HAL_Init+0x70>)
 80012c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012c4:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <HAL_Init+0x74>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f814 	bl	80012f8 <HAL_InitTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e002      	b.n	80012e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012da:	f7ff fbff 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	58024400 	.word	0x58024400
 80012ec:	08009610 	.word	0x08009610
 80012f0:	24000004 	.word	0x24000004
 80012f4:	24000000 	.word	0x24000000

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e021      	b.n	8001350 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_InitTick+0x64>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_InitTick+0x60>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f965 	bl	80015f2 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f92f 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <HAL_InitTick+0x68>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2400000c 	.word	0x2400000c
 800135c:	24000000 	.word	0x24000000
 8001360:	24000008 	.word	0x24000008

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2400000c 	.word	0x2400000c
 8001388:	240002e0 	.word	0x240002e0

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	240002e0 	.word	0x240002e0

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2400000c 	.word	0x2400000c

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <__NVIC_SetPriorityGrouping+0x40>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	4313      	orrs	r3, r2
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	@ (800142c <__NVIC_SetPriorityGrouping+0x40>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	05fa0000 	.word	0x05fa0000

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4907      	ldr	r1, [pc, #28]	@ (8001488 <__NVIC_EnableIRQ+0x38>)
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	@ (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	@ (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff8e 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff29 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff40 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff33 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa4 	bl	8001548 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001610:	f3bf 8f5f 	dmb	sy
}
 8001614:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <HAL_MPU_Disable+0x28>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_MPU_Disable+0x28>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001620:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001622:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <HAL_MPU_Disable+0x2c>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	e000ed90 	.word	0xe000ed90

0800163c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001644:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_MPU_Enable+0x38>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_MPU_Enable+0x3c>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <HAL_MPU_Enable+0x3c>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001658:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800165a:	f3bf 8f4f 	dsb	sy
}
 800165e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001660:	f3bf 8f6f 	isb	sy
}
 8001664:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed90 	.word	0xe000ed90
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	785a      	ldrb	r2, [r3, #1]
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 800168a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001698:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7b1b      	ldrb	r3, [r3, #12]
 80016a4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7adb      	ldrb	r3, [r3, #11]
 80016aa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7a9b      	ldrb	r3, [r3, #10]
 80016b2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7b5b      	ldrb	r3, [r3, #13]
 80016ba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7b9b      	ldrb	r3, [r3, #14]
 80016c2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7bdb      	ldrb	r3, [r3, #15]
 80016ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7a5b      	ldrb	r3, [r3, #9]
 80016d2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7a1b      	ldrb	r3, [r3, #8]
 80016da:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016dc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016e6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e8:	6113      	str	r3, [r2, #16]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed90 	.word	0xe000ed90

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800170a:	4b86      	ldr	r3, [pc, #536]	@ (8001924 <HAL_GPIO_Init+0x228>)
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800170e:	e18c      	b.n	8001a2a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 817e 	beq.w	8001a24 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d005      	beq.n	8001740 <HAL_GPIO_Init+0x44>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d130      	bne.n	80017a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001776:	2201      	movs	r2, #1
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 0201 	and.w	r2, r3, #1
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d017      	beq.n	80017de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d123      	bne.n	8001832 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	69b9      	ldr	r1, [r7, #24]
 800182e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0203 	and.w	r2, r3, #3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80d8 	beq.w	8001a24 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001874:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <HAL_GPIO_Init+0x22c>)
 8001876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800187a:	4a2b      	ldr	r2, [pc, #172]	@ (8001928 <HAL_GPIO_Init+0x22c>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <HAL_GPIO_Init+0x22c>)
 8001886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001892:	4a26      	ldr	r2, [pc, #152]	@ (800192c <HAL_GPIO_Init+0x230>)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001930 <HAL_GPIO_Init+0x234>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d04a      	beq.n	8001954 <HAL_GPIO_Init+0x258>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001934 <HAL_GPIO_Init+0x238>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d02b      	beq.n	800191e <HAL_GPIO_Init+0x222>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001938 <HAL_GPIO_Init+0x23c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d025      	beq.n	800191a <HAL_GPIO_Init+0x21e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a1a      	ldr	r2, [pc, #104]	@ (800193c <HAL_GPIO_Init+0x240>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01f      	beq.n	8001916 <HAL_GPIO_Init+0x21a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <HAL_GPIO_Init+0x244>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d019      	beq.n	8001912 <HAL_GPIO_Init+0x216>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <HAL_GPIO_Init+0x248>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0x212>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <HAL_GPIO_Init+0x24c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00d      	beq.n	800190a <HAL_GPIO_Init+0x20e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <HAL_GPIO_Init+0x250>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d007      	beq.n	8001906 <HAL_GPIO_Init+0x20a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <HAL_GPIO_Init+0x254>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_GPIO_Init+0x206>
 80018fe:	2309      	movs	r3, #9
 8001900:	e029      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 8001902:	230a      	movs	r3, #10
 8001904:	e027      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 8001906:	2307      	movs	r3, #7
 8001908:	e025      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 800190a:	2306      	movs	r3, #6
 800190c:	e023      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 800190e:	2305      	movs	r3, #5
 8001910:	e021      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 8001912:	2304      	movs	r3, #4
 8001914:	e01f      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 8001916:	2303      	movs	r3, #3
 8001918:	e01d      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 800191a:	2302      	movs	r3, #2
 800191c:	e01b      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 800191e:	2301      	movs	r3, #1
 8001920:	e019      	b.n	8001956 <HAL_GPIO_Init+0x25a>
 8001922:	bf00      	nop
 8001924:	58000080 	.word	0x58000080
 8001928:	58024400 	.word	0x58024400
 800192c:	58000400 	.word	0x58000400
 8001930:	58020000 	.word	0x58020000
 8001934:	58020400 	.word	0x58020400
 8001938:	58020800 	.word	0x58020800
 800193c:	58020c00 	.word	0x58020c00
 8001940:	58021000 	.word	0x58021000
 8001944:	58021400 	.word	0x58021400
 8001948:	58021800 	.word	0x58021800
 800194c:	58021c00 	.word	0x58021c00
 8001950:	58022400 	.word	0x58022400
 8001954:	2300      	movs	r3, #0
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	f002 0203 	and.w	r2, r2, #3
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	4093      	lsls	r3, r2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001966:	4938      	ldr	r1, [pc, #224]	@ (8001a48 <HAL_GPIO_Init+0x34c>)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3301      	adds	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f ae6b 	bne.w	8001710 <HAL_GPIO_Init+0x14>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	3724      	adds	r7, #36	@ 0x24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	58000400 	.word	0x58000400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e08b      	b.n	8001baa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff f832 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	@ 0x24
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	e006      	b.n	8001b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d108      	bne.n	8001b22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	e007      	b.n	8001b32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_I2C_Init+0x134>)
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69d9      	ldr	r1, [r3, #28]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	02008000 	.word	0x02008000

08001bb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	f040 80db 	bne.w	8001d90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_I2C_Master_Receive+0x30>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e0d4      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bf0:	f7ff fbcc 	bl	800138c <HAL_GetTick>
 8001bf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2319      	movs	r3, #25
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fce8 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0bf      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2222      	movs	r2, #34	@ 0x22
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	893a      	ldrh	r2, [r7, #8]
 8001c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2bff      	cmp	r3, #255	@ 0xff
 8001c42:	d90e      	bls.n	8001c62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	22ff      	movs	r2, #255	@ 0xff
 8001c48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	8979      	ldrh	r1, [r7, #10]
 8001c52:	4b52      	ldr	r3, [pc, #328]	@ (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 ff0c 	bl	8002a78 <I2C_TransferConfig>
 8001c60:	e06d      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	4b49      	ldr	r3, [pc, #292]	@ (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fefb 	bl	8002a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c82:	e05c      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	6a39      	ldr	r1, [r7, #32]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fd89 	bl	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e07c      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d034      	beq.n	8001d3e <HAL_I2C_Master_Receive+0x186>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d130      	bne.n	8001d3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2180      	movs	r1, #128	@ 0x80
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fc76 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e04d      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2bff      	cmp	r3, #255	@ 0xff
 8001cfe:	d90e      	bls.n	8001d1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	22ff      	movs	r2, #255	@ 0xff
 8001d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 feae 	bl	8002a78 <I2C_TransferConfig>
 8001d1c:	e00f      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fe9d 	bl	8002a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d19d      	bne.n	8001c84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fce3 	bl	8002718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e01a      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_I2C_Master_Receive+0x1e8>)
 8001d70:	400b      	ands	r3, r1
 8001d72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	80002400 	.word	0x80002400
 8001da0:	fe00e800 	.word	0xfe00e800

08001da4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	817b      	strh	r3, [r7, #10]
 8001db6:	460b      	mov	r3, r1
 8001db8:	813b      	strh	r3, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	f040 80f9 	bne.w	8001fbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_I2C_Mem_Write+0x34>
 8001dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0ed      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_I2C_Mem_Write+0x4e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0e6      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dfa:	f7ff fac7 	bl	800138c <HAL_GetTick>
 8001dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2319      	movs	r3, #25
 8001e06:	2201      	movs	r2, #1
 8001e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fbe3 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d1      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2221      	movs	r2, #33	@ 0x21
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e44:	88f8      	ldrh	r0, [r7, #6]
 8001e46:	893a      	ldrh	r2, [r7, #8]
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4603      	mov	r3, r0
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 faf3 	bl	8002440 <I2C_RequestMemoryWrite>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0a9      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2bff      	cmp	r3, #255	@ 0xff
 8001e74:	d90e      	bls.n	8001e94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	22ff      	movs	r2, #255	@ 0xff
 8001e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	2300      	movs	r3, #0
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fdf3 	bl	8002a78 <I2C_TransferConfig>
 8001e92:	e00f      	b.n	8001eb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	8979      	ldrh	r1, [r7, #10]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fde2 	bl	8002a78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fbe6 	bl	800268a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e07b      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d034      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d130      	bne.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	@ 0x80
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fb5f 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04d      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2bff      	cmp	r3, #255	@ 0xff
 8001f2c:	d90e      	bls.n	8001f4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	22ff      	movs	r2, #255	@ 0xff
 8001f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	8979      	ldrh	r1, [r7, #10]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fd97 	bl	8002a78 <I2C_TransferConfig>
 8001f4a:	e00f      	b.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fd86 	bl	8002a78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d19e      	bne.n	8001eb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fbcc 	bl	8002718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01a      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_I2C_Mem_Write+0x224>)
 8001f9e:	400b      	ands	r3, r1
 8001fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	fe00e800 	.word	0xfe00e800

08001fcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	f040 80fd 	bne.w	80021ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_I2C_Mem_Read+0x34>
 8001ffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002006:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0f1      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2C_Mem_Read+0x4e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0ea      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002022:	f7ff f9b3 	bl	800138c <HAL_GetTick>
 8002026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 facf 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d5      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2222      	movs	r2, #34	@ 0x22
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2240      	movs	r2, #64	@ 0x40
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206c:	88f8      	ldrh	r0, [r7, #6]
 800206e:	893a      	ldrh	r2, [r7, #8]
 8002070:	8979      	ldrh	r1, [r7, #10]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	4603      	mov	r3, r0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fa33 	bl	80024e8 <I2C_RequestMemoryRead>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0ad      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2bff      	cmp	r3, #255	@ 0xff
 800209c:	d90e      	bls.n	80020bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22ff      	movs	r2, #255	@ 0xff
 80020a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	4b52      	ldr	r3, [pc, #328]	@ (80021f8 <HAL_I2C_Mem_Read+0x22c>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fcdf 	bl	8002a78 <I2C_TransferConfig>
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	8979      	ldrh	r1, [r7, #10]
 80020ce:	4b4a      	ldr	r3, [pc, #296]	@ (80021f8 <HAL_I2C_Mem_Read+0x22c>)
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fcce 	bl	8002a78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	2104      	movs	r1, #4
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fa76 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07c      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d034      	beq.n	800219c <HAL_I2C_Mem_Read+0x1d0>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d130      	bne.n	800219c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fa47 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e04d      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2bff      	cmp	r3, #255	@ 0xff
 800215c:	d90e      	bls.n	800217c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22ff      	movs	r2, #255	@ 0xff
 8002162:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002168:	b2da      	uxtb	r2, r3
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fc7f 	bl	8002a78 <I2C_TransferConfig>
 800217a:	e00f      	b.n	800219c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fc6e 	bl	8002a78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d19a      	bne.n	80020dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fab4 	bl	8002718 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e01a      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2220      	movs	r2, #32
 80021c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <HAL_I2C_Mem_Read+0x230>)
 80021ce:	400b      	ands	r3, r1
 80021d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	80002400 	.word	0x80002400
 80021fc:	fe00e800 	.word	0xfe00e800

08002200 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	460b      	mov	r3, r1
 800220e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b20      	cmp	r3, #32
 8002222:	f040 80e9 	bne.w	80023f8 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002234:	d101      	bne.n	800223a <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	e0df      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_I2C_IsDeviceReady+0x48>
 8002244:	2302      	movs	r3, #2
 8002246:	e0d8      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x1fa>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2224      	movs	r2, #36	@ 0x24
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_I2C_IsDeviceReady+0x72>
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800226c:	4b65      	ldr	r3, [pc, #404]	@ (8002404 <HAL_I2C_IsDeviceReady+0x204>)
 800226e:	4313      	orrs	r3, r2
 8002270:	e004      	b.n	800227c <HAL_I2C_IsDeviceReady+0x7c>
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002278:	4b63      	ldr	r3, [pc, #396]	@ (8002408 <HAL_I2C_IsDeviceReady+0x208>)
 800227a:	4313      	orrs	r3, r2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002282:	f7ff f883 	bl	800138c <HAL_GetTick>
 8002286:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80022b4:	e034      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d01a      	beq.n	80022f4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff f865 	bl	800138c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <HAL_I2C_IsDeviceReady+0xd4>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e082      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b20      	cmp	r3, #32
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b10      	cmp	r3, #16
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002320:	7fbb      	ldrb	r3, [r7, #30]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_I2C_IsDeviceReady+0x12c>
 8002326:	7f7b      	ldrb	r3, [r7, #29]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0c4      	beq.n	80022b6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b10      	cmp	r3, #16
 8002338:	d027      	beq.n	800238a <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	2120      	movs	r1, #32
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f947 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	2b04      	cmp	r3, #4
 8002356:	d107      	bne.n	8002368 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2220      	movs	r2, #32
 800235e:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44
 8002366:	e026      	b.n	80023b6 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	77fb      	strb	r3, [r7, #31]
 800236c:	e023      	b.n	80023b6 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2220      	movs	r2, #32
 8002374:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e037      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2210      	movs	r2, #16
 8002390:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	2120      	movs	r1, #32
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f91b 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]
 80023ac:	e003      	b.n	80023b6 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2220      	movs	r2, #32
 80023b4:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3301      	adds	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d904      	bls.n	80023ce <HAL_I2C_IsDeviceReady+0x1ce>
 80023c4:	7ffb      	ldrb	r3, [r7, #31]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	f63f af43 	bhi.w	800225e <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	02002000 	.word	0x02002000
 8002408:	02002800 	.word	0x02002800

0800240c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
  }
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	8979      	ldrh	r1, [r7, #10]
 8002460:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <I2C_RequestMemoryWrite+0xa4>)
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fb05 	bl	8002a78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f909 	bl	800268a <I2C_WaitOnTXISFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e02c      	b.n	80024dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002488:	893b      	ldrh	r3, [r7, #8]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	629a      	str	r2, [r3, #40]	@ 0x28
 8002492:	e015      	b.n	80024c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002494:	893b      	ldrh	r3, [r7, #8]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	b29b      	uxth	r3, r3
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f8ef 	bl	800268a <I2C_WaitOnTXISFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e012      	b.n	80024dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b6:	893b      	ldrh	r3, [r7, #8]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2180      	movs	r1, #128	@ 0x80
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f884 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	80002000 	.word	0x80002000

080024e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	460b      	mov	r3, r1
 80024fc:	813b      	strh	r3, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	4b20      	ldr	r3, [pc, #128]	@ (800258c <I2C_RequestMemoryRead+0xa4>)
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fab2 	bl	8002a78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f8b6 	bl	800268a <I2C_WaitOnTXISFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e02c      	b.n	8002582 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800252e:	893b      	ldrh	r3, [r7, #8]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
 8002538:	e015      	b.n	8002566 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800253a:	893b      	ldrh	r3, [r7, #8]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	b29b      	uxth	r3, r3
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f89c 	bl	800268a <I2C_WaitOnTXISFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e012      	b.n	8002582 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2200      	movs	r2, #0
 800256e:	2140      	movs	r1, #64	@ 0x40
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f831 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	80002000 	.word	0x80002000

08002590 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d007      	beq.n	80025cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	619a      	str	r2, [r3, #24]
  }
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e8:	e03b      	b.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f962 	bl	80028b8 <I2C_IsErrorOccurred>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e041      	b.n	8002682 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d02d      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7fe fec1 	bl	800138c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d122      	bne.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	429a      	cmp	r2, r3
 8002638:	d113      	bne.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	429a      	cmp	r2, r3
 800267e:	d0b4      	beq.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002696:	e033      	b.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f90b 	bl	80028b8 <I2C_IsErrorOccurred>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e031      	b.n	8002710 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d025      	beq.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b4:	f7fe fe6a 	bl	800138c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d302      	bcc.n	80026ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11a      	bne.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d013      	beq.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e007      	b.n	8002710 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	d1c4      	bne.n	8002698 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002724:	e02f      	b.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f8c4 	bl	80028b8 <I2C_IsErrorOccurred>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e02d      	b.n	8002796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7fe fe27 	bl	800138c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11a      	bne.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b20      	cmp	r3, #32
 800275c:	d013      	beq.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e007      	b.n	8002796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d1c8      	bne.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027b0:	e071      	b.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f87e 	bl	80028b8 <I2C_IsErrorOccurred>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d13b      	bne.n	800284c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d138      	bne.n	800284c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d105      	bne.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d121      	bne.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2210      	movs	r2, #16
 8002808:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002824:	400b      	ands	r3, r1
 8002826:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	75fb      	strb	r3, [r7, #23]
 8002844:	e002      	b.n	800284c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800284c:	f7fe fd9e 	bl	800138c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	d302      	bcc.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d00f      	beq.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d002      	beq.n	80028aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d083      	beq.n	80027b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	fe00e800 	.word	0xfe00e800

080028b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	@ 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d068      	beq.n	80029b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2210      	movs	r2, #16
 80028ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ec:	e049      	b.n	8002982 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d045      	beq.n	8002982 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f6:	f7fe fd49 	bl	800138c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <I2C_IsErrorOccurred+0x54>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d13a      	bne.n	8002982 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800291e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800292a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800292e:	d121      	bne.n	8002974 <I2C_IsErrorOccurred+0xbc>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002936:	d01d      	beq.n	8002974 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	2b20      	cmp	r3, #32
 800293c:	d01a      	beq.n	8002974 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800294c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800294e:	f7fe fd1d 	bl	800138c <HAL_GetTick>
 8002952:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002954:	e00e      	b.n	8002974 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002956:	f7fe fd19 	bl	800138c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b19      	cmp	r3, #25
 8002962:	d907      	bls.n	8002974 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f043 0320 	orr.w	r3, r3, #32
 800296a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002972:	e006      	b.n	8002982 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b20      	cmp	r3, #32
 8002980:	d1e9      	bne.n	8002956 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b20      	cmp	r3, #32
 800298e:	d003      	beq.n	8002998 <I2C_IsErrorOccurred+0xe0>
 8002990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0aa      	beq.n	80028ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2220      	movs	r2, #32
 80029a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f043 0308 	orr.w	r3, r3, #8
 80029f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01c      	beq.n	8002a66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fdaf 	bl	8002590 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <I2C_IsErrorOccurred+0x1bc>)
 8002a3e:	400b      	ands	r3, r1
 8002a40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3728      	adds	r7, #40	@ 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	4613      	mov	r3, r2
 8002a88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a90:	7a7b      	ldrb	r3, [r7, #9]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a98:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002aa6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	0d5b      	lsrs	r3, r3, #21
 8002ab2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ab6:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <I2C_TransferConfig+0x60>)
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	43db      	mvns	r3, r3
 8002abc:	ea02 0103 	and.w	r1, r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	03ff63ff 	.word	0x03ff63ff

08002adc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d138      	bne.n	8002b64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e032      	b.n	8002b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	@ 0x24
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d139      	bne.n	8002bfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e033      	b.n	8002bfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2224      	movs	r2, #36	@ 0x24
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c14:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_PWREx_ConfigSupply+0x70>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d00a      	beq.n	8002c36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c20:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <HAL_PWREx_ConfigSupply+0x70>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e01f      	b.n	8002c72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e01d      	b.n	8002c72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <HAL_PWREx_ConfigSupply+0x70>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	490f      	ldr	r1, [pc, #60]	@ (8002c7c <HAL_PWREx_ConfigSupply+0x70>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c46:	f7fe fba1 	bl	800138c <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c4c:	e009      	b.n	8002c62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c4e:	f7fe fb9d 	bl	800138c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c5c:	d901      	bls.n	8002c62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_PWREx_ConfigSupply+0x70>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c6e:	d1ee      	bne.n	8002c4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	58024800 	.word	0x58024800

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	@ 0x30
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e3c8      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8087 	beq.w	8002dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca0:	4b88      	ldr	r3, [pc, #544]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002caa:	4b86      	ldr	r3, [pc, #536]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d007      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x46>
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	2b18      	cmp	r3, #24
 8002cba:	d110      	bne.n	8002cde <HAL_RCC_OscConfig+0x5e>
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d10b      	bne.n	8002cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d06c      	beq.n	8002dac <HAL_RCC_OscConfig+0x12c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d168      	bne.n	8002dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e3a2      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x76>
 8002ce8:	4b76      	ldr	r3, [pc, #472]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a75      	ldr	r2, [pc, #468]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e02e      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x98>
 8002cfe:	4b71      	ldr	r3, [pc, #452]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a70      	ldr	r2, [pc, #448]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0xbc>
 8002d22:	4b68      	ldr	r3, [pc, #416]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a67      	ldr	r2, [pc, #412]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b65      	ldr	r3, [pc, #404]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a64      	ldr	r2, [pc, #400]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d3c:	4b61      	ldr	r3, [pc, #388]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a60      	ldr	r2, [pc, #384]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b5e      	ldr	r3, [pc, #376]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fb16 	bl	800138c <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fb12 	bl	800138c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e356      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d76:	4b53      	ldr	r3, [pc, #332]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xe4>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fb02 	bl	800138c <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fafe 	bl	800138c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	@ 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e342      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d9e:	4b49      	ldr	r3, [pc, #292]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x10c>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 808c 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbc:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_RCC_OscConfig+0x162>
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2b18      	cmp	r3, #24
 8002dd6:	d137      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1c8>
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d132      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de2:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x17a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e314      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dfa:	4b32      	ldr	r3, [pc, #200]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0219 	bic.w	r2, r3, #25
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	492f      	ldr	r1, [pc, #188]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fabe 	bl	800138c <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe faba 	bl	800138c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e2fe      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e26:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	4920      	ldr	r1, [pc, #128]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e46:	e045      	b.n	8002ed4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d026      	beq.n	8002e9e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 0219 	bic.w	r2, r3, #25
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4919      	ldr	r1, [pc, #100]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fa93 	bl	800138c <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fa8f 	bl	800138c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e2d3      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	490b      	ldr	r1, [pc, #44]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e01a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a08      	ldr	r2, [pc, #32]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fa6f 	bl	800138c <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fa6b 	bl	800138c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d903      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e2af      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
 8002ec4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ec8:	4b96      	ldr	r3, [pc, #600]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d06a      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee0:	4b90      	ldr	r3, [pc, #576]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ee8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eea:	4b8e      	ldr	r3, [pc, #568]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d007      	beq.n	8002f06 <HAL_RCC_OscConfig+0x286>
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b18      	cmp	r3, #24
 8002efa:	d11b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2b4>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f06:	4b87      	ldr	r3, [pc, #540]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x29e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	2b80      	cmp	r3, #128	@ 0x80
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e282      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f1e:	4b81      	ldr	r3, [pc, #516]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	497d      	ldr	r1, [pc, #500]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f32:	e040      	b.n	8002fb6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f3c:	4b79      	ldr	r3, [pc, #484]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a78      	ldr	r2, [pc, #480]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fa20 	bl	800138c <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f50:	f7fe fa1c 	bl	800138c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e260      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f62:	4b70      	ldr	r3, [pc, #448]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	4969      	ldr	r1, [pc, #420]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60cb      	str	r3, [r1, #12]
 8002f82:	e018      	b.n	8002fb6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f84:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a66      	ldr	r2, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe f9fc 	bl	800138c <HAL_GetTick>
 8002f94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f98:	f7fe f9f8 	bl	800138c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e23c      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002faa:	4b5e      	ldr	r3, [pc, #376]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d036      	beq.n	8003030 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d019      	beq.n	8002ffe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	4b56      	ldr	r3, [pc, #344]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fce:	4a55      	ldr	r2, [pc, #340]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fe f9d9 	bl	800138c <HAL_GetTick>
 8002fda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fde:	f7fe f9d5 	bl	800138c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e219      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x35e>
 8002ffc:	e018      	b.n	8003030 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffe:	4b49      	ldr	r3, [pc, #292]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8003000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003002:	4a48      	ldr	r2, [pc, #288]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fe f9bf 	bl	800138c <HAL_GetTick>
 800300e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe f9bb 	bl	800138c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1ff      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003024:	4b3f      	ldr	r3, [pc, #252]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8003026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d036      	beq.n	80030aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d019      	beq.n	8003078 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003044:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a36      	ldr	r2, [pc, #216]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 800304a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800304e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003050:	f7fe f99c 	bl	800138c <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003058:	f7fe f998 	bl	800138c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1dc      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800306a:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x3d8>
 8003076:	e018      	b.n	80030aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003078:	4b2a      	ldr	r3, [pc, #168]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a29      	ldr	r2, [pc, #164]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 800307e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003082:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003084:	f7fe f982 	bl	800138c <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308c:	f7fe f97e 	bl	800138c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1c2      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800309e:	4b21      	ldr	r3, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8086 	beq.w	80031c4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <HAL_RCC_OscConfig+0x4a8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003128 <HAL_RCC_OscConfig+0x4a8>)
 80030be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030c4:	f7fe f962 	bl	800138c <HAL_GetTick>
 80030c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030cc:	f7fe f95e 	bl	800138c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1a2      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_RCC_OscConfig+0x4a8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d106      	bne.n	8003100 <HAL_RCC_OscConfig+0x480>
 80030f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030fe:	e032      	b.n	8003166 <HAL_RCC_OscConfig+0x4e6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d111      	bne.n	800312c <HAL_RCC_OscConfig+0x4ac>
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310c:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	6713      	str	r3, [r2, #112]	@ 0x70
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003118:	4a02      	ldr	r2, [pc, #8]	@ (8003124 <HAL_RCC_OscConfig+0x4a4>)
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003120:	e021      	b.n	8003166 <HAL_RCC_OscConfig+0x4e6>
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
 8003128:	58024800 	.word	0x58024800
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x4ce>
 8003134:	4b83      	ldr	r3, [pc, #524]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	4a82      	ldr	r2, [pc, #520]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003140:	4b80      	ldr	r3, [pc, #512]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	4a7f      	ldr	r2, [pc, #508]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x4e6>
 800314e:	4b7d      	ldr	r3, [pc, #500]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	4a7c      	ldr	r2, [pc, #496]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	@ 0x70
 800315a:	4b7a      	ldr	r3, [pc, #488]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a79      	ldr	r2, [pc, #484]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fe f90d 	bl	800138c <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe f909 	bl	800138c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e14b      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318c:	4b6d      	ldr	r3, [pc, #436]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x4f6>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe f8f7 	bl	800138c <HAL_GetTick>
 800319e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe f8f3 	bl	800138c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e135      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031b8:	4b62      	ldr	r3, [pc, #392]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 812a 	beq.w	8003422 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031d6:	2b18      	cmp	r3, #24
 80031d8:	f000 80ba 	beq.w	8003350 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	f040 8095 	bne.w	8003310 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b57      	ldr	r3, [pc, #348]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a56      	ldr	r2, [pc, #344]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80031ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe f8cb 	bl	800138c <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7fe f8c7 	bl	800138c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e10b      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800320c:	4b4d      	ldr	r3, [pc, #308]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003218:	4b4a      	ldr	r3, [pc, #296]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800321a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800321c:	4b4a      	ldr	r3, [pc, #296]	@ (8003348 <HAL_RCC_OscConfig+0x6c8>)
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	430a      	orrs	r2, r1
 800322c:	4945      	ldr	r1, [pc, #276]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	628b      	str	r3, [r1, #40]	@ 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	3b01      	subs	r3, #1
 8003238:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003240:	3b01      	subs	r3, #1
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	b29b      	uxth	r3, r3
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	3b01      	subs	r3, #1
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003262:	4938      	ldr	r1, [pc, #224]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003268:	4b36      	ldr	r3, [pc, #216]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	4a35      	ldr	r2, [pc, #212]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003274:	4b33      	ldr	r3, [pc, #204]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003278:	4b34      	ldr	r3, [pc, #208]	@ (800334c <HAL_RCC_OscConfig+0x6cc>)
 800327a:	4013      	ands	r3, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003280:	00d2      	lsls	r2, r2, #3
 8003282:	4930      	ldr	r1, [pc, #192]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003288:	4b2e      	ldr	r3, [pc, #184]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	f023 020c 	bic.w	r2, r3, #12
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	492b      	ldr	r1, [pc, #172]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800329a:	4b2a      	ldr	r3, [pc, #168]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	f023 0202 	bic.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	4927      	ldr	r1, [pc, #156]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032ac:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	4a24      	ldr	r2, [pc, #144]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b8:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4a21      	ldr	r2, [pc, #132]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	4b19      	ldr	r3, [pc, #100]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe f850 	bl	800138c <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe f84c 	bl	800138c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e090      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003302:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x670>
 800330e:	e088      	b.n	8003422 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0b      	ldr	r2, [pc, #44]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe f836 	bl	800138c <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe f832 	bl	800138c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e076      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003336:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <HAL_RCC_OscConfig+0x6c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x6a4>
 8003342:	e06e      	b.n	8003422 <HAL_RCC_OscConfig+0x7a2>
 8003344:	58024400 	.word	0x58024400
 8003348:	fffffc0c 	.word	0xfffffc0c
 800334c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003356:	4b35      	ldr	r3, [pc, #212]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	2b01      	cmp	r3, #1
 8003362:	d031      	beq.n	80033c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f003 0203 	and.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d12a      	bne.n	80033c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d122      	bne.n	80033c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d11a      	bne.n	80033c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	0a5b      	lsrs	r3, r3, #9
 8003396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d111      	bne.n	80033c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d108      	bne.n	80033c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	0e1b      	lsrs	r3, r3, #24
 80033ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e02b      	b.n	8003424 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033cc:	4b17      	ldr	r3, [pc, #92]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 80033ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d0:	08db      	lsrs	r3, r3, #3
 80033d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d01f      	beq.n	8003422 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033e2:	4b12      	ldr	r3, [pc, #72]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	4a11      	ldr	r2, [pc, #68]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ee:	f7fd ffcd 	bl	800138c <HAL_GetTick>
 80033f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033f4:	bf00      	nop
 80033f6:	f7fd ffc9 	bl	800138c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	4293      	cmp	r3, r2
 8003400:	d0f9      	beq.n	80033f6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003402:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 8003404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003406:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCC_OscConfig+0x7b0>)
 8003408:	4013      	ands	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800340e:	00d2      	lsls	r2, r2, #3
 8003410:	4906      	ldr	r1, [pc, #24]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 8003412:	4313      	orrs	r3, r2
 8003414:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003416:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	4a04      	ldr	r2, [pc, #16]	@ (800342c <HAL_RCC_OscConfig+0x7ac>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3730      	adds	r7, #48	@ 0x30
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	58024400 	.word	0x58024400
 8003430:	ffff0007 	.word	0xffff0007

08003434 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e19c      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b8a      	ldr	r3, [pc, #552]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d910      	bls.n	8003478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b87      	ldr	r3, [pc, #540]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 020f 	bic.w	r2, r3, #15
 800345e:	4985      	ldr	r1, [pc, #532]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b83      	ldr	r3, [pc, #524]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e184      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	4b7b      	ldr	r3, [pc, #492]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003490:	429a      	cmp	r2, r3
 8003492:	d908      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003494:	4b78      	ldr	r3, [pc, #480]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	4975      	ldr	r1, [pc, #468]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	4b70      	ldr	r3, [pc, #448]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034be:	429a      	cmp	r2, r3
 80034c0:	d908      	bls.n	80034d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	496a      	ldr	r1, [pc, #424]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	4b64      	ldr	r3, [pc, #400]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d908      	bls.n	8003502 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034f0:	4b61      	ldr	r3, [pc, #388]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	495e      	ldr	r1, [pc, #376]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	4b59      	ldr	r3, [pc, #356]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800351a:	429a      	cmp	r2, r3
 800351c:	d908      	bls.n	8003530 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800351e:	4b56      	ldr	r3, [pc, #344]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4953      	ldr	r1, [pc, #332]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 800352c:	4313      	orrs	r3, r2
 800352e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	4b4d      	ldr	r3, [pc, #308]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	429a      	cmp	r2, r3
 800354a:	d908      	bls.n	800355e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b4a      	ldr	r3, [pc, #296]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f023 020f 	bic.w	r2, r3, #15
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4947      	ldr	r1, [pc, #284]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 800355a:	4313      	orrs	r3, r2
 800355c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d055      	beq.n	8003616 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800356a:	4b43      	ldr	r3, [pc, #268]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4940      	ldr	r1, [pc, #256]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003578:	4313      	orrs	r3, r2
 800357a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d107      	bne.n	8003594 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003584:	4b3c      	ldr	r3, [pc, #240]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d121      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0f6      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d107      	bne.n	80035ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800359c:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d115      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0ea      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035b4:	4b30      	ldr	r3, [pc, #192]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0de      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0d6      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035d4:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f023 0207 	bic.w	r2, r3, #7
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4925      	ldr	r1, [pc, #148]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e6:	f7fd fed1 	bl	800138c <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ee:	f7fd fecd 	bl	800138c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0be      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003604:	4b1c      	ldr	r3, [pc, #112]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	429a      	cmp	r2, r3
 8003614:	d1eb      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	429a      	cmp	r2, r3
 8003630:	d208      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003632:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f023 020f 	bic.w	r2, r3, #15
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	490e      	ldr	r1, [pc, #56]	@ (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003640:	4313      	orrs	r3, r2
 8003642:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d214      	bcs.n	800367c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	4906      	ldr	r1, [pc, #24]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <HAL_RCC_ClockConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e086      	b.n	8003782 <HAL_RCC_ClockConfig+0x34e>
 8003674:	52002000 	.word	0x52002000
 8003678:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d010      	beq.n	80036aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	4b3f      	ldr	r3, [pc, #252]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003694:	429a      	cmp	r2, r3
 8003696:	d208      	bcs.n	80036aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003698:	4b3c      	ldr	r3, [pc, #240]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4939      	ldr	r1, [pc, #228]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d010      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	4b34      	ldr	r3, [pc, #208]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d208      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036c6:	4b31      	ldr	r3, [pc, #196]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	492e      	ldr	r1, [pc, #184]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	4b28      	ldr	r3, [pc, #160]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d208      	bcs.n	8003706 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036f4:	4b25      	ldr	r3, [pc, #148]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	4922      	ldr	r1, [pc, #136]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 8003702:	4313      	orrs	r3, r2
 8003704:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d010      	beq.n	8003734 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800371e:	429a      	cmp	r2, r3
 8003720:	d208      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003722:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4917      	ldr	r1, [pc, #92]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 8003730:	4313      	orrs	r3, r2
 8003732:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003734:	f000 f834 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b14      	ldr	r3, [pc, #80]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	4912      	ldr	r1, [pc, #72]	@ (8003790 <HAL_RCC_ClockConfig+0x35c>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <HAL_RCC_ClockConfig+0x358>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <HAL_RCC_ClockConfig+0x35c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	4a0a      	ldr	r2, [pc, #40]	@ (8003794 <HAL_RCC_ClockConfig+0x360>)
 800376a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800376c:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <HAL_RCC_ClockConfig+0x364>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_RCC_ClockConfig+0x368>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fdbe 	bl	80012f8 <HAL_InitTick>
 800377c:	4603      	mov	r3, r0
 800377e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	58024400 	.word	0x58024400
 8003790:	08009610 	.word	0x08009610
 8003794:	24000004 	.word	0x24000004
 8003798:	24000000 	.word	0x24000000
 800379c:	24000008 	.word	0x24000008

080037a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	@ 0x24
 80037a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a6:	4bb3      	ldr	r3, [pc, #716]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ae:	2b18      	cmp	r3, #24
 80037b0:	f200 8155 	bhi.w	8003a5e <HAL_RCC_GetSysClockFreq+0x2be>
 80037b4:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	08003821 	.word	0x08003821
 80037c0:	08003a5f 	.word	0x08003a5f
 80037c4:	08003a5f 	.word	0x08003a5f
 80037c8:	08003a5f 	.word	0x08003a5f
 80037cc:	08003a5f 	.word	0x08003a5f
 80037d0:	08003a5f 	.word	0x08003a5f
 80037d4:	08003a5f 	.word	0x08003a5f
 80037d8:	08003a5f 	.word	0x08003a5f
 80037dc:	08003847 	.word	0x08003847
 80037e0:	08003a5f 	.word	0x08003a5f
 80037e4:	08003a5f 	.word	0x08003a5f
 80037e8:	08003a5f 	.word	0x08003a5f
 80037ec:	08003a5f 	.word	0x08003a5f
 80037f0:	08003a5f 	.word	0x08003a5f
 80037f4:	08003a5f 	.word	0x08003a5f
 80037f8:	08003a5f 	.word	0x08003a5f
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	08003a5f 	.word	0x08003a5f
 8003804:	08003a5f 	.word	0x08003a5f
 8003808:	08003a5f 	.word	0x08003a5f
 800380c:	08003a5f 	.word	0x08003a5f
 8003810:	08003a5f 	.word	0x08003a5f
 8003814:	08003a5f 	.word	0x08003a5f
 8003818:	08003a5f 	.word	0x08003a5f
 800381c:	08003853 	.word	0x08003853
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003820:	4b94      	ldr	r3, [pc, #592]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800382c:	4b91      	ldr	r3, [pc, #580]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	08db      	lsrs	r3, r3, #3
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	4a90      	ldr	r2, [pc, #576]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800383e:	e111      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003840:	4b8d      	ldr	r3, [pc, #564]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003842:	61bb      	str	r3, [r7, #24]
      break;
 8003844:	e10e      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003846:	4b8d      	ldr	r3, [pc, #564]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003848:	61bb      	str	r3, [r7, #24]
      break;
 800384a:	e10b      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800384c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800384e:	61bb      	str	r3, [r7, #24]
      break;
 8003850:	e108      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003852:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800385c:	4b85      	ldr	r3, [pc, #532]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003866:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003868:	4b82      	ldr	r3, [pc, #520]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003872:	4b80      	ldr	r3, [pc, #512]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003876:	08db      	lsrs	r3, r3, #3
 8003878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80e1 	beq.w	8003a58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b02      	cmp	r3, #2
 800389a:	f000 8083 	beq.w	80039a4 <HAL_RCC_GetSysClockFreq+0x204>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	f200 80a1 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x248>
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x114>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d056      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038b2:	e099      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02d      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	08db      	lsrs	r3, r3, #3
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ea:	4b62      	ldr	r3, [pc, #392]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800391a:	e087      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003a88 <HAL_RCC_GetSysClockFreq+0x2e8>
 800392a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392e:	4b51      	ldr	r3, [pc, #324]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003942:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800395e:	e065      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003a8c <HAL_RCC_GetSysClockFreq+0x2ec>
 800396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003972:	4b40      	ldr	r3, [pc, #256]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a02 	vldr	s12, [r7, #8]
 8003986:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039a2:	e043      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003a90 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039e6:	e021      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a8c <HAL_RCC_GetSysClockFreq+0x2ec>
 80039f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	0a5b      	lsrs	r3, r3, #9
 8003a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a36:	3301      	adds	r3, #1
 8003a38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a50:	ee17 3a90 	vmov	r3, s15
 8003a54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
      break;
 8003a5c:	e002      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a60:	61bb      	str	r3, [r7, #24]
      break;
 8003a62:	bf00      	nop
  }

  return sysclockfreq;
 8003a64:	69bb      	ldr	r3, [r7, #24]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3724      	adds	r7, #36	@ 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
 8003a78:	03d09000 	.word	0x03d09000
 8003a7c:	003d0900 	.word	0x003d0900
 8003a80:	007a1200 	.word	0x007a1200
 8003a84:	46000000 	.word	0x46000000
 8003a88:	4c742400 	.word	0x4c742400
 8003a8c:	4a742400 	.word	0x4a742400
 8003a90:	4af42400 	.word	0x4af42400

08003a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a9a:	f7ff fe81 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490f      	ldr	r1, [pc, #60]	@ (8003ae8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	4a09      	ldr	r2, [pc, #36]	@ (8003ae8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a07      	ldr	r2, [pc, #28]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x58>)
 8003ad0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ad2:	4a07      	ldr	r2, [pc, #28]	@ (8003af0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x58>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	08009610 	.word	0x08009610
 8003aec:	24000004 	.word	0x24000004
 8003af0:	24000000 	.word	0x24000000

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003af8:	f7ff ffcc 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4904      	ldr	r1, [pc, #16]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	08009610 	.word	0x08009610

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b24:	f7ff ffb6 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4904      	ldr	r1, [pc, #16]	@ (8003b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	58024400 	.word	0x58024400
 8003b48:	08009610 	.word	0x08009610

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b50:	b0c6      	sub	sp, #280	@ 0x118
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b70:	2500      	movs	r5, #0
 8003b72:	ea54 0305 	orrs.w	r3, r4, r5
 8003b76:	d049      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b82:	d02f      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b88:	d828      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b8e:	d01a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b94:	d822      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b9e:	d007      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ba0:	e01c      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba2:	4bab      	ldr	r3, [pc, #684]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	4aaa      	ldr	r2, [pc, #680]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bae:	e01a      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fc25 	bl	8005408 <RCCEx_PLL2_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bc4:	e00f      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bca:	3328      	adds	r3, #40	@ 0x28
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fccc 	bl	800556c <RCCEx_PLL3_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bda:	e004      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bee:	4b98      	ldr	r3, [pc, #608]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bfc:	4a94      	ldr	r2, [pc, #592]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c18:	f04f 0900 	mov.w	r9, #0
 8003c1c:	ea58 0309 	orrs.w	r3, r8, r9
 8003c20:	d047      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d82a      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c49 	.word	0x08003c49
 8003c38:	08003c57 	.word	0x08003c57
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003c8b 	.word	0x08003c8b
 8003c44:	08003c8b 	.word	0x08003c8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c48:	4b81      	ldr	r3, [pc, #516]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	4a80      	ldr	r2, [pc, #512]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c54:	e01a      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fbd2 	bl	8005408 <RCCEx_PLL2_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c6a:	e00f      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c70:	3328      	adds	r3, #40	@ 0x28
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 fc79 	bl	800556c <RCCEx_PLL3_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c80:	e004      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c94:	4b6e      	ldr	r3, [pc, #440]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c98:	f023 0107 	bic.w	r1, r3, #7
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003cbe:	f04f 0b00 	mov.w	fp, #0
 8003cc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003cc6:	d05b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cd0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003cd4:	d03b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003cd6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003cda:	d834      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003cdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ce0:	d037      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ce6:	d82e      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ce8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cec:	d033      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003cee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cf2:	d828      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cf8:	d01a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cfe:	d822      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d08:	d007      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003d0a:	e01c      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d0c:	4b50      	ldr	r3, [pc, #320]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	4a4f      	ldr	r2, [pc, #316]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d18:	e01e      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1e:	3308      	adds	r3, #8
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 fb70 	bl	8005408 <RCCEx_PLL2_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d2e:	e013      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	3328      	adds	r3, #40	@ 0x28
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fc17 	bl	800556c <RCCEx_PLL3_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d44:	e008      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d4c:	e004      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e002      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d60:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d70:	4a37      	ldr	r2, [pc, #220]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	d05d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003da8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003dac:	d03b      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003dae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003db2:	d834      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003db4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db8:	d037      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003dba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dbe:	d82e      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003dc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dc4:	d033      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003dc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dca:	d828      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003dcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd0:	d01a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003dd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd6:	d822      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003de0:	d007      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003de2:	e01c      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df0:	e01e      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	3308      	adds	r3, #8
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f001 fb04 	bl	8005408 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e06:	e013      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0c:	3328      	adds	r3, #40	@ 0x28
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fbab 	bl	800556c <RCCEx_PLL3_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e008      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e24:	e004      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e48:	4a01      	ldr	r2, [pc, #4]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4e:	e005      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e72:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d03a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e82:	2b30      	cmp	r3, #48	@ 0x30
 8003e84:	d01f      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003e86:	2b30      	cmp	r3, #48	@ 0x30
 8003e88:	d819      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d815      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d019      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d111      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9a:	4baa      	ldr	r3, [pc, #680]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	4aa9      	ldr	r2, [pc, #676]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ea6:	e011      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eac:	3308      	adds	r3, #8
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 faa9 	bl	8005408 <RCCEx_PLL2_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ebc:	e006      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ec4:	e002      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ed4:	4b9b      	ldr	r3, [pc, #620]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee2:	4a98      	ldr	r2, [pc, #608]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee8:	e003      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003efe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f02:	2300      	movs	r3, #0
 8003f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	d051      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f1c:	d035      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003f1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f22:	d82e      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003f24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f28:	d031      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003f2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f2e:	d828      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f34:	d01a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3a:	d822      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f44:	d007      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003f46:	e01c      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f48:	4b7e      	ldr	r3, [pc, #504]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f54:	e01c      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 fa52 	bl	8005408 <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f6a:	e011      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f70:	3328      	adds	r3, #40	@ 0x28
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 faf9 	bl	800556c <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f98:	4b6a      	ldr	r3, [pc, #424]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa6:	4a67      	ldr	r2, [pc, #412]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fcc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	d053      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe0:	d033      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003fe2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe6:	d82c      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003fe8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fec:	d02f      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003fee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ff2:	d826      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003ff4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ff8:	d02b      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003ffa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ffe:	d820      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004004:	d012      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800400a:	d81a      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d022      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d115      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401a:	3308      	adds	r3, #8
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f001 f9f2 	bl	8005408 <RCCEx_PLL2_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800402a:	e015      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004030:	3328      	adds	r3, #40	@ 0x28
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f001 fa99 	bl	800556c <RCCEx_PLL3_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004040:	e00a      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800404a:	bf00      	nop
 800404c:	e004      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004060:	4b38      	ldr	r3, [pc, #224]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004064:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	4a35      	ldr	r2, [pc, #212]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004070:	430b      	orrs	r3, r1
 8004072:	6513      	str	r3, [r2, #80]	@ 0x50
 8004074:	e003      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004076:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800407a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800408a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004094:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004098:	460b      	mov	r3, r1
 800409a:	4313      	orrs	r3, r2
 800409c:	d058      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040aa:	d033      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80040ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b0:	d82c      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b6:	d02f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040bc:	d826      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040c2:	d02b      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80040c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040c8:	d820      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ce:	d012      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d4:	d81a      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d022      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80040da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040de:	d115      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e4:	3308      	adds	r3, #8
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 f98d 	bl	8005408 <RCCEx_PLL2_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040f4:	e015      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fa:	3328      	adds	r3, #40	@ 0x28
 80040fc:	2101      	movs	r1, #1
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fa34 	bl	800556c <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800410a:	e00a      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004112:	e006      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004114:	bf00      	nop
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004122:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800413a:	4a02      	ldr	r2, [pc, #8]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800413c:	430b      	orrs	r3, r1
 800413e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800414c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800415c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004166:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d037      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800417a:	d00e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800417c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004180:	d816      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800418a:	d111      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4bc4      	ldr	r3, [pc, #784]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	4ac3      	ldr	r2, [pc, #780]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004198:	e00f      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800419a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419e:	3308      	adds	r3, #8
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f930 	bl	8005408 <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041c2:	4bb7      	ldr	r3, [pc, #732]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d0:	4ab3      	ldr	r2, [pc, #716]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80041d6:	e003      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d039      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	2b03      	cmp	r3, #3
 8004208:	d81c      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800420a:	a201      	add	r2, pc, #4	@ (adr r2, 8004210 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	0800424d 	.word	0x0800424d
 8004214:	08004221 	.word	0x08004221
 8004218:	0800422f 	.word	0x0800422f
 800421c:	0800424d 	.word	0x0800424d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004220:	4b9f      	ldr	r3, [pc, #636]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	4a9e      	ldr	r2, [pc, #632]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800422a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800422c:	e00f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800422e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004232:	3308      	adds	r3, #8
 8004234:	2102      	movs	r1, #2
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f8e6 	bl	8005408 <RCCEx_PLL2_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004256:	4b92      	ldr	r3, [pc, #584]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425a:	f023 0103 	bic.w	r1, r3, #3
 800425e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004264:	4a8e      	ldr	r2, [pc, #568]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004266:	430b      	orrs	r3, r1
 8004268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800428a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	f000 8099 	beq.w	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004296:	4b83      	ldr	r3, [pc, #524]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a82      	ldr	r2, [pc, #520]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a2:	f7fd f873 	bl	800138c <HAL_GetTick>
 80042a6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042aa:	e00b      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fd f86e 	bl	800138c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b64      	cmp	r3, #100	@ 0x64
 80042ba:	d903      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042c2:	e005      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c4:	4b77      	ldr	r3, [pc, #476]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ed      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80042d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d173      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042d8:	4b71      	ldr	r3, [pc, #452]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042e4:	4053      	eors	r3, r2
 80042e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d015      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ee:	4b6c      	ldr	r3, [pc, #432]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042fa:	4b69      	ldr	r3, [pc, #420]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	4a68      	ldr	r2, [pc, #416]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004304:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004306:	4b66      	ldr	r3, [pc, #408]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	4a65      	ldr	r2, [pc, #404]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800430c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004310:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004312:	4a63      	ldr	r2, [pc, #396]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004318:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800431a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004326:	d118      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd f830 	bl	800138c <HAL_GetTick>
 800432c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004330:	e00d      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fd f82b 	bl	800138c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004342:	429a      	cmp	r2, r3
 8004344:	d903      	bls.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800434c:	e005      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800434e:	4b54      	ldr	r3, [pc, #336]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0eb      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800435a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800435e:	2b00      	cmp	r3, #0
 8004360:	d129      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800436a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004372:	d10e      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004374:	4b4a      	ldr	r3, [pc, #296]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800437c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004384:	091a      	lsrs	r2, r3, #4
 8004386:	4b48      	ldr	r3, [pc, #288]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004388:	4013      	ands	r3, r2
 800438a:	4a45      	ldr	r2, [pc, #276]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6113      	str	r3, [r2, #16]
 8004390:	e005      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004392:	4b43      	ldr	r3, [pc, #268]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	4a42      	ldr	r2, [pc, #264]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004398:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800439c:	6113      	str	r3, [r2, #16]
 800439e:	4b40      	ldr	r3, [pc, #256]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80043a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ae:	4a3c      	ldr	r2, [pc, #240]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f002 0301 	and.w	r3, r2, #1
 80043d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f000 808f 	beq.w	8004508 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043f0:	2b28      	cmp	r3, #40	@ 0x28
 80043f2:	d871      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80043f4:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	080044e1 	.word	0x080044e1
 8004400:	080044d9 	.word	0x080044d9
 8004404:	080044d9 	.word	0x080044d9
 8004408:	080044d9 	.word	0x080044d9
 800440c:	080044d9 	.word	0x080044d9
 8004410:	080044d9 	.word	0x080044d9
 8004414:	080044d9 	.word	0x080044d9
 8004418:	080044d9 	.word	0x080044d9
 800441c:	080044ad 	.word	0x080044ad
 8004420:	080044d9 	.word	0x080044d9
 8004424:	080044d9 	.word	0x080044d9
 8004428:	080044d9 	.word	0x080044d9
 800442c:	080044d9 	.word	0x080044d9
 8004430:	080044d9 	.word	0x080044d9
 8004434:	080044d9 	.word	0x080044d9
 8004438:	080044d9 	.word	0x080044d9
 800443c:	080044c3 	.word	0x080044c3
 8004440:	080044d9 	.word	0x080044d9
 8004444:	080044d9 	.word	0x080044d9
 8004448:	080044d9 	.word	0x080044d9
 800444c:	080044d9 	.word	0x080044d9
 8004450:	080044d9 	.word	0x080044d9
 8004454:	080044d9 	.word	0x080044d9
 8004458:	080044d9 	.word	0x080044d9
 800445c:	080044e1 	.word	0x080044e1
 8004460:	080044d9 	.word	0x080044d9
 8004464:	080044d9 	.word	0x080044d9
 8004468:	080044d9 	.word	0x080044d9
 800446c:	080044d9 	.word	0x080044d9
 8004470:	080044d9 	.word	0x080044d9
 8004474:	080044d9 	.word	0x080044d9
 8004478:	080044d9 	.word	0x080044d9
 800447c:	080044e1 	.word	0x080044e1
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044d9 	.word	0x080044d9
 8004488:	080044d9 	.word	0x080044d9
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044d9 	.word	0x080044d9
 8004494:	080044d9 	.word	0x080044d9
 8004498:	080044d9 	.word	0x080044d9
 800449c:	080044e1 	.word	0x080044e1
 80044a0:	58024400 	.word	0x58024400
 80044a4:	58024800 	.word	0x58024800
 80044a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b0:	3308      	adds	r3, #8
 80044b2:	2101      	movs	r1, #1
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 ffa7 	bl	8005408 <RCCEx_PLL2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044c0:	e00f      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c6:	3328      	adds	r3, #40	@ 0x28
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 f84e 	bl	800556c <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044d6:	e004      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80044e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044ea:	4bbf      	ldr	r3, [pc, #764]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80044ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044f8:	4abb      	ldr	r2, [pc, #748]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80044fe:	e003      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f002 0302 	and.w	r3, r2, #2
 8004514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800451e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d041      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452e:	2b05      	cmp	r3, #5
 8004530:	d824      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004532:	a201      	add	r2, pc, #4	@ (adr r2, 8004538 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	08004585 	.word	0x08004585
 800453c:	08004551 	.word	0x08004551
 8004540:	08004567 	.word	0x08004567
 8004544:	08004585 	.word	0x08004585
 8004548:	08004585 	.word	0x08004585
 800454c:	08004585 	.word	0x08004585
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004554:	3308      	adds	r3, #8
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f000 ff55 	bl	8005408 <RCCEx_PLL2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004564:	e00f      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456a:	3328      	adds	r3, #40	@ 0x28
 800456c:	2101      	movs	r1, #1
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fffc 	bl	800556c <RCCEx_PLL3_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800457a:	e004      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004582:	e000      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004586:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800458e:	4b96      	ldr	r3, [pc, #600]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004592:	f023 0107 	bic.w	r1, r3, #7
 8004596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459c:	4a92      	ldr	r2, [pc, #584]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800459e:	430b      	orrs	r3, r1
 80045a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80045a2:	e003      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 0304 	and.w	r3, r2, #4
 80045b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d044      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d825      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	0800462d 	.word	0x0800462d
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	0800460f 	.word	0x0800460f
 80045ec:	0800462d 	.word	0x0800462d
 80045f0:	0800462d 	.word	0x0800462d
 80045f4:	0800462d 	.word	0x0800462d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fc:	3308      	adds	r3, #8
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f000 ff01 	bl	8005408 <RCCEx_PLL2_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800460c:	e00f      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800460e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004612:	3328      	adds	r3, #40	@ 0x28
 8004614:	2101      	movs	r1, #1
 8004616:	4618      	mov	r0, r3
 8004618:	f000 ffa8 	bl	800556c <RCCEx_PLL3_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004622:	e004      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800462c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004636:	4b6c      	ldr	r3, [pc, #432]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	f023 0107 	bic.w	r1, r3, #7
 800463e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	4a68      	ldr	r2, [pc, #416]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6593      	str	r3, [r2, #88]	@ 0x58
 800464c:	e003      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004652:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f002 0320 	and.w	r3, r2, #32
 8004662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800466c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004670:	460b      	mov	r3, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	d055      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800467a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800467e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004682:	d033      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004688:	d82c      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468e:	d02f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004694:	d826      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004696:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800469a:	d02b      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800469c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046a0:	d820      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80046a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a6:	d012      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80046a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046ac:	d81a      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d022      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80046b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046b6:	d115      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046bc:	3308      	adds	r3, #8
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fea1 	bl	8005408 <RCCEx_PLL2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046cc:	e015      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d2:	3328      	adds	r3, #40	@ 0x28
 80046d4:	2102      	movs	r1, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 ff48 	bl	800556c <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046e2:	e00a      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046ea:	e006      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80046ec:	bf00      	nop
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80046f0:	bf00      	nop
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80046f4:	bf00      	nop
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80046f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004702:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004706:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800470a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004712:	4a35      	ldr	r2, [pc, #212]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004714:	430b      	orrs	r3, r1
 8004716:	6553      	str	r3, [r2, #84]	@ 0x54
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800471e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800472e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004732:	2300      	movs	r3, #0
 8004734:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004738:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800473c:	460b      	mov	r3, r1
 800473e:	4313      	orrs	r3, r2
 8004740:	d058      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800474a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800474e:	d033      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004750:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004754:	d82c      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475a:	d02f      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004760:	d826      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004766:	d02b      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004768:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800476c:	d820      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004772:	d012      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004778:	d81a      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d022      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800477e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004782:	d115      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004788:	3308      	adds	r3, #8
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fe3b 	bl	8005408 <RCCEx_PLL2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004798:	e015      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800479a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800479e:	3328      	adds	r3, #40	@ 0x28
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fee2 	bl	800556c <RCCEx_PLL3_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047ae:	e00a      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047b6:	e006      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047b8:	bf00      	nop
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047bc:	bf00      	nop
 80047be:	e002      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10e      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ce:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047de:	4a02      	ldr	r2, [pc, #8]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80047e4:	e006      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80047e6:	bf00      	nop
 80047e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800480a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d055      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004818:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800481c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004820:	d033      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004822:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004826:	d82c      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800482c:	d02f      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004832:	d826      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004834:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004838:	d02b      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800483a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800483e:	d820      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004840:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004844:	d012      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800484a:	d81a      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d022      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004854:	d115      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485a:	3308      	adds	r3, #8
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fdd2 	bl	8005408 <RCCEx_PLL2_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800486a:	e015      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004870:	3328      	adds	r3, #40	@ 0x28
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fe79 	bl	800556c <RCCEx_PLL3_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004880:	e00a      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800488a:	bf00      	nop
 800488c:	e004      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048a0:	4ba0      	ldr	r3, [pc, #640]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80048a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048b0:	4a9c      	ldr	r2, [pc, #624]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b6:	e003      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80048c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f002 0308 	and.w	r3, r2, #8
 80048cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048da:	460b      	mov	r3, r1
 80048dc:	4313      	orrs	r3, r2
 80048de:	d01e      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80048e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f2:	3328      	adds	r3, #40	@ 0x28
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fe38 	bl	800556c <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004908:	4b86      	ldr	r3, [pc, #536]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800490a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004918:	4a82      	ldr	r2, [pc, #520]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800491a:	430b      	orrs	r3, r1
 800491c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800491e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f002 0310 	and.w	r3, r2, #16
 800492a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800492e:	2300      	movs	r3, #0
 8004930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004934:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d01e      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800493e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800494a:	d10c      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800494c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004950:	3328      	adds	r3, #40	@ 0x28
 8004952:	2102      	movs	r1, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fe09 	bl	800556c <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004966:	4b6f      	ldr	r3, [pc, #444]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004976:	4a6b      	ldr	r2, [pc, #428]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800497c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800498a:	2300      	movs	r3, #0
 800498c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800498e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d03e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800499c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049a4:	d022      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80049a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049aa:	d81b      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b4:	d00b      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80049b6:	e015      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049bc:	3308      	adds	r3, #8
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fd21 	bl	8005408 <RCCEx_PLL2_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049cc:	e00f      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d2:	3328      	adds	r3, #40	@ 0x28
 80049d4:	2102      	movs	r1, #2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fdc8 	bl	800556c <RCCEx_PLL3_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049e2:	e004      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80049ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a06:	4a47      	ldr	r2, [pc, #284]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a0c:	e003      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a22:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a24:	2300      	movs	r3, #0
 8004a26:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d03b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a3e:	d01f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004a40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a44:	d818      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a4a:	d003      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a50:	d007      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004a52:	e011      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4b33      	ldr	r3, [pc, #204]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a60:	e00f      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a66:	3328      	adds	r3, #40	@ 0x28
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fd7e 	bl	800556c <RCCEx_PLL3_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a76:	e004      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a7e:	e000      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10b      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a8a:	4b26      	ldr	r3, [pc, #152]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a9a:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aa6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ab8:	2300      	movs	r3, #0
 8004aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004abc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	d034      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad4:	d007      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004ad6:	e011      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4b12      	ldr	r3, [pc, #72]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	4a11      	ldr	r2, [pc, #68]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ae4:	e00e      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aea:	3308      	adds	r3, #8
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fc8a 	bl	8005408 <RCCEx_PLL2_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1a:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b3e:	2300      	movs	r3, #0
 8004b40:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b42:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b46:	460b      	mov	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	d00c      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b50:	3328      	adds	r3, #40	@ 0x28
 8004b52:	2102      	movs	r1, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fd09 	bl	800556c <RCCEx_PLL3_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b74:	2300      	movs	r3, #0
 8004b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b78:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d036      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8c:	d018      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b92:	d811      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b98:	d014      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b9e:	d80b      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d011      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba8:	d106      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004baa:	4bb7      	ldr	r3, [pc, #732]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	4ab6      	ldr	r2, [pc, #728]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bb6:	e008      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bbe:	e004      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004bc0:	bf00      	nop
 8004bc2:	e002      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004bc4:	bf00      	nop
 8004bc6:	e000      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bd2:	4bad      	ldr	r3, [pc, #692]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be0:	4aa9      	ldr	r2, [pc, #676]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004be2:	430b      	orrs	r3, r1
 8004be4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004be6:	e003      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004bfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfe:	2300      	movs	r3, #0
 8004c00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c0c:	4b9e      	ldr	r3, [pc, #632]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a9b      	ldr	r2, [pc, #620]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c2e:	2300      	movs	r3, #0
 8004c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c32:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c3c:	4b92      	ldr	r3, [pc, #584]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c40:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c4a:	4a8f      	ldr	r2, [pc, #572]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c5e:	2300      	movs	r3, #0
 8004c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c66:	460b      	mov	r3, r1
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c6c:	4b86      	ldr	r3, [pc, #536]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4a85      	ldr	r2, [pc, #532]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c76:	6113      	str	r3, [r2, #16]
 8004c78:	4b83      	ldr	r3, [pc, #524]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c7a:	6919      	ldr	r1, [r3, #16]
 8004c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c84:	4a80      	ldr	r2, [pc, #512]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c86:	430b      	orrs	r3, r1
 8004c88:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c98:	2300      	movs	r3, #0
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c9c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	d009      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ca6:	4b78      	ldr	r3, [pc, #480]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004caa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb4:	4a74      	ldr	r2, [pc, #464]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cc8:	2300      	movs	r3, #0
 8004cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ccc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cda:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce6:	4a68      	ldr	r2, [pc, #416]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d011      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fb79 	bl	8005408 <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	2100      	movs	r1, #0
 8004d36:	6239      	str	r1, [r7, #32]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d42:	460b      	mov	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	d011      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fb59 	bl	8005408 <RCCEx_PLL2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	2100      	movs	r1, #0
 8004d76:	61b9      	str	r1, [r7, #24]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d82:	460b      	mov	r3, r1
 8004d84:	4313      	orrs	r3, r2
 8004d86:	d011      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fb39 	bl	8005408 <RCCEx_PLL2_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004da8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	2100      	movs	r1, #0
 8004db6:	6139      	str	r1, [r7, #16]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d011      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dcc:	3328      	adds	r3, #40	@ 0x28
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fbcb 	bl	800556c <RCCEx_PLL3_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	2100      	movs	r1, #0
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e02:	460b      	mov	r3, r1
 8004e04:	4313      	orrs	r3, r2
 8004e06:	d011      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0c:	3328      	adds	r3, #40	@ 0x28
 8004e0e:	2101      	movs	r1, #1
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fbab 	bl	800556c <RCCEx_PLL3_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	2100      	movs	r1, #0
 8004e36:	6039      	str	r1, [r7, #0]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	d011      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	3328      	adds	r3, #40	@ 0x28
 8004e4e:	2102      	movs	r1, #2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fb8b 	bl	800556c <RCCEx_PLL3_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004e6c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400

08004e8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e90:	f7fe fe00 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	08009610 	.word	0x08009610

08004eb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	@ 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004eca:	4b9f      	ldr	r3, [pc, #636]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ece:	0b1b      	lsrs	r3, r3, #12
 8004ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ee2:	4b99      	ldr	r3, [pc, #612]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee6:	08db      	lsrs	r3, r3, #3
 8004ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8111 	beq.w	8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	f000 8083 	beq.w	8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	f200 80a1 	bhi.w	8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d056      	beq.n	8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f22:	e099      	b.n	8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f24:	4b88      	ldr	r3, [pc, #544]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d02d      	beq.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f30:	4b85      	ldr	r3, [pc, #532]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	08db      	lsrs	r3, r3, #3
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	4a84      	ldr	r2, [pc, #528]	@ (800514c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f8a:	e087      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fce:	e065      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe2:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ff6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005012:	e043      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005026:	4b48      	ldr	r3, [pc, #288]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005036:	ed97 6a03 	vldr	s12, [r7, #12]
 800503a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800503e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800504a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005056:	e021      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506a:	4b37      	ldr	r3, [pc, #220]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507a:	ed97 6a03 	vldr	s12, [r7, #12]
 800507e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800509a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800509c:	4b2a      	ldr	r3, [pc, #168]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	0a5b      	lsrs	r3, r3, #9
 80050a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c2:	ee17 2a90 	vmov	r2, s15
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	0c1b      	lsrs	r3, r3, #16
 80050d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f0:	ee17 2a90 	vmov	r2, s15
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050f8:	4b13      	ldr	r3, [pc, #76]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	0e1b      	lsrs	r3, r3, #24
 80050fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800510e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005112:	edd7 6a07 	vldr	s13, [r7, #28]
 8005116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800511a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800511e:	ee17 2a90 	vmov	r2, s15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005126:	e008      	b.n	800513a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	609a      	str	r2, [r3, #8]
}
 800513a:	bf00      	nop
 800513c:	3724      	adds	r7, #36	@ 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	58024400 	.word	0x58024400
 800514c:	03d09000 	.word	0x03d09000
 8005150:	46000000 	.word	0x46000000
 8005154:	4c742400 	.word	0x4c742400
 8005158:	4a742400 	.word	0x4a742400
 800515c:	4af42400 	.word	0x4af42400

08005160 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	@ 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005168:	4ba1      	ldr	r3, [pc, #644]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005172:	4b9f      	ldr	r3, [pc, #636]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	0d1b      	lsrs	r3, r3, #20
 8005178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800517c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800517e:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800518a:	4b99      	ldr	r3, [pc, #612]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	08db      	lsrs	r3, r3, #3
 8005190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8111 	beq.w	80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f000 8083 	beq.w	80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	f200 80a1 	bhi.w	8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d056      	beq.n	8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051ca:	e099      	b.n	8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051cc:	4b88      	ldr	r3, [pc, #544]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02d      	beq.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d8:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	4a84      	ldr	r2, [pc, #528]	@ (80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b7b      	ldr	r3, [pc, #492]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005232:	e087      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005246:	4b6a      	ldr	r3, [pc, #424]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005256:	ed97 6a03 	vldr	s12, [r7, #12]
 800525a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005276:	e065      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b59      	ldr	r3, [pc, #356]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a03 	vldr	s12, [r7, #12]
 800529e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ba:	e043      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052fe:	e021      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a03 	vldr	s12, [r7, #12]
 8005326:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005342:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005344:	4b2a      	ldr	r3, [pc, #168]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005348:	0a5b      	lsrs	r3, r3, #9
 800534a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800535a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800535e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536a:	ee17 2a90 	vmov	r2, s15
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005372:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005398:	ee17 2a90 	vmov	r2, s15
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053a0:	4b13      	ldr	r3, [pc, #76]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80053be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c6:	ee17 2a90 	vmov	r2, s15
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053ce:	e008      	b.n	80053e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	@ 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	46000000 	.word	0x46000000
 80053fc:	4c742400 	.word	0x4c742400
 8005400:	4a742400 	.word	0x4a742400
 8005404:	4af42400 	.word	0x4af42400

08005408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005416:	4b53      	ldr	r3, [pc, #332]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2b03      	cmp	r3, #3
 8005420:	d101      	bne.n	8005426 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e099      	b.n	800555a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005426:	4b4f      	ldr	r3, [pc, #316]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a4e      	ldr	r2, [pc, #312]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fb ffab 	bl	800138c <HAL_GetTick>
 8005436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005438:	e008      	b.n	800544c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800543a:	f7fb ffa7 	bl	800138c <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e086      	b.n	800555a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800544c:	4b45      	ldr	r3, [pc, #276]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005458:	4b42      	ldr	r3, [pc, #264]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	493f      	ldr	r1, [pc, #252]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	628b      	str	r3, [r1, #40]	@ 0x28
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	3b01      	subs	r3, #1
 8005472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	3b01      	subs	r3, #1
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	b29b      	uxth	r3, r3
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	3b01      	subs	r3, #1
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	3b01      	subs	r3, #1
 8005496:	061b      	lsls	r3, r3, #24
 8005498:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800549c:	4931      	ldr	r1, [pc, #196]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054a2:	4b30      	ldr	r3, [pc, #192]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	492d      	ldr	r1, [pc, #180]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	f023 0220 	bic.w	r2, r3, #32
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4928      	ldr	r1, [pc, #160]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054c6:	4b27      	ldr	r3, [pc, #156]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	4a26      	ldr	r2, [pc, #152]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054d2:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054d6:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <RCCEx_PLL2_Config+0x160>)
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	69d2      	ldr	r2, [r2, #28]
 80054de:	00d2      	lsls	r2, r2, #3
 80054e0:	4920      	ldr	r1, [pc, #128]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054ec:	f043 0310 	orr.w	r3, r3, #16
 80054f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005504:	e00f      	b.n	8005526 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d106      	bne.n	800551a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800550c:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	4a14      	ldr	r2, [pc, #80]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005518:	e005      	b.n	8005526 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800551a:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005524:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005526:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800552c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005532:	f7fb ff2b 	bl	800138c <HAL_GetTick>
 8005536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005538:	e008      	b.n	800554c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800553a:	f7fb ff27 	bl	800138c <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e006      	b.n	800555a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	ffff0007 	.word	0xffff0007

0800556c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800557a:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b03      	cmp	r3, #3
 8005584:	d101      	bne.n	800558a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e099      	b.n	80056be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800558a:	4b4f      	ldr	r3, [pc, #316]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a4e      	ldr	r2, [pc, #312]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005596:	f7fb fef9 	bl	800138c <HAL_GetTick>
 800559a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800559c:	e008      	b.n	80055b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800559e:	f7fb fef5 	bl	800138c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e086      	b.n	80056be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b0:	4b45      	ldr	r3, [pc, #276]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055bc:	4b42      	ldr	r3, [pc, #264]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	051b      	lsls	r3, r3, #20
 80055ca:	493f      	ldr	r1, [pc, #252]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	3b01      	subs	r3, #1
 80055e0:	025b      	lsls	r3, r3, #9
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	061b      	lsls	r3, r3, #24
 80055fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005600:	4931      	ldr	r1, [pc, #196]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005606:	4b30      	ldr	r3, [pc, #192]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	492d      	ldr	r1, [pc, #180]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005618:	4b2b      	ldr	r3, [pc, #172]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	4928      	ldr	r1, [pc, #160]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800562a:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	4a26      	ldr	r2, [pc, #152]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005634:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563a:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <RCCEx_PLL3_Config+0x160>)
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	69d2      	ldr	r2, [r2, #28]
 8005642:	00d2      	lsls	r2, r2, #3
 8005644:	4920      	ldr	r1, [pc, #128]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800564a:	4b1f      	ldr	r3, [pc, #124]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800565c:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	4a19      	ldr	r2, [pc, #100]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005662:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005668:	e00f      	b.n	800568a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d106      	bne.n	800567e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005670:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	4a14      	ldr	r2, [pc, #80]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005676:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800567a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800567c:	e005      	b.n	800568a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005688:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800568a:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a0e      	ldr	r2, [pc, #56]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005696:	f7fb fe79 	bl	800138c <HAL_GetTick>
 800569a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800569c:	e008      	b.n	80056b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800569e:	f7fb fe75 	bl	800138c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	ffff0007 	.word	0xffff0007

080056d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e042      	b.n	8005768 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fb fa7d 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	@ 0x24
 80056fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 ff22 	bl	8006564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f8b3 	bl	800588c <UART_SetConfig>
 8005726:	4603      	mov	r3, r0
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e01b      	b.n	8005768 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800573e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800574e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 ffa1 	bl	80066a8 <UART_CheckIdleState>
 8005766:	4603      	mov	r3, r0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	@ 0x28
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	2b20      	cmp	r3, #32
 8005788:	d17b      	bne.n	8005882 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_Transmit+0x26>
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e074      	b.n	8005884 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2221      	movs	r2, #33	@ 0x21
 80057a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057aa:	f7fb fdef 	bl	800138c <HAL_GetTick>
 80057ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c8:	d108      	bne.n	80057dc <HAL_UART_Transmit+0x6c>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	e003      	b.n	80057e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057e4:	e030      	b.n	8005848 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	2180      	movs	r1, #128	@ 0x80
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f001 f803 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e03d      	b.n	8005884 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800581c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	3302      	adds	r3, #2
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e007      	b.n	8005836 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	3301      	adds	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1c8      	bne.n	80057e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2200      	movs	r2, #0
 800585c:	2140      	movs	r1, #64	@ 0x40
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 ffcc 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e006      	b.n	8005884 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800588c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005890:	b092      	sub	sp, #72	@ 0x48
 8005892:	af00      	add	r7, sp, #0
 8005894:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4bbe      	ldr	r3, [pc, #760]	@ (8005bb4 <UART_SetConfig+0x328>)
 80058bc:	4013      	ands	r3, r2
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4ab3      	ldr	r2, [pc, #716]	@ (8005bb8 <UART_SetConfig+0x32c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058f4:	4313      	orrs	r3, r2
 80058f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	4baf      	ldr	r3, [pc, #700]	@ (8005bbc <UART_SetConfig+0x330>)
 8005900:	4013      	ands	r3, r2
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005908:	430b      	orrs	r3, r1
 800590a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	f023 010f 	bic.w	r1, r3, #15
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4aa6      	ldr	r2, [pc, #664]	@ (8005bc0 <UART_SetConfig+0x334>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d177      	bne.n	8005a1c <UART_SetConfig+0x190>
 800592c:	4ba5      	ldr	r3, [pc, #660]	@ (8005bc4 <UART_SetConfig+0x338>)
 800592e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005934:	2b28      	cmp	r3, #40	@ 0x28
 8005936:	d86d      	bhi.n	8005a14 <UART_SetConfig+0x188>
 8005938:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <UART_SetConfig+0xb4>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	080059e5 	.word	0x080059e5
 8005944:	08005a15 	.word	0x08005a15
 8005948:	08005a15 	.word	0x08005a15
 800594c:	08005a15 	.word	0x08005a15
 8005950:	08005a15 	.word	0x08005a15
 8005954:	08005a15 	.word	0x08005a15
 8005958:	08005a15 	.word	0x08005a15
 800595c:	08005a15 	.word	0x08005a15
 8005960:	080059ed 	.word	0x080059ed
 8005964:	08005a15 	.word	0x08005a15
 8005968:	08005a15 	.word	0x08005a15
 800596c:	08005a15 	.word	0x08005a15
 8005970:	08005a15 	.word	0x08005a15
 8005974:	08005a15 	.word	0x08005a15
 8005978:	08005a15 	.word	0x08005a15
 800597c:	08005a15 	.word	0x08005a15
 8005980:	080059f5 	.word	0x080059f5
 8005984:	08005a15 	.word	0x08005a15
 8005988:	08005a15 	.word	0x08005a15
 800598c:	08005a15 	.word	0x08005a15
 8005990:	08005a15 	.word	0x08005a15
 8005994:	08005a15 	.word	0x08005a15
 8005998:	08005a15 	.word	0x08005a15
 800599c:	08005a15 	.word	0x08005a15
 80059a0:	080059fd 	.word	0x080059fd
 80059a4:	08005a15 	.word	0x08005a15
 80059a8:	08005a15 	.word	0x08005a15
 80059ac:	08005a15 	.word	0x08005a15
 80059b0:	08005a15 	.word	0x08005a15
 80059b4:	08005a15 	.word	0x08005a15
 80059b8:	08005a15 	.word	0x08005a15
 80059bc:	08005a15 	.word	0x08005a15
 80059c0:	08005a05 	.word	0x08005a05
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a15 	.word	0x08005a15
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a15 	.word	0x08005a15
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ea:	e326      	b.n	800603a <UART_SetConfig+0x7ae>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e322      	b.n	800603a <UART_SetConfig+0x7ae>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e31e      	b.n	800603a <UART_SetConfig+0x7ae>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e31a      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a04:	2320      	movs	r3, #32
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	e316      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a0c:	2340      	movs	r3, #64	@ 0x40
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a12:	e312      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a14:	2380      	movs	r3, #128	@ 0x80
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e30e      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a69      	ldr	r2, [pc, #420]	@ (8005bc8 <UART_SetConfig+0x33c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d130      	bne.n	8005a88 <UART_SetConfig+0x1fc>
 8005a26:	4b67      	ldr	r3, [pc, #412]	@ (8005bc4 <UART_SetConfig+0x338>)
 8005a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d826      	bhi.n	8005a80 <UART_SetConfig+0x1f4>
 8005a32:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <UART_SetConfig+0x1ac>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a51 	.word	0x08005a51
 8005a3c:	08005a59 	.word	0x08005a59
 8005a40:	08005a61 	.word	0x08005a61
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a71 	.word	0x08005a71
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e2f0      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e2ec      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e2e8      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e2e4      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a70:	2320      	movs	r3, #32
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e2e0      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e2dc      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e2d8      	b.n	800603a <UART_SetConfig+0x7ae>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a4f      	ldr	r2, [pc, #316]	@ (8005bcc <UART_SetConfig+0x340>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d130      	bne.n	8005af4 <UART_SetConfig+0x268>
 8005a92:	4b4c      	ldr	r3, [pc, #304]	@ (8005bc4 <UART_SetConfig+0x338>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d826      	bhi.n	8005aec <UART_SetConfig+0x260>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0x218>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005abd 	.word	0x08005abd
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	08005acd 	.word	0x08005acd
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e2ba      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e2b6      	b.n	800603a <UART_SetConfig+0x7ae>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e2b2      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e2ae      	b.n	800603a <UART_SetConfig+0x7ae>
 8005adc:	2320      	movs	r3, #32
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e2aa      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ae4:	2340      	movs	r3, #64	@ 0x40
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e2a6      	b.n	800603a <UART_SetConfig+0x7ae>
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e2a2      	b.n	800603a <UART_SetConfig+0x7ae>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a35      	ldr	r2, [pc, #212]	@ (8005bd0 <UART_SetConfig+0x344>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d130      	bne.n	8005b60 <UART_SetConfig+0x2d4>
 8005afe:	4b31      	ldr	r3, [pc, #196]	@ (8005bc4 <UART_SetConfig+0x338>)
 8005b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	d826      	bhi.n	8005b58 <UART_SetConfig+0x2cc>
 8005b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b10 <UART_SetConfig+0x284>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b31 	.word	0x08005b31
 8005b18:	08005b39 	.word	0x08005b39
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e284      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b30:	2304      	movs	r3, #4
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e280      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e27c      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e278      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e274      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b50:	2340      	movs	r3, #64	@ 0x40
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e270      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e26c      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <UART_SetConfig+0x348>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d142      	bne.n	8005bf0 <UART_SetConfig+0x364>
 8005b6a:	4b16      	ldr	r3, [pc, #88]	@ (8005bc4 <UART_SetConfig+0x338>)
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	d838      	bhi.n	8005be8 <UART_SetConfig+0x35c>
 8005b76:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <UART_SetConfig+0x2f0>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005b95 	.word	0x08005b95
 8005b80:	08005b9d 	.word	0x08005b9d
 8005b84:	08005ba5 	.word	0x08005ba5
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bd9 	.word	0x08005bd9
 8005b90:	08005be1 	.word	0x08005be1
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e24e      	b.n	800603a <UART_SetConfig+0x7ae>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba2:	e24a      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e246      	b.n	800603a <UART_SetConfig+0x7ae>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e242      	b.n	800603a <UART_SetConfig+0x7ae>
 8005bb4:	cfff69f3 	.word	0xcfff69f3
 8005bb8:	58000c00 	.word	0x58000c00
 8005bbc:	11fff4ff 	.word	0x11fff4ff
 8005bc0:	40011000 	.word	0x40011000
 8005bc4:	58024400 	.word	0x58024400
 8005bc8:	40004400 	.word	0x40004400
 8005bcc:	40004800 	.word	0x40004800
 8005bd0:	40004c00 	.word	0x40004c00
 8005bd4:	40005000 	.word	0x40005000
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e22c      	b.n	800603a <UART_SetConfig+0x7ae>
 8005be0:	2340      	movs	r3, #64	@ 0x40
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e228      	b.n	800603a <UART_SetConfig+0x7ae>
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e224      	b.n	800603a <UART_SetConfig+0x7ae>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4ab1      	ldr	r2, [pc, #708]	@ (8005ebc <UART_SetConfig+0x630>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d176      	bne.n	8005ce8 <UART_SetConfig+0x45c>
 8005bfa:	4bb1      	ldr	r3, [pc, #708]	@ (8005ec0 <UART_SetConfig+0x634>)
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c02:	2b28      	cmp	r3, #40	@ 0x28
 8005c04:	d86c      	bhi.n	8005ce0 <UART_SetConfig+0x454>
 8005c06:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <UART_SetConfig+0x380>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005cb1 	.word	0x08005cb1
 8005c10:	08005ce1 	.word	0x08005ce1
 8005c14:	08005ce1 	.word	0x08005ce1
 8005c18:	08005ce1 	.word	0x08005ce1
 8005c1c:	08005ce1 	.word	0x08005ce1
 8005c20:	08005ce1 	.word	0x08005ce1
 8005c24:	08005ce1 	.word	0x08005ce1
 8005c28:	08005ce1 	.word	0x08005ce1
 8005c2c:	08005cb9 	.word	0x08005cb9
 8005c30:	08005ce1 	.word	0x08005ce1
 8005c34:	08005ce1 	.word	0x08005ce1
 8005c38:	08005ce1 	.word	0x08005ce1
 8005c3c:	08005ce1 	.word	0x08005ce1
 8005c40:	08005ce1 	.word	0x08005ce1
 8005c44:	08005ce1 	.word	0x08005ce1
 8005c48:	08005ce1 	.word	0x08005ce1
 8005c4c:	08005cc1 	.word	0x08005cc1
 8005c50:	08005ce1 	.word	0x08005ce1
 8005c54:	08005ce1 	.word	0x08005ce1
 8005c58:	08005ce1 	.word	0x08005ce1
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005ce1 	.word	0x08005ce1
 8005c64:	08005ce1 	.word	0x08005ce1
 8005c68:	08005ce1 	.word	0x08005ce1
 8005c6c:	08005cc9 	.word	0x08005cc9
 8005c70:	08005ce1 	.word	0x08005ce1
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005ce1 	.word	0x08005ce1
 8005c7c:	08005ce1 	.word	0x08005ce1
 8005c80:	08005ce1 	.word	0x08005ce1
 8005c84:	08005ce1 	.word	0x08005ce1
 8005c88:	08005ce1 	.word	0x08005ce1
 8005c8c:	08005cd1 	.word	0x08005cd1
 8005c90:	08005ce1 	.word	0x08005ce1
 8005c94:	08005ce1 	.word	0x08005ce1
 8005c98:	08005ce1 	.word	0x08005ce1
 8005c9c:	08005ce1 	.word	0x08005ce1
 8005ca0:	08005ce1 	.word	0x08005ce1
 8005ca4:	08005ce1 	.word	0x08005ce1
 8005ca8:	08005ce1 	.word	0x08005ce1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e1c0      	b.n	800603a <UART_SetConfig+0x7ae>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e1bc      	b.n	800603a <UART_SetConfig+0x7ae>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e1b8      	b.n	800603a <UART_SetConfig+0x7ae>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e1b4      	b.n	800603a <UART_SetConfig+0x7ae>
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e1b0      	b.n	800603a <UART_SetConfig+0x7ae>
 8005cd8:	2340      	movs	r3, #64	@ 0x40
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e1ac      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e1a8      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a75      	ldr	r2, [pc, #468]	@ (8005ec4 <UART_SetConfig+0x638>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d130      	bne.n	8005d54 <UART_SetConfig+0x4c8>
 8005cf2:	4b73      	ldr	r3, [pc, #460]	@ (8005ec0 <UART_SetConfig+0x634>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d826      	bhi.n	8005d4c <UART_SetConfig+0x4c0>
 8005cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <UART_SetConfig+0x478>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e18a      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e186      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e182      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e17e      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e17a      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d44:	2340      	movs	r3, #64	@ 0x40
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e176      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e172      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5b      	ldr	r2, [pc, #364]	@ (8005ec8 <UART_SetConfig+0x63c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d130      	bne.n	8005dc0 <UART_SetConfig+0x534>
 8005d5e:	4b58      	ldr	r3, [pc, #352]	@ (8005ec0 <UART_SetConfig+0x634>)
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d826      	bhi.n	8005db8 <UART_SetConfig+0x52c>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x4e4>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e154      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e150      	b.n	800603a <UART_SetConfig+0x7ae>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e14c      	b.n	800603a <UART_SetConfig+0x7ae>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e148      	b.n	800603a <UART_SetConfig+0x7ae>
 8005da8:	2320      	movs	r3, #32
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e144      	b.n	800603a <UART_SetConfig+0x7ae>
 8005db0:	2340      	movs	r3, #64	@ 0x40
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e140      	b.n	800603a <UART_SetConfig+0x7ae>
 8005db8:	2380      	movs	r3, #128	@ 0x80
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e13c      	b.n	800603a <UART_SetConfig+0x7ae>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a41      	ldr	r2, [pc, #260]	@ (8005ecc <UART_SetConfig+0x640>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f040 8082 	bne.w	8005ed0 <UART_SetConfig+0x644>
 8005dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ec0 <UART_SetConfig+0x634>)
 8005dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dd4:	2b28      	cmp	r3, #40	@ 0x28
 8005dd6:	d86d      	bhi.n	8005eb4 <UART_SetConfig+0x628>
 8005dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0x554>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e85 	.word	0x08005e85
 8005de4:	08005eb5 	.word	0x08005eb5
 8005de8:	08005eb5 	.word	0x08005eb5
 8005dec:	08005eb5 	.word	0x08005eb5
 8005df0:	08005eb5 	.word	0x08005eb5
 8005df4:	08005eb5 	.word	0x08005eb5
 8005df8:	08005eb5 	.word	0x08005eb5
 8005dfc:	08005eb5 	.word	0x08005eb5
 8005e00:	08005e8d 	.word	0x08005e8d
 8005e04:	08005eb5 	.word	0x08005eb5
 8005e08:	08005eb5 	.word	0x08005eb5
 8005e0c:	08005eb5 	.word	0x08005eb5
 8005e10:	08005eb5 	.word	0x08005eb5
 8005e14:	08005eb5 	.word	0x08005eb5
 8005e18:	08005eb5 	.word	0x08005eb5
 8005e1c:	08005eb5 	.word	0x08005eb5
 8005e20:	08005e95 	.word	0x08005e95
 8005e24:	08005eb5 	.word	0x08005eb5
 8005e28:	08005eb5 	.word	0x08005eb5
 8005e2c:	08005eb5 	.word	0x08005eb5
 8005e30:	08005eb5 	.word	0x08005eb5
 8005e34:	08005eb5 	.word	0x08005eb5
 8005e38:	08005eb5 	.word	0x08005eb5
 8005e3c:	08005eb5 	.word	0x08005eb5
 8005e40:	08005e9d 	.word	0x08005e9d
 8005e44:	08005eb5 	.word	0x08005eb5
 8005e48:	08005eb5 	.word	0x08005eb5
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	08005eb5 	.word	0x08005eb5
 8005e58:	08005eb5 	.word	0x08005eb5
 8005e5c:	08005eb5 	.word	0x08005eb5
 8005e60:	08005ea5 	.word	0x08005ea5
 8005e64:	08005eb5 	.word	0x08005eb5
 8005e68:	08005eb5 	.word	0x08005eb5
 8005e6c:	08005eb5 	.word	0x08005eb5
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005eb5 	.word	0x08005eb5
 8005e78:	08005eb5 	.word	0x08005eb5
 8005e7c:	08005eb5 	.word	0x08005eb5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e0d6      	b.n	800603a <UART_SetConfig+0x7ae>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e0d2      	b.n	800603a <UART_SetConfig+0x7ae>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e0ce      	b.n	800603a <UART_SetConfig+0x7ae>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e0ca      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e0c6      	b.n	800603a <UART_SetConfig+0x7ae>
 8005eac:	2340      	movs	r3, #64	@ 0x40
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e0c2      	b.n	800603a <UART_SetConfig+0x7ae>
 8005eb4:	2380      	movs	r3, #128	@ 0x80
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e0be      	b.n	800603a <UART_SetConfig+0x7ae>
 8005ebc:	40011400 	.word	0x40011400
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	40007800 	.word	0x40007800
 8005ec8:	40007c00 	.word	0x40007c00
 8005ecc:	40011800 	.word	0x40011800
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4aad      	ldr	r2, [pc, #692]	@ (800618c <UART_SetConfig+0x900>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d176      	bne.n	8005fc8 <UART_SetConfig+0x73c>
 8005eda:	4bad      	ldr	r3, [pc, #692]	@ (8006190 <UART_SetConfig+0x904>)
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ee2:	2b28      	cmp	r3, #40	@ 0x28
 8005ee4:	d86c      	bhi.n	8005fc0 <UART_SetConfig+0x734>
 8005ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <UART_SetConfig+0x660>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005f91 	.word	0x08005f91
 8005ef0:	08005fc1 	.word	0x08005fc1
 8005ef4:	08005fc1 	.word	0x08005fc1
 8005ef8:	08005fc1 	.word	0x08005fc1
 8005efc:	08005fc1 	.word	0x08005fc1
 8005f00:	08005fc1 	.word	0x08005fc1
 8005f04:	08005fc1 	.word	0x08005fc1
 8005f08:	08005fc1 	.word	0x08005fc1
 8005f0c:	08005f99 	.word	0x08005f99
 8005f10:	08005fc1 	.word	0x08005fc1
 8005f14:	08005fc1 	.word	0x08005fc1
 8005f18:	08005fc1 	.word	0x08005fc1
 8005f1c:	08005fc1 	.word	0x08005fc1
 8005f20:	08005fc1 	.word	0x08005fc1
 8005f24:	08005fc1 	.word	0x08005fc1
 8005f28:	08005fc1 	.word	0x08005fc1
 8005f2c:	08005fa1 	.word	0x08005fa1
 8005f30:	08005fc1 	.word	0x08005fc1
 8005f34:	08005fc1 	.word	0x08005fc1
 8005f38:	08005fc1 	.word	0x08005fc1
 8005f3c:	08005fc1 	.word	0x08005fc1
 8005f40:	08005fc1 	.word	0x08005fc1
 8005f44:	08005fc1 	.word	0x08005fc1
 8005f48:	08005fc1 	.word	0x08005fc1
 8005f4c:	08005fa9 	.word	0x08005fa9
 8005f50:	08005fc1 	.word	0x08005fc1
 8005f54:	08005fc1 	.word	0x08005fc1
 8005f58:	08005fc1 	.word	0x08005fc1
 8005f5c:	08005fc1 	.word	0x08005fc1
 8005f60:	08005fc1 	.word	0x08005fc1
 8005f64:	08005fc1 	.word	0x08005fc1
 8005f68:	08005fc1 	.word	0x08005fc1
 8005f6c:	08005fb1 	.word	0x08005fb1
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	08005fc1 	.word	0x08005fc1
 8005f78:	08005fc1 	.word	0x08005fc1
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fc1 	.word	0x08005fc1
 8005f84:	08005fc1 	.word	0x08005fc1
 8005f88:	08005fc1 	.word	0x08005fc1
 8005f8c:	08005fb9 	.word	0x08005fb9
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e050      	b.n	800603a <UART_SetConfig+0x7ae>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e04c      	b.n	800603a <UART_SetConfig+0x7ae>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e048      	b.n	800603a <UART_SetConfig+0x7ae>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e044      	b.n	800603a <UART_SetConfig+0x7ae>
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e040      	b.n	800603a <UART_SetConfig+0x7ae>
 8005fb8:	2340      	movs	r3, #64	@ 0x40
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e03c      	b.n	800603a <UART_SetConfig+0x7ae>
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e038      	b.n	800603a <UART_SetConfig+0x7ae>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a71      	ldr	r2, [pc, #452]	@ (8006194 <UART_SetConfig+0x908>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d130      	bne.n	8006034 <UART_SetConfig+0x7a8>
 8005fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8006190 <UART_SetConfig+0x904>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d826      	bhi.n	800602c <UART_SetConfig+0x7a0>
 8005fde:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe4 <UART_SetConfig+0x758>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08005ffd 	.word	0x08005ffd
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	0800600d 	.word	0x0800600d
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	0800601d 	.word	0x0800601d
 8005ff8:	08006025 	.word	0x08006025
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e01a      	b.n	800603a <UART_SetConfig+0x7ae>
 8006004:	2304      	movs	r3, #4
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e016      	b.n	800603a <UART_SetConfig+0x7ae>
 800600c:	2308      	movs	r3, #8
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e012      	b.n	800603a <UART_SetConfig+0x7ae>
 8006014:	2310      	movs	r3, #16
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e00e      	b.n	800603a <UART_SetConfig+0x7ae>
 800601c:	2320      	movs	r3, #32
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e00a      	b.n	800603a <UART_SetConfig+0x7ae>
 8006024:	2340      	movs	r3, #64	@ 0x40
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e006      	b.n	800603a <UART_SetConfig+0x7ae>
 800602c:	2380      	movs	r3, #128	@ 0x80
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e002      	b.n	800603a <UART_SetConfig+0x7ae>
 8006034:	2380      	movs	r3, #128	@ 0x80
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a55      	ldr	r2, [pc, #340]	@ (8006194 <UART_SetConfig+0x908>)
 8006040:	4293      	cmp	r3, r2
 8006042:	f040 80f8 	bne.w	8006236 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006046:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800604a:	2b20      	cmp	r3, #32
 800604c:	dc46      	bgt.n	80060dc <UART_SetConfig+0x850>
 800604e:	2b02      	cmp	r3, #2
 8006050:	db75      	blt.n	800613e <UART_SetConfig+0x8b2>
 8006052:	3b02      	subs	r3, #2
 8006054:	2b1e      	cmp	r3, #30
 8006056:	d872      	bhi.n	800613e <UART_SetConfig+0x8b2>
 8006058:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <UART_SetConfig+0x7d4>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	080060e3 	.word	0x080060e3
 8006064:	0800613f 	.word	0x0800613f
 8006068:	080060eb 	.word	0x080060eb
 800606c:	0800613f 	.word	0x0800613f
 8006070:	0800613f 	.word	0x0800613f
 8006074:	0800613f 	.word	0x0800613f
 8006078:	080060fb 	.word	0x080060fb
 800607c:	0800613f 	.word	0x0800613f
 8006080:	0800613f 	.word	0x0800613f
 8006084:	0800613f 	.word	0x0800613f
 8006088:	0800613f 	.word	0x0800613f
 800608c:	0800613f 	.word	0x0800613f
 8006090:	0800613f 	.word	0x0800613f
 8006094:	0800613f 	.word	0x0800613f
 8006098:	0800610b 	.word	0x0800610b
 800609c:	0800613f 	.word	0x0800613f
 80060a0:	0800613f 	.word	0x0800613f
 80060a4:	0800613f 	.word	0x0800613f
 80060a8:	0800613f 	.word	0x0800613f
 80060ac:	0800613f 	.word	0x0800613f
 80060b0:	0800613f 	.word	0x0800613f
 80060b4:	0800613f 	.word	0x0800613f
 80060b8:	0800613f 	.word	0x0800613f
 80060bc:	0800613f 	.word	0x0800613f
 80060c0:	0800613f 	.word	0x0800613f
 80060c4:	0800613f 	.word	0x0800613f
 80060c8:	0800613f 	.word	0x0800613f
 80060cc:	0800613f 	.word	0x0800613f
 80060d0:	0800613f 	.word	0x0800613f
 80060d4:	0800613f 	.word	0x0800613f
 80060d8:	08006131 	.word	0x08006131
 80060dc:	2b40      	cmp	r3, #64	@ 0x40
 80060de:	d02a      	beq.n	8006136 <UART_SetConfig+0x8aa>
 80060e0:	e02d      	b.n	800613e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060e2:	f7fe fed3 	bl	8004e8c <HAL_RCCEx_GetD3PCLK1Freq>
 80060e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060e8:	e02f      	b.n	800614a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fee2 	bl	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060f8:	e027      	b.n	800614a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060fa:	f107 0318 	add.w	r3, r7, #24
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff f82e 	bl	8005160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006108:	e01f      	b.n	800614a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800610a:	4b21      	ldr	r3, [pc, #132]	@ (8006190 <UART_SetConfig+0x904>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006116:	4b1e      	ldr	r3, [pc, #120]	@ (8006190 <UART_SetConfig+0x904>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	08db      	lsrs	r3, r3, #3
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	4a1d      	ldr	r2, [pc, #116]	@ (8006198 <UART_SetConfig+0x90c>)
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006128:	e00f      	b.n	800614a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800612a:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <UART_SetConfig+0x90c>)
 800612c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800612e:	e00c      	b.n	800614a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006130:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <UART_SetConfig+0x910>)
 8006132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006134:	e009      	b.n	800614a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800613c:	e005      	b.n	800614a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006148:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800614a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 81ee 	beq.w	800652e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	4a12      	ldr	r2, [pc, #72]	@ (80061a0 <UART_SetConfig+0x914>)
 8006158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800615c:	461a      	mov	r2, r3
 800615e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006160:	fbb3 f3f2 	udiv	r3, r3, r2
 8006164:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006172:	429a      	cmp	r2, r3
 8006174:	d305      	bcc.n	8006182 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800617c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617e:	429a      	cmp	r2, r3
 8006180:	d910      	bls.n	80061a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006188:	e1d1      	b.n	800652e <UART_SetConfig+0xca2>
 800618a:	bf00      	nop
 800618c:	40011c00 	.word	0x40011c00
 8006190:	58024400 	.word	0x58024400
 8006194:	58000c00 	.word	0x58000c00
 8006198:	03d09000 	.word	0x03d09000
 800619c:	003d0900 	.word	0x003d0900
 80061a0:	08009620 	.word	0x08009620
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a6:	2200      	movs	r2, #0
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	60fa      	str	r2, [r7, #12]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	4ac0      	ldr	r2, [pc, #768]	@ (80064b4 <UART_SetConfig+0xc28>)
 80061b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2200      	movs	r2, #0
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061c6:	f7fa f8fb 	bl	80003c0 <__aeabi_uldivmod>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	020b      	lsls	r3, r1, #8
 80061dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061e0:	0202      	lsls	r2, r0, #8
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	6849      	ldr	r1, [r1, #4]
 80061e6:	0849      	lsrs	r1, r1, #1
 80061e8:	2000      	movs	r0, #0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4605      	mov	r5, r0
 80061ee:	eb12 0804 	adds.w	r8, r2, r4
 80061f2:	eb43 0905 	adc.w	r9, r3, r5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	469a      	mov	sl, r3
 80061fe:	4693      	mov	fp, r2
 8006200:	4652      	mov	r2, sl
 8006202:	465b      	mov	r3, fp
 8006204:	4640      	mov	r0, r8
 8006206:	4649      	mov	r1, r9
 8006208:	f7fa f8da 	bl	80003c0 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800621a:	d308      	bcc.n	800622e <UART_SetConfig+0x9a2>
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006222:	d204      	bcs.n	800622e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	e17f      	b.n	800652e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006234:	e17b      	b.n	800652e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623e:	f040 80bd 	bne.w	80063bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006242:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006246:	2b20      	cmp	r3, #32
 8006248:	dc48      	bgt.n	80062dc <UART_SetConfig+0xa50>
 800624a:	2b00      	cmp	r3, #0
 800624c:	db7b      	blt.n	8006346 <UART_SetConfig+0xaba>
 800624e:	2b20      	cmp	r3, #32
 8006250:	d879      	bhi.n	8006346 <UART_SetConfig+0xaba>
 8006252:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <UART_SetConfig+0x9cc>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	080062e3 	.word	0x080062e3
 800625c:	080062eb 	.word	0x080062eb
 8006260:	08006347 	.word	0x08006347
 8006264:	08006347 	.word	0x08006347
 8006268:	080062f3 	.word	0x080062f3
 800626c:	08006347 	.word	0x08006347
 8006270:	08006347 	.word	0x08006347
 8006274:	08006347 	.word	0x08006347
 8006278:	08006303 	.word	0x08006303
 800627c:	08006347 	.word	0x08006347
 8006280:	08006347 	.word	0x08006347
 8006284:	08006347 	.word	0x08006347
 8006288:	08006347 	.word	0x08006347
 800628c:	08006347 	.word	0x08006347
 8006290:	08006347 	.word	0x08006347
 8006294:	08006347 	.word	0x08006347
 8006298:	08006313 	.word	0x08006313
 800629c:	08006347 	.word	0x08006347
 80062a0:	08006347 	.word	0x08006347
 80062a4:	08006347 	.word	0x08006347
 80062a8:	08006347 	.word	0x08006347
 80062ac:	08006347 	.word	0x08006347
 80062b0:	08006347 	.word	0x08006347
 80062b4:	08006347 	.word	0x08006347
 80062b8:	08006347 	.word	0x08006347
 80062bc:	08006347 	.word	0x08006347
 80062c0:	08006347 	.word	0x08006347
 80062c4:	08006347 	.word	0x08006347
 80062c8:	08006347 	.word	0x08006347
 80062cc:	08006347 	.word	0x08006347
 80062d0:	08006347 	.word	0x08006347
 80062d4:	08006347 	.word	0x08006347
 80062d8:	08006339 	.word	0x08006339
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	d02e      	beq.n	800633e <UART_SetConfig+0xab2>
 80062e0:	e031      	b.n	8006346 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7fd fc07 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80062e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062e8:	e033      	b.n	8006352 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ea:	f7fd fc19 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 80062ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062f0:	e02f      	b.n	8006352 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fdde 	bl	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006300:	e027      	b.n	8006352 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006302:	f107 0318 	add.w	r3, r7, #24
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe ff2a 	bl	8005160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006310:	e01f      	b.n	8006352 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006312:	4b69      	ldr	r3, [pc, #420]	@ (80064b8 <UART_SetConfig+0xc2c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800631e:	4b66      	ldr	r3, [pc, #408]	@ (80064b8 <UART_SetConfig+0xc2c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	08db      	lsrs	r3, r3, #3
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	4a64      	ldr	r2, [pc, #400]	@ (80064bc <UART_SetConfig+0xc30>)
 800632a:	fa22 f303 	lsr.w	r3, r2, r3
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006330:	e00f      	b.n	8006352 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006332:	4b62      	ldr	r3, [pc, #392]	@ (80064bc <UART_SetConfig+0xc30>)
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006336:	e00c      	b.n	8006352 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006338:	4b61      	ldr	r3, [pc, #388]	@ (80064c0 <UART_SetConfig+0xc34>)
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e009      	b.n	8006352 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80ea 	beq.w	800652e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	4a55      	ldr	r2, [pc, #340]	@ (80064b4 <UART_SetConfig+0xc28>)
 8006360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006364:	461a      	mov	r2, r3
 8006366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006368:	fbb3 f3f2 	udiv	r3, r3, r2
 800636c:	005a      	lsls	r2, r3, #1
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	441a      	add	r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	2b0f      	cmp	r3, #15
 8006384:	d916      	bls.n	80063b4 <UART_SetConfig+0xb28>
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800638c:	d212      	bcs.n	80063b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	b29b      	uxth	r3, r3
 8006392:	f023 030f 	bic.w	r3, r3, #15
 8006396:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	b29b      	uxth	r3, r3
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063a6:	4313      	orrs	r3, r2
 80063a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063b0:	60da      	str	r2, [r3, #12]
 80063b2:	e0bc      	b.n	800652e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063ba:	e0b8      	b.n	800652e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	dc4b      	bgt.n	800645c <UART_SetConfig+0xbd0>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f2c0 8087 	blt.w	80064d8 <UART_SetConfig+0xc4c>
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	f200 8084 	bhi.w	80064d8 <UART_SetConfig+0xc4c>
 80063d0:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <UART_SetConfig+0xb4c>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	08006463 	.word	0x08006463
 80063dc:	0800646b 	.word	0x0800646b
 80063e0:	080064d9 	.word	0x080064d9
 80063e4:	080064d9 	.word	0x080064d9
 80063e8:	08006473 	.word	0x08006473
 80063ec:	080064d9 	.word	0x080064d9
 80063f0:	080064d9 	.word	0x080064d9
 80063f4:	080064d9 	.word	0x080064d9
 80063f8:	08006483 	.word	0x08006483
 80063fc:	080064d9 	.word	0x080064d9
 8006400:	080064d9 	.word	0x080064d9
 8006404:	080064d9 	.word	0x080064d9
 8006408:	080064d9 	.word	0x080064d9
 800640c:	080064d9 	.word	0x080064d9
 8006410:	080064d9 	.word	0x080064d9
 8006414:	080064d9 	.word	0x080064d9
 8006418:	08006493 	.word	0x08006493
 800641c:	080064d9 	.word	0x080064d9
 8006420:	080064d9 	.word	0x080064d9
 8006424:	080064d9 	.word	0x080064d9
 8006428:	080064d9 	.word	0x080064d9
 800642c:	080064d9 	.word	0x080064d9
 8006430:	080064d9 	.word	0x080064d9
 8006434:	080064d9 	.word	0x080064d9
 8006438:	080064d9 	.word	0x080064d9
 800643c:	080064d9 	.word	0x080064d9
 8006440:	080064d9 	.word	0x080064d9
 8006444:	080064d9 	.word	0x080064d9
 8006448:	080064d9 	.word	0x080064d9
 800644c:	080064d9 	.word	0x080064d9
 8006450:	080064d9 	.word	0x080064d9
 8006454:	080064d9 	.word	0x080064d9
 8006458:	080064cb 	.word	0x080064cb
 800645c:	2b40      	cmp	r3, #64	@ 0x40
 800645e:	d037      	beq.n	80064d0 <UART_SetConfig+0xc44>
 8006460:	e03a      	b.n	80064d8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006462:	f7fd fb47 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8006466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006468:	e03c      	b.n	80064e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646a:	f7fd fb59 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 800646e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006470:	e038      	b.n	80064e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fd1e 	bl	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800647c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006480:	e030      	b.n	80064e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006482:	f107 0318 	add.w	r3, r7, #24
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fe6a 	bl	8005160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006490:	e028      	b.n	80064e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006492:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <UART_SetConfig+0xc2c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d012      	beq.n	80064c4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800649e:	4b06      	ldr	r3, [pc, #24]	@ (80064b8 <UART_SetConfig+0xc2c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	08db      	lsrs	r3, r3, #3
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	4a04      	ldr	r2, [pc, #16]	@ (80064bc <UART_SetConfig+0xc30>)
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064b0:	e018      	b.n	80064e4 <UART_SetConfig+0xc58>
 80064b2:	bf00      	nop
 80064b4:	08009620 	.word	0x08009620
 80064b8:	58024400 	.word	0x58024400
 80064bc:	03d09000 	.word	0x03d09000
 80064c0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80064c4:	4b24      	ldr	r3, [pc, #144]	@ (8006558 <UART_SetConfig+0xccc>)
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c8:	e00c      	b.n	80064e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064ca:	4b24      	ldr	r3, [pc, #144]	@ (800655c <UART_SetConfig+0xcd0>)
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ce:	e009      	b.n	80064e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d6:	e005      	b.n	80064e4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80064e2:	bf00      	nop
    }

    if (pclk != 0U)
 80064e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d021      	beq.n	800652e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006560 <UART_SetConfig+0xcd4>)
 80064f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	441a      	add	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006510:	2b0f      	cmp	r3, #15
 8006512:	d909      	bls.n	8006528 <UART_SetConfig+0xc9c>
 8006514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651a:	d205      	bcs.n	8006528 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	b29a      	uxth	r2, r3
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	e002      	b.n	800652e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2201      	movs	r2, #1
 8006532:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2201      	movs	r2, #1
 800653a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2200      	movs	r2, #0
 8006548:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800654a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800654e:	4618      	mov	r0, r3
 8006550:	3748      	adds	r7, #72	@ 0x48
 8006552:	46bd      	mov	sp, r7
 8006554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006558:	03d09000 	.word	0x03d09000
 800655c:	003d0900 	.word	0x003d0900
 8006560:	08009620 	.word	0x08009620

08006564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01a      	beq.n	800667a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006662:	d10a      	bne.n	800667a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b098      	sub	sp, #96	@ 0x60
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066b8:	f7fa fe68 	bl	800138c <HAL_GetTick>
 80066bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d12f      	bne.n	800672c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d4:	2200      	movs	r2, #0
 80066d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f88e 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d022      	beq.n	800672c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006704:	647b      	str	r3, [r7, #68]	@ 0x44
 8006706:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800670a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e063      	b.n	80067f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b04      	cmp	r3, #4
 8006738:	d149      	bne.n	80067ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006742:	2200      	movs	r2, #0
 8006744:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f857 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d03c      	beq.n	80067ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	623b      	str	r3, [r7, #32]
   return(result);
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006772:	633b      	str	r3, [r7, #48]	@ 0x30
 8006774:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e6      	bne.n	8006754 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	60fb      	str	r3, [r7, #12]
   return(result);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067a6:	61fa      	str	r2, [r7, #28]
 80067a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	617b      	str	r3, [r7, #20]
   return(result);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e5      	bne.n	8006786 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e012      	b.n	80067f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3758      	adds	r7, #88	@ 0x58
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680c:	e04f      	b.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d04b      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fa fdb9 	bl	800138c <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <UART_WaitOnFlagUntilTimeout+0x30>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e04e      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d037      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b80      	cmp	r3, #128	@ 0x80
 8006842:	d034      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b40      	cmp	r3, #64	@ 0x40
 8006848:	d031      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b08      	cmp	r3, #8
 8006856:	d110      	bne.n	800687a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f839 	bl	80068d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2208      	movs	r2, #8
 800686a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e029      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006888:	d111      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f81f 	bl	80068d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e00f      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d0a0      	beq.n	800680e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b095      	sub	sp, #84	@ 0x54
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006900:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e6      	bne.n	80068e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	61fb      	str	r3, [r7, #28]
   return(result);
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	4b1e      	ldr	r3, [pc, #120]	@ (80069a0 <UART_EndRxTransfer+0xc8>)
 8006926:	4013      	ands	r3, r2
 8006928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800694a:	2b01      	cmp	r3, #1
 800694c:	d118      	bne.n	8006980 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	60bb      	str	r3, [r7, #8]
   return(result);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f023 0310 	bic.w	r3, r3, #16
 8006962:	647b      	str	r3, [r7, #68]	@ 0x44
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6979      	ldr	r1, [r7, #20]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	613b      	str	r3, [r7, #16]
   return(result);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006994:	bf00      	nop
 8006996:	3754      	adds	r7, #84	@ 0x54
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	effffffe 	.word	0xeffffffe

080069a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_UARTEx_DisableFifoMode+0x16>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e027      	b.n	8006a0a <HAL_UARTEx_DisableFifoMode+0x66>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2224      	movs	r2, #36	@ 0x24
 80069c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0201 	bic.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80069e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e02d      	b.n	8006a8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2224      	movs	r2, #36	@ 0x24
 8006a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f850 	bl	8006b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e02d      	b.n	8006b06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2224      	movs	r2, #36	@ 0x24
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f812 	bl	8006b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d108      	bne.n	8006b32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b30:	e031      	b.n	8006b96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b32:	2310      	movs	r3, #16
 8006b34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b36:	2310      	movs	r3, #16
 8006b38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	0e5b      	lsrs	r3, r3, #25
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	0f5b      	lsrs	r3, r3, #29
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	7b3a      	ldrb	r2, [r7, #12]
 8006b5e:	4911      	ldr	r1, [pc, #68]	@ (8006ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8006b60:	5c8a      	ldrb	r2, [r1, r2]
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b66:	7b3a      	ldrb	r2, [r7, #12]
 8006b68:	490f      	ldr	r1, [pc, #60]	@ (8006ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8006b6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	7b7a      	ldrb	r2, [r7, #13]
 8006b7c:	4909      	ldr	r1, [pc, #36]	@ (8006ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8006b7e:	5c8a      	ldrb	r2, [r1, r2]
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b84:	7b7a      	ldrb	r2, [r7, #13]
 8006b86:	4908      	ldr	r1, [pc, #32]	@ (8006ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8006b88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	08009638 	.word	0x08009638
 8006ba8:	08009640 	.word	0x08009640

08006bac <__cvt>:
 8006bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bae:	ed2d 8b02 	vpush	{d8}
 8006bb2:	eeb0 8b40 	vmov.f64	d8, d0
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	4617      	mov	r7, r2
 8006bba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006bbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bbe:	ee18 2a90 	vmov	r2, s17
 8006bc2:	f025 0520 	bic.w	r5, r5, #32
 8006bc6:	2a00      	cmp	r2, #0
 8006bc8:	bfb6      	itet	lt
 8006bca:	222d      	movlt	r2, #45	@ 0x2d
 8006bcc:	2200      	movge	r2, #0
 8006bce:	eeb1 8b40 	vneglt.f64	d8, d0
 8006bd2:	2d46      	cmp	r5, #70	@ 0x46
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	d004      	beq.n	8006be4 <__cvt+0x38>
 8006bda:	2d45      	cmp	r5, #69	@ 0x45
 8006bdc:	d100      	bne.n	8006be0 <__cvt+0x34>
 8006bde:	3401      	adds	r4, #1
 8006be0:	2102      	movs	r1, #2
 8006be2:	e000      	b.n	8006be6 <__cvt+0x3a>
 8006be4:	2103      	movs	r1, #3
 8006be6:	ab03      	add	r3, sp, #12
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	ab02      	add	r3, sp, #8
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4622      	mov	r2, r4
 8006bf0:	4633      	mov	r3, r6
 8006bf2:	eeb0 0b48 	vmov.f64	d0, d8
 8006bf6:	f000 ff23 	bl	8007a40 <_dtoa_r>
 8006bfa:	2d47      	cmp	r5, #71	@ 0x47
 8006bfc:	d114      	bne.n	8006c28 <__cvt+0x7c>
 8006bfe:	07fb      	lsls	r3, r7, #31
 8006c00:	d50a      	bpl.n	8006c18 <__cvt+0x6c>
 8006c02:	1902      	adds	r2, r0, r4
 8006c04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0c:	bf08      	it	eq
 8006c0e:	9203      	streq	r2, [sp, #12]
 8006c10:	2130      	movs	r1, #48	@ 0x30
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d319      	bcc.n	8006c4c <__cvt+0xa0>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c1c:	1a1b      	subs	r3, r3, r0
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	b005      	add	sp, #20
 8006c22:	ecbd 8b02 	vpop	{d8}
 8006c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c28:	2d46      	cmp	r5, #70	@ 0x46
 8006c2a:	eb00 0204 	add.w	r2, r0, r4
 8006c2e:	d1e9      	bne.n	8006c04 <__cvt+0x58>
 8006c30:	7803      	ldrb	r3, [r0, #0]
 8006c32:	2b30      	cmp	r3, #48	@ 0x30
 8006c34:	d107      	bne.n	8006c46 <__cvt+0x9a>
 8006c36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c3e:	bf1c      	itt	ne
 8006c40:	f1c4 0401 	rsbne	r4, r4, #1
 8006c44:	6034      	strne	r4, [r6, #0]
 8006c46:	6833      	ldr	r3, [r6, #0]
 8006c48:	441a      	add	r2, r3
 8006c4a:	e7db      	b.n	8006c04 <__cvt+0x58>
 8006c4c:	1c5c      	adds	r4, r3, #1
 8006c4e:	9403      	str	r4, [sp, #12]
 8006c50:	7019      	strb	r1, [r3, #0]
 8006c52:	e7de      	b.n	8006c12 <__cvt+0x66>

08006c54 <__exponent>:
 8006c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c56:	2900      	cmp	r1, #0
 8006c58:	bfba      	itte	lt
 8006c5a:	4249      	neglt	r1, r1
 8006c5c:	232d      	movlt	r3, #45	@ 0x2d
 8006c5e:	232b      	movge	r3, #43	@ 0x2b
 8006c60:	2909      	cmp	r1, #9
 8006c62:	7002      	strb	r2, [r0, #0]
 8006c64:	7043      	strb	r3, [r0, #1]
 8006c66:	dd29      	ble.n	8006cbc <__exponent+0x68>
 8006c68:	f10d 0307 	add.w	r3, sp, #7
 8006c6c:	461d      	mov	r5, r3
 8006c6e:	270a      	movs	r7, #10
 8006c70:	461a      	mov	r2, r3
 8006c72:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c76:	fb07 1416 	mls	r4, r7, r6, r1
 8006c7a:	3430      	adds	r4, #48	@ 0x30
 8006c7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c80:	460c      	mov	r4, r1
 8006c82:	2c63      	cmp	r4, #99	@ 0x63
 8006c84:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c88:	4631      	mov	r1, r6
 8006c8a:	dcf1      	bgt.n	8006c70 <__exponent+0x1c>
 8006c8c:	3130      	adds	r1, #48	@ 0x30
 8006c8e:	1e94      	subs	r4, r2, #2
 8006c90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c94:	1c41      	adds	r1, r0, #1
 8006c96:	4623      	mov	r3, r4
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	d30a      	bcc.n	8006cb2 <__exponent+0x5e>
 8006c9c:	f10d 0309 	add.w	r3, sp, #9
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	42ac      	cmp	r4, r5
 8006ca4:	bf88      	it	hi
 8006ca6:	2300      	movhi	r3, #0
 8006ca8:	3302      	adds	r3, #2
 8006caa:	4403      	add	r3, r0
 8006cac:	1a18      	subs	r0, r3, r0
 8006cae:	b003      	add	sp, #12
 8006cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006cb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006cba:	e7ed      	b.n	8006c98 <__exponent+0x44>
 8006cbc:	2330      	movs	r3, #48	@ 0x30
 8006cbe:	3130      	adds	r1, #48	@ 0x30
 8006cc0:	7083      	strb	r3, [r0, #2]
 8006cc2:	70c1      	strb	r1, [r0, #3]
 8006cc4:	1d03      	adds	r3, r0, #4
 8006cc6:	e7f1      	b.n	8006cac <__exponent+0x58>

08006cc8 <_printf_float>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	b08d      	sub	sp, #52	@ 0x34
 8006cce:	460c      	mov	r4, r1
 8006cd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	4605      	mov	r5, r0
 8006cda:	f000 fdaf 	bl	800783c <_localeconv_r>
 8006cde:	f8d0 b000 	ldr.w	fp, [r0]
 8006ce2:	4658      	mov	r0, fp
 8006ce4:	f7f9 fb64 	bl	80003b0 <strlen>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cec:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	9005      	str	r0, [sp, #20]
 8006cf8:	3307      	adds	r3, #7
 8006cfa:	f023 0307 	bic.w	r3, r3, #7
 8006cfe:	f103 0108 	add.w	r1, r3, #8
 8006d02:	f8c8 1000 	str.w	r1, [r8]
 8006d06:	ed93 0b00 	vldr	d0, [r3]
 8006d0a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006f68 <_printf_float+0x2a0>
 8006d0e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006d12:	eeb4 7b46 	vcmp.f64	d7, d6
 8006d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006d1e:	dd24      	ble.n	8006d6a <_printf_float+0xa2>
 8006d20:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d28:	d502      	bpl.n	8006d30 <_printf_float+0x68>
 8006d2a:	232d      	movs	r3, #45	@ 0x2d
 8006d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d30:	498f      	ldr	r1, [pc, #572]	@ (8006f70 <_printf_float+0x2a8>)
 8006d32:	4b90      	ldr	r3, [pc, #576]	@ (8006f74 <_printf_float+0x2ac>)
 8006d34:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006d38:	bf94      	ite	ls
 8006d3a:	4688      	movls	r8, r1
 8006d3c:	4698      	movhi	r8, r3
 8006d3e:	f022 0204 	bic.w	r2, r2, #4
 8006d42:	2303      	movs	r3, #3
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	6022      	str	r2, [r4, #0]
 8006d48:	f04f 0a00 	mov.w	sl, #0
 8006d4c:	9700      	str	r7, [sp, #0]
 8006d4e:	4633      	mov	r3, r6
 8006d50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 f9d1 	bl	80070fc <_printf_common>
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f040 8089 	bne.w	8006e72 <_printf_float+0x1aa>
 8006d60:	f04f 30ff 	mov.w	r0, #4294967295
 8006d64:	b00d      	add	sp, #52	@ 0x34
 8006d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d72:	d709      	bvc.n	8006d88 <_printf_float+0xc0>
 8006d74:	ee10 3a90 	vmov	r3, s1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	bfbc      	itt	lt
 8006d7c:	232d      	movlt	r3, #45	@ 0x2d
 8006d7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d82:	497d      	ldr	r1, [pc, #500]	@ (8006f78 <_printf_float+0x2b0>)
 8006d84:	4b7d      	ldr	r3, [pc, #500]	@ (8006f7c <_printf_float+0x2b4>)
 8006d86:	e7d5      	b.n	8006d34 <_printf_float+0x6c>
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	1c59      	adds	r1, r3, #1
 8006d8c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006d90:	d139      	bne.n	8006e06 <_printf_float+0x13e>
 8006d92:	2306      	movs	r3, #6
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6022      	str	r2, [r4, #0]
 8006d9e:	9303      	str	r3, [sp, #12]
 8006da0:	ab0a      	add	r3, sp, #40	@ 0x28
 8006da2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006da6:	ab09      	add	r3, sp, #36	@ 0x24
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	6861      	ldr	r1, [r4, #4]
 8006dac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006db0:	4628      	mov	r0, r5
 8006db2:	f7ff fefb 	bl	8006bac <__cvt>
 8006db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006dba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	d129      	bne.n	8006e14 <_printf_float+0x14c>
 8006dc0:	1cc8      	adds	r0, r1, #3
 8006dc2:	db02      	blt.n	8006dca <_printf_float+0x102>
 8006dc4:	6863      	ldr	r3, [r4, #4]
 8006dc6:	4299      	cmp	r1, r3
 8006dc8:	dd41      	ble.n	8006e4e <_printf_float+0x186>
 8006dca:	f1a9 0902 	sub.w	r9, r9, #2
 8006dce:	fa5f f989 	uxtb.w	r9, r9
 8006dd2:	3901      	subs	r1, #1
 8006dd4:	464a      	mov	r2, r9
 8006dd6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006dda:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ddc:	f7ff ff3a 	bl	8006c54 <__exponent>
 8006de0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006de2:	1813      	adds	r3, r2, r0
 8006de4:	2a01      	cmp	r2, #1
 8006de6:	4682      	mov	sl, r0
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	dc02      	bgt.n	8006df2 <_printf_float+0x12a>
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	07d2      	lsls	r2, r2, #31
 8006df0:	d501      	bpl.n	8006df6 <_printf_float+0x12e>
 8006df2:	3301      	adds	r3, #1
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0a6      	beq.n	8006d4c <_printf_float+0x84>
 8006dfe:	232d      	movs	r3, #45	@ 0x2d
 8006e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e04:	e7a2      	b.n	8006d4c <_printf_float+0x84>
 8006e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e0a:	d1c4      	bne.n	8006d96 <_printf_float+0xce>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1c2      	bne.n	8006d96 <_printf_float+0xce>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e7bf      	b.n	8006d94 <_printf_float+0xcc>
 8006e14:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006e18:	d9db      	bls.n	8006dd2 <_printf_float+0x10a>
 8006e1a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006e1e:	d118      	bne.n	8006e52 <_printf_float+0x18a>
 8006e20:	2900      	cmp	r1, #0
 8006e22:	6863      	ldr	r3, [r4, #4]
 8006e24:	dd0b      	ble.n	8006e3e <_printf_float+0x176>
 8006e26:	6121      	str	r1, [r4, #16]
 8006e28:	b913      	cbnz	r3, 8006e30 <_printf_float+0x168>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	07d0      	lsls	r0, r2, #31
 8006e2e:	d502      	bpl.n	8006e36 <_printf_float+0x16e>
 8006e30:	3301      	adds	r3, #1
 8006e32:	440b      	add	r3, r1
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e38:	f04f 0a00 	mov.w	sl, #0
 8006e3c:	e7db      	b.n	8006df6 <_printf_float+0x12e>
 8006e3e:	b913      	cbnz	r3, 8006e46 <_printf_float+0x17e>
 8006e40:	6822      	ldr	r2, [r4, #0]
 8006e42:	07d2      	lsls	r2, r2, #31
 8006e44:	d501      	bpl.n	8006e4a <_printf_float+0x182>
 8006e46:	3302      	adds	r3, #2
 8006e48:	e7f4      	b.n	8006e34 <_printf_float+0x16c>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e7f2      	b.n	8006e34 <_printf_float+0x16c>
 8006e4e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006e52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e54:	4299      	cmp	r1, r3
 8006e56:	db05      	blt.n	8006e64 <_printf_float+0x19c>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	6121      	str	r1, [r4, #16]
 8006e5c:	07d8      	lsls	r0, r3, #31
 8006e5e:	d5ea      	bpl.n	8006e36 <_printf_float+0x16e>
 8006e60:	1c4b      	adds	r3, r1, #1
 8006e62:	e7e7      	b.n	8006e34 <_printf_float+0x16c>
 8006e64:	2900      	cmp	r1, #0
 8006e66:	bfd4      	ite	le
 8006e68:	f1c1 0202 	rsble	r2, r1, #2
 8006e6c:	2201      	movgt	r2, #1
 8006e6e:	4413      	add	r3, r2
 8006e70:	e7e0      	b.n	8006e34 <_printf_float+0x16c>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	055a      	lsls	r2, r3, #21
 8006e76:	d407      	bmi.n	8006e88 <_printf_float+0x1c0>
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	d12a      	bne.n	8006edc <_printf_float+0x214>
 8006e86:	e76b      	b.n	8006d60 <_printf_float+0x98>
 8006e88:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006e8c:	f240 80e0 	bls.w	8007050 <_printf_float+0x388>
 8006e90:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006e94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	d133      	bne.n	8006f06 <_printf_float+0x23e>
 8006e9e:	4a38      	ldr	r2, [pc, #224]	@ (8006f80 <_printf_float+0x2b8>)
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f af59 	beq.w	8006d60 <_printf_float+0x98>
 8006eae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006eb2:	4543      	cmp	r3, r8
 8006eb4:	db02      	blt.n	8006ebc <_printf_float+0x1f4>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	07d8      	lsls	r0, r3, #31
 8006eba:	d50f      	bpl.n	8006edc <_printf_float+0x214>
 8006ebc:	9b05      	ldr	r3, [sp, #20]
 8006ebe:	465a      	mov	r2, fp
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f43f af4a 	beq.w	8006d60 <_printf_float+0x98>
 8006ecc:	f04f 0900 	mov.w	r9, #0
 8006ed0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ed4:	f104 0a1a 	add.w	sl, r4, #26
 8006ed8:	45c8      	cmp	r8, r9
 8006eda:	dc09      	bgt.n	8006ef0 <_printf_float+0x228>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	079b      	lsls	r3, r3, #30
 8006ee0:	f100 8107 	bmi.w	80070f2 <_printf_float+0x42a>
 8006ee4:	68e0      	ldr	r0, [r4, #12]
 8006ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ee8:	4298      	cmp	r0, r3
 8006eea:	bfb8      	it	lt
 8006eec:	4618      	movlt	r0, r3
 8006eee:	e739      	b.n	8006d64 <_printf_float+0x9c>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	f43f af30 	beq.w	8006d60 <_printf_float+0x98>
 8006f00:	f109 0901 	add.w	r9, r9, #1
 8006f04:	e7e8      	b.n	8006ed8 <_printf_float+0x210>
 8006f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	dc3b      	bgt.n	8006f84 <_printf_float+0x2bc>
 8006f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006f80 <_printf_float+0x2b8>)
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af22 	beq.w	8006d60 <_printf_float+0x98>
 8006f1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f20:	ea59 0303 	orrs.w	r3, r9, r3
 8006f24:	d102      	bne.n	8006f2c <_printf_float+0x264>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	07d9      	lsls	r1, r3, #31
 8006f2a:	d5d7      	bpl.n	8006edc <_printf_float+0x214>
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	465a      	mov	r2, fp
 8006f30:	4631      	mov	r1, r6
 8006f32:	4628      	mov	r0, r5
 8006f34:	47b8      	blx	r7
 8006f36:	3001      	adds	r0, #1
 8006f38:	f43f af12 	beq.w	8006d60 <_printf_float+0x98>
 8006f3c:	f04f 0a00 	mov.w	sl, #0
 8006f40:	f104 0b1a 	add.w	fp, r4, #26
 8006f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f46:	425b      	negs	r3, r3
 8006f48:	4553      	cmp	r3, sl
 8006f4a:	dc01      	bgt.n	8006f50 <_printf_float+0x288>
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	e794      	b.n	8006e7a <_printf_float+0x1b2>
 8006f50:	2301      	movs	r3, #1
 8006f52:	465a      	mov	r2, fp
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f af00 	beq.w	8006d60 <_printf_float+0x98>
 8006f60:	f10a 0a01 	add.w	sl, sl, #1
 8006f64:	e7ee      	b.n	8006f44 <_printf_float+0x27c>
 8006f66:	bf00      	nop
 8006f68:	ffffffff 	.word	0xffffffff
 8006f6c:	7fefffff 	.word	0x7fefffff
 8006f70:	08009648 	.word	0x08009648
 8006f74:	0800964c 	.word	0x0800964c
 8006f78:	08009650 	.word	0x08009650
 8006f7c:	08009654 	.word	0x08009654
 8006f80:	08009658 	.word	0x08009658
 8006f84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f8a:	4553      	cmp	r3, sl
 8006f8c:	bfa8      	it	ge
 8006f8e:	4653      	movge	r3, sl
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	4699      	mov	r9, r3
 8006f94:	dc37      	bgt.n	8007006 <_printf_float+0x33e>
 8006f96:	2300      	movs	r3, #0
 8006f98:	9307      	str	r3, [sp, #28]
 8006f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f9e:	f104 021a 	add.w	r2, r4, #26
 8006fa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fa4:	9907      	ldr	r1, [sp, #28]
 8006fa6:	9306      	str	r3, [sp, #24]
 8006fa8:	eba3 0309 	sub.w	r3, r3, r9
 8006fac:	428b      	cmp	r3, r1
 8006fae:	dc31      	bgt.n	8007014 <_printf_float+0x34c>
 8006fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb2:	459a      	cmp	sl, r3
 8006fb4:	dc3b      	bgt.n	800702e <_printf_float+0x366>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	07da      	lsls	r2, r3, #31
 8006fba:	d438      	bmi.n	800702e <_printf_float+0x366>
 8006fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbe:	ebaa 0903 	sub.w	r9, sl, r3
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8006fc8:	4599      	cmp	r9, r3
 8006fca:	bfa8      	it	ge
 8006fcc:	4699      	movge	r9, r3
 8006fce:	f1b9 0f00 	cmp.w	r9, #0
 8006fd2:	dc34      	bgt.n	800703e <_printf_float+0x376>
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fdc:	f104 0b1a 	add.w	fp, r4, #26
 8006fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe2:	ebaa 0303 	sub.w	r3, sl, r3
 8006fe6:	eba3 0309 	sub.w	r3, r3, r9
 8006fea:	4543      	cmp	r3, r8
 8006fec:	f77f af76 	ble.w	8006edc <_printf_float+0x214>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	465a      	mov	r2, fp
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	f43f aeb0 	beq.w	8006d60 <_printf_float+0x98>
 8007000:	f108 0801 	add.w	r8, r8, #1
 8007004:	e7ec      	b.n	8006fe0 <_printf_float+0x318>
 8007006:	4642      	mov	r2, r8
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	47b8      	blx	r7
 800700e:	3001      	adds	r0, #1
 8007010:	d1c1      	bne.n	8006f96 <_printf_float+0x2ce>
 8007012:	e6a5      	b.n	8006d60 <_printf_float+0x98>
 8007014:	2301      	movs	r3, #1
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	9206      	str	r2, [sp, #24]
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f ae9e 	beq.w	8006d60 <_printf_float+0x98>
 8007024:	9b07      	ldr	r3, [sp, #28]
 8007026:	9a06      	ldr	r2, [sp, #24]
 8007028:	3301      	adds	r3, #1
 800702a:	9307      	str	r3, [sp, #28]
 800702c:	e7b9      	b.n	8006fa2 <_printf_float+0x2da>
 800702e:	9b05      	ldr	r3, [sp, #20]
 8007030:	465a      	mov	r2, fp
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	47b8      	blx	r7
 8007038:	3001      	adds	r0, #1
 800703a:	d1bf      	bne.n	8006fbc <_printf_float+0x2f4>
 800703c:	e690      	b.n	8006d60 <_printf_float+0x98>
 800703e:	9a06      	ldr	r2, [sp, #24]
 8007040:	464b      	mov	r3, r9
 8007042:	4442      	add	r2, r8
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	d1c2      	bne.n	8006fd4 <_printf_float+0x30c>
 800704e:	e687      	b.n	8006d60 <_printf_float+0x98>
 8007050:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007054:	f1b9 0f01 	cmp.w	r9, #1
 8007058:	dc01      	bgt.n	800705e <_printf_float+0x396>
 800705a:	07db      	lsls	r3, r3, #31
 800705c:	d536      	bpl.n	80070cc <_printf_float+0x404>
 800705e:	2301      	movs	r3, #1
 8007060:	4642      	mov	r2, r8
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	47b8      	blx	r7
 8007068:	3001      	adds	r0, #1
 800706a:	f43f ae79 	beq.w	8006d60 <_printf_float+0x98>
 800706e:	9b05      	ldr	r3, [sp, #20]
 8007070:	465a      	mov	r2, fp
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	f43f ae71 	beq.w	8006d60 <_printf_float+0x98>
 800707e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007082:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708a:	f109 39ff 	add.w	r9, r9, #4294967295
 800708e:	d018      	beq.n	80070c2 <_printf_float+0x3fa>
 8007090:	464b      	mov	r3, r9
 8007092:	f108 0201 	add.w	r2, r8, #1
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	d10c      	bne.n	80070ba <_printf_float+0x3f2>
 80070a0:	e65e      	b.n	8006d60 <_printf_float+0x98>
 80070a2:	2301      	movs	r3, #1
 80070a4:	465a      	mov	r2, fp
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	f43f ae57 	beq.w	8006d60 <_printf_float+0x98>
 80070b2:	f108 0801 	add.w	r8, r8, #1
 80070b6:	45c8      	cmp	r8, r9
 80070b8:	dbf3      	blt.n	80070a2 <_printf_float+0x3da>
 80070ba:	4653      	mov	r3, sl
 80070bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070c0:	e6dc      	b.n	8006e7c <_printf_float+0x1b4>
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	f104 0b1a 	add.w	fp, r4, #26
 80070ca:	e7f4      	b.n	80070b6 <_printf_float+0x3ee>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4642      	mov	r2, r8
 80070d0:	e7e1      	b.n	8007096 <_printf_float+0x3ce>
 80070d2:	2301      	movs	r3, #1
 80070d4:	464a      	mov	r2, r9
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f ae3f 	beq.w	8006d60 <_printf_float+0x98>
 80070e2:	f108 0801 	add.w	r8, r8, #1
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070ea:	1a5b      	subs	r3, r3, r1
 80070ec:	4543      	cmp	r3, r8
 80070ee:	dcf0      	bgt.n	80070d2 <_printf_float+0x40a>
 80070f0:	e6f8      	b.n	8006ee4 <_printf_float+0x21c>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	f104 0919 	add.w	r9, r4, #25
 80070fa:	e7f4      	b.n	80070e6 <_printf_float+0x41e>

080070fc <_printf_common>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	4616      	mov	r6, r2
 8007102:	4698      	mov	r8, r3
 8007104:	688a      	ldr	r2, [r1, #8]
 8007106:	690b      	ldr	r3, [r1, #16]
 8007108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800710c:	4293      	cmp	r3, r2
 800710e:	bfb8      	it	lt
 8007110:	4613      	movlt	r3, r2
 8007112:	6033      	str	r3, [r6, #0]
 8007114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007118:	4607      	mov	r7, r0
 800711a:	460c      	mov	r4, r1
 800711c:	b10a      	cbz	r2, 8007122 <_printf_common+0x26>
 800711e:	3301      	adds	r3, #1
 8007120:	6033      	str	r3, [r6, #0]
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	0699      	lsls	r1, r3, #26
 8007126:	bf42      	ittt	mi
 8007128:	6833      	ldrmi	r3, [r6, #0]
 800712a:	3302      	addmi	r3, #2
 800712c:	6033      	strmi	r3, [r6, #0]
 800712e:	6825      	ldr	r5, [r4, #0]
 8007130:	f015 0506 	ands.w	r5, r5, #6
 8007134:	d106      	bne.n	8007144 <_printf_common+0x48>
 8007136:	f104 0a19 	add.w	sl, r4, #25
 800713a:	68e3      	ldr	r3, [r4, #12]
 800713c:	6832      	ldr	r2, [r6, #0]
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	42ab      	cmp	r3, r5
 8007142:	dc26      	bgt.n	8007192 <_printf_common+0x96>
 8007144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	3b00      	subs	r3, #0
 800714c:	bf18      	it	ne
 800714e:	2301      	movne	r3, #1
 8007150:	0692      	lsls	r2, r2, #26
 8007152:	d42b      	bmi.n	80071ac <_printf_common+0xb0>
 8007154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007158:	4641      	mov	r1, r8
 800715a:	4638      	mov	r0, r7
 800715c:	47c8      	blx	r9
 800715e:	3001      	adds	r0, #1
 8007160:	d01e      	beq.n	80071a0 <_printf_common+0xa4>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	6922      	ldr	r2, [r4, #16]
 8007166:	f003 0306 	and.w	r3, r3, #6
 800716a:	2b04      	cmp	r3, #4
 800716c:	bf02      	ittt	eq
 800716e:	68e5      	ldreq	r5, [r4, #12]
 8007170:	6833      	ldreq	r3, [r6, #0]
 8007172:	1aed      	subeq	r5, r5, r3
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	bf0c      	ite	eq
 8007178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800717c:	2500      	movne	r5, #0
 800717e:	4293      	cmp	r3, r2
 8007180:	bfc4      	itt	gt
 8007182:	1a9b      	subgt	r3, r3, r2
 8007184:	18ed      	addgt	r5, r5, r3
 8007186:	2600      	movs	r6, #0
 8007188:	341a      	adds	r4, #26
 800718a:	42b5      	cmp	r5, r6
 800718c:	d11a      	bne.n	80071c4 <_printf_common+0xc8>
 800718e:	2000      	movs	r0, #0
 8007190:	e008      	b.n	80071a4 <_printf_common+0xa8>
 8007192:	2301      	movs	r3, #1
 8007194:	4652      	mov	r2, sl
 8007196:	4641      	mov	r1, r8
 8007198:	4638      	mov	r0, r7
 800719a:	47c8      	blx	r9
 800719c:	3001      	adds	r0, #1
 800719e:	d103      	bne.n	80071a8 <_printf_common+0xac>
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a8:	3501      	adds	r5, #1
 80071aa:	e7c6      	b.n	800713a <_printf_common+0x3e>
 80071ac:	18e1      	adds	r1, r4, r3
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	2030      	movs	r0, #48	@ 0x30
 80071b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071b6:	4422      	add	r2, r4
 80071b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071c0:	3302      	adds	r3, #2
 80071c2:	e7c7      	b.n	8007154 <_printf_common+0x58>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4622      	mov	r2, r4
 80071c8:	4641      	mov	r1, r8
 80071ca:	4638      	mov	r0, r7
 80071cc:	47c8      	blx	r9
 80071ce:	3001      	adds	r0, #1
 80071d0:	d0e6      	beq.n	80071a0 <_printf_common+0xa4>
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7d9      	b.n	800718a <_printf_common+0x8e>
	...

080071d8 <_printf_i>:
 80071d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	7e0f      	ldrb	r7, [r1, #24]
 80071de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071e0:	2f78      	cmp	r7, #120	@ 0x78
 80071e2:	4691      	mov	r9, r2
 80071e4:	4680      	mov	r8, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	469a      	mov	sl, r3
 80071ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071ee:	d807      	bhi.n	8007200 <_printf_i+0x28>
 80071f0:	2f62      	cmp	r7, #98	@ 0x62
 80071f2:	d80a      	bhi.n	800720a <_printf_i+0x32>
 80071f4:	2f00      	cmp	r7, #0
 80071f6:	f000 80d2 	beq.w	800739e <_printf_i+0x1c6>
 80071fa:	2f58      	cmp	r7, #88	@ 0x58
 80071fc:	f000 80b9 	beq.w	8007372 <_printf_i+0x19a>
 8007200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007208:	e03a      	b.n	8007280 <_printf_i+0xa8>
 800720a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800720e:	2b15      	cmp	r3, #21
 8007210:	d8f6      	bhi.n	8007200 <_printf_i+0x28>
 8007212:	a101      	add	r1, pc, #4	@ (adr r1, 8007218 <_printf_i+0x40>)
 8007214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007218:	08007271 	.word	0x08007271
 800721c:	08007285 	.word	0x08007285
 8007220:	08007201 	.word	0x08007201
 8007224:	08007201 	.word	0x08007201
 8007228:	08007201 	.word	0x08007201
 800722c:	08007201 	.word	0x08007201
 8007230:	08007285 	.word	0x08007285
 8007234:	08007201 	.word	0x08007201
 8007238:	08007201 	.word	0x08007201
 800723c:	08007201 	.word	0x08007201
 8007240:	08007201 	.word	0x08007201
 8007244:	08007385 	.word	0x08007385
 8007248:	080072af 	.word	0x080072af
 800724c:	0800733f 	.word	0x0800733f
 8007250:	08007201 	.word	0x08007201
 8007254:	08007201 	.word	0x08007201
 8007258:	080073a7 	.word	0x080073a7
 800725c:	08007201 	.word	0x08007201
 8007260:	080072af 	.word	0x080072af
 8007264:	08007201 	.word	0x08007201
 8007268:	08007201 	.word	0x08007201
 800726c:	08007347 	.word	0x08007347
 8007270:	6833      	ldr	r3, [r6, #0]
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6032      	str	r2, [r6, #0]
 8007278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800727c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007280:	2301      	movs	r3, #1
 8007282:	e09d      	b.n	80073c0 <_printf_i+0x1e8>
 8007284:	6833      	ldr	r3, [r6, #0]
 8007286:	6820      	ldr	r0, [r4, #0]
 8007288:	1d19      	adds	r1, r3, #4
 800728a:	6031      	str	r1, [r6, #0]
 800728c:	0606      	lsls	r6, r0, #24
 800728e:	d501      	bpl.n	8007294 <_printf_i+0xbc>
 8007290:	681d      	ldr	r5, [r3, #0]
 8007292:	e003      	b.n	800729c <_printf_i+0xc4>
 8007294:	0645      	lsls	r5, r0, #25
 8007296:	d5fb      	bpl.n	8007290 <_printf_i+0xb8>
 8007298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800729c:	2d00      	cmp	r5, #0
 800729e:	da03      	bge.n	80072a8 <_printf_i+0xd0>
 80072a0:	232d      	movs	r3, #45	@ 0x2d
 80072a2:	426d      	negs	r5, r5
 80072a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072a8:	4859      	ldr	r0, [pc, #356]	@ (8007410 <_printf_i+0x238>)
 80072aa:	230a      	movs	r3, #10
 80072ac:	e011      	b.n	80072d2 <_printf_i+0xfa>
 80072ae:	6821      	ldr	r1, [r4, #0]
 80072b0:	6833      	ldr	r3, [r6, #0]
 80072b2:	0608      	lsls	r0, r1, #24
 80072b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80072b8:	d402      	bmi.n	80072c0 <_printf_i+0xe8>
 80072ba:	0649      	lsls	r1, r1, #25
 80072bc:	bf48      	it	mi
 80072be:	b2ad      	uxthmi	r5, r5
 80072c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80072c2:	4853      	ldr	r0, [pc, #332]	@ (8007410 <_printf_i+0x238>)
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	bf14      	ite	ne
 80072c8:	230a      	movne	r3, #10
 80072ca:	2308      	moveq	r3, #8
 80072cc:	2100      	movs	r1, #0
 80072ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072d2:	6866      	ldr	r6, [r4, #4]
 80072d4:	60a6      	str	r6, [r4, #8]
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	bfa2      	ittt	ge
 80072da:	6821      	ldrge	r1, [r4, #0]
 80072dc:	f021 0104 	bicge.w	r1, r1, #4
 80072e0:	6021      	strge	r1, [r4, #0]
 80072e2:	b90d      	cbnz	r5, 80072e8 <_printf_i+0x110>
 80072e4:	2e00      	cmp	r6, #0
 80072e6:	d04b      	beq.n	8007380 <_printf_i+0x1a8>
 80072e8:	4616      	mov	r6, r2
 80072ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80072ee:	fb03 5711 	mls	r7, r3, r1, r5
 80072f2:	5dc7      	ldrb	r7, [r0, r7]
 80072f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072f8:	462f      	mov	r7, r5
 80072fa:	42bb      	cmp	r3, r7
 80072fc:	460d      	mov	r5, r1
 80072fe:	d9f4      	bls.n	80072ea <_printf_i+0x112>
 8007300:	2b08      	cmp	r3, #8
 8007302:	d10b      	bne.n	800731c <_printf_i+0x144>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	07df      	lsls	r7, r3, #31
 8007308:	d508      	bpl.n	800731c <_printf_i+0x144>
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	6861      	ldr	r1, [r4, #4]
 800730e:	4299      	cmp	r1, r3
 8007310:	bfde      	ittt	le
 8007312:	2330      	movle	r3, #48	@ 0x30
 8007314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800731c:	1b92      	subs	r2, r2, r6
 800731e:	6122      	str	r2, [r4, #16]
 8007320:	f8cd a000 	str.w	sl, [sp]
 8007324:	464b      	mov	r3, r9
 8007326:	aa03      	add	r2, sp, #12
 8007328:	4621      	mov	r1, r4
 800732a:	4640      	mov	r0, r8
 800732c:	f7ff fee6 	bl	80070fc <_printf_common>
 8007330:	3001      	adds	r0, #1
 8007332:	d14a      	bne.n	80073ca <_printf_i+0x1f2>
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	b004      	add	sp, #16
 800733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f043 0320 	orr.w	r3, r3, #32
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	4833      	ldr	r0, [pc, #204]	@ (8007414 <_printf_i+0x23c>)
 8007348:	2778      	movs	r7, #120	@ 0x78
 800734a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	6831      	ldr	r1, [r6, #0]
 8007352:	061f      	lsls	r7, r3, #24
 8007354:	f851 5b04 	ldr.w	r5, [r1], #4
 8007358:	d402      	bmi.n	8007360 <_printf_i+0x188>
 800735a:	065f      	lsls	r7, r3, #25
 800735c:	bf48      	it	mi
 800735e:	b2ad      	uxthmi	r5, r5
 8007360:	6031      	str	r1, [r6, #0]
 8007362:	07d9      	lsls	r1, r3, #31
 8007364:	bf44      	itt	mi
 8007366:	f043 0320 	orrmi.w	r3, r3, #32
 800736a:	6023      	strmi	r3, [r4, #0]
 800736c:	b11d      	cbz	r5, 8007376 <_printf_i+0x19e>
 800736e:	2310      	movs	r3, #16
 8007370:	e7ac      	b.n	80072cc <_printf_i+0xf4>
 8007372:	4827      	ldr	r0, [pc, #156]	@ (8007410 <_printf_i+0x238>)
 8007374:	e7e9      	b.n	800734a <_printf_i+0x172>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f023 0320 	bic.w	r3, r3, #32
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	e7f6      	b.n	800736e <_printf_i+0x196>
 8007380:	4616      	mov	r6, r2
 8007382:	e7bd      	b.n	8007300 <_printf_i+0x128>
 8007384:	6833      	ldr	r3, [r6, #0]
 8007386:	6825      	ldr	r5, [r4, #0]
 8007388:	6961      	ldr	r1, [r4, #20]
 800738a:	1d18      	adds	r0, r3, #4
 800738c:	6030      	str	r0, [r6, #0]
 800738e:	062e      	lsls	r6, r5, #24
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	d501      	bpl.n	8007398 <_printf_i+0x1c0>
 8007394:	6019      	str	r1, [r3, #0]
 8007396:	e002      	b.n	800739e <_printf_i+0x1c6>
 8007398:	0668      	lsls	r0, r5, #25
 800739a:	d5fb      	bpl.n	8007394 <_printf_i+0x1bc>
 800739c:	8019      	strh	r1, [r3, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	4616      	mov	r6, r2
 80073a4:	e7bc      	b.n	8007320 <_printf_i+0x148>
 80073a6:	6833      	ldr	r3, [r6, #0]
 80073a8:	1d1a      	adds	r2, r3, #4
 80073aa:	6032      	str	r2, [r6, #0]
 80073ac:	681e      	ldr	r6, [r3, #0]
 80073ae:	6862      	ldr	r2, [r4, #4]
 80073b0:	2100      	movs	r1, #0
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7f8 ffac 	bl	8000310 <memchr>
 80073b8:	b108      	cbz	r0, 80073be <_printf_i+0x1e6>
 80073ba:	1b80      	subs	r0, r0, r6
 80073bc:	6060      	str	r0, [r4, #4]
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	6123      	str	r3, [r4, #16]
 80073c2:	2300      	movs	r3, #0
 80073c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073c8:	e7aa      	b.n	8007320 <_printf_i+0x148>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	4632      	mov	r2, r6
 80073ce:	4649      	mov	r1, r9
 80073d0:	4640      	mov	r0, r8
 80073d2:	47d0      	blx	sl
 80073d4:	3001      	adds	r0, #1
 80073d6:	d0ad      	beq.n	8007334 <_printf_i+0x15c>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	079b      	lsls	r3, r3, #30
 80073dc:	d413      	bmi.n	8007406 <_printf_i+0x22e>
 80073de:	68e0      	ldr	r0, [r4, #12]
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	4298      	cmp	r0, r3
 80073e4:	bfb8      	it	lt
 80073e6:	4618      	movlt	r0, r3
 80073e8:	e7a6      	b.n	8007338 <_printf_i+0x160>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4632      	mov	r2, r6
 80073ee:	4649      	mov	r1, r9
 80073f0:	4640      	mov	r0, r8
 80073f2:	47d0      	blx	sl
 80073f4:	3001      	adds	r0, #1
 80073f6:	d09d      	beq.n	8007334 <_printf_i+0x15c>
 80073f8:	3501      	adds	r5, #1
 80073fa:	68e3      	ldr	r3, [r4, #12]
 80073fc:	9903      	ldr	r1, [sp, #12]
 80073fe:	1a5b      	subs	r3, r3, r1
 8007400:	42ab      	cmp	r3, r5
 8007402:	dcf2      	bgt.n	80073ea <_printf_i+0x212>
 8007404:	e7eb      	b.n	80073de <_printf_i+0x206>
 8007406:	2500      	movs	r5, #0
 8007408:	f104 0619 	add.w	r6, r4, #25
 800740c:	e7f5      	b.n	80073fa <_printf_i+0x222>
 800740e:	bf00      	nop
 8007410:	0800965a 	.word	0x0800965a
 8007414:	0800966b 	.word	0x0800966b

08007418 <std>:
 8007418:	2300      	movs	r3, #0
 800741a:	b510      	push	{r4, lr}
 800741c:	4604      	mov	r4, r0
 800741e:	e9c0 3300 	strd	r3, r3, [r0]
 8007422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007426:	6083      	str	r3, [r0, #8]
 8007428:	8181      	strh	r1, [r0, #12]
 800742a:	6643      	str	r3, [r0, #100]	@ 0x64
 800742c:	81c2      	strh	r2, [r0, #14]
 800742e:	6183      	str	r3, [r0, #24]
 8007430:	4619      	mov	r1, r3
 8007432:	2208      	movs	r2, #8
 8007434:	305c      	adds	r0, #92	@ 0x5c
 8007436:	f000 f9f9 	bl	800782c <memset>
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <std+0x58>)
 800743c:	6263      	str	r3, [r4, #36]	@ 0x24
 800743e:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <std+0x5c>)
 8007440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007442:	4b0d      	ldr	r3, [pc, #52]	@ (8007478 <std+0x60>)
 8007444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007446:	4b0d      	ldr	r3, [pc, #52]	@ (800747c <std+0x64>)
 8007448:	6323      	str	r3, [r4, #48]	@ 0x30
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <std+0x68>)
 800744c:	6224      	str	r4, [r4, #32]
 800744e:	429c      	cmp	r4, r3
 8007450:	d006      	beq.n	8007460 <std+0x48>
 8007452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007456:	4294      	cmp	r4, r2
 8007458:	d002      	beq.n	8007460 <std+0x48>
 800745a:	33d0      	adds	r3, #208	@ 0xd0
 800745c:	429c      	cmp	r4, r3
 800745e:	d105      	bne.n	800746c <std+0x54>
 8007460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007468:	f000 ba5c 	b.w	8007924 <__retarget_lock_init_recursive>
 800746c:	bd10      	pop	{r4, pc}
 800746e:	bf00      	nop
 8007470:	0800767d 	.word	0x0800767d
 8007474:	0800769f 	.word	0x0800769f
 8007478:	080076d7 	.word	0x080076d7
 800747c:	080076fb 	.word	0x080076fb
 8007480:	240002e4 	.word	0x240002e4

08007484 <stdio_exit_handler>:
 8007484:	4a02      	ldr	r2, [pc, #8]	@ (8007490 <stdio_exit_handler+0xc>)
 8007486:	4903      	ldr	r1, [pc, #12]	@ (8007494 <stdio_exit_handler+0x10>)
 8007488:	4803      	ldr	r0, [pc, #12]	@ (8007498 <stdio_exit_handler+0x14>)
 800748a:	f000 b869 	b.w	8007560 <_fwalk_sglue>
 800748e:	bf00      	nop
 8007490:	24000010 	.word	0x24000010
 8007494:	0800917d 	.word	0x0800917d
 8007498:	24000020 	.word	0x24000020

0800749c <cleanup_stdio>:
 800749c:	6841      	ldr	r1, [r0, #4]
 800749e:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <cleanup_stdio+0x34>)
 80074a0:	4299      	cmp	r1, r3
 80074a2:	b510      	push	{r4, lr}
 80074a4:	4604      	mov	r4, r0
 80074a6:	d001      	beq.n	80074ac <cleanup_stdio+0x10>
 80074a8:	f001 fe68 	bl	800917c <_fflush_r>
 80074ac:	68a1      	ldr	r1, [r4, #8]
 80074ae:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <cleanup_stdio+0x38>)
 80074b0:	4299      	cmp	r1, r3
 80074b2:	d002      	beq.n	80074ba <cleanup_stdio+0x1e>
 80074b4:	4620      	mov	r0, r4
 80074b6:	f001 fe61 	bl	800917c <_fflush_r>
 80074ba:	68e1      	ldr	r1, [r4, #12]
 80074bc:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <cleanup_stdio+0x3c>)
 80074be:	4299      	cmp	r1, r3
 80074c0:	d004      	beq.n	80074cc <cleanup_stdio+0x30>
 80074c2:	4620      	mov	r0, r4
 80074c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074c8:	f001 be58 	b.w	800917c <_fflush_r>
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	240002e4 	.word	0x240002e4
 80074d4:	2400034c 	.word	0x2400034c
 80074d8:	240003b4 	.word	0x240003b4

080074dc <global_stdio_init.part.0>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4b0b      	ldr	r3, [pc, #44]	@ (800750c <global_stdio_init.part.0+0x30>)
 80074e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007510 <global_stdio_init.part.0+0x34>)
 80074e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007514 <global_stdio_init.part.0+0x38>)
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	4620      	mov	r0, r4
 80074e8:	2200      	movs	r2, #0
 80074ea:	2104      	movs	r1, #4
 80074ec:	f7ff ff94 	bl	8007418 <std>
 80074f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074f4:	2201      	movs	r2, #1
 80074f6:	2109      	movs	r1, #9
 80074f8:	f7ff ff8e 	bl	8007418 <std>
 80074fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007500:	2202      	movs	r2, #2
 8007502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007506:	2112      	movs	r1, #18
 8007508:	f7ff bf86 	b.w	8007418 <std>
 800750c:	2400041c 	.word	0x2400041c
 8007510:	240002e4 	.word	0x240002e4
 8007514:	08007485 	.word	0x08007485

08007518 <__sfp_lock_acquire>:
 8007518:	4801      	ldr	r0, [pc, #4]	@ (8007520 <__sfp_lock_acquire+0x8>)
 800751a:	f000 ba04 	b.w	8007926 <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	24000425 	.word	0x24000425

08007524 <__sfp_lock_release>:
 8007524:	4801      	ldr	r0, [pc, #4]	@ (800752c <__sfp_lock_release+0x8>)
 8007526:	f000 b9ff 	b.w	8007928 <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	24000425 	.word	0x24000425

08007530 <__sinit>:
 8007530:	b510      	push	{r4, lr}
 8007532:	4604      	mov	r4, r0
 8007534:	f7ff fff0 	bl	8007518 <__sfp_lock_acquire>
 8007538:	6a23      	ldr	r3, [r4, #32]
 800753a:	b11b      	cbz	r3, 8007544 <__sinit+0x14>
 800753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007540:	f7ff bff0 	b.w	8007524 <__sfp_lock_release>
 8007544:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <__sinit+0x28>)
 8007546:	6223      	str	r3, [r4, #32]
 8007548:	4b04      	ldr	r3, [pc, #16]	@ (800755c <__sinit+0x2c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f5      	bne.n	800753c <__sinit+0xc>
 8007550:	f7ff ffc4 	bl	80074dc <global_stdio_init.part.0>
 8007554:	e7f2      	b.n	800753c <__sinit+0xc>
 8007556:	bf00      	nop
 8007558:	0800749d 	.word	0x0800749d
 800755c:	2400041c 	.word	0x2400041c

08007560 <_fwalk_sglue>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	4607      	mov	r7, r0
 8007566:	4688      	mov	r8, r1
 8007568:	4614      	mov	r4, r2
 800756a:	2600      	movs	r6, #0
 800756c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007570:	f1b9 0901 	subs.w	r9, r9, #1
 8007574:	d505      	bpl.n	8007582 <_fwalk_sglue+0x22>
 8007576:	6824      	ldr	r4, [r4, #0]
 8007578:	2c00      	cmp	r4, #0
 800757a:	d1f7      	bne.n	800756c <_fwalk_sglue+0xc>
 800757c:	4630      	mov	r0, r6
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007582:	89ab      	ldrh	r3, [r5, #12]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d907      	bls.n	8007598 <_fwalk_sglue+0x38>
 8007588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800758c:	3301      	adds	r3, #1
 800758e:	d003      	beq.n	8007598 <_fwalk_sglue+0x38>
 8007590:	4629      	mov	r1, r5
 8007592:	4638      	mov	r0, r7
 8007594:	47c0      	blx	r8
 8007596:	4306      	orrs	r6, r0
 8007598:	3568      	adds	r5, #104	@ 0x68
 800759a:	e7e9      	b.n	8007570 <_fwalk_sglue+0x10>

0800759c <iprintf>:
 800759c:	b40f      	push	{r0, r1, r2, r3}
 800759e:	b507      	push	{r0, r1, r2, lr}
 80075a0:	4906      	ldr	r1, [pc, #24]	@ (80075bc <iprintf+0x20>)
 80075a2:	ab04      	add	r3, sp, #16
 80075a4:	6808      	ldr	r0, [r1, #0]
 80075a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075aa:	6881      	ldr	r1, [r0, #8]
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	f001 fc49 	bl	8008e44 <_vfiprintf_r>
 80075b2:	b003      	add	sp, #12
 80075b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075b8:	b004      	add	sp, #16
 80075ba:	4770      	bx	lr
 80075bc:	2400001c 	.word	0x2400001c

080075c0 <_puts_r>:
 80075c0:	6a03      	ldr	r3, [r0, #32]
 80075c2:	b570      	push	{r4, r5, r6, lr}
 80075c4:	6884      	ldr	r4, [r0, #8]
 80075c6:	4605      	mov	r5, r0
 80075c8:	460e      	mov	r6, r1
 80075ca:	b90b      	cbnz	r3, 80075d0 <_puts_r+0x10>
 80075cc:	f7ff ffb0 	bl	8007530 <__sinit>
 80075d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075d2:	07db      	lsls	r3, r3, #31
 80075d4:	d405      	bmi.n	80075e2 <_puts_r+0x22>
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	0598      	lsls	r0, r3, #22
 80075da:	d402      	bmi.n	80075e2 <_puts_r+0x22>
 80075dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075de:	f000 f9a2 	bl	8007926 <__retarget_lock_acquire_recursive>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	0719      	lsls	r1, r3, #28
 80075e6:	d502      	bpl.n	80075ee <_puts_r+0x2e>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d135      	bne.n	800765a <_puts_r+0x9a>
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 f8c5 	bl	8007780 <__swsetup_r>
 80075f6:	b380      	cbz	r0, 800765a <_puts_r+0x9a>
 80075f8:	f04f 35ff 	mov.w	r5, #4294967295
 80075fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075fe:	07da      	lsls	r2, r3, #31
 8007600:	d405      	bmi.n	800760e <_puts_r+0x4e>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	059b      	lsls	r3, r3, #22
 8007606:	d402      	bmi.n	800760e <_puts_r+0x4e>
 8007608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800760a:	f000 f98d 	bl	8007928 <__retarget_lock_release_recursive>
 800760e:	4628      	mov	r0, r5
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	2b00      	cmp	r3, #0
 8007614:	da04      	bge.n	8007620 <_puts_r+0x60>
 8007616:	69a2      	ldr	r2, [r4, #24]
 8007618:	429a      	cmp	r2, r3
 800761a:	dc17      	bgt.n	800764c <_puts_r+0x8c>
 800761c:	290a      	cmp	r1, #10
 800761e:	d015      	beq.n	800764c <_puts_r+0x8c>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	6022      	str	r2, [r4, #0]
 8007626:	7019      	strb	r1, [r3, #0]
 8007628:	68a3      	ldr	r3, [r4, #8]
 800762a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800762e:	3b01      	subs	r3, #1
 8007630:	60a3      	str	r3, [r4, #8]
 8007632:	2900      	cmp	r1, #0
 8007634:	d1ed      	bne.n	8007612 <_puts_r+0x52>
 8007636:	2b00      	cmp	r3, #0
 8007638:	da11      	bge.n	800765e <_puts_r+0x9e>
 800763a:	4622      	mov	r2, r4
 800763c:	210a      	movs	r1, #10
 800763e:	4628      	mov	r0, r5
 8007640:	f000 f85f 	bl	8007702 <__swbuf_r>
 8007644:	3001      	adds	r0, #1
 8007646:	d0d7      	beq.n	80075f8 <_puts_r+0x38>
 8007648:	250a      	movs	r5, #10
 800764a:	e7d7      	b.n	80075fc <_puts_r+0x3c>
 800764c:	4622      	mov	r2, r4
 800764e:	4628      	mov	r0, r5
 8007650:	f000 f857 	bl	8007702 <__swbuf_r>
 8007654:	3001      	adds	r0, #1
 8007656:	d1e7      	bne.n	8007628 <_puts_r+0x68>
 8007658:	e7ce      	b.n	80075f8 <_puts_r+0x38>
 800765a:	3e01      	subs	r6, #1
 800765c:	e7e4      	b.n	8007628 <_puts_r+0x68>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	220a      	movs	r2, #10
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	e7ee      	b.n	8007648 <_puts_r+0x88>
	...

0800766c <puts>:
 800766c:	4b02      	ldr	r3, [pc, #8]	@ (8007678 <puts+0xc>)
 800766e:	4601      	mov	r1, r0
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	f7ff bfa5 	b.w	80075c0 <_puts_r>
 8007676:	bf00      	nop
 8007678:	2400001c 	.word	0x2400001c

0800767c <__sread>:
 800767c:	b510      	push	{r4, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	f000 f900 	bl	8007888 <_read_r>
 8007688:	2800      	cmp	r0, #0
 800768a:	bfab      	itete	ge
 800768c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800768e:	89a3      	ldrhlt	r3, [r4, #12]
 8007690:	181b      	addge	r3, r3, r0
 8007692:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007696:	bfac      	ite	ge
 8007698:	6563      	strge	r3, [r4, #84]	@ 0x54
 800769a:	81a3      	strhlt	r3, [r4, #12]
 800769c:	bd10      	pop	{r4, pc}

0800769e <__swrite>:
 800769e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a2:	461f      	mov	r7, r3
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	05db      	lsls	r3, r3, #23
 80076a8:	4605      	mov	r5, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	4616      	mov	r6, r2
 80076ae:	d505      	bpl.n	80076bc <__swrite+0x1e>
 80076b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b4:	2302      	movs	r3, #2
 80076b6:	2200      	movs	r2, #0
 80076b8:	f000 f8d4 	bl	8007864 <_lseek_r>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	4632      	mov	r2, r6
 80076ca:	463b      	mov	r3, r7
 80076cc:	4628      	mov	r0, r5
 80076ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	f000 b8eb 	b.w	80078ac <_write_r>

080076d6 <__sseek>:
 80076d6:	b510      	push	{r4, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 f8c1 	bl	8007864 <_lseek_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	bf15      	itete	ne
 80076e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076f2:	81a3      	strheq	r3, [r4, #12]
 80076f4:	bf18      	it	ne
 80076f6:	81a3      	strhne	r3, [r4, #12]
 80076f8:	bd10      	pop	{r4, pc}

080076fa <__sclose>:
 80076fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fe:	f000 b8a1 	b.w	8007844 <_close_r>

08007702 <__swbuf_r>:
 8007702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007704:	460e      	mov	r6, r1
 8007706:	4614      	mov	r4, r2
 8007708:	4605      	mov	r5, r0
 800770a:	b118      	cbz	r0, 8007714 <__swbuf_r+0x12>
 800770c:	6a03      	ldr	r3, [r0, #32]
 800770e:	b90b      	cbnz	r3, 8007714 <__swbuf_r+0x12>
 8007710:	f7ff ff0e 	bl	8007530 <__sinit>
 8007714:	69a3      	ldr	r3, [r4, #24]
 8007716:	60a3      	str	r3, [r4, #8]
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	071a      	lsls	r2, r3, #28
 800771c:	d501      	bpl.n	8007722 <__swbuf_r+0x20>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	b943      	cbnz	r3, 8007734 <__swbuf_r+0x32>
 8007722:	4621      	mov	r1, r4
 8007724:	4628      	mov	r0, r5
 8007726:	f000 f82b 	bl	8007780 <__swsetup_r>
 800772a:	b118      	cbz	r0, 8007734 <__swbuf_r+0x32>
 800772c:	f04f 37ff 	mov.w	r7, #4294967295
 8007730:	4638      	mov	r0, r7
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	6922      	ldr	r2, [r4, #16]
 8007738:	1a98      	subs	r0, r3, r2
 800773a:	6963      	ldr	r3, [r4, #20]
 800773c:	b2f6      	uxtb	r6, r6
 800773e:	4283      	cmp	r3, r0
 8007740:	4637      	mov	r7, r6
 8007742:	dc05      	bgt.n	8007750 <__swbuf_r+0x4e>
 8007744:	4621      	mov	r1, r4
 8007746:	4628      	mov	r0, r5
 8007748:	f001 fd18 	bl	800917c <_fflush_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	d1ed      	bne.n	800772c <__swbuf_r+0x2a>
 8007750:	68a3      	ldr	r3, [r4, #8]
 8007752:	3b01      	subs	r3, #1
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	6022      	str	r2, [r4, #0]
 800775c:	701e      	strb	r6, [r3, #0]
 800775e:	6962      	ldr	r2, [r4, #20]
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	429a      	cmp	r2, r3
 8007764:	d004      	beq.n	8007770 <__swbuf_r+0x6e>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	07db      	lsls	r3, r3, #31
 800776a:	d5e1      	bpl.n	8007730 <__swbuf_r+0x2e>
 800776c:	2e0a      	cmp	r6, #10
 800776e:	d1df      	bne.n	8007730 <__swbuf_r+0x2e>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f001 fd02 	bl	800917c <_fflush_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	d0d9      	beq.n	8007730 <__swbuf_r+0x2e>
 800777c:	e7d6      	b.n	800772c <__swbuf_r+0x2a>
	...

08007780 <__swsetup_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4b29      	ldr	r3, [pc, #164]	@ (8007828 <__swsetup_r+0xa8>)
 8007784:	4605      	mov	r5, r0
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	460c      	mov	r4, r1
 800778a:	b118      	cbz	r0, 8007794 <__swsetup_r+0x14>
 800778c:	6a03      	ldr	r3, [r0, #32]
 800778e:	b90b      	cbnz	r3, 8007794 <__swsetup_r+0x14>
 8007790:	f7ff fece 	bl	8007530 <__sinit>
 8007794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007798:	0719      	lsls	r1, r3, #28
 800779a:	d422      	bmi.n	80077e2 <__swsetup_r+0x62>
 800779c:	06da      	lsls	r2, r3, #27
 800779e:	d407      	bmi.n	80077b0 <__swsetup_r+0x30>
 80077a0:	2209      	movs	r2, #9
 80077a2:	602a      	str	r2, [r5, #0]
 80077a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	f04f 30ff 	mov.w	r0, #4294967295
 80077ae:	e033      	b.n	8007818 <__swsetup_r+0x98>
 80077b0:	0758      	lsls	r0, r3, #29
 80077b2:	d512      	bpl.n	80077da <__swsetup_r+0x5a>
 80077b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077b6:	b141      	cbz	r1, 80077ca <__swsetup_r+0x4a>
 80077b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077bc:	4299      	cmp	r1, r3
 80077be:	d002      	beq.n	80077c6 <__swsetup_r+0x46>
 80077c0:	4628      	mov	r0, r5
 80077c2:	f000 fe93 	bl	80084ec <_free_r>
 80077c6:	2300      	movs	r3, #0
 80077c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077d0:	81a3      	strh	r3, [r4, #12]
 80077d2:	2300      	movs	r3, #0
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f043 0308 	orr.w	r3, r3, #8
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	b94b      	cbnz	r3, 80077fa <__swsetup_r+0x7a>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077f0:	d003      	beq.n	80077fa <__swsetup_r+0x7a>
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f001 fd0f 	bl	8009218 <__smakebuf_r>
 80077fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fe:	f013 0201 	ands.w	r2, r3, #1
 8007802:	d00a      	beq.n	800781a <__swsetup_r+0x9a>
 8007804:	2200      	movs	r2, #0
 8007806:	60a2      	str	r2, [r4, #8]
 8007808:	6962      	ldr	r2, [r4, #20]
 800780a:	4252      	negs	r2, r2
 800780c:	61a2      	str	r2, [r4, #24]
 800780e:	6922      	ldr	r2, [r4, #16]
 8007810:	b942      	cbnz	r2, 8007824 <__swsetup_r+0xa4>
 8007812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007816:	d1c5      	bne.n	80077a4 <__swsetup_r+0x24>
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	0799      	lsls	r1, r3, #30
 800781c:	bf58      	it	pl
 800781e:	6962      	ldrpl	r2, [r4, #20]
 8007820:	60a2      	str	r2, [r4, #8]
 8007822:	e7f4      	b.n	800780e <__swsetup_r+0x8e>
 8007824:	2000      	movs	r0, #0
 8007826:	e7f7      	b.n	8007818 <__swsetup_r+0x98>
 8007828:	2400001c 	.word	0x2400001c

0800782c <memset>:
 800782c:	4402      	add	r2, r0
 800782e:	4603      	mov	r3, r0
 8007830:	4293      	cmp	r3, r2
 8007832:	d100      	bne.n	8007836 <memset+0xa>
 8007834:	4770      	bx	lr
 8007836:	f803 1b01 	strb.w	r1, [r3], #1
 800783a:	e7f9      	b.n	8007830 <memset+0x4>

0800783c <_localeconv_r>:
 800783c:	4800      	ldr	r0, [pc, #0]	@ (8007840 <_localeconv_r+0x4>)
 800783e:	4770      	bx	lr
 8007840:	2400015c 	.word	0x2400015c

08007844 <_close_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d06      	ldr	r5, [pc, #24]	@ (8007860 <_close_r+0x1c>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7f9 fab4 	bl	8000dbc <_close>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_close_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_close_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	24000420 	.word	0x24000420

08007864 <_lseek_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d07      	ldr	r5, [pc, #28]	@ (8007884 <_lseek_r+0x20>)
 8007868:	4604      	mov	r4, r0
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	2200      	movs	r2, #0
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f7f9 fac9 	bl	8000e0a <_lseek>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_lseek_r+0x1e>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_lseek_r+0x1e>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	24000420 	.word	0x24000420

08007888 <_read_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d07      	ldr	r5, [pc, #28]	@ (80078a8 <_read_r+0x20>)
 800788c:	4604      	mov	r4, r0
 800788e:	4608      	mov	r0, r1
 8007890:	4611      	mov	r1, r2
 8007892:	2200      	movs	r2, #0
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7f9 fa73 	bl	8000d82 <_read>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_read_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_read_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	24000420 	.word	0x24000420

080078ac <_write_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	@ (80078cc <_write_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7f8 fef8 	bl	80006b0 <_write>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_write_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_write_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	24000420 	.word	0x24000420

080078d0 <__errno>:
 80078d0:	4b01      	ldr	r3, [pc, #4]	@ (80078d8 <__errno+0x8>)
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2400001c 	.word	0x2400001c

080078dc <__libc_init_array>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4d0d      	ldr	r5, [pc, #52]	@ (8007914 <__libc_init_array+0x38>)
 80078e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007918 <__libc_init_array+0x3c>)
 80078e2:	1b64      	subs	r4, r4, r5
 80078e4:	10a4      	asrs	r4, r4, #2
 80078e6:	2600      	movs	r6, #0
 80078e8:	42a6      	cmp	r6, r4
 80078ea:	d109      	bne.n	8007900 <__libc_init_array+0x24>
 80078ec:	4d0b      	ldr	r5, [pc, #44]	@ (800791c <__libc_init_array+0x40>)
 80078ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007920 <__libc_init_array+0x44>)
 80078f0:	f001 fdbe 	bl	8009470 <_init>
 80078f4:	1b64      	subs	r4, r4, r5
 80078f6:	10a4      	asrs	r4, r4, #2
 80078f8:	2600      	movs	r6, #0
 80078fa:	42a6      	cmp	r6, r4
 80078fc:	d105      	bne.n	800790a <__libc_init_array+0x2e>
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	f855 3b04 	ldr.w	r3, [r5], #4
 8007904:	4798      	blx	r3
 8007906:	3601      	adds	r6, #1
 8007908:	e7ee      	b.n	80078e8 <__libc_init_array+0xc>
 800790a:	f855 3b04 	ldr.w	r3, [r5], #4
 800790e:	4798      	blx	r3
 8007910:	3601      	adds	r6, #1
 8007912:	e7f2      	b.n	80078fa <__libc_init_array+0x1e>
 8007914:	080099c0 	.word	0x080099c0
 8007918:	080099c0 	.word	0x080099c0
 800791c:	080099c0 	.word	0x080099c0
 8007920:	080099c4 	.word	0x080099c4

08007924 <__retarget_lock_init_recursive>:
 8007924:	4770      	bx	lr

08007926 <__retarget_lock_acquire_recursive>:
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_release_recursive>:
 8007928:	4770      	bx	lr

0800792a <quorem>:
 800792a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792e:	6903      	ldr	r3, [r0, #16]
 8007930:	690c      	ldr	r4, [r1, #16]
 8007932:	42a3      	cmp	r3, r4
 8007934:	4607      	mov	r7, r0
 8007936:	db7e      	blt.n	8007a36 <quorem+0x10c>
 8007938:	3c01      	subs	r4, #1
 800793a:	f101 0814 	add.w	r8, r1, #20
 800793e:	00a3      	lsls	r3, r4, #2
 8007940:	f100 0514 	add.w	r5, r0, #20
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007954:	3301      	adds	r3, #1
 8007956:	429a      	cmp	r2, r3
 8007958:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800795c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007960:	d32e      	bcc.n	80079c0 <quorem+0x96>
 8007962:	f04f 0a00 	mov.w	sl, #0
 8007966:	46c4      	mov	ip, r8
 8007968:	46ae      	mov	lr, r5
 800796a:	46d3      	mov	fp, sl
 800796c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007970:	b298      	uxth	r0, r3
 8007972:	fb06 a000 	mla	r0, r6, r0, sl
 8007976:	0c02      	lsrs	r2, r0, #16
 8007978:	0c1b      	lsrs	r3, r3, #16
 800797a:	fb06 2303 	mla	r3, r6, r3, r2
 800797e:	f8de 2000 	ldr.w	r2, [lr]
 8007982:	b280      	uxth	r0, r0
 8007984:	b292      	uxth	r2, r2
 8007986:	1a12      	subs	r2, r2, r0
 8007988:	445a      	add	r2, fp
 800798a:	f8de 0000 	ldr.w	r0, [lr]
 800798e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007992:	b29b      	uxth	r3, r3
 8007994:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007998:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800799c:	b292      	uxth	r2, r2
 800799e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079a2:	45e1      	cmp	r9, ip
 80079a4:	f84e 2b04 	str.w	r2, [lr], #4
 80079a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079ac:	d2de      	bcs.n	800796c <quorem+0x42>
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	58eb      	ldr	r3, [r5, r3]
 80079b2:	b92b      	cbnz	r3, 80079c0 <quorem+0x96>
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	3b04      	subs	r3, #4
 80079b8:	429d      	cmp	r5, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	d32f      	bcc.n	8007a1e <quorem+0xf4>
 80079be:	613c      	str	r4, [r7, #16]
 80079c0:	4638      	mov	r0, r7
 80079c2:	f001 f90d 	bl	8008be0 <__mcmp>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	db25      	blt.n	8007a16 <quorem+0xec>
 80079ca:	4629      	mov	r1, r5
 80079cc:	2000      	movs	r0, #0
 80079ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80079d2:	f8d1 c000 	ldr.w	ip, [r1]
 80079d6:	fa1f fe82 	uxth.w	lr, r2
 80079da:	fa1f f38c 	uxth.w	r3, ip
 80079de:	eba3 030e 	sub.w	r3, r3, lr
 80079e2:	4403      	add	r3, r0
 80079e4:	0c12      	lsrs	r2, r2, #16
 80079e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079f4:	45c1      	cmp	r9, r8
 80079f6:	f841 3b04 	str.w	r3, [r1], #4
 80079fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079fe:	d2e6      	bcs.n	80079ce <quorem+0xa4>
 8007a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a08:	b922      	cbnz	r2, 8007a14 <quorem+0xea>
 8007a0a:	3b04      	subs	r3, #4
 8007a0c:	429d      	cmp	r5, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	d30b      	bcc.n	8007a2a <quorem+0x100>
 8007a12:	613c      	str	r4, [r7, #16]
 8007a14:	3601      	adds	r6, #1
 8007a16:	4630      	mov	r0, r6
 8007a18:	b003      	add	sp, #12
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	2a00      	cmp	r2, #0
 8007a24:	d1cb      	bne.n	80079be <quorem+0x94>
 8007a26:	3c01      	subs	r4, #1
 8007a28:	e7c6      	b.n	80079b8 <quorem+0x8e>
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	3b04      	subs	r3, #4
 8007a2e:	2a00      	cmp	r2, #0
 8007a30:	d1ef      	bne.n	8007a12 <quorem+0xe8>
 8007a32:	3c01      	subs	r4, #1
 8007a34:	e7ea      	b.n	8007a0c <quorem+0xe2>
 8007a36:	2000      	movs	r0, #0
 8007a38:	e7ee      	b.n	8007a18 <quorem+0xee>
 8007a3a:	0000      	movs	r0, r0
 8007a3c:	0000      	movs	r0, r0
	...

08007a40 <_dtoa_r>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	ed2d 8b02 	vpush	{d8}
 8007a48:	69c7      	ldr	r7, [r0, #28]
 8007a4a:	b091      	sub	sp, #68	@ 0x44
 8007a4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a50:	ec55 4b10 	vmov	r4, r5, d0
 8007a54:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007a56:	9107      	str	r1, [sp, #28]
 8007a58:	4681      	mov	r9, r0
 8007a5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a5c:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a5e:	b97f      	cbnz	r7, 8007a80 <_dtoa_r+0x40>
 8007a60:	2010      	movs	r0, #16
 8007a62:	f000 fd8d 	bl	8008580 <malloc>
 8007a66:	4602      	mov	r2, r0
 8007a68:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a6c:	b920      	cbnz	r0, 8007a78 <_dtoa_r+0x38>
 8007a6e:	4ba0      	ldr	r3, [pc, #640]	@ (8007cf0 <_dtoa_r+0x2b0>)
 8007a70:	21ef      	movs	r1, #239	@ 0xef
 8007a72:	48a0      	ldr	r0, [pc, #640]	@ (8007cf4 <_dtoa_r+0x2b4>)
 8007a74:	f001 fc4c 	bl	8009310 <__assert_func>
 8007a78:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a7c:	6007      	str	r7, [r0, #0]
 8007a7e:	60c7      	str	r7, [r0, #12]
 8007a80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a84:	6819      	ldr	r1, [r3, #0]
 8007a86:	b159      	cbz	r1, 8007aa0 <_dtoa_r+0x60>
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	604a      	str	r2, [r1, #4]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4093      	lsls	r3, r2
 8007a90:	608b      	str	r3, [r1, #8]
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 fe6a 	bl	800876c <_Bfree>
 8007a98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	1e2b      	subs	r3, r5, #0
 8007aa2:	bfbb      	ittet	lt
 8007aa4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007aa8:	9303      	strlt	r3, [sp, #12]
 8007aaa:	2300      	movge	r3, #0
 8007aac:	2201      	movlt	r2, #1
 8007aae:	bfac      	ite	ge
 8007ab0:	6033      	strge	r3, [r6, #0]
 8007ab2:	6032      	strlt	r2, [r6, #0]
 8007ab4:	4b90      	ldr	r3, [pc, #576]	@ (8007cf8 <_dtoa_r+0x2b8>)
 8007ab6:	9e03      	ldr	r6, [sp, #12]
 8007ab8:	43b3      	bics	r3, r6
 8007aba:	d110      	bne.n	8007ade <_dtoa_r+0x9e>
 8007abc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007abe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007ac8:	4323      	orrs	r3, r4
 8007aca:	f000 84de 	beq.w	800848a <_dtoa_r+0xa4a>
 8007ace:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ad0:	4f8a      	ldr	r7, [pc, #552]	@ (8007cfc <_dtoa_r+0x2bc>)
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 84e0 	beq.w	8008498 <_dtoa_r+0xa58>
 8007ad8:	1cfb      	adds	r3, r7, #3
 8007ada:	f000 bcdb 	b.w	8008494 <_dtoa_r+0xa54>
 8007ade:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007ae2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aea:	d10a      	bne.n	8007b02 <_dtoa_r+0xc2>
 8007aec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007aee:	2301      	movs	r3, #1
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007af4:	b113      	cbz	r3, 8007afc <_dtoa_r+0xbc>
 8007af6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007af8:	4b81      	ldr	r3, [pc, #516]	@ (8007d00 <_dtoa_r+0x2c0>)
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4f81      	ldr	r7, [pc, #516]	@ (8007d04 <_dtoa_r+0x2c4>)
 8007afe:	f000 bccb 	b.w	8008498 <_dtoa_r+0xa58>
 8007b02:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b04:	a90f      	add	r1, sp, #60	@ 0x3c
 8007b06:	4648      	mov	r0, r9
 8007b08:	eeb0 0b48 	vmov.f64	d0, d8
 8007b0c:	f001 f918 	bl	8008d40 <__d2b>
 8007b10:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007b14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b16:	9001      	str	r0, [sp, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d045      	beq.n	8007ba8 <_dtoa_r+0x168>
 8007b1c:	eeb0 7b48 	vmov.f64	d7, d8
 8007b20:	ee18 1a90 	vmov	r1, s17
 8007b24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007b28:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007b2c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007b30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007b34:	2500      	movs	r5, #0
 8007b36:	ee07 1a90 	vmov	s15, r1
 8007b3a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007b3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007cd8 <_dtoa_r+0x298>
 8007b42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b46:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007ce0 <_dtoa_r+0x2a0>
 8007b4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007b4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007ce8 <_dtoa_r+0x2a8>
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007b5a:	eeb0 7b46 	vmov.f64	d7, d6
 8007b5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007b62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007b66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6e:	ee16 8a90 	vmov	r8, s13
 8007b72:	d508      	bpl.n	8007b86 <_dtoa_r+0x146>
 8007b74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007b78:	eeb4 6b47 	vcmp.f64	d6, d7
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	bf18      	it	ne
 8007b82:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007b86:	f1b8 0f16 	cmp.w	r8, #22
 8007b8a:	d82b      	bhi.n	8007be4 <_dtoa_r+0x1a4>
 8007b8c:	495e      	ldr	r1, [pc, #376]	@ (8007d08 <_dtoa_r+0x2c8>)
 8007b8e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007b92:	ed91 7b00 	vldr	d7, [r1]
 8007b96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9e:	d501      	bpl.n	8007ba4 <_dtoa_r+0x164>
 8007ba0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	e01e      	b.n	8007be6 <_dtoa_r+0x1a6>
 8007ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007baa:	4413      	add	r3, r2
 8007bac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007bb0:	2920      	cmp	r1, #32
 8007bb2:	bfc1      	itttt	gt
 8007bb4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007bb8:	408e      	lslgt	r6, r1
 8007bba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007bbe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007bc2:	bfd6      	itet	le
 8007bc4:	f1c1 0120 	rsble	r1, r1, #32
 8007bc8:	4331      	orrgt	r1, r6
 8007bca:	fa04 f101 	lslle.w	r1, r4, r1
 8007bce:	ee07 1a90 	vmov	s15, r1
 8007bd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	ee17 1a90 	vmov	r1, s15
 8007bdc:	2501      	movs	r5, #1
 8007bde:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007be2:	e7a8      	b.n	8007b36 <_dtoa_r+0xf6>
 8007be4:	2101      	movs	r1, #1
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	1e53      	subs	r3, r2, #1
 8007bea:	9306      	str	r3, [sp, #24]
 8007bec:	bf45      	ittet	mi
 8007bee:	f1c2 0301 	rsbmi	r3, r2, #1
 8007bf2:	9305      	strmi	r3, [sp, #20]
 8007bf4:	2300      	movpl	r3, #0
 8007bf6:	2300      	movmi	r3, #0
 8007bf8:	bf4c      	ite	mi
 8007bfa:	9306      	strmi	r3, [sp, #24]
 8007bfc:	9305      	strpl	r3, [sp, #20]
 8007bfe:	f1b8 0f00 	cmp.w	r8, #0
 8007c02:	910c      	str	r1, [sp, #48]	@ 0x30
 8007c04:	db18      	blt.n	8007c38 <_dtoa_r+0x1f8>
 8007c06:	9b06      	ldr	r3, [sp, #24]
 8007c08:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007c0c:	4443      	add	r3, r8
 8007c0e:	9306      	str	r3, [sp, #24]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9a07      	ldr	r2, [sp, #28]
 8007c14:	2a09      	cmp	r2, #9
 8007c16:	d849      	bhi.n	8007cac <_dtoa_r+0x26c>
 8007c18:	2a05      	cmp	r2, #5
 8007c1a:	bfc4      	itt	gt
 8007c1c:	3a04      	subgt	r2, #4
 8007c1e:	9207      	strgt	r2, [sp, #28]
 8007c20:	9a07      	ldr	r2, [sp, #28]
 8007c22:	f1a2 0202 	sub.w	r2, r2, #2
 8007c26:	bfcc      	ite	gt
 8007c28:	2400      	movgt	r4, #0
 8007c2a:	2401      	movle	r4, #1
 8007c2c:	2a03      	cmp	r2, #3
 8007c2e:	d848      	bhi.n	8007cc2 <_dtoa_r+0x282>
 8007c30:	e8df f002 	tbb	[pc, r2]
 8007c34:	3a2c2e0b 	.word	0x3a2c2e0b
 8007c38:	9b05      	ldr	r3, [sp, #20]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	eba3 0308 	sub.w	r3, r3, r8
 8007c40:	9305      	str	r3, [sp, #20]
 8007c42:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c44:	f1c8 0300 	rsb	r3, r8, #0
 8007c48:	e7e3      	b.n	8007c12 <_dtoa_r+0x1d2>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	9208      	str	r2, [sp, #32]
 8007c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	dc39      	bgt.n	8007cc8 <_dtoa_r+0x288>
 8007c54:	f04f 0b01 	mov.w	fp, #1
 8007c58:	46da      	mov	sl, fp
 8007c5a:	465a      	mov	r2, fp
 8007c5c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007c60:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007c64:	2100      	movs	r1, #0
 8007c66:	2004      	movs	r0, #4
 8007c68:	f100 0614 	add.w	r6, r0, #20
 8007c6c:	4296      	cmp	r6, r2
 8007c6e:	d930      	bls.n	8007cd2 <_dtoa_r+0x292>
 8007c70:	6079      	str	r1, [r7, #4]
 8007c72:	4648      	mov	r0, r9
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	f000 fd39 	bl	80086ec <_Balloc>
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d146      	bne.n	8007d10 <_dtoa_r+0x2d0>
 8007c82:	4b22      	ldr	r3, [pc, #136]	@ (8007d0c <_dtoa_r+0x2cc>)
 8007c84:	4602      	mov	r2, r0
 8007c86:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c8a:	e6f2      	b.n	8007a72 <_dtoa_r+0x32>
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	e7dd      	b.n	8007c4c <_dtoa_r+0x20c>
 8007c90:	2200      	movs	r2, #0
 8007c92:	9208      	str	r2, [sp, #32]
 8007c94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c96:	eb08 0b02 	add.w	fp, r8, r2
 8007c9a:	f10b 0a01 	add.w	sl, fp, #1
 8007c9e:	4652      	mov	r2, sl
 8007ca0:	2a01      	cmp	r2, #1
 8007ca2:	bfb8      	it	lt
 8007ca4:	2201      	movlt	r2, #1
 8007ca6:	e7db      	b.n	8007c60 <_dtoa_r+0x220>
 8007ca8:	2201      	movs	r2, #1
 8007caa:	e7f2      	b.n	8007c92 <_dtoa_r+0x252>
 8007cac:	2401      	movs	r4, #1
 8007cae:	2200      	movs	r2, #0
 8007cb0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007cb4:	f04f 3bff 	mov.w	fp, #4294967295
 8007cb8:	2100      	movs	r1, #0
 8007cba:	46da      	mov	sl, fp
 8007cbc:	2212      	movs	r2, #18
 8007cbe:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cc0:	e7ce      	b.n	8007c60 <_dtoa_r+0x220>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	9208      	str	r2, [sp, #32]
 8007cc6:	e7f5      	b.n	8007cb4 <_dtoa_r+0x274>
 8007cc8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007ccc:	46da      	mov	sl, fp
 8007cce:	465a      	mov	r2, fp
 8007cd0:	e7c6      	b.n	8007c60 <_dtoa_r+0x220>
 8007cd2:	3101      	adds	r1, #1
 8007cd4:	0040      	lsls	r0, r0, #1
 8007cd6:	e7c7      	b.n	8007c68 <_dtoa_r+0x228>
 8007cd8:	636f4361 	.word	0x636f4361
 8007cdc:	3fd287a7 	.word	0x3fd287a7
 8007ce0:	8b60c8b3 	.word	0x8b60c8b3
 8007ce4:	3fc68a28 	.word	0x3fc68a28
 8007ce8:	509f79fb 	.word	0x509f79fb
 8007cec:	3fd34413 	.word	0x3fd34413
 8007cf0:	08009689 	.word	0x08009689
 8007cf4:	080096a0 	.word	0x080096a0
 8007cf8:	7ff00000 	.word	0x7ff00000
 8007cfc:	08009685 	.word	0x08009685
 8007d00:	08009659 	.word	0x08009659
 8007d04:	08009658 	.word	0x08009658
 8007d08:	08009798 	.word	0x08009798
 8007d0c:	080096f8 	.word	0x080096f8
 8007d10:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007d14:	f1ba 0f0e 	cmp.w	sl, #14
 8007d18:	6010      	str	r0, [r2, #0]
 8007d1a:	d86f      	bhi.n	8007dfc <_dtoa_r+0x3bc>
 8007d1c:	2c00      	cmp	r4, #0
 8007d1e:	d06d      	beq.n	8007dfc <_dtoa_r+0x3bc>
 8007d20:	f1b8 0f00 	cmp.w	r8, #0
 8007d24:	f340 80c2 	ble.w	8007eac <_dtoa_r+0x46c>
 8007d28:	4aca      	ldr	r2, [pc, #808]	@ (8008054 <_dtoa_r+0x614>)
 8007d2a:	f008 010f 	and.w	r1, r8, #15
 8007d2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007d32:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007d36:	ed92 7b00 	vldr	d7, [r2]
 8007d3a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007d3e:	f000 80a9 	beq.w	8007e94 <_dtoa_r+0x454>
 8007d42:	4ac5      	ldr	r2, [pc, #788]	@ (8008058 <_dtoa_r+0x618>)
 8007d44:	ed92 6b08 	vldr	d6, [r2, #32]
 8007d48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007d4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007d50:	f001 010f 	and.w	r1, r1, #15
 8007d54:	2203      	movs	r2, #3
 8007d56:	48c0      	ldr	r0, [pc, #768]	@ (8008058 <_dtoa_r+0x618>)
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	f040 809d 	bne.w	8007e98 <_dtoa_r+0x458>
 8007d5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d70:	2900      	cmp	r1, #0
 8007d72:	f000 80c1 	beq.w	8007ef8 <_dtoa_r+0x4b8>
 8007d76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007d7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d82:	f140 80b9 	bpl.w	8007ef8 <_dtoa_r+0x4b8>
 8007d86:	f1ba 0f00 	cmp.w	sl, #0
 8007d8a:	f000 80b5 	beq.w	8007ef8 <_dtoa_r+0x4b8>
 8007d8e:	f1bb 0f00 	cmp.w	fp, #0
 8007d92:	dd31      	ble.n	8007df8 <_dtoa_r+0x3b8>
 8007d94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007d98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007da0:	f108 31ff 	add.w	r1, r8, #4294967295
 8007da4:	9104      	str	r1, [sp, #16]
 8007da6:	3201      	adds	r2, #1
 8007da8:	465c      	mov	r4, fp
 8007daa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007dae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007db2:	ee07 2a90 	vmov	s15, r2
 8007db6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007dba:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007dbe:	ee15 2a90 	vmov	r2, s11
 8007dc2:	ec51 0b15 	vmov	r0, r1, d5
 8007dc6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007dca:	2c00      	cmp	r4, #0
 8007dcc:	f040 8098 	bne.w	8007f00 <_dtoa_r+0x4c0>
 8007dd0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007dd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007dd8:	ec41 0b17 	vmov	d7, r0, r1
 8007ddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de4:	f300 8261 	bgt.w	80082aa <_dtoa_r+0x86a>
 8007de8:	eeb1 7b47 	vneg.f64	d7, d7
 8007dec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df4:	f100 80f5 	bmi.w	8007fe2 <_dtoa_r+0x5a2>
 8007df8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007dfc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	f2c0 812c 	blt.w	800805c <_dtoa_r+0x61c>
 8007e04:	f1b8 0f0e 	cmp.w	r8, #14
 8007e08:	f300 8128 	bgt.w	800805c <_dtoa_r+0x61c>
 8007e0c:	4b91      	ldr	r3, [pc, #580]	@ (8008054 <_dtoa_r+0x614>)
 8007e0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e12:	ed93 6b00 	vldr	d6, [r3]
 8007e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da03      	bge.n	8007e24 <_dtoa_r+0x3e4>
 8007e1c:	f1ba 0f00 	cmp.w	sl, #0
 8007e20:	f340 80d2 	ble.w	8007fc8 <_dtoa_r+0x588>
 8007e24:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007e28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e2c:	463e      	mov	r6, r7
 8007e2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007e32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007e36:	ee15 3a10 	vmov	r3, s10
 8007e3a:	3330      	adds	r3, #48	@ 0x30
 8007e3c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e40:	1bf3      	subs	r3, r6, r7
 8007e42:	459a      	cmp	sl, r3
 8007e44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007e48:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007e4c:	f040 80f8 	bne.w	8008040 <_dtoa_r+0x600>
 8007e50:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5c:	f300 80dd 	bgt.w	800801a <_dtoa_r+0x5da>
 8007e60:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e68:	d104      	bne.n	8007e74 <_dtoa_r+0x434>
 8007e6a:	ee15 3a10 	vmov	r3, s10
 8007e6e:	07db      	lsls	r3, r3, #31
 8007e70:	f100 80d3 	bmi.w	800801a <_dtoa_r+0x5da>
 8007e74:	9901      	ldr	r1, [sp, #4]
 8007e76:	4648      	mov	r0, r9
 8007e78:	f000 fc78 	bl	800876c <_Bfree>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e80:	7033      	strb	r3, [r6, #0]
 8007e82:	f108 0301 	add.w	r3, r8, #1
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 8304 	beq.w	8008498 <_dtoa_r+0xa58>
 8007e90:	601e      	str	r6, [r3, #0]
 8007e92:	e301      	b.n	8008498 <_dtoa_r+0xa58>
 8007e94:	2202      	movs	r2, #2
 8007e96:	e75e      	b.n	8007d56 <_dtoa_r+0x316>
 8007e98:	07cc      	lsls	r4, r1, #31
 8007e9a:	d504      	bpl.n	8007ea6 <_dtoa_r+0x466>
 8007e9c:	ed90 6b00 	vldr	d6, [r0]
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ea6:	1049      	asrs	r1, r1, #1
 8007ea8:	3008      	adds	r0, #8
 8007eaa:	e755      	b.n	8007d58 <_dtoa_r+0x318>
 8007eac:	d022      	beq.n	8007ef4 <_dtoa_r+0x4b4>
 8007eae:	f1c8 0100 	rsb	r1, r8, #0
 8007eb2:	4a68      	ldr	r2, [pc, #416]	@ (8008054 <_dtoa_r+0x614>)
 8007eb4:	f001 000f 	and.w	r0, r1, #15
 8007eb8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007ebc:	ed92 7b00 	vldr	d7, [r2]
 8007ec0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007ec4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ec8:	4863      	ldr	r0, [pc, #396]	@ (8008058 <_dtoa_r+0x618>)
 8007eca:	1109      	asrs	r1, r1, #4
 8007ecc:	2400      	movs	r4, #0
 8007ece:	2202      	movs	r2, #2
 8007ed0:	b929      	cbnz	r1, 8007ede <_dtoa_r+0x49e>
 8007ed2:	2c00      	cmp	r4, #0
 8007ed4:	f43f af49 	beq.w	8007d6a <_dtoa_r+0x32a>
 8007ed8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007edc:	e745      	b.n	8007d6a <_dtoa_r+0x32a>
 8007ede:	07ce      	lsls	r6, r1, #31
 8007ee0:	d505      	bpl.n	8007eee <_dtoa_r+0x4ae>
 8007ee2:	ed90 6b00 	vldr	d6, [r0]
 8007ee6:	3201      	adds	r2, #1
 8007ee8:	2401      	movs	r4, #1
 8007eea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007eee:	1049      	asrs	r1, r1, #1
 8007ef0:	3008      	adds	r0, #8
 8007ef2:	e7ed      	b.n	8007ed0 <_dtoa_r+0x490>
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	e738      	b.n	8007d6a <_dtoa_r+0x32a>
 8007ef8:	f8cd 8010 	str.w	r8, [sp, #16]
 8007efc:	4654      	mov	r4, sl
 8007efe:	e754      	b.n	8007daa <_dtoa_r+0x36a>
 8007f00:	4a54      	ldr	r2, [pc, #336]	@ (8008054 <_dtoa_r+0x614>)
 8007f02:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007f06:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007f0a:	9a08      	ldr	r2, [sp, #32]
 8007f0c:	ec41 0b17 	vmov	d7, r0, r1
 8007f10:	443c      	add	r4, r7
 8007f12:	b34a      	cbz	r2, 8007f68 <_dtoa_r+0x528>
 8007f14:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007f18:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007f1c:	463e      	mov	r6, r7
 8007f1e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007f22:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007f26:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f2a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f2e:	ee14 2a90 	vmov	r2, s9
 8007f32:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f36:	3230      	adds	r2, #48	@ 0x30
 8007f38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f44:	f806 2b01 	strb.w	r2, [r6], #1
 8007f48:	d438      	bmi.n	8007fbc <_dtoa_r+0x57c>
 8007f4a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007f4e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f56:	d462      	bmi.n	800801e <_dtoa_r+0x5de>
 8007f58:	42a6      	cmp	r6, r4
 8007f5a:	f43f af4d 	beq.w	8007df8 <_dtoa_r+0x3b8>
 8007f5e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007f62:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f66:	e7e0      	b.n	8007f2a <_dtoa_r+0x4ea>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	463e      	mov	r6, r7
 8007f6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f70:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007f74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f78:	ee14 2a90 	vmov	r2, s9
 8007f7c:	3230      	adds	r2, #48	@ 0x30
 8007f7e:	f806 2b01 	strb.w	r2, [r6], #1
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f88:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f8c:	d119      	bne.n	8007fc2 <_dtoa_r+0x582>
 8007f8e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007f92:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007f96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9e:	dc3e      	bgt.n	800801e <_dtoa_r+0x5de>
 8007fa0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007fa4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fac:	f57f af24 	bpl.w	8007df8 <_dtoa_r+0x3b8>
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	3901      	subs	r1, #1
 8007fb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fb8:	2b30      	cmp	r3, #48	@ 0x30
 8007fba:	d0f9      	beq.n	8007fb0 <_dtoa_r+0x570>
 8007fbc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007fc0:	e758      	b.n	8007e74 <_dtoa_r+0x434>
 8007fc2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007fc6:	e7d5      	b.n	8007f74 <_dtoa_r+0x534>
 8007fc8:	d10b      	bne.n	8007fe2 <_dtoa_r+0x5a2>
 8007fca:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007fce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007fd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fde:	f2c0 8161 	blt.w	80082a4 <_dtoa_r+0x864>
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	4625      	mov	r5, r4
 8007fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	463e      	mov	r6, r7
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4648      	mov	r0, r9
 8007ff6:	f000 fbb9 	bl	800876c <_Bfree>
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	d0de      	beq.n	8007fbc <_dtoa_r+0x57c>
 8007ffe:	f1b8 0f00 	cmp.w	r8, #0
 8008002:	d005      	beq.n	8008010 <_dtoa_r+0x5d0>
 8008004:	45a8      	cmp	r8, r5
 8008006:	d003      	beq.n	8008010 <_dtoa_r+0x5d0>
 8008008:	4641      	mov	r1, r8
 800800a:	4648      	mov	r0, r9
 800800c:	f000 fbae 	bl	800876c <_Bfree>
 8008010:	4629      	mov	r1, r5
 8008012:	4648      	mov	r0, r9
 8008014:	f000 fbaa 	bl	800876c <_Bfree>
 8008018:	e7d0      	b.n	8007fbc <_dtoa_r+0x57c>
 800801a:	f8cd 8010 	str.w	r8, [sp, #16]
 800801e:	4633      	mov	r3, r6
 8008020:	461e      	mov	r6, r3
 8008022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008026:	2a39      	cmp	r2, #57	@ 0x39
 8008028:	d106      	bne.n	8008038 <_dtoa_r+0x5f8>
 800802a:	429f      	cmp	r7, r3
 800802c:	d1f8      	bne.n	8008020 <_dtoa_r+0x5e0>
 800802e:	9a04      	ldr	r2, [sp, #16]
 8008030:	3201      	adds	r2, #1
 8008032:	9204      	str	r2, [sp, #16]
 8008034:	2230      	movs	r2, #48	@ 0x30
 8008036:	703a      	strb	r2, [r7, #0]
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	3201      	adds	r2, #1
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e7bd      	b.n	8007fbc <_dtoa_r+0x57c>
 8008040:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008044:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804c:	f47f aeef 	bne.w	8007e2e <_dtoa_r+0x3ee>
 8008050:	e710      	b.n	8007e74 <_dtoa_r+0x434>
 8008052:	bf00      	nop
 8008054:	08009798 	.word	0x08009798
 8008058:	08009770 	.word	0x08009770
 800805c:	9908      	ldr	r1, [sp, #32]
 800805e:	2900      	cmp	r1, #0
 8008060:	f000 80e3 	beq.w	800822a <_dtoa_r+0x7ea>
 8008064:	9907      	ldr	r1, [sp, #28]
 8008066:	2901      	cmp	r1, #1
 8008068:	f300 80c8 	bgt.w	80081fc <_dtoa_r+0x7bc>
 800806c:	2d00      	cmp	r5, #0
 800806e:	f000 80c1 	beq.w	80081f4 <_dtoa_r+0x7b4>
 8008072:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008076:	9e05      	ldr	r6, [sp, #20]
 8008078:	461c      	mov	r4, r3
 800807a:	9304      	str	r3, [sp, #16]
 800807c:	9b05      	ldr	r3, [sp, #20]
 800807e:	4413      	add	r3, r2
 8008080:	9305      	str	r3, [sp, #20]
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	2101      	movs	r1, #1
 8008086:	4413      	add	r3, r2
 8008088:	4648      	mov	r0, r9
 800808a:	9306      	str	r3, [sp, #24]
 800808c:	f000 fc22 	bl	80088d4 <__i2b>
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	4605      	mov	r5, r0
 8008094:	b166      	cbz	r6, 80080b0 <_dtoa_r+0x670>
 8008096:	9a06      	ldr	r2, [sp, #24]
 8008098:	2a00      	cmp	r2, #0
 800809a:	dd09      	ble.n	80080b0 <_dtoa_r+0x670>
 800809c:	42b2      	cmp	r2, r6
 800809e:	9905      	ldr	r1, [sp, #20]
 80080a0:	bfa8      	it	ge
 80080a2:	4632      	movge	r2, r6
 80080a4:	1a89      	subs	r1, r1, r2
 80080a6:	9105      	str	r1, [sp, #20]
 80080a8:	9906      	ldr	r1, [sp, #24]
 80080aa:	1ab6      	subs	r6, r6, r2
 80080ac:	1a8a      	subs	r2, r1, r2
 80080ae:	9206      	str	r2, [sp, #24]
 80080b0:	b1fb      	cbz	r3, 80080f2 <_dtoa_r+0x6b2>
 80080b2:	9a08      	ldr	r2, [sp, #32]
 80080b4:	2a00      	cmp	r2, #0
 80080b6:	f000 80bc 	beq.w	8008232 <_dtoa_r+0x7f2>
 80080ba:	b19c      	cbz	r4, 80080e4 <_dtoa_r+0x6a4>
 80080bc:	4629      	mov	r1, r5
 80080be:	4622      	mov	r2, r4
 80080c0:	4648      	mov	r0, r9
 80080c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080c4:	f000 fcc6 	bl	8008a54 <__pow5mult>
 80080c8:	9a01      	ldr	r2, [sp, #4]
 80080ca:	4601      	mov	r1, r0
 80080cc:	4605      	mov	r5, r0
 80080ce:	4648      	mov	r0, r9
 80080d0:	f000 fc16 	bl	8008900 <__multiply>
 80080d4:	9901      	ldr	r1, [sp, #4]
 80080d6:	9004      	str	r0, [sp, #16]
 80080d8:	4648      	mov	r0, r9
 80080da:	f000 fb47 	bl	800876c <_Bfree>
 80080de:	9a04      	ldr	r2, [sp, #16]
 80080e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080e2:	9201      	str	r2, [sp, #4]
 80080e4:	1b1a      	subs	r2, r3, r4
 80080e6:	d004      	beq.n	80080f2 <_dtoa_r+0x6b2>
 80080e8:	9901      	ldr	r1, [sp, #4]
 80080ea:	4648      	mov	r0, r9
 80080ec:	f000 fcb2 	bl	8008a54 <__pow5mult>
 80080f0:	9001      	str	r0, [sp, #4]
 80080f2:	2101      	movs	r1, #1
 80080f4:	4648      	mov	r0, r9
 80080f6:	f000 fbed 	bl	80088d4 <__i2b>
 80080fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080fc:	4604      	mov	r4, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 81d0 	beq.w	80084a4 <_dtoa_r+0xa64>
 8008104:	461a      	mov	r2, r3
 8008106:	4601      	mov	r1, r0
 8008108:	4648      	mov	r0, r9
 800810a:	f000 fca3 	bl	8008a54 <__pow5mult>
 800810e:	9b07      	ldr	r3, [sp, #28]
 8008110:	2b01      	cmp	r3, #1
 8008112:	4604      	mov	r4, r0
 8008114:	f300 8095 	bgt.w	8008242 <_dtoa_r+0x802>
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f040 808b 	bne.w	8008236 <_dtoa_r+0x7f6>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008126:	2a00      	cmp	r2, #0
 8008128:	f040 8087 	bne.w	800823a <_dtoa_r+0x7fa>
 800812c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008130:	0d12      	lsrs	r2, r2, #20
 8008132:	0512      	lsls	r2, r2, #20
 8008134:	2a00      	cmp	r2, #0
 8008136:	f000 8082 	beq.w	800823e <_dtoa_r+0x7fe>
 800813a:	9b05      	ldr	r3, [sp, #20]
 800813c:	3301      	adds	r3, #1
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	9b06      	ldr	r3, [sp, #24]
 8008142:	3301      	adds	r3, #1
 8008144:	9306      	str	r3, [sp, #24]
 8008146:	2301      	movs	r3, #1
 8008148:	930b      	str	r3, [sp, #44]	@ 0x2c
 800814a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 81af 	beq.w	80084b0 <_dtoa_r+0xa70>
 8008152:	6922      	ldr	r2, [r4, #16]
 8008154:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008158:	6910      	ldr	r0, [r2, #16]
 800815a:	f000 fb6f 	bl	800883c <__hi0bits>
 800815e:	f1c0 0020 	rsb	r0, r0, #32
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	4418      	add	r0, r3
 8008166:	f010 001f 	ands.w	r0, r0, #31
 800816a:	d076      	beq.n	800825a <_dtoa_r+0x81a>
 800816c:	f1c0 0220 	rsb	r2, r0, #32
 8008170:	2a04      	cmp	r2, #4
 8008172:	dd69      	ble.n	8008248 <_dtoa_r+0x808>
 8008174:	9b05      	ldr	r3, [sp, #20]
 8008176:	f1c0 001c 	rsb	r0, r0, #28
 800817a:	4403      	add	r3, r0
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	9b06      	ldr	r3, [sp, #24]
 8008180:	4406      	add	r6, r0
 8008182:	4403      	add	r3, r0
 8008184:	9306      	str	r3, [sp, #24]
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	dd05      	ble.n	8008198 <_dtoa_r+0x758>
 800818c:	9901      	ldr	r1, [sp, #4]
 800818e:	461a      	mov	r2, r3
 8008190:	4648      	mov	r0, r9
 8008192:	f000 fcb9 	bl	8008b08 <__lshift>
 8008196:	9001      	str	r0, [sp, #4]
 8008198:	9b06      	ldr	r3, [sp, #24]
 800819a:	2b00      	cmp	r3, #0
 800819c:	dd05      	ble.n	80081aa <_dtoa_r+0x76a>
 800819e:	4621      	mov	r1, r4
 80081a0:	461a      	mov	r2, r3
 80081a2:	4648      	mov	r0, r9
 80081a4:	f000 fcb0 	bl	8008b08 <__lshift>
 80081a8:	4604      	mov	r4, r0
 80081aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d056      	beq.n	800825e <_dtoa_r+0x81e>
 80081b0:	9801      	ldr	r0, [sp, #4]
 80081b2:	4621      	mov	r1, r4
 80081b4:	f000 fd14 	bl	8008be0 <__mcmp>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	da50      	bge.n	800825e <_dtoa_r+0x81e>
 80081bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	9901      	ldr	r1, [sp, #4]
 80081c4:	2300      	movs	r3, #0
 80081c6:	220a      	movs	r2, #10
 80081c8:	4648      	mov	r0, r9
 80081ca:	f000 faf1 	bl	80087b0 <__multadd>
 80081ce:	9b08      	ldr	r3, [sp, #32]
 80081d0:	9001      	str	r0, [sp, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 816e 	beq.w	80084b4 <_dtoa_r+0xa74>
 80081d8:	4629      	mov	r1, r5
 80081da:	2300      	movs	r3, #0
 80081dc:	220a      	movs	r2, #10
 80081de:	4648      	mov	r0, r9
 80081e0:	f000 fae6 	bl	80087b0 <__multadd>
 80081e4:	f1bb 0f00 	cmp.w	fp, #0
 80081e8:	4605      	mov	r5, r0
 80081ea:	dc64      	bgt.n	80082b6 <_dtoa_r+0x876>
 80081ec:	9b07      	ldr	r3, [sp, #28]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	dc3e      	bgt.n	8008270 <_dtoa_r+0x830>
 80081f2:	e060      	b.n	80082b6 <_dtoa_r+0x876>
 80081f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80081fa:	e73c      	b.n	8008076 <_dtoa_r+0x636>
 80081fc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008200:	42a3      	cmp	r3, r4
 8008202:	bfbf      	itttt	lt
 8008204:	1ae2      	sublt	r2, r4, r3
 8008206:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008208:	189b      	addlt	r3, r3, r2
 800820a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800820c:	bfae      	itee	ge
 800820e:	1b1c      	subge	r4, r3, r4
 8008210:	4623      	movlt	r3, r4
 8008212:	2400      	movlt	r4, #0
 8008214:	f1ba 0f00 	cmp.w	sl, #0
 8008218:	bfb5      	itete	lt
 800821a:	9a05      	ldrlt	r2, [sp, #20]
 800821c:	9e05      	ldrge	r6, [sp, #20]
 800821e:	eba2 060a 	sublt.w	r6, r2, sl
 8008222:	4652      	movge	r2, sl
 8008224:	bfb8      	it	lt
 8008226:	2200      	movlt	r2, #0
 8008228:	e727      	b.n	800807a <_dtoa_r+0x63a>
 800822a:	9e05      	ldr	r6, [sp, #20]
 800822c:	9d08      	ldr	r5, [sp, #32]
 800822e:	461c      	mov	r4, r3
 8008230:	e730      	b.n	8008094 <_dtoa_r+0x654>
 8008232:	461a      	mov	r2, r3
 8008234:	e758      	b.n	80080e8 <_dtoa_r+0x6a8>
 8008236:	2300      	movs	r3, #0
 8008238:	e786      	b.n	8008148 <_dtoa_r+0x708>
 800823a:	9b02      	ldr	r3, [sp, #8]
 800823c:	e784      	b.n	8008148 <_dtoa_r+0x708>
 800823e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008240:	e783      	b.n	800814a <_dtoa_r+0x70a>
 8008242:	2300      	movs	r3, #0
 8008244:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008246:	e784      	b.n	8008152 <_dtoa_r+0x712>
 8008248:	d09d      	beq.n	8008186 <_dtoa_r+0x746>
 800824a:	9b05      	ldr	r3, [sp, #20]
 800824c:	321c      	adds	r2, #28
 800824e:	4413      	add	r3, r2
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	9b06      	ldr	r3, [sp, #24]
 8008254:	4416      	add	r6, r2
 8008256:	4413      	add	r3, r2
 8008258:	e794      	b.n	8008184 <_dtoa_r+0x744>
 800825a:	4602      	mov	r2, r0
 800825c:	e7f5      	b.n	800824a <_dtoa_r+0x80a>
 800825e:	f1ba 0f00 	cmp.w	sl, #0
 8008262:	f8cd 8010 	str.w	r8, [sp, #16]
 8008266:	46d3      	mov	fp, sl
 8008268:	dc21      	bgt.n	80082ae <_dtoa_r+0x86e>
 800826a:	9b07      	ldr	r3, [sp, #28]
 800826c:	2b02      	cmp	r3, #2
 800826e:	dd1e      	ble.n	80082ae <_dtoa_r+0x86e>
 8008270:	f1bb 0f00 	cmp.w	fp, #0
 8008274:	f47f aeb7 	bne.w	8007fe6 <_dtoa_r+0x5a6>
 8008278:	4621      	mov	r1, r4
 800827a:	465b      	mov	r3, fp
 800827c:	2205      	movs	r2, #5
 800827e:	4648      	mov	r0, r9
 8008280:	f000 fa96 	bl	80087b0 <__multadd>
 8008284:	4601      	mov	r1, r0
 8008286:	4604      	mov	r4, r0
 8008288:	9801      	ldr	r0, [sp, #4]
 800828a:	f000 fca9 	bl	8008be0 <__mcmp>
 800828e:	2800      	cmp	r0, #0
 8008290:	f77f aea9 	ble.w	8007fe6 <_dtoa_r+0x5a6>
 8008294:	463e      	mov	r6, r7
 8008296:	2331      	movs	r3, #49	@ 0x31
 8008298:	f806 3b01 	strb.w	r3, [r6], #1
 800829c:	9b04      	ldr	r3, [sp, #16]
 800829e:	3301      	adds	r3, #1
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	e6a4      	b.n	8007fee <_dtoa_r+0x5ae>
 80082a4:	f8cd 8010 	str.w	r8, [sp, #16]
 80082a8:	4654      	mov	r4, sl
 80082aa:	4625      	mov	r5, r4
 80082ac:	e7f2      	b.n	8008294 <_dtoa_r+0x854>
 80082ae:	9b08      	ldr	r3, [sp, #32]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8103 	beq.w	80084bc <_dtoa_r+0xa7c>
 80082b6:	2e00      	cmp	r6, #0
 80082b8:	dd05      	ble.n	80082c6 <_dtoa_r+0x886>
 80082ba:	4629      	mov	r1, r5
 80082bc:	4632      	mov	r2, r6
 80082be:	4648      	mov	r0, r9
 80082c0:	f000 fc22 	bl	8008b08 <__lshift>
 80082c4:	4605      	mov	r5, r0
 80082c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d058      	beq.n	800837e <_dtoa_r+0x93e>
 80082cc:	6869      	ldr	r1, [r5, #4]
 80082ce:	4648      	mov	r0, r9
 80082d0:	f000 fa0c 	bl	80086ec <_Balloc>
 80082d4:	4606      	mov	r6, r0
 80082d6:	b928      	cbnz	r0, 80082e4 <_dtoa_r+0x8a4>
 80082d8:	4b82      	ldr	r3, [pc, #520]	@ (80084e4 <_dtoa_r+0xaa4>)
 80082da:	4602      	mov	r2, r0
 80082dc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082e0:	f7ff bbc7 	b.w	8007a72 <_dtoa_r+0x32>
 80082e4:	692a      	ldr	r2, [r5, #16]
 80082e6:	3202      	adds	r2, #2
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	f105 010c 	add.w	r1, r5, #12
 80082ee:	300c      	adds	r0, #12
 80082f0:	f001 f800 	bl	80092f4 <memcpy>
 80082f4:	2201      	movs	r2, #1
 80082f6:	4631      	mov	r1, r6
 80082f8:	4648      	mov	r0, r9
 80082fa:	f000 fc05 	bl	8008b08 <__lshift>
 80082fe:	1c7b      	adds	r3, r7, #1
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	eb07 030b 	add.w	r3, r7, fp
 8008306:	9309      	str	r3, [sp, #36]	@ 0x24
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	46a8      	mov	r8, r5
 8008310:	9308      	str	r3, [sp, #32]
 8008312:	4605      	mov	r5, r0
 8008314:	9b05      	ldr	r3, [sp, #20]
 8008316:	9801      	ldr	r0, [sp, #4]
 8008318:	4621      	mov	r1, r4
 800831a:	f103 3bff 	add.w	fp, r3, #4294967295
 800831e:	f7ff fb04 	bl	800792a <quorem>
 8008322:	4641      	mov	r1, r8
 8008324:	9002      	str	r0, [sp, #8]
 8008326:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800832a:	9801      	ldr	r0, [sp, #4]
 800832c:	f000 fc58 	bl	8008be0 <__mcmp>
 8008330:	462a      	mov	r2, r5
 8008332:	9006      	str	r0, [sp, #24]
 8008334:	4621      	mov	r1, r4
 8008336:	4648      	mov	r0, r9
 8008338:	f000 fc6e 	bl	8008c18 <__mdiff>
 800833c:	68c2      	ldr	r2, [r0, #12]
 800833e:	4606      	mov	r6, r0
 8008340:	b9fa      	cbnz	r2, 8008382 <_dtoa_r+0x942>
 8008342:	4601      	mov	r1, r0
 8008344:	9801      	ldr	r0, [sp, #4]
 8008346:	f000 fc4b 	bl	8008be0 <__mcmp>
 800834a:	4602      	mov	r2, r0
 800834c:	4631      	mov	r1, r6
 800834e:	4648      	mov	r0, r9
 8008350:	920a      	str	r2, [sp, #40]	@ 0x28
 8008352:	f000 fa0b 	bl	800876c <_Bfree>
 8008356:	9b07      	ldr	r3, [sp, #28]
 8008358:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800835a:	9e05      	ldr	r6, [sp, #20]
 800835c:	ea43 0102 	orr.w	r1, r3, r2
 8008360:	9b08      	ldr	r3, [sp, #32]
 8008362:	4319      	orrs	r1, r3
 8008364:	d10f      	bne.n	8008386 <_dtoa_r+0x946>
 8008366:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800836a:	d028      	beq.n	80083be <_dtoa_r+0x97e>
 800836c:	9b06      	ldr	r3, [sp, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	dd02      	ble.n	8008378 <_dtoa_r+0x938>
 8008372:	9b02      	ldr	r3, [sp, #8]
 8008374:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008378:	f88b a000 	strb.w	sl, [fp]
 800837c:	e639      	b.n	8007ff2 <_dtoa_r+0x5b2>
 800837e:	4628      	mov	r0, r5
 8008380:	e7bd      	b.n	80082fe <_dtoa_r+0x8be>
 8008382:	2201      	movs	r2, #1
 8008384:	e7e2      	b.n	800834c <_dtoa_r+0x90c>
 8008386:	9b06      	ldr	r3, [sp, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	db04      	blt.n	8008396 <_dtoa_r+0x956>
 800838c:	9907      	ldr	r1, [sp, #28]
 800838e:	430b      	orrs	r3, r1
 8008390:	9908      	ldr	r1, [sp, #32]
 8008392:	430b      	orrs	r3, r1
 8008394:	d120      	bne.n	80083d8 <_dtoa_r+0x998>
 8008396:	2a00      	cmp	r2, #0
 8008398:	ddee      	ble.n	8008378 <_dtoa_r+0x938>
 800839a:	9901      	ldr	r1, [sp, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	4648      	mov	r0, r9
 80083a0:	f000 fbb2 	bl	8008b08 <__lshift>
 80083a4:	4621      	mov	r1, r4
 80083a6:	9001      	str	r0, [sp, #4]
 80083a8:	f000 fc1a 	bl	8008be0 <__mcmp>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	dc03      	bgt.n	80083b8 <_dtoa_r+0x978>
 80083b0:	d1e2      	bne.n	8008378 <_dtoa_r+0x938>
 80083b2:	f01a 0f01 	tst.w	sl, #1
 80083b6:	d0df      	beq.n	8008378 <_dtoa_r+0x938>
 80083b8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80083bc:	d1d9      	bne.n	8008372 <_dtoa_r+0x932>
 80083be:	2339      	movs	r3, #57	@ 0x39
 80083c0:	f88b 3000 	strb.w	r3, [fp]
 80083c4:	4633      	mov	r3, r6
 80083c6:	461e      	mov	r6, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083ce:	2a39      	cmp	r2, #57	@ 0x39
 80083d0:	d053      	beq.n	800847a <_dtoa_r+0xa3a>
 80083d2:	3201      	adds	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e60c      	b.n	8007ff2 <_dtoa_r+0x5b2>
 80083d8:	2a00      	cmp	r2, #0
 80083da:	dd07      	ble.n	80083ec <_dtoa_r+0x9ac>
 80083dc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80083e0:	d0ed      	beq.n	80083be <_dtoa_r+0x97e>
 80083e2:	f10a 0301 	add.w	r3, sl, #1
 80083e6:	f88b 3000 	strb.w	r3, [fp]
 80083ea:	e602      	b.n	8007ff2 <_dtoa_r+0x5b2>
 80083ec:	9b05      	ldr	r3, [sp, #20]
 80083ee:	9a05      	ldr	r2, [sp, #20]
 80083f0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80083f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d029      	beq.n	800844e <_dtoa_r+0xa0e>
 80083fa:	9901      	ldr	r1, [sp, #4]
 80083fc:	2300      	movs	r3, #0
 80083fe:	220a      	movs	r2, #10
 8008400:	4648      	mov	r0, r9
 8008402:	f000 f9d5 	bl	80087b0 <__multadd>
 8008406:	45a8      	cmp	r8, r5
 8008408:	9001      	str	r0, [sp, #4]
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	f04f 020a 	mov.w	r2, #10
 8008412:	4641      	mov	r1, r8
 8008414:	4648      	mov	r0, r9
 8008416:	d107      	bne.n	8008428 <_dtoa_r+0x9e8>
 8008418:	f000 f9ca 	bl	80087b0 <__multadd>
 800841c:	4680      	mov	r8, r0
 800841e:	4605      	mov	r5, r0
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	3301      	adds	r3, #1
 8008424:	9305      	str	r3, [sp, #20]
 8008426:	e775      	b.n	8008314 <_dtoa_r+0x8d4>
 8008428:	f000 f9c2 	bl	80087b0 <__multadd>
 800842c:	4629      	mov	r1, r5
 800842e:	4680      	mov	r8, r0
 8008430:	2300      	movs	r3, #0
 8008432:	220a      	movs	r2, #10
 8008434:	4648      	mov	r0, r9
 8008436:	f000 f9bb 	bl	80087b0 <__multadd>
 800843a:	4605      	mov	r5, r0
 800843c:	e7f0      	b.n	8008420 <_dtoa_r+0x9e0>
 800843e:	f1bb 0f00 	cmp.w	fp, #0
 8008442:	bfcc      	ite	gt
 8008444:	465e      	movgt	r6, fp
 8008446:	2601      	movle	r6, #1
 8008448:	443e      	add	r6, r7
 800844a:	f04f 0800 	mov.w	r8, #0
 800844e:	9901      	ldr	r1, [sp, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	4648      	mov	r0, r9
 8008454:	f000 fb58 	bl	8008b08 <__lshift>
 8008458:	4621      	mov	r1, r4
 800845a:	9001      	str	r0, [sp, #4]
 800845c:	f000 fbc0 	bl	8008be0 <__mcmp>
 8008460:	2800      	cmp	r0, #0
 8008462:	dcaf      	bgt.n	80083c4 <_dtoa_r+0x984>
 8008464:	d102      	bne.n	800846c <_dtoa_r+0xa2c>
 8008466:	f01a 0f01 	tst.w	sl, #1
 800846a:	d1ab      	bne.n	80083c4 <_dtoa_r+0x984>
 800846c:	4633      	mov	r3, r6
 800846e:	461e      	mov	r6, r3
 8008470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008474:	2a30      	cmp	r2, #48	@ 0x30
 8008476:	d0fa      	beq.n	800846e <_dtoa_r+0xa2e>
 8008478:	e5bb      	b.n	8007ff2 <_dtoa_r+0x5b2>
 800847a:	429f      	cmp	r7, r3
 800847c:	d1a3      	bne.n	80083c6 <_dtoa_r+0x986>
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	3301      	adds	r3, #1
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	2331      	movs	r3, #49	@ 0x31
 8008486:	703b      	strb	r3, [r7, #0]
 8008488:	e5b3      	b.n	8007ff2 <_dtoa_r+0x5b2>
 800848a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800848c:	4f16      	ldr	r7, [pc, #88]	@ (80084e8 <_dtoa_r+0xaa8>)
 800848e:	b11b      	cbz	r3, 8008498 <_dtoa_r+0xa58>
 8008490:	f107 0308 	add.w	r3, r7, #8
 8008494:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	4638      	mov	r0, r7
 800849a:	b011      	add	sp, #68	@ 0x44
 800849c:	ecbd 8b02 	vpop	{d8}
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	f77f ae36 	ble.w	8008118 <_dtoa_r+0x6d8>
 80084ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b0:	2001      	movs	r0, #1
 80084b2:	e656      	b.n	8008162 <_dtoa_r+0x722>
 80084b4:	f1bb 0f00 	cmp.w	fp, #0
 80084b8:	f77f aed7 	ble.w	800826a <_dtoa_r+0x82a>
 80084bc:	463e      	mov	r6, r7
 80084be:	9801      	ldr	r0, [sp, #4]
 80084c0:	4621      	mov	r1, r4
 80084c2:	f7ff fa32 	bl	800792a <quorem>
 80084c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80084ca:	f806 ab01 	strb.w	sl, [r6], #1
 80084ce:	1bf2      	subs	r2, r6, r7
 80084d0:	4593      	cmp	fp, r2
 80084d2:	ddb4      	ble.n	800843e <_dtoa_r+0x9fe>
 80084d4:	9901      	ldr	r1, [sp, #4]
 80084d6:	2300      	movs	r3, #0
 80084d8:	220a      	movs	r2, #10
 80084da:	4648      	mov	r0, r9
 80084dc:	f000 f968 	bl	80087b0 <__multadd>
 80084e0:	9001      	str	r0, [sp, #4]
 80084e2:	e7ec      	b.n	80084be <_dtoa_r+0xa7e>
 80084e4:	080096f8 	.word	0x080096f8
 80084e8:	0800967c 	.word	0x0800967c

080084ec <_free_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4605      	mov	r5, r0
 80084f0:	2900      	cmp	r1, #0
 80084f2:	d041      	beq.n	8008578 <_free_r+0x8c>
 80084f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f8:	1f0c      	subs	r4, r1, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bfb8      	it	lt
 80084fe:	18e4      	addlt	r4, r4, r3
 8008500:	f000 f8e8 	bl	80086d4 <__malloc_lock>
 8008504:	4a1d      	ldr	r2, [pc, #116]	@ (800857c <_free_r+0x90>)
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	b933      	cbnz	r3, 8008518 <_free_r+0x2c>
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	6014      	str	r4, [r2, #0]
 800850e:	4628      	mov	r0, r5
 8008510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008514:	f000 b8e4 	b.w	80086e0 <__malloc_unlock>
 8008518:	42a3      	cmp	r3, r4
 800851a:	d908      	bls.n	800852e <_free_r+0x42>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	1821      	adds	r1, r4, r0
 8008520:	428b      	cmp	r3, r1
 8008522:	bf01      	itttt	eq
 8008524:	6819      	ldreq	r1, [r3, #0]
 8008526:	685b      	ldreq	r3, [r3, #4]
 8008528:	1809      	addeq	r1, r1, r0
 800852a:	6021      	streq	r1, [r4, #0]
 800852c:	e7ed      	b.n	800850a <_free_r+0x1e>
 800852e:	461a      	mov	r2, r3
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	b10b      	cbz	r3, 8008538 <_free_r+0x4c>
 8008534:	42a3      	cmp	r3, r4
 8008536:	d9fa      	bls.n	800852e <_free_r+0x42>
 8008538:	6811      	ldr	r1, [r2, #0]
 800853a:	1850      	adds	r0, r2, r1
 800853c:	42a0      	cmp	r0, r4
 800853e:	d10b      	bne.n	8008558 <_free_r+0x6c>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	4401      	add	r1, r0
 8008544:	1850      	adds	r0, r2, r1
 8008546:	4283      	cmp	r3, r0
 8008548:	6011      	str	r1, [r2, #0]
 800854a:	d1e0      	bne.n	800850e <_free_r+0x22>
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	6053      	str	r3, [r2, #4]
 8008552:	4408      	add	r0, r1
 8008554:	6010      	str	r0, [r2, #0]
 8008556:	e7da      	b.n	800850e <_free_r+0x22>
 8008558:	d902      	bls.n	8008560 <_free_r+0x74>
 800855a:	230c      	movs	r3, #12
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	e7d6      	b.n	800850e <_free_r+0x22>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	1821      	adds	r1, r4, r0
 8008564:	428b      	cmp	r3, r1
 8008566:	bf04      	itt	eq
 8008568:	6819      	ldreq	r1, [r3, #0]
 800856a:	685b      	ldreq	r3, [r3, #4]
 800856c:	6063      	str	r3, [r4, #4]
 800856e:	bf04      	itt	eq
 8008570:	1809      	addeq	r1, r1, r0
 8008572:	6021      	streq	r1, [r4, #0]
 8008574:	6054      	str	r4, [r2, #4]
 8008576:	e7ca      	b.n	800850e <_free_r+0x22>
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	2400042c 	.word	0x2400042c

08008580 <malloc>:
 8008580:	4b02      	ldr	r3, [pc, #8]	@ (800858c <malloc+0xc>)
 8008582:	4601      	mov	r1, r0
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f000 b825 	b.w	80085d4 <_malloc_r>
 800858a:	bf00      	nop
 800858c:	2400001c 	.word	0x2400001c

08008590 <sbrk_aligned>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	4e0f      	ldr	r6, [pc, #60]	@ (80085d0 <sbrk_aligned+0x40>)
 8008594:	460c      	mov	r4, r1
 8008596:	6831      	ldr	r1, [r6, #0]
 8008598:	4605      	mov	r5, r0
 800859a:	b911      	cbnz	r1, 80085a2 <sbrk_aligned+0x12>
 800859c:	f000 fe9a 	bl	80092d4 <_sbrk_r>
 80085a0:	6030      	str	r0, [r6, #0]
 80085a2:	4621      	mov	r1, r4
 80085a4:	4628      	mov	r0, r5
 80085a6:	f000 fe95 	bl	80092d4 <_sbrk_r>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	d103      	bne.n	80085b6 <sbrk_aligned+0x26>
 80085ae:	f04f 34ff 	mov.w	r4, #4294967295
 80085b2:	4620      	mov	r0, r4
 80085b4:	bd70      	pop	{r4, r5, r6, pc}
 80085b6:	1cc4      	adds	r4, r0, #3
 80085b8:	f024 0403 	bic.w	r4, r4, #3
 80085bc:	42a0      	cmp	r0, r4
 80085be:	d0f8      	beq.n	80085b2 <sbrk_aligned+0x22>
 80085c0:	1a21      	subs	r1, r4, r0
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 fe86 	bl	80092d4 <_sbrk_r>
 80085c8:	3001      	adds	r0, #1
 80085ca:	d1f2      	bne.n	80085b2 <sbrk_aligned+0x22>
 80085cc:	e7ef      	b.n	80085ae <sbrk_aligned+0x1e>
 80085ce:	bf00      	nop
 80085d0:	24000428 	.word	0x24000428

080085d4 <_malloc_r>:
 80085d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d8:	1ccd      	adds	r5, r1, #3
 80085da:	f025 0503 	bic.w	r5, r5, #3
 80085de:	3508      	adds	r5, #8
 80085e0:	2d0c      	cmp	r5, #12
 80085e2:	bf38      	it	cc
 80085e4:	250c      	movcc	r5, #12
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	4606      	mov	r6, r0
 80085ea:	db01      	blt.n	80085f0 <_malloc_r+0x1c>
 80085ec:	42a9      	cmp	r1, r5
 80085ee:	d904      	bls.n	80085fa <_malloc_r+0x26>
 80085f0:	230c      	movs	r3, #12
 80085f2:	6033      	str	r3, [r6, #0]
 80085f4:	2000      	movs	r0, #0
 80085f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086d0 <_malloc_r+0xfc>
 80085fe:	f000 f869 	bl	80086d4 <__malloc_lock>
 8008602:	f8d8 3000 	ldr.w	r3, [r8]
 8008606:	461c      	mov	r4, r3
 8008608:	bb44      	cbnz	r4, 800865c <_malloc_r+0x88>
 800860a:	4629      	mov	r1, r5
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff ffbf 	bl	8008590 <sbrk_aligned>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	4604      	mov	r4, r0
 8008616:	d158      	bne.n	80086ca <_malloc_r+0xf6>
 8008618:	f8d8 4000 	ldr.w	r4, [r8]
 800861c:	4627      	mov	r7, r4
 800861e:	2f00      	cmp	r7, #0
 8008620:	d143      	bne.n	80086aa <_malloc_r+0xd6>
 8008622:	2c00      	cmp	r4, #0
 8008624:	d04b      	beq.n	80086be <_malloc_r+0xea>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	4639      	mov	r1, r7
 800862a:	4630      	mov	r0, r6
 800862c:	eb04 0903 	add.w	r9, r4, r3
 8008630:	f000 fe50 	bl	80092d4 <_sbrk_r>
 8008634:	4581      	cmp	r9, r0
 8008636:	d142      	bne.n	80086be <_malloc_r+0xea>
 8008638:	6821      	ldr	r1, [r4, #0]
 800863a:	1a6d      	subs	r5, r5, r1
 800863c:	4629      	mov	r1, r5
 800863e:	4630      	mov	r0, r6
 8008640:	f7ff ffa6 	bl	8008590 <sbrk_aligned>
 8008644:	3001      	adds	r0, #1
 8008646:	d03a      	beq.n	80086be <_malloc_r+0xea>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	442b      	add	r3, r5
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	f8d8 3000 	ldr.w	r3, [r8]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	bb62      	cbnz	r2, 80086b0 <_malloc_r+0xdc>
 8008656:	f8c8 7000 	str.w	r7, [r8]
 800865a:	e00f      	b.n	800867c <_malloc_r+0xa8>
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	1b52      	subs	r2, r2, r5
 8008660:	d420      	bmi.n	80086a4 <_malloc_r+0xd0>
 8008662:	2a0b      	cmp	r2, #11
 8008664:	d917      	bls.n	8008696 <_malloc_r+0xc2>
 8008666:	1961      	adds	r1, r4, r5
 8008668:	42a3      	cmp	r3, r4
 800866a:	6025      	str	r5, [r4, #0]
 800866c:	bf18      	it	ne
 800866e:	6059      	strne	r1, [r3, #4]
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	bf08      	it	eq
 8008674:	f8c8 1000 	streq.w	r1, [r8]
 8008678:	5162      	str	r2, [r4, r5]
 800867a:	604b      	str	r3, [r1, #4]
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f82f 	bl	80086e0 <__malloc_unlock>
 8008682:	f104 000b 	add.w	r0, r4, #11
 8008686:	1d23      	adds	r3, r4, #4
 8008688:	f020 0007 	bic.w	r0, r0, #7
 800868c:	1ac2      	subs	r2, r0, r3
 800868e:	bf1c      	itt	ne
 8008690:	1a1b      	subne	r3, r3, r0
 8008692:	50a3      	strne	r3, [r4, r2]
 8008694:	e7af      	b.n	80085f6 <_malloc_r+0x22>
 8008696:	6862      	ldr	r2, [r4, #4]
 8008698:	42a3      	cmp	r3, r4
 800869a:	bf0c      	ite	eq
 800869c:	f8c8 2000 	streq.w	r2, [r8]
 80086a0:	605a      	strne	r2, [r3, #4]
 80086a2:	e7eb      	b.n	800867c <_malloc_r+0xa8>
 80086a4:	4623      	mov	r3, r4
 80086a6:	6864      	ldr	r4, [r4, #4]
 80086a8:	e7ae      	b.n	8008608 <_malloc_r+0x34>
 80086aa:	463c      	mov	r4, r7
 80086ac:	687f      	ldr	r7, [r7, #4]
 80086ae:	e7b6      	b.n	800861e <_malloc_r+0x4a>
 80086b0:	461a      	mov	r2, r3
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	d1fb      	bne.n	80086b0 <_malloc_r+0xdc>
 80086b8:	2300      	movs	r3, #0
 80086ba:	6053      	str	r3, [r2, #4]
 80086bc:	e7de      	b.n	800867c <_malloc_r+0xa8>
 80086be:	230c      	movs	r3, #12
 80086c0:	6033      	str	r3, [r6, #0]
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 f80c 	bl	80086e0 <__malloc_unlock>
 80086c8:	e794      	b.n	80085f4 <_malloc_r+0x20>
 80086ca:	6005      	str	r5, [r0, #0]
 80086cc:	e7d6      	b.n	800867c <_malloc_r+0xa8>
 80086ce:	bf00      	nop
 80086d0:	2400042c 	.word	0x2400042c

080086d4 <__malloc_lock>:
 80086d4:	4801      	ldr	r0, [pc, #4]	@ (80086dc <__malloc_lock+0x8>)
 80086d6:	f7ff b926 	b.w	8007926 <__retarget_lock_acquire_recursive>
 80086da:	bf00      	nop
 80086dc:	24000424 	.word	0x24000424

080086e0 <__malloc_unlock>:
 80086e0:	4801      	ldr	r0, [pc, #4]	@ (80086e8 <__malloc_unlock+0x8>)
 80086e2:	f7ff b921 	b.w	8007928 <__retarget_lock_release_recursive>
 80086e6:	bf00      	nop
 80086e8:	24000424 	.word	0x24000424

080086ec <_Balloc>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	69c6      	ldr	r6, [r0, #28]
 80086f0:	4604      	mov	r4, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	b976      	cbnz	r6, 8008714 <_Balloc+0x28>
 80086f6:	2010      	movs	r0, #16
 80086f8:	f7ff ff42 	bl	8008580 <malloc>
 80086fc:	4602      	mov	r2, r0
 80086fe:	61e0      	str	r0, [r4, #28]
 8008700:	b920      	cbnz	r0, 800870c <_Balloc+0x20>
 8008702:	4b18      	ldr	r3, [pc, #96]	@ (8008764 <_Balloc+0x78>)
 8008704:	4818      	ldr	r0, [pc, #96]	@ (8008768 <_Balloc+0x7c>)
 8008706:	216b      	movs	r1, #107	@ 0x6b
 8008708:	f000 fe02 	bl	8009310 <__assert_func>
 800870c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008710:	6006      	str	r6, [r0, #0]
 8008712:	60c6      	str	r6, [r0, #12]
 8008714:	69e6      	ldr	r6, [r4, #28]
 8008716:	68f3      	ldr	r3, [r6, #12]
 8008718:	b183      	cbz	r3, 800873c <_Balloc+0x50>
 800871a:	69e3      	ldr	r3, [r4, #28]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008722:	b9b8      	cbnz	r0, 8008754 <_Balloc+0x68>
 8008724:	2101      	movs	r1, #1
 8008726:	fa01 f605 	lsl.w	r6, r1, r5
 800872a:	1d72      	adds	r2, r6, #5
 800872c:	0092      	lsls	r2, r2, #2
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fe0c 	bl	800934c <_calloc_r>
 8008734:	b160      	cbz	r0, 8008750 <_Balloc+0x64>
 8008736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800873a:	e00e      	b.n	800875a <_Balloc+0x6e>
 800873c:	2221      	movs	r2, #33	@ 0x21
 800873e:	2104      	movs	r1, #4
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fe03 	bl	800934c <_calloc_r>
 8008746:	69e3      	ldr	r3, [r4, #28]
 8008748:	60f0      	str	r0, [r6, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e4      	bne.n	800871a <_Balloc+0x2e>
 8008750:	2000      	movs	r0, #0
 8008752:	bd70      	pop	{r4, r5, r6, pc}
 8008754:	6802      	ldr	r2, [r0, #0]
 8008756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800875a:	2300      	movs	r3, #0
 800875c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008760:	e7f7      	b.n	8008752 <_Balloc+0x66>
 8008762:	bf00      	nop
 8008764:	08009689 	.word	0x08009689
 8008768:	08009709 	.word	0x08009709

0800876c <_Bfree>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	69c6      	ldr	r6, [r0, #28]
 8008770:	4605      	mov	r5, r0
 8008772:	460c      	mov	r4, r1
 8008774:	b976      	cbnz	r6, 8008794 <_Bfree+0x28>
 8008776:	2010      	movs	r0, #16
 8008778:	f7ff ff02 	bl	8008580 <malloc>
 800877c:	4602      	mov	r2, r0
 800877e:	61e8      	str	r0, [r5, #28]
 8008780:	b920      	cbnz	r0, 800878c <_Bfree+0x20>
 8008782:	4b09      	ldr	r3, [pc, #36]	@ (80087a8 <_Bfree+0x3c>)
 8008784:	4809      	ldr	r0, [pc, #36]	@ (80087ac <_Bfree+0x40>)
 8008786:	218f      	movs	r1, #143	@ 0x8f
 8008788:	f000 fdc2 	bl	8009310 <__assert_func>
 800878c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008790:	6006      	str	r6, [r0, #0]
 8008792:	60c6      	str	r6, [r0, #12]
 8008794:	b13c      	cbz	r4, 80087a6 <_Bfree+0x3a>
 8008796:	69eb      	ldr	r3, [r5, #28]
 8008798:	6862      	ldr	r2, [r4, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087a0:	6021      	str	r1, [r4, #0]
 80087a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	08009689 	.word	0x08009689
 80087ac:	08009709 	.word	0x08009709

080087b0 <__multadd>:
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	690d      	ldr	r5, [r1, #16]
 80087b6:	4607      	mov	r7, r0
 80087b8:	460c      	mov	r4, r1
 80087ba:	461e      	mov	r6, r3
 80087bc:	f101 0c14 	add.w	ip, r1, #20
 80087c0:	2000      	movs	r0, #0
 80087c2:	f8dc 3000 	ldr.w	r3, [ip]
 80087c6:	b299      	uxth	r1, r3
 80087c8:	fb02 6101 	mla	r1, r2, r1, r6
 80087cc:	0c1e      	lsrs	r6, r3, #16
 80087ce:	0c0b      	lsrs	r3, r1, #16
 80087d0:	fb02 3306 	mla	r3, r2, r6, r3
 80087d4:	b289      	uxth	r1, r1
 80087d6:	3001      	adds	r0, #1
 80087d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087dc:	4285      	cmp	r5, r0
 80087de:	f84c 1b04 	str.w	r1, [ip], #4
 80087e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087e6:	dcec      	bgt.n	80087c2 <__multadd+0x12>
 80087e8:	b30e      	cbz	r6, 800882e <__multadd+0x7e>
 80087ea:	68a3      	ldr	r3, [r4, #8]
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc19      	bgt.n	8008824 <__multadd+0x74>
 80087f0:	6861      	ldr	r1, [r4, #4]
 80087f2:	4638      	mov	r0, r7
 80087f4:	3101      	adds	r1, #1
 80087f6:	f7ff ff79 	bl	80086ec <_Balloc>
 80087fa:	4680      	mov	r8, r0
 80087fc:	b928      	cbnz	r0, 800880a <__multadd+0x5a>
 80087fe:	4602      	mov	r2, r0
 8008800:	4b0c      	ldr	r3, [pc, #48]	@ (8008834 <__multadd+0x84>)
 8008802:	480d      	ldr	r0, [pc, #52]	@ (8008838 <__multadd+0x88>)
 8008804:	21ba      	movs	r1, #186	@ 0xba
 8008806:	f000 fd83 	bl	8009310 <__assert_func>
 800880a:	6922      	ldr	r2, [r4, #16]
 800880c:	3202      	adds	r2, #2
 800880e:	f104 010c 	add.w	r1, r4, #12
 8008812:	0092      	lsls	r2, r2, #2
 8008814:	300c      	adds	r0, #12
 8008816:	f000 fd6d 	bl	80092f4 <memcpy>
 800881a:	4621      	mov	r1, r4
 800881c:	4638      	mov	r0, r7
 800881e:	f7ff ffa5 	bl	800876c <_Bfree>
 8008822:	4644      	mov	r4, r8
 8008824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008828:	3501      	adds	r5, #1
 800882a:	615e      	str	r6, [r3, #20]
 800882c:	6125      	str	r5, [r4, #16]
 800882e:	4620      	mov	r0, r4
 8008830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008834:	080096f8 	.word	0x080096f8
 8008838:	08009709 	.word	0x08009709

0800883c <__hi0bits>:
 800883c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008840:	4603      	mov	r3, r0
 8008842:	bf36      	itet	cc
 8008844:	0403      	lslcc	r3, r0, #16
 8008846:	2000      	movcs	r0, #0
 8008848:	2010      	movcc	r0, #16
 800884a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800884e:	bf3c      	itt	cc
 8008850:	021b      	lslcc	r3, r3, #8
 8008852:	3008      	addcc	r0, #8
 8008854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008858:	bf3c      	itt	cc
 800885a:	011b      	lslcc	r3, r3, #4
 800885c:	3004      	addcc	r0, #4
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008862:	bf3c      	itt	cc
 8008864:	009b      	lslcc	r3, r3, #2
 8008866:	3002      	addcc	r0, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	db05      	blt.n	8008878 <__hi0bits+0x3c>
 800886c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008870:	f100 0001 	add.w	r0, r0, #1
 8008874:	bf08      	it	eq
 8008876:	2020      	moveq	r0, #32
 8008878:	4770      	bx	lr

0800887a <__lo0bits>:
 800887a:	6803      	ldr	r3, [r0, #0]
 800887c:	4602      	mov	r2, r0
 800887e:	f013 0007 	ands.w	r0, r3, #7
 8008882:	d00b      	beq.n	800889c <__lo0bits+0x22>
 8008884:	07d9      	lsls	r1, r3, #31
 8008886:	d421      	bmi.n	80088cc <__lo0bits+0x52>
 8008888:	0798      	lsls	r0, r3, #30
 800888a:	bf49      	itett	mi
 800888c:	085b      	lsrmi	r3, r3, #1
 800888e:	089b      	lsrpl	r3, r3, #2
 8008890:	2001      	movmi	r0, #1
 8008892:	6013      	strmi	r3, [r2, #0]
 8008894:	bf5c      	itt	pl
 8008896:	6013      	strpl	r3, [r2, #0]
 8008898:	2002      	movpl	r0, #2
 800889a:	4770      	bx	lr
 800889c:	b299      	uxth	r1, r3
 800889e:	b909      	cbnz	r1, 80088a4 <__lo0bits+0x2a>
 80088a0:	0c1b      	lsrs	r3, r3, #16
 80088a2:	2010      	movs	r0, #16
 80088a4:	b2d9      	uxtb	r1, r3
 80088a6:	b909      	cbnz	r1, 80088ac <__lo0bits+0x32>
 80088a8:	3008      	adds	r0, #8
 80088aa:	0a1b      	lsrs	r3, r3, #8
 80088ac:	0719      	lsls	r1, r3, #28
 80088ae:	bf04      	itt	eq
 80088b0:	091b      	lsreq	r3, r3, #4
 80088b2:	3004      	addeq	r0, #4
 80088b4:	0799      	lsls	r1, r3, #30
 80088b6:	bf04      	itt	eq
 80088b8:	089b      	lsreq	r3, r3, #2
 80088ba:	3002      	addeq	r0, #2
 80088bc:	07d9      	lsls	r1, r3, #31
 80088be:	d403      	bmi.n	80088c8 <__lo0bits+0x4e>
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	f100 0001 	add.w	r0, r0, #1
 80088c6:	d003      	beq.n	80088d0 <__lo0bits+0x56>
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	4770      	bx	lr
 80088cc:	2000      	movs	r0, #0
 80088ce:	4770      	bx	lr
 80088d0:	2020      	movs	r0, #32
 80088d2:	4770      	bx	lr

080088d4 <__i2b>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	460c      	mov	r4, r1
 80088d8:	2101      	movs	r1, #1
 80088da:	f7ff ff07 	bl	80086ec <_Balloc>
 80088de:	4602      	mov	r2, r0
 80088e0:	b928      	cbnz	r0, 80088ee <__i2b+0x1a>
 80088e2:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <__i2b+0x24>)
 80088e4:	4805      	ldr	r0, [pc, #20]	@ (80088fc <__i2b+0x28>)
 80088e6:	f240 1145 	movw	r1, #325	@ 0x145
 80088ea:	f000 fd11 	bl	8009310 <__assert_func>
 80088ee:	2301      	movs	r3, #1
 80088f0:	6144      	str	r4, [r0, #20]
 80088f2:	6103      	str	r3, [r0, #16]
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	bf00      	nop
 80088f8:	080096f8 	.word	0x080096f8
 80088fc:	08009709 	.word	0x08009709

08008900 <__multiply>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	4614      	mov	r4, r2
 8008906:	690a      	ldr	r2, [r1, #16]
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	429a      	cmp	r2, r3
 800890c:	bfa8      	it	ge
 800890e:	4623      	movge	r3, r4
 8008910:	460f      	mov	r7, r1
 8008912:	bfa4      	itt	ge
 8008914:	460c      	movge	r4, r1
 8008916:	461f      	movge	r7, r3
 8008918:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800891c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008920:	68a3      	ldr	r3, [r4, #8]
 8008922:	6861      	ldr	r1, [r4, #4]
 8008924:	eb0a 0609 	add.w	r6, sl, r9
 8008928:	42b3      	cmp	r3, r6
 800892a:	b085      	sub	sp, #20
 800892c:	bfb8      	it	lt
 800892e:	3101      	addlt	r1, #1
 8008930:	f7ff fedc 	bl	80086ec <_Balloc>
 8008934:	b930      	cbnz	r0, 8008944 <__multiply+0x44>
 8008936:	4602      	mov	r2, r0
 8008938:	4b44      	ldr	r3, [pc, #272]	@ (8008a4c <__multiply+0x14c>)
 800893a:	4845      	ldr	r0, [pc, #276]	@ (8008a50 <__multiply+0x150>)
 800893c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008940:	f000 fce6 	bl	8009310 <__assert_func>
 8008944:	f100 0514 	add.w	r5, r0, #20
 8008948:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800894c:	462b      	mov	r3, r5
 800894e:	2200      	movs	r2, #0
 8008950:	4543      	cmp	r3, r8
 8008952:	d321      	bcc.n	8008998 <__multiply+0x98>
 8008954:	f107 0114 	add.w	r1, r7, #20
 8008958:	f104 0214 	add.w	r2, r4, #20
 800895c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008960:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008964:	9302      	str	r3, [sp, #8]
 8008966:	1b13      	subs	r3, r2, r4
 8008968:	3b15      	subs	r3, #21
 800896a:	f023 0303 	bic.w	r3, r3, #3
 800896e:	3304      	adds	r3, #4
 8008970:	f104 0715 	add.w	r7, r4, #21
 8008974:	42ba      	cmp	r2, r7
 8008976:	bf38      	it	cc
 8008978:	2304      	movcc	r3, #4
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	9103      	str	r1, [sp, #12]
 8008980:	428b      	cmp	r3, r1
 8008982:	d80c      	bhi.n	800899e <__multiply+0x9e>
 8008984:	2e00      	cmp	r6, #0
 8008986:	dd03      	ble.n	8008990 <__multiply+0x90>
 8008988:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800898c:	2b00      	cmp	r3, #0
 800898e:	d05b      	beq.n	8008a48 <__multiply+0x148>
 8008990:	6106      	str	r6, [r0, #16]
 8008992:	b005      	add	sp, #20
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	f843 2b04 	str.w	r2, [r3], #4
 800899c:	e7d8      	b.n	8008950 <__multiply+0x50>
 800899e:	f8b1 a000 	ldrh.w	sl, [r1]
 80089a2:	f1ba 0f00 	cmp.w	sl, #0
 80089a6:	d024      	beq.n	80089f2 <__multiply+0xf2>
 80089a8:	f104 0e14 	add.w	lr, r4, #20
 80089ac:	46a9      	mov	r9, r5
 80089ae:	f04f 0c00 	mov.w	ip, #0
 80089b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089b6:	f8d9 3000 	ldr.w	r3, [r9]
 80089ba:	fa1f fb87 	uxth.w	fp, r7
 80089be:	b29b      	uxth	r3, r3
 80089c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80089c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80089c8:	f8d9 7000 	ldr.w	r7, [r9]
 80089cc:	4463      	add	r3, ip
 80089ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80089d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80089da:	b29b      	uxth	r3, r3
 80089dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089e0:	4572      	cmp	r2, lr
 80089e2:	f849 3b04 	str.w	r3, [r9], #4
 80089e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089ea:	d8e2      	bhi.n	80089b2 <__multiply+0xb2>
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	f845 c003 	str.w	ip, [r5, r3]
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089f8:	3104      	adds	r1, #4
 80089fa:	f1b9 0f00 	cmp.w	r9, #0
 80089fe:	d021      	beq.n	8008a44 <__multiply+0x144>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	f104 0c14 	add.w	ip, r4, #20
 8008a06:	46ae      	mov	lr, r5
 8008a08:	f04f 0a00 	mov.w	sl, #0
 8008a0c:	f8bc b000 	ldrh.w	fp, [ip]
 8008a10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a14:	fb09 770b 	mla	r7, r9, fp, r7
 8008a18:	4457      	add	r7, sl
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a20:	f84e 3b04 	str.w	r3, [lr], #4
 8008a24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a2c:	f8be 3000 	ldrh.w	r3, [lr]
 8008a30:	fb09 330a 	mla	r3, r9, sl, r3
 8008a34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a38:	4562      	cmp	r2, ip
 8008a3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a3e:	d8e5      	bhi.n	8008a0c <__multiply+0x10c>
 8008a40:	9f01      	ldr	r7, [sp, #4]
 8008a42:	51eb      	str	r3, [r5, r7]
 8008a44:	3504      	adds	r5, #4
 8008a46:	e799      	b.n	800897c <__multiply+0x7c>
 8008a48:	3e01      	subs	r6, #1
 8008a4a:	e79b      	b.n	8008984 <__multiply+0x84>
 8008a4c:	080096f8 	.word	0x080096f8
 8008a50:	08009709 	.word	0x08009709

08008a54 <__pow5mult>:
 8008a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a58:	4615      	mov	r5, r2
 8008a5a:	f012 0203 	ands.w	r2, r2, #3
 8008a5e:	4607      	mov	r7, r0
 8008a60:	460e      	mov	r6, r1
 8008a62:	d007      	beq.n	8008a74 <__pow5mult+0x20>
 8008a64:	4c25      	ldr	r4, [pc, #148]	@ (8008afc <__pow5mult+0xa8>)
 8008a66:	3a01      	subs	r2, #1
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a6e:	f7ff fe9f 	bl	80087b0 <__multadd>
 8008a72:	4606      	mov	r6, r0
 8008a74:	10ad      	asrs	r5, r5, #2
 8008a76:	d03d      	beq.n	8008af4 <__pow5mult+0xa0>
 8008a78:	69fc      	ldr	r4, [r7, #28]
 8008a7a:	b97c      	cbnz	r4, 8008a9c <__pow5mult+0x48>
 8008a7c:	2010      	movs	r0, #16
 8008a7e:	f7ff fd7f 	bl	8008580 <malloc>
 8008a82:	4602      	mov	r2, r0
 8008a84:	61f8      	str	r0, [r7, #28]
 8008a86:	b928      	cbnz	r0, 8008a94 <__pow5mult+0x40>
 8008a88:	4b1d      	ldr	r3, [pc, #116]	@ (8008b00 <__pow5mult+0xac>)
 8008a8a:	481e      	ldr	r0, [pc, #120]	@ (8008b04 <__pow5mult+0xb0>)
 8008a8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a90:	f000 fc3e 	bl	8009310 <__assert_func>
 8008a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a98:	6004      	str	r4, [r0, #0]
 8008a9a:	60c4      	str	r4, [r0, #12]
 8008a9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aa4:	b94c      	cbnz	r4, 8008aba <__pow5mult+0x66>
 8008aa6:	f240 2171 	movw	r1, #625	@ 0x271
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7ff ff12 	bl	80088d4 <__i2b>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	6003      	str	r3, [r0, #0]
 8008aba:	f04f 0900 	mov.w	r9, #0
 8008abe:	07eb      	lsls	r3, r5, #31
 8008ac0:	d50a      	bpl.n	8008ad8 <__pow5mult+0x84>
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f7ff ff1a 	bl	8008900 <__multiply>
 8008acc:	4631      	mov	r1, r6
 8008ace:	4680      	mov	r8, r0
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff fe4b 	bl	800876c <_Bfree>
 8008ad6:	4646      	mov	r6, r8
 8008ad8:	106d      	asrs	r5, r5, #1
 8008ada:	d00b      	beq.n	8008af4 <__pow5mult+0xa0>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	b938      	cbnz	r0, 8008af0 <__pow5mult+0x9c>
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff ff0b 	bl	8008900 <__multiply>
 8008aea:	6020      	str	r0, [r4, #0]
 8008aec:	f8c0 9000 	str.w	r9, [r0]
 8008af0:	4604      	mov	r4, r0
 8008af2:	e7e4      	b.n	8008abe <__pow5mult+0x6a>
 8008af4:	4630      	mov	r0, r6
 8008af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afa:	bf00      	nop
 8008afc:	08009764 	.word	0x08009764
 8008b00:	08009689 	.word	0x08009689
 8008b04:	08009709 	.word	0x08009709

08008b08 <__lshift>:
 8008b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	6849      	ldr	r1, [r1, #4]
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	4607      	mov	r7, r0
 8008b1a:	4691      	mov	r9, r2
 8008b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b20:	f108 0601 	add.w	r6, r8, #1
 8008b24:	42b3      	cmp	r3, r6
 8008b26:	db0b      	blt.n	8008b40 <__lshift+0x38>
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f7ff fddf 	bl	80086ec <_Balloc>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	b948      	cbnz	r0, 8008b46 <__lshift+0x3e>
 8008b32:	4602      	mov	r2, r0
 8008b34:	4b28      	ldr	r3, [pc, #160]	@ (8008bd8 <__lshift+0xd0>)
 8008b36:	4829      	ldr	r0, [pc, #164]	@ (8008bdc <__lshift+0xd4>)
 8008b38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b3c:	f000 fbe8 	bl	8009310 <__assert_func>
 8008b40:	3101      	adds	r1, #1
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	e7ee      	b.n	8008b24 <__lshift+0x1c>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f100 0114 	add.w	r1, r0, #20
 8008b4c:	f100 0210 	add.w	r2, r0, #16
 8008b50:	4618      	mov	r0, r3
 8008b52:	4553      	cmp	r3, sl
 8008b54:	db33      	blt.n	8008bbe <__lshift+0xb6>
 8008b56:	6920      	ldr	r0, [r4, #16]
 8008b58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b5c:	f104 0314 	add.w	r3, r4, #20
 8008b60:	f019 091f 	ands.w	r9, r9, #31
 8008b64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b6c:	d02b      	beq.n	8008bc6 <__lshift+0xbe>
 8008b6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b72:	468a      	mov	sl, r1
 8008b74:	2200      	movs	r2, #0
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	fa00 f009 	lsl.w	r0, r0, r9
 8008b7c:	4310      	orrs	r0, r2
 8008b7e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b86:	459c      	cmp	ip, r3
 8008b88:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b8c:	d8f3      	bhi.n	8008b76 <__lshift+0x6e>
 8008b8e:	ebac 0304 	sub.w	r3, ip, r4
 8008b92:	3b15      	subs	r3, #21
 8008b94:	f023 0303 	bic.w	r3, r3, #3
 8008b98:	3304      	adds	r3, #4
 8008b9a:	f104 0015 	add.w	r0, r4, #21
 8008b9e:	4584      	cmp	ip, r0
 8008ba0:	bf38      	it	cc
 8008ba2:	2304      	movcc	r3, #4
 8008ba4:	50ca      	str	r2, [r1, r3]
 8008ba6:	b10a      	cbz	r2, 8008bac <__lshift+0xa4>
 8008ba8:	f108 0602 	add.w	r6, r8, #2
 8008bac:	3e01      	subs	r6, #1
 8008bae:	4638      	mov	r0, r7
 8008bb0:	612e      	str	r6, [r5, #16]
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	f7ff fdda 	bl	800876c <_Bfree>
 8008bb8:	4628      	mov	r0, r5
 8008bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	e7c5      	b.n	8008b52 <__lshift+0x4a>
 8008bc6:	3904      	subs	r1, #4
 8008bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bd0:	459c      	cmp	ip, r3
 8008bd2:	d8f9      	bhi.n	8008bc8 <__lshift+0xc0>
 8008bd4:	e7ea      	b.n	8008bac <__lshift+0xa4>
 8008bd6:	bf00      	nop
 8008bd8:	080096f8 	.word	0x080096f8
 8008bdc:	08009709 	.word	0x08009709

08008be0 <__mcmp>:
 8008be0:	690a      	ldr	r2, [r1, #16]
 8008be2:	4603      	mov	r3, r0
 8008be4:	6900      	ldr	r0, [r0, #16]
 8008be6:	1a80      	subs	r0, r0, r2
 8008be8:	b530      	push	{r4, r5, lr}
 8008bea:	d10e      	bne.n	8008c0a <__mcmp+0x2a>
 8008bec:	3314      	adds	r3, #20
 8008bee:	3114      	adds	r1, #20
 8008bf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c00:	4295      	cmp	r5, r2
 8008c02:	d003      	beq.n	8008c0c <__mcmp+0x2c>
 8008c04:	d205      	bcs.n	8008c12 <__mcmp+0x32>
 8008c06:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0a:	bd30      	pop	{r4, r5, pc}
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d3f3      	bcc.n	8008bf8 <__mcmp+0x18>
 8008c10:	e7fb      	b.n	8008c0a <__mcmp+0x2a>
 8008c12:	2001      	movs	r0, #1
 8008c14:	e7f9      	b.n	8008c0a <__mcmp+0x2a>
	...

08008c18 <__mdiff>:
 8008c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	4689      	mov	r9, r1
 8008c1e:	4606      	mov	r6, r0
 8008c20:	4611      	mov	r1, r2
 8008c22:	4648      	mov	r0, r9
 8008c24:	4614      	mov	r4, r2
 8008c26:	f7ff ffdb 	bl	8008be0 <__mcmp>
 8008c2a:	1e05      	subs	r5, r0, #0
 8008c2c:	d112      	bne.n	8008c54 <__mdiff+0x3c>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff fd5b 	bl	80086ec <_Balloc>
 8008c36:	4602      	mov	r2, r0
 8008c38:	b928      	cbnz	r0, 8008c46 <__mdiff+0x2e>
 8008c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8008d38 <__mdiff+0x120>)
 8008c3c:	f240 2137 	movw	r1, #567	@ 0x237
 8008c40:	483e      	ldr	r0, [pc, #248]	@ (8008d3c <__mdiff+0x124>)
 8008c42:	f000 fb65 	bl	8009310 <__assert_func>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	b003      	add	sp, #12
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	bfbc      	itt	lt
 8008c56:	464b      	movlt	r3, r9
 8008c58:	46a1      	movlt	r9, r4
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c60:	bfba      	itte	lt
 8008c62:	461c      	movlt	r4, r3
 8008c64:	2501      	movlt	r5, #1
 8008c66:	2500      	movge	r5, #0
 8008c68:	f7ff fd40 	bl	80086ec <_Balloc>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	b918      	cbnz	r0, 8008c78 <__mdiff+0x60>
 8008c70:	4b31      	ldr	r3, [pc, #196]	@ (8008d38 <__mdiff+0x120>)
 8008c72:	f240 2145 	movw	r1, #581	@ 0x245
 8008c76:	e7e3      	b.n	8008c40 <__mdiff+0x28>
 8008c78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c7c:	6926      	ldr	r6, [r4, #16]
 8008c7e:	60c5      	str	r5, [r0, #12]
 8008c80:	f109 0310 	add.w	r3, r9, #16
 8008c84:	f109 0514 	add.w	r5, r9, #20
 8008c88:	f104 0e14 	add.w	lr, r4, #20
 8008c8c:	f100 0b14 	add.w	fp, r0, #20
 8008c90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	46d9      	mov	r9, fp
 8008c9c:	f04f 0c00 	mov.w	ip, #0
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ca6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	fa1f f38a 	uxth.w	r3, sl
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	b283      	uxth	r3, r0
 8008cb4:	1acb      	subs	r3, r1, r3
 8008cb6:	0c00      	lsrs	r0, r0, #16
 8008cb8:	4463      	add	r3, ip
 8008cba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008cbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008cc8:	4576      	cmp	r6, lr
 8008cca:	f849 3b04 	str.w	r3, [r9], #4
 8008cce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cd2:	d8e5      	bhi.n	8008ca0 <__mdiff+0x88>
 8008cd4:	1b33      	subs	r3, r6, r4
 8008cd6:	3b15      	subs	r3, #21
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	3415      	adds	r4, #21
 8008cde:	3304      	adds	r3, #4
 8008ce0:	42a6      	cmp	r6, r4
 8008ce2:	bf38      	it	cc
 8008ce4:	2304      	movcc	r3, #4
 8008ce6:	441d      	add	r5, r3
 8008ce8:	445b      	add	r3, fp
 8008cea:	461e      	mov	r6, r3
 8008cec:	462c      	mov	r4, r5
 8008cee:	4544      	cmp	r4, r8
 8008cf0:	d30e      	bcc.n	8008d10 <__mdiff+0xf8>
 8008cf2:	f108 0103 	add.w	r1, r8, #3
 8008cf6:	1b49      	subs	r1, r1, r5
 8008cf8:	f021 0103 	bic.w	r1, r1, #3
 8008cfc:	3d03      	subs	r5, #3
 8008cfe:	45a8      	cmp	r8, r5
 8008d00:	bf38      	it	cc
 8008d02:	2100      	movcc	r1, #0
 8008d04:	440b      	add	r3, r1
 8008d06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d0a:	b191      	cbz	r1, 8008d32 <__mdiff+0x11a>
 8008d0c:	6117      	str	r7, [r2, #16]
 8008d0e:	e79d      	b.n	8008c4c <__mdiff+0x34>
 8008d10:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d14:	46e6      	mov	lr, ip
 8008d16:	0c08      	lsrs	r0, r1, #16
 8008d18:	fa1c fc81 	uxtah	ip, ip, r1
 8008d1c:	4471      	add	r1, lr
 8008d1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d22:	b289      	uxth	r1, r1
 8008d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d28:	f846 1b04 	str.w	r1, [r6], #4
 8008d2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d30:	e7dd      	b.n	8008cee <__mdiff+0xd6>
 8008d32:	3f01      	subs	r7, #1
 8008d34:	e7e7      	b.n	8008d06 <__mdiff+0xee>
 8008d36:	bf00      	nop
 8008d38:	080096f8 	.word	0x080096f8
 8008d3c:	08009709 	.word	0x08009709

08008d40 <__d2b>:
 8008d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d44:	460f      	mov	r7, r1
 8008d46:	2101      	movs	r1, #1
 8008d48:	ec59 8b10 	vmov	r8, r9, d0
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	f7ff fccd 	bl	80086ec <_Balloc>
 8008d52:	4604      	mov	r4, r0
 8008d54:	b930      	cbnz	r0, 8008d64 <__d2b+0x24>
 8008d56:	4602      	mov	r2, r0
 8008d58:	4b23      	ldr	r3, [pc, #140]	@ (8008de8 <__d2b+0xa8>)
 8008d5a:	4824      	ldr	r0, [pc, #144]	@ (8008dec <__d2b+0xac>)
 8008d5c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d60:	f000 fad6 	bl	8009310 <__assert_func>
 8008d64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d6c:	b10d      	cbz	r5, 8008d72 <__d2b+0x32>
 8008d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f1b8 0300 	subs.w	r3, r8, #0
 8008d78:	d023      	beq.n	8008dc2 <__d2b+0x82>
 8008d7a:	4668      	mov	r0, sp
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	f7ff fd7c 	bl	800887a <__lo0bits>
 8008d82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d86:	b1d0      	cbz	r0, 8008dbe <__d2b+0x7e>
 8008d88:	f1c0 0320 	rsb	r3, r0, #32
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	430b      	orrs	r3, r1
 8008d92:	40c2      	lsrs	r2, r0
 8008d94:	6163      	str	r3, [r4, #20]
 8008d96:	9201      	str	r2, [sp, #4]
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	61a3      	str	r3, [r4, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bf0c      	ite	eq
 8008da0:	2201      	moveq	r2, #1
 8008da2:	2202      	movne	r2, #2
 8008da4:	6122      	str	r2, [r4, #16]
 8008da6:	b1a5      	cbz	r5, 8008dd2 <__d2b+0x92>
 8008da8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008dac:	4405      	add	r5, r0
 8008dae:	603d      	str	r5, [r7, #0]
 8008db0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008db4:	6030      	str	r0, [r6, #0]
 8008db6:	4620      	mov	r0, r4
 8008db8:	b003      	add	sp, #12
 8008dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dbe:	6161      	str	r1, [r4, #20]
 8008dc0:	e7ea      	b.n	8008d98 <__d2b+0x58>
 8008dc2:	a801      	add	r0, sp, #4
 8008dc4:	f7ff fd59 	bl	800887a <__lo0bits>
 8008dc8:	9b01      	ldr	r3, [sp, #4]
 8008dca:	6163      	str	r3, [r4, #20]
 8008dcc:	3020      	adds	r0, #32
 8008dce:	2201      	movs	r2, #1
 8008dd0:	e7e8      	b.n	8008da4 <__d2b+0x64>
 8008dd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dda:	6038      	str	r0, [r7, #0]
 8008ddc:	6918      	ldr	r0, [r3, #16]
 8008dde:	f7ff fd2d 	bl	800883c <__hi0bits>
 8008de2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008de6:	e7e5      	b.n	8008db4 <__d2b+0x74>
 8008de8:	080096f8 	.word	0x080096f8
 8008dec:	08009709 	.word	0x08009709

08008df0 <__sfputc_r>:
 8008df0:	6893      	ldr	r3, [r2, #8]
 8008df2:	3b01      	subs	r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	b410      	push	{r4}
 8008df8:	6093      	str	r3, [r2, #8]
 8008dfa:	da08      	bge.n	8008e0e <__sfputc_r+0x1e>
 8008dfc:	6994      	ldr	r4, [r2, #24]
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	db01      	blt.n	8008e06 <__sfputc_r+0x16>
 8008e02:	290a      	cmp	r1, #10
 8008e04:	d103      	bne.n	8008e0e <__sfputc_r+0x1e>
 8008e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e0a:	f7fe bc7a 	b.w	8007702 <__swbuf_r>
 8008e0e:	6813      	ldr	r3, [r2, #0]
 8008e10:	1c58      	adds	r0, r3, #1
 8008e12:	6010      	str	r0, [r2, #0]
 8008e14:	7019      	strb	r1, [r3, #0]
 8008e16:	4608      	mov	r0, r1
 8008e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <__sfputs_r>:
 8008e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e20:	4606      	mov	r6, r0
 8008e22:	460f      	mov	r7, r1
 8008e24:	4614      	mov	r4, r2
 8008e26:	18d5      	adds	r5, r2, r3
 8008e28:	42ac      	cmp	r4, r5
 8008e2a:	d101      	bne.n	8008e30 <__sfputs_r+0x12>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e007      	b.n	8008e40 <__sfputs_r+0x22>
 8008e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e34:	463a      	mov	r2, r7
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff ffda 	bl	8008df0 <__sfputc_r>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d1f3      	bne.n	8008e28 <__sfputs_r+0xa>
 8008e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e44 <_vfiprintf_r>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	460d      	mov	r5, r1
 8008e4a:	b09d      	sub	sp, #116	@ 0x74
 8008e4c:	4614      	mov	r4, r2
 8008e4e:	4698      	mov	r8, r3
 8008e50:	4606      	mov	r6, r0
 8008e52:	b118      	cbz	r0, 8008e5c <_vfiprintf_r+0x18>
 8008e54:	6a03      	ldr	r3, [r0, #32]
 8008e56:	b90b      	cbnz	r3, 8008e5c <_vfiprintf_r+0x18>
 8008e58:	f7fe fb6a 	bl	8007530 <__sinit>
 8008e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e5e:	07d9      	lsls	r1, r3, #31
 8008e60:	d405      	bmi.n	8008e6e <_vfiprintf_r+0x2a>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	059a      	lsls	r2, r3, #22
 8008e66:	d402      	bmi.n	8008e6e <_vfiprintf_r+0x2a>
 8008e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e6a:	f7fe fd5c 	bl	8007926 <__retarget_lock_acquire_recursive>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	071b      	lsls	r3, r3, #28
 8008e72:	d501      	bpl.n	8008e78 <_vfiprintf_r+0x34>
 8008e74:	692b      	ldr	r3, [r5, #16]
 8008e76:	b99b      	cbnz	r3, 8008ea0 <_vfiprintf_r+0x5c>
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7fe fc80 	bl	8007780 <__swsetup_r>
 8008e80:	b170      	cbz	r0, 8008ea0 <_vfiprintf_r+0x5c>
 8008e82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e84:	07dc      	lsls	r4, r3, #31
 8008e86:	d504      	bpl.n	8008e92 <_vfiprintf_r+0x4e>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	b01d      	add	sp, #116	@ 0x74
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	0598      	lsls	r0, r3, #22
 8008e96:	d4f7      	bmi.n	8008e88 <_vfiprintf_r+0x44>
 8008e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e9a:	f7fe fd45 	bl	8007928 <__retarget_lock_release_recursive>
 8008e9e:	e7f3      	b.n	8008e88 <_vfiprintf_r+0x44>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea4:	2320      	movs	r3, #32
 8008ea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eae:	2330      	movs	r3, #48	@ 0x30
 8008eb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009060 <_vfiprintf_r+0x21c>
 8008eb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eb8:	f04f 0901 	mov.w	r9, #1
 8008ebc:	4623      	mov	r3, r4
 8008ebe:	469a      	mov	sl, r3
 8008ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec4:	b10a      	cbz	r2, 8008eca <_vfiprintf_r+0x86>
 8008ec6:	2a25      	cmp	r2, #37	@ 0x25
 8008ec8:	d1f9      	bne.n	8008ebe <_vfiprintf_r+0x7a>
 8008eca:	ebba 0b04 	subs.w	fp, sl, r4
 8008ece:	d00b      	beq.n	8008ee8 <_vfiprintf_r+0xa4>
 8008ed0:	465b      	mov	r3, fp
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ffa1 	bl	8008e1e <__sfputs_r>
 8008edc:	3001      	adds	r0, #1
 8008ede:	f000 80a7 	beq.w	8009030 <_vfiprintf_r+0x1ec>
 8008ee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee4:	445a      	add	r2, fp
 8008ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 809f 	beq.w	8009030 <_vfiprintf_r+0x1ec>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efc:	f10a 0a01 	add.w	sl, sl, #1
 8008f00:	9304      	str	r3, [sp, #16]
 8008f02:	9307      	str	r3, [sp, #28]
 8008f04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f08:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f0a:	4654      	mov	r4, sl
 8008f0c:	2205      	movs	r2, #5
 8008f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f12:	4853      	ldr	r0, [pc, #332]	@ (8009060 <_vfiprintf_r+0x21c>)
 8008f14:	f7f7 f9fc 	bl	8000310 <memchr>
 8008f18:	9a04      	ldr	r2, [sp, #16]
 8008f1a:	b9d8      	cbnz	r0, 8008f54 <_vfiprintf_r+0x110>
 8008f1c:	06d1      	lsls	r1, r2, #27
 8008f1e:	bf44      	itt	mi
 8008f20:	2320      	movmi	r3, #32
 8008f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f26:	0713      	lsls	r3, r2, #28
 8008f28:	bf44      	itt	mi
 8008f2a:	232b      	movmi	r3, #43	@ 0x2b
 8008f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f30:	f89a 3000 	ldrb.w	r3, [sl]
 8008f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f36:	d015      	beq.n	8008f64 <_vfiprintf_r+0x120>
 8008f38:	9a07      	ldr	r2, [sp, #28]
 8008f3a:	4654      	mov	r4, sl
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f04f 0c0a 	mov.w	ip, #10
 8008f42:	4621      	mov	r1, r4
 8008f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f48:	3b30      	subs	r3, #48	@ 0x30
 8008f4a:	2b09      	cmp	r3, #9
 8008f4c:	d94b      	bls.n	8008fe6 <_vfiprintf_r+0x1a2>
 8008f4e:	b1b0      	cbz	r0, 8008f7e <_vfiprintf_r+0x13a>
 8008f50:	9207      	str	r2, [sp, #28]
 8008f52:	e014      	b.n	8008f7e <_vfiprintf_r+0x13a>
 8008f54:	eba0 0308 	sub.w	r3, r0, r8
 8008f58:	fa09 f303 	lsl.w	r3, r9, r3
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	46a2      	mov	sl, r4
 8008f62:	e7d2      	b.n	8008f0a <_vfiprintf_r+0xc6>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	1d19      	adds	r1, r3, #4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	9103      	str	r1, [sp, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	bfbb      	ittet	lt
 8008f70:	425b      	neglt	r3, r3
 8008f72:	f042 0202 	orrlt.w	r2, r2, #2
 8008f76:	9307      	strge	r3, [sp, #28]
 8008f78:	9307      	strlt	r3, [sp, #28]
 8008f7a:	bfb8      	it	lt
 8008f7c:	9204      	strlt	r2, [sp, #16]
 8008f7e:	7823      	ldrb	r3, [r4, #0]
 8008f80:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f82:	d10a      	bne.n	8008f9a <_vfiprintf_r+0x156>
 8008f84:	7863      	ldrb	r3, [r4, #1]
 8008f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f88:	d132      	bne.n	8008ff0 <_vfiprintf_r+0x1ac>
 8008f8a:	9b03      	ldr	r3, [sp, #12]
 8008f8c:	1d1a      	adds	r2, r3, #4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	9203      	str	r2, [sp, #12]
 8008f92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f96:	3402      	adds	r4, #2
 8008f98:	9305      	str	r3, [sp, #20]
 8008f9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009070 <_vfiprintf_r+0x22c>
 8008f9e:	7821      	ldrb	r1, [r4, #0]
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	f7f7 f9b4 	bl	8000310 <memchr>
 8008fa8:	b138      	cbz	r0, 8008fba <_vfiprintf_r+0x176>
 8008faa:	9b04      	ldr	r3, [sp, #16]
 8008fac:	eba0 000a 	sub.w	r0, r0, sl
 8008fb0:	2240      	movs	r2, #64	@ 0x40
 8008fb2:	4082      	lsls	r2, r0
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	3401      	adds	r4, #1
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbe:	4829      	ldr	r0, [pc, #164]	@ (8009064 <_vfiprintf_r+0x220>)
 8008fc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fc4:	2206      	movs	r2, #6
 8008fc6:	f7f7 f9a3 	bl	8000310 <memchr>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d03f      	beq.n	800904e <_vfiprintf_r+0x20a>
 8008fce:	4b26      	ldr	r3, [pc, #152]	@ (8009068 <_vfiprintf_r+0x224>)
 8008fd0:	bb1b      	cbnz	r3, 800901a <_vfiprintf_r+0x1d6>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	3307      	adds	r3, #7
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	3308      	adds	r3, #8
 8008fdc:	9303      	str	r3, [sp, #12]
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	443b      	add	r3, r7
 8008fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe4:	e76a      	b.n	8008ebc <_vfiprintf_r+0x78>
 8008fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fea:	460c      	mov	r4, r1
 8008fec:	2001      	movs	r0, #1
 8008fee:	e7a8      	b.n	8008f42 <_vfiprintf_r+0xfe>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f04f 0c0a 	mov.w	ip, #10
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009002:	3a30      	subs	r2, #48	@ 0x30
 8009004:	2a09      	cmp	r2, #9
 8009006:	d903      	bls.n	8009010 <_vfiprintf_r+0x1cc>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0c6      	beq.n	8008f9a <_vfiprintf_r+0x156>
 800900c:	9105      	str	r1, [sp, #20]
 800900e:	e7c4      	b.n	8008f9a <_vfiprintf_r+0x156>
 8009010:	fb0c 2101 	mla	r1, ip, r1, r2
 8009014:	4604      	mov	r4, r0
 8009016:	2301      	movs	r3, #1
 8009018:	e7f0      	b.n	8008ffc <_vfiprintf_r+0x1b8>
 800901a:	ab03      	add	r3, sp, #12
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	462a      	mov	r2, r5
 8009020:	4b12      	ldr	r3, [pc, #72]	@ (800906c <_vfiprintf_r+0x228>)
 8009022:	a904      	add	r1, sp, #16
 8009024:	4630      	mov	r0, r6
 8009026:	f7fd fe4f 	bl	8006cc8 <_printf_float>
 800902a:	4607      	mov	r7, r0
 800902c:	1c78      	adds	r0, r7, #1
 800902e:	d1d6      	bne.n	8008fde <_vfiprintf_r+0x19a>
 8009030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009032:	07d9      	lsls	r1, r3, #31
 8009034:	d405      	bmi.n	8009042 <_vfiprintf_r+0x1fe>
 8009036:	89ab      	ldrh	r3, [r5, #12]
 8009038:	059a      	lsls	r2, r3, #22
 800903a:	d402      	bmi.n	8009042 <_vfiprintf_r+0x1fe>
 800903c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800903e:	f7fe fc73 	bl	8007928 <__retarget_lock_release_recursive>
 8009042:	89ab      	ldrh	r3, [r5, #12]
 8009044:	065b      	lsls	r3, r3, #25
 8009046:	f53f af1f 	bmi.w	8008e88 <_vfiprintf_r+0x44>
 800904a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800904c:	e71e      	b.n	8008e8c <_vfiprintf_r+0x48>
 800904e:	ab03      	add	r3, sp, #12
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	462a      	mov	r2, r5
 8009054:	4b05      	ldr	r3, [pc, #20]	@ (800906c <_vfiprintf_r+0x228>)
 8009056:	a904      	add	r1, sp, #16
 8009058:	4630      	mov	r0, r6
 800905a:	f7fe f8bd 	bl	80071d8 <_printf_i>
 800905e:	e7e4      	b.n	800902a <_vfiprintf_r+0x1e6>
 8009060:	08009860 	.word	0x08009860
 8009064:	0800986a 	.word	0x0800986a
 8009068:	08006cc9 	.word	0x08006cc9
 800906c:	08008e1f 	.word	0x08008e1f
 8009070:	08009866 	.word	0x08009866

08009074 <__sflush_r>:
 8009074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	0716      	lsls	r6, r2, #28
 800907e:	4605      	mov	r5, r0
 8009080:	460c      	mov	r4, r1
 8009082:	d454      	bmi.n	800912e <__sflush_r+0xba>
 8009084:	684b      	ldr	r3, [r1, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	dc02      	bgt.n	8009090 <__sflush_r+0x1c>
 800908a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	dd48      	ble.n	8009122 <__sflush_r+0xae>
 8009090:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009092:	2e00      	cmp	r6, #0
 8009094:	d045      	beq.n	8009122 <__sflush_r+0xae>
 8009096:	2300      	movs	r3, #0
 8009098:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800909c:	682f      	ldr	r7, [r5, #0]
 800909e:	6a21      	ldr	r1, [r4, #32]
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	d030      	beq.n	8009106 <__sflush_r+0x92>
 80090a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	0759      	lsls	r1, r3, #29
 80090aa:	d505      	bpl.n	80090b8 <__sflush_r+0x44>
 80090ac:	6863      	ldr	r3, [r4, #4]
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090b2:	b10b      	cbz	r3, 80090b8 <__sflush_r+0x44>
 80090b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090b6:	1ad2      	subs	r2, r2, r3
 80090b8:	2300      	movs	r3, #0
 80090ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090bc:	6a21      	ldr	r1, [r4, #32]
 80090be:	4628      	mov	r0, r5
 80090c0:	47b0      	blx	r6
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	d106      	bne.n	80090d6 <__sflush_r+0x62>
 80090c8:	6829      	ldr	r1, [r5, #0]
 80090ca:	291d      	cmp	r1, #29
 80090cc:	d82b      	bhi.n	8009126 <__sflush_r+0xb2>
 80090ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009178 <__sflush_r+0x104>)
 80090d0:	410a      	asrs	r2, r1
 80090d2:	07d6      	lsls	r6, r2, #31
 80090d4:	d427      	bmi.n	8009126 <__sflush_r+0xb2>
 80090d6:	2200      	movs	r2, #0
 80090d8:	6062      	str	r2, [r4, #4]
 80090da:	04d9      	lsls	r1, r3, #19
 80090dc:	6922      	ldr	r2, [r4, #16]
 80090de:	6022      	str	r2, [r4, #0]
 80090e0:	d504      	bpl.n	80090ec <__sflush_r+0x78>
 80090e2:	1c42      	adds	r2, r0, #1
 80090e4:	d101      	bne.n	80090ea <__sflush_r+0x76>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	b903      	cbnz	r3, 80090ec <__sflush_r+0x78>
 80090ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80090ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090ee:	602f      	str	r7, [r5, #0]
 80090f0:	b1b9      	cbz	r1, 8009122 <__sflush_r+0xae>
 80090f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090f6:	4299      	cmp	r1, r3
 80090f8:	d002      	beq.n	8009100 <__sflush_r+0x8c>
 80090fa:	4628      	mov	r0, r5
 80090fc:	f7ff f9f6 	bl	80084ec <_free_r>
 8009100:	2300      	movs	r3, #0
 8009102:	6363      	str	r3, [r4, #52]	@ 0x34
 8009104:	e00d      	b.n	8009122 <__sflush_r+0xae>
 8009106:	2301      	movs	r3, #1
 8009108:	4628      	mov	r0, r5
 800910a:	47b0      	blx	r6
 800910c:	4602      	mov	r2, r0
 800910e:	1c50      	adds	r0, r2, #1
 8009110:	d1c9      	bne.n	80090a6 <__sflush_r+0x32>
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0c6      	beq.n	80090a6 <__sflush_r+0x32>
 8009118:	2b1d      	cmp	r3, #29
 800911a:	d001      	beq.n	8009120 <__sflush_r+0xac>
 800911c:	2b16      	cmp	r3, #22
 800911e:	d11e      	bne.n	800915e <__sflush_r+0xea>
 8009120:	602f      	str	r7, [r5, #0]
 8009122:	2000      	movs	r0, #0
 8009124:	e022      	b.n	800916c <__sflush_r+0xf8>
 8009126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800912a:	b21b      	sxth	r3, r3
 800912c:	e01b      	b.n	8009166 <__sflush_r+0xf2>
 800912e:	690f      	ldr	r7, [r1, #16]
 8009130:	2f00      	cmp	r7, #0
 8009132:	d0f6      	beq.n	8009122 <__sflush_r+0xae>
 8009134:	0793      	lsls	r3, r2, #30
 8009136:	680e      	ldr	r6, [r1, #0]
 8009138:	bf08      	it	eq
 800913a:	694b      	ldreq	r3, [r1, #20]
 800913c:	600f      	str	r7, [r1, #0]
 800913e:	bf18      	it	ne
 8009140:	2300      	movne	r3, #0
 8009142:	eba6 0807 	sub.w	r8, r6, r7
 8009146:	608b      	str	r3, [r1, #8]
 8009148:	f1b8 0f00 	cmp.w	r8, #0
 800914c:	dde9      	ble.n	8009122 <__sflush_r+0xae>
 800914e:	6a21      	ldr	r1, [r4, #32]
 8009150:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009152:	4643      	mov	r3, r8
 8009154:	463a      	mov	r2, r7
 8009156:	4628      	mov	r0, r5
 8009158:	47b0      	blx	r6
 800915a:	2800      	cmp	r0, #0
 800915c:	dc08      	bgt.n	8009170 <__sflush_r+0xfc>
 800915e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009170:	4407      	add	r7, r0
 8009172:	eba8 0800 	sub.w	r8, r8, r0
 8009176:	e7e7      	b.n	8009148 <__sflush_r+0xd4>
 8009178:	dfbffffe 	.word	0xdfbffffe

0800917c <_fflush_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	690b      	ldr	r3, [r1, #16]
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	b913      	cbnz	r3, 800918c <_fflush_r+0x10>
 8009186:	2500      	movs	r5, #0
 8009188:	4628      	mov	r0, r5
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	b118      	cbz	r0, 8009196 <_fflush_r+0x1a>
 800918e:	6a03      	ldr	r3, [r0, #32]
 8009190:	b90b      	cbnz	r3, 8009196 <_fflush_r+0x1a>
 8009192:	f7fe f9cd 	bl	8007530 <__sinit>
 8009196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0f3      	beq.n	8009186 <_fflush_r+0xa>
 800919e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091a0:	07d0      	lsls	r0, r2, #31
 80091a2:	d404      	bmi.n	80091ae <_fflush_r+0x32>
 80091a4:	0599      	lsls	r1, r3, #22
 80091a6:	d402      	bmi.n	80091ae <_fflush_r+0x32>
 80091a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091aa:	f7fe fbbc 	bl	8007926 <__retarget_lock_acquire_recursive>
 80091ae:	4628      	mov	r0, r5
 80091b0:	4621      	mov	r1, r4
 80091b2:	f7ff ff5f 	bl	8009074 <__sflush_r>
 80091b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091b8:	07da      	lsls	r2, r3, #31
 80091ba:	4605      	mov	r5, r0
 80091bc:	d4e4      	bmi.n	8009188 <_fflush_r+0xc>
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	059b      	lsls	r3, r3, #22
 80091c2:	d4e1      	bmi.n	8009188 <_fflush_r+0xc>
 80091c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091c6:	f7fe fbaf 	bl	8007928 <__retarget_lock_release_recursive>
 80091ca:	e7dd      	b.n	8009188 <_fflush_r+0xc>

080091cc <__swhatbuf_r>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	460c      	mov	r4, r1
 80091d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d4:	2900      	cmp	r1, #0
 80091d6:	b096      	sub	sp, #88	@ 0x58
 80091d8:	4615      	mov	r5, r2
 80091da:	461e      	mov	r6, r3
 80091dc:	da0d      	bge.n	80091fa <__swhatbuf_r+0x2e>
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091e4:	f04f 0100 	mov.w	r1, #0
 80091e8:	bf14      	ite	ne
 80091ea:	2340      	movne	r3, #64	@ 0x40
 80091ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091f0:	2000      	movs	r0, #0
 80091f2:	6031      	str	r1, [r6, #0]
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	b016      	add	sp, #88	@ 0x58
 80091f8:	bd70      	pop	{r4, r5, r6, pc}
 80091fa:	466a      	mov	r2, sp
 80091fc:	f000 f848 	bl	8009290 <_fstat_r>
 8009200:	2800      	cmp	r0, #0
 8009202:	dbec      	blt.n	80091de <__swhatbuf_r+0x12>
 8009204:	9901      	ldr	r1, [sp, #4]
 8009206:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800920a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800920e:	4259      	negs	r1, r3
 8009210:	4159      	adcs	r1, r3
 8009212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009216:	e7eb      	b.n	80091f0 <__swhatbuf_r+0x24>

08009218 <__smakebuf_r>:
 8009218:	898b      	ldrh	r3, [r1, #12]
 800921a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800921c:	079d      	lsls	r5, r3, #30
 800921e:	4606      	mov	r6, r0
 8009220:	460c      	mov	r4, r1
 8009222:	d507      	bpl.n	8009234 <__smakebuf_r+0x1c>
 8009224:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	6123      	str	r3, [r4, #16]
 800922c:	2301      	movs	r3, #1
 800922e:	6163      	str	r3, [r4, #20]
 8009230:	b003      	add	sp, #12
 8009232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009234:	ab01      	add	r3, sp, #4
 8009236:	466a      	mov	r2, sp
 8009238:	f7ff ffc8 	bl	80091cc <__swhatbuf_r>
 800923c:	9f00      	ldr	r7, [sp, #0]
 800923e:	4605      	mov	r5, r0
 8009240:	4639      	mov	r1, r7
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff f9c6 	bl	80085d4 <_malloc_r>
 8009248:	b948      	cbnz	r0, 800925e <__smakebuf_r+0x46>
 800924a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924e:	059a      	lsls	r2, r3, #22
 8009250:	d4ee      	bmi.n	8009230 <__smakebuf_r+0x18>
 8009252:	f023 0303 	bic.w	r3, r3, #3
 8009256:	f043 0302 	orr.w	r3, r3, #2
 800925a:	81a3      	strh	r3, [r4, #12]
 800925c:	e7e2      	b.n	8009224 <__smakebuf_r+0xc>
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	6020      	str	r0, [r4, #0]
 8009262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009266:	81a3      	strh	r3, [r4, #12]
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800926e:	b15b      	cbz	r3, 8009288 <__smakebuf_r+0x70>
 8009270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009274:	4630      	mov	r0, r6
 8009276:	f000 f81d 	bl	80092b4 <_isatty_r>
 800927a:	b128      	cbz	r0, 8009288 <__smakebuf_r+0x70>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	431d      	orrs	r5, r3
 800928c:	81a5      	strh	r5, [r4, #12]
 800928e:	e7cf      	b.n	8009230 <__smakebuf_r+0x18>

08009290 <_fstat_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	@ (80092b0 <_fstat_r+0x20>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	4611      	mov	r1, r2
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	f7f7 fd99 	bl	8000dd4 <_fstat>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d102      	bne.n	80092ac <_fstat_r+0x1c>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	b103      	cbz	r3, 80092ac <_fstat_r+0x1c>
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	bf00      	nop
 80092b0:	24000420 	.word	0x24000420

080092b4 <_isatty_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d06      	ldr	r5, [pc, #24]	@ (80092d0 <_isatty_r+0x1c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	602b      	str	r3, [r5, #0]
 80092c0:	f7f7 fd98 	bl	8000df4 <_isatty>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_isatty_r+0x1a>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_isatty_r+0x1a>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	24000420 	.word	0x24000420

080092d4 <_sbrk_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d06      	ldr	r5, [pc, #24]	@ (80092f0 <_sbrk_r+0x1c>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	f7f7 fda0 	bl	8000e24 <_sbrk>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_sbrk_r+0x1a>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_sbrk_r+0x1a>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	24000420 	.word	0x24000420

080092f4 <memcpy>:
 80092f4:	440a      	add	r2, r1
 80092f6:	4291      	cmp	r1, r2
 80092f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092fc:	d100      	bne.n	8009300 <memcpy+0xc>
 80092fe:	4770      	bx	lr
 8009300:	b510      	push	{r4, lr}
 8009302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800930a:	4291      	cmp	r1, r2
 800930c:	d1f9      	bne.n	8009302 <memcpy+0xe>
 800930e:	bd10      	pop	{r4, pc}

08009310 <__assert_func>:
 8009310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009312:	4614      	mov	r4, r2
 8009314:	461a      	mov	r2, r3
 8009316:	4b09      	ldr	r3, [pc, #36]	@ (800933c <__assert_func+0x2c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4605      	mov	r5, r0
 800931c:	68d8      	ldr	r0, [r3, #12]
 800931e:	b954      	cbnz	r4, 8009336 <__assert_func+0x26>
 8009320:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <__assert_func+0x30>)
 8009322:	461c      	mov	r4, r3
 8009324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009328:	9100      	str	r1, [sp, #0]
 800932a:	462b      	mov	r3, r5
 800932c:	4905      	ldr	r1, [pc, #20]	@ (8009344 <__assert_func+0x34>)
 800932e:	f000 f841 	bl	80093b4 <fiprintf>
 8009332:	f000 f851 	bl	80093d8 <abort>
 8009336:	4b04      	ldr	r3, [pc, #16]	@ (8009348 <__assert_func+0x38>)
 8009338:	e7f4      	b.n	8009324 <__assert_func+0x14>
 800933a:	bf00      	nop
 800933c:	2400001c 	.word	0x2400001c
 8009340:	080098b6 	.word	0x080098b6
 8009344:	08009888 	.word	0x08009888
 8009348:	0800987b 	.word	0x0800987b

0800934c <_calloc_r>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	fba1 5402 	umull	r5, r4, r1, r2
 8009352:	b93c      	cbnz	r4, 8009364 <_calloc_r+0x18>
 8009354:	4629      	mov	r1, r5
 8009356:	f7ff f93d 	bl	80085d4 <_malloc_r>
 800935a:	4606      	mov	r6, r0
 800935c:	b928      	cbnz	r0, 800936a <_calloc_r+0x1e>
 800935e:	2600      	movs	r6, #0
 8009360:	4630      	mov	r0, r6
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	220c      	movs	r2, #12
 8009366:	6002      	str	r2, [r0, #0]
 8009368:	e7f9      	b.n	800935e <_calloc_r+0x12>
 800936a:	462a      	mov	r2, r5
 800936c:	4621      	mov	r1, r4
 800936e:	f7fe fa5d 	bl	800782c <memset>
 8009372:	e7f5      	b.n	8009360 <_calloc_r+0x14>

08009374 <__ascii_mbtowc>:
 8009374:	b082      	sub	sp, #8
 8009376:	b901      	cbnz	r1, 800937a <__ascii_mbtowc+0x6>
 8009378:	a901      	add	r1, sp, #4
 800937a:	b142      	cbz	r2, 800938e <__ascii_mbtowc+0x1a>
 800937c:	b14b      	cbz	r3, 8009392 <__ascii_mbtowc+0x1e>
 800937e:	7813      	ldrb	r3, [r2, #0]
 8009380:	600b      	str	r3, [r1, #0]
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	1e10      	subs	r0, r2, #0
 8009386:	bf18      	it	ne
 8009388:	2001      	movne	r0, #1
 800938a:	b002      	add	sp, #8
 800938c:	4770      	bx	lr
 800938e:	4610      	mov	r0, r2
 8009390:	e7fb      	b.n	800938a <__ascii_mbtowc+0x16>
 8009392:	f06f 0001 	mvn.w	r0, #1
 8009396:	e7f8      	b.n	800938a <__ascii_mbtowc+0x16>

08009398 <__ascii_wctomb>:
 8009398:	4603      	mov	r3, r0
 800939a:	4608      	mov	r0, r1
 800939c:	b141      	cbz	r1, 80093b0 <__ascii_wctomb+0x18>
 800939e:	2aff      	cmp	r2, #255	@ 0xff
 80093a0:	d904      	bls.n	80093ac <__ascii_wctomb+0x14>
 80093a2:	228a      	movs	r2, #138	@ 0x8a
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	4770      	bx	lr
 80093ac:	700a      	strb	r2, [r1, #0]
 80093ae:	2001      	movs	r0, #1
 80093b0:	4770      	bx	lr
	...

080093b4 <fiprintf>:
 80093b4:	b40e      	push	{r1, r2, r3}
 80093b6:	b503      	push	{r0, r1, lr}
 80093b8:	4601      	mov	r1, r0
 80093ba:	ab03      	add	r3, sp, #12
 80093bc:	4805      	ldr	r0, [pc, #20]	@ (80093d4 <fiprintf+0x20>)
 80093be:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c2:	6800      	ldr	r0, [r0, #0]
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	f7ff fd3d 	bl	8008e44 <_vfiprintf_r>
 80093ca:	b002      	add	sp, #8
 80093cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80093d0:	b003      	add	sp, #12
 80093d2:	4770      	bx	lr
 80093d4:	2400001c 	.word	0x2400001c

080093d8 <abort>:
 80093d8:	b508      	push	{r3, lr}
 80093da:	2006      	movs	r0, #6
 80093dc:	f000 f82c 	bl	8009438 <raise>
 80093e0:	2001      	movs	r0, #1
 80093e2:	f7f7 fcc3 	bl	8000d6c <_exit>

080093e6 <_raise_r>:
 80093e6:	291f      	cmp	r1, #31
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4605      	mov	r5, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	d904      	bls.n	80093fa <_raise_r+0x14>
 80093f0:	2316      	movs	r3, #22
 80093f2:	6003      	str	r3, [r0, #0]
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	bd38      	pop	{r3, r4, r5, pc}
 80093fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093fc:	b112      	cbz	r2, 8009404 <_raise_r+0x1e>
 80093fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009402:	b94b      	cbnz	r3, 8009418 <_raise_r+0x32>
 8009404:	4628      	mov	r0, r5
 8009406:	f000 f831 	bl	800946c <_getpid_r>
 800940a:	4622      	mov	r2, r4
 800940c:	4601      	mov	r1, r0
 800940e:	4628      	mov	r0, r5
 8009410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009414:	f000 b818 	b.w	8009448 <_kill_r>
 8009418:	2b01      	cmp	r3, #1
 800941a:	d00a      	beq.n	8009432 <_raise_r+0x4c>
 800941c:	1c59      	adds	r1, r3, #1
 800941e:	d103      	bne.n	8009428 <_raise_r+0x42>
 8009420:	2316      	movs	r3, #22
 8009422:	6003      	str	r3, [r0, #0]
 8009424:	2001      	movs	r0, #1
 8009426:	e7e7      	b.n	80093f8 <_raise_r+0x12>
 8009428:	2100      	movs	r1, #0
 800942a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800942e:	4620      	mov	r0, r4
 8009430:	4798      	blx	r3
 8009432:	2000      	movs	r0, #0
 8009434:	e7e0      	b.n	80093f8 <_raise_r+0x12>
	...

08009438 <raise>:
 8009438:	4b02      	ldr	r3, [pc, #8]	@ (8009444 <raise+0xc>)
 800943a:	4601      	mov	r1, r0
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	f7ff bfd2 	b.w	80093e6 <_raise_r>
 8009442:	bf00      	nop
 8009444:	2400001c 	.word	0x2400001c

08009448 <_kill_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	@ (8009468 <_kill_r+0x20>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	f7f7 fc79 	bl	8000d4c <_kill>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d102      	bne.n	8009464 <_kill_r+0x1c>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	b103      	cbz	r3, 8009464 <_kill_r+0x1c>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	24000420 	.word	0x24000420

0800946c <_getpid_r>:
 800946c:	f7f7 bc66 	b.w	8000d3c <_getpid>

08009470 <_init>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	bf00      	nop
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr

0800947c <_fini>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	bf00      	nop
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr
