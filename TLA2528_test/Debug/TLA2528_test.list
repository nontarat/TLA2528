
TLA2528_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007024  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080072f4  080072f4  000082f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073ac  080073ac  000083ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073b4  080073b4  000083b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080073b8  080073b8  000083b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080073bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  2400006c  08007428  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002d4  08007428  000092d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013461  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000259c  00000000  00000000  0001c4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e48  00000000  00000000  0001ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b0e  00000000  00000000  0001f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032fdb  00000000  00000000  000203ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014308  00000000  00000000  000533c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143a87  00000000  00000000  000676d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ab158  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000042e0  00000000  00000000  001ab19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  001af47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080072dc 	.word	0x080072dc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	080072dc 	.word	0x080072dc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <_write>:
I2C_HandleTypeDef hi2c5;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	68b9      	ldr	r1, [r7, #8]
 80006b6:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <_write+0x28>)
 80006b8:	f004 fcc2 	bl	8005040 <HAL_UART_Transmit>
	return len;
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	240000dc 	.word	0x240000dc

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006d0:	b088      	sub	sp, #32
 80006d2:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006d4:	f000 f9de 	bl	8000a94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fd44 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f846 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f940 	bl	8000964 <MX_GPIO_Init>
  MX_I2C5_Init();
 80006e4:	f000 f8b2 	bl	800084c <MX_I2C5_Init>
  MX_USART3_UART_Init();
 80006e8:	f000 f8f0 	bl	80008cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  TLA2528_Init();
 80006ec:	f000 fc50 	bl	8000f90 <TLA2528_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      TLA2528_ReadChannels(); // อ่านค่าทุกช่อง
 80006f0:	f000 fc94 	bl	800101c <TLA2528_ReadChannels>
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
             TLA2528_GetChannel(0),
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fcf3 	bl	80010e0 <TLA2528_GetChannel>
 80006fa:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 80006fc:	4698      	mov	r8, r3
              TLA2528_GetChannel(1),
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fcee 	bl	80010e0 <TLA2528_GetChannel>
 8000704:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 8000706:	4699      	mov	r9, r3
             TLA2528_GetChannel(2),
 8000708:	2002      	movs	r0, #2
 800070a:	f000 fce9 	bl	80010e0 <TLA2528_GetChannel>
 800070e:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 8000710:	469a      	mov	sl, r3
              TLA2528_GetChannel(3),
 8000712:	2003      	movs	r0, #3
 8000714:	f000 fce4 	bl	80010e0 <TLA2528_GetChannel>
 8000718:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 800071a:	461c      	mov	r4, r3
              TLA2528_GetChannel(4),
 800071c:	2004      	movs	r0, #4
 800071e:	f000 fcdf 	bl	80010e0 <TLA2528_GetChannel>
 8000722:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 8000724:	461d      	mov	r5, r3
              TLA2528_GetChannel(5),
 8000726:	2005      	movs	r0, #5
 8000728:	f000 fcda 	bl	80010e0 <TLA2528_GetChannel>
 800072c:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 800072e:	461e      	mov	r6, r3
              TLA2528_GetChannel(6),
 8000730:	2006      	movs	r0, #6
 8000732:	f000 fcd5 	bl	80010e0 <TLA2528_GetChannel>
 8000736:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 8000738:	607b      	str	r3, [r7, #4]
              TLA2528_GetChannel(7));
 800073a:	2007      	movs	r0, #7
 800073c:	f000 fcd0 	bl	80010e0 <TLA2528_GetChannel>
 8000740:	4603      	mov	r3, r0
       printf("Ch1: %d, Ch2: %d, Ch3: %d, Ch4: %d, Ch5: %d, Ch6: %d, Ch7: %d, Ch8: %d \n",
 8000742:	9304      	str	r3, [sp, #16]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	9303      	str	r3, [sp, #12]
 8000748:	9602      	str	r6, [sp, #8]
 800074a:	9501      	str	r5, [sp, #4]
 800074c:	9400      	str	r4, [sp, #0]
 800074e:	4653      	mov	r3, sl
 8000750:	464a      	mov	r2, r9
 8000752:	4641      	mov	r1, r8
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <main+0x9c>)
 8000756:	f005 ff53 	bl	8006600 <iprintf>
       HAL_Delay(1000);
 800075a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800075e:	f000 fd93 	bl	8001288 <HAL_Delay>
      TLA2528_ReadChannels(); // อ่านค่าทุกช่อง
 8000762:	bf00      	nop
 8000764:	e7c4      	b.n	80006f0 <main+0x24>
 8000766:	bf00      	nop
 8000768:	080072f4 	.word	0x080072f4

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 ff95 	bl	80066aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 ff8f 	bl	80066aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f001 fea5 	bl	80024dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <SystemClock_Config+0xdc>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <SystemClock_Config+0xdc>)
 800079c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <SystemClock_Config+0xdc>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ae:	bf00      	nop
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xdc>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007bc:	d1f8      	bne.n	80007b0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007c6:	2340      	movs	r3, #64	@ 0x40
 80007c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ce:	2300      	movs	r3, #0
 80007d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80007d6:	231f      	movs	r3, #31
 80007d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e6:	230c      	movs	r3, #12
 80007e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 80007ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fea9 	bl	8002550 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000804:	f000 f972 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	233f      	movs	r3, #63	@ 0x3f
 800080a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2303      	movs	r3, #3
 800080e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000814:	2308      	movs	r3, #8
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000818:	2340      	movs	r3, #64	@ 0x40
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081c:	2340      	movs	r3, #64	@ 0x40
 800081e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000826:	2340      	movs	r3, #64	@ 0x40
 8000828:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2103      	movs	r1, #3
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fa68 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800083a:	f000 f957 	bl	8000aec <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3770      	adds	r7, #112	@ 0x70
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58024800 	.word	0x58024800

0800084c <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C5_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C5_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x20A0A3F6;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C5_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C5_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C5_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C5_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C5_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C5_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C5_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C5_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C5_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <MX_I2C5_Init+0x74>)
 8000888:	f001 f840 	bl	800190c <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f92b 	bl	8000aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <MX_I2C5_Init+0x74>)
 800089a:	f001 fd87 	bl	80023ac <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f922 	bl	8000aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_I2C5_Init+0x74>)
 80008ac:	f001 fdc9 	bl	8002442 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f919 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	24000088 	.word	0x24000088
 80008c4:	40006400 	.word	0x40006400
 80008c8:	20a0a3f6 	.word	0x20a0a3f6

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008d2:	4a23      	ldr	r2, [pc, #140]	@ (8000960 <MX_USART3_UART_Init+0x94>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b21      	ldr	r3, [pc, #132]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000914:	4811      	ldr	r0, [pc, #68]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000916:	f004 fb43 	bl	8004fa0 <HAL_UART_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 f8e4 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	480d      	ldr	r0, [pc, #52]	@ (800095c <MX_USART3_UART_Init+0x90>)
 8000928:	f005 fcdd 	bl	80062e6 <HAL_UARTEx_SetTxFifoThreshold>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000932:	f000 f8db 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4808      	ldr	r0, [pc, #32]	@ (800095c <MX_USART3_UART_Init+0x90>)
 800093a:	f005 fd12 	bl	8006362 <HAL_UARTEx_SetRxFifoThreshold>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000944:	f000 f8d2 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_USART3_UART_Init+0x90>)
 800094a:	f005 fc93 	bl	8006274 <HAL_UARTEx_DisableFifoMode>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 f8ca 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	240000dc 	.word	0x240000dc
 8000960:	40004800 	.word	0x40004800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b42      	ldr	r3, [pc, #264]	@ (8000a84 <MX_GPIO_Init+0x120>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	4a40      	ldr	r2, [pc, #256]	@ (8000a84 <MX_GPIO_Init+0x120>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a84 <MX_GPIO_Init+0x120>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b3a      	ldr	r3, [pc, #232]	@ (8000a84 <MX_GPIO_Init+0x120>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	4a39      	ldr	r2, [pc, #228]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a8:	4b36      	ldr	r3, [pc, #216]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b33      	ldr	r3, [pc, #204]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009bc:	4a31      	ldr	r2, [pc, #196]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	4a2a      	ldr	r2, [pc, #168]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e4:	4b27      	ldr	r3, [pc, #156]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	4a22      	ldr	r2, [pc, #136]	@ (8000a84 <MX_GPIO_Init+0x120>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a02:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <MX_GPIO_Init+0x120>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a16:	481c      	ldr	r0, [pc, #112]	@ (8000a88 <MX_GPIO_Init+0x124>)
 8000a18:	f000 ff5e 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2102      	movs	r1, #2
 8000a20:	481a      	ldr	r0, [pc, #104]	@ (8000a8c <MX_GPIO_Init+0x128>)
 8000a22:	f000 ff59 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4815      	ldr	r0, [pc, #84]	@ (8000a90 <MX_GPIO_Init+0x12c>)
 8000a3c:	f000 fda4 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a40:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <MX_GPIO_Init+0x124>)
 8000a5a:	f000 fd95 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_GPIO_Init+0x128>)
 8000a76:	f000 fd87 	bl	8001588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58020400 	.word	0x58020400
 8000a8c:	58021000 	.word	0x58021000
 8000a90:	58020800 	.word	0x58020800

08000a94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000aa6:	f000 fcf7 	bl	8001498 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ab6:	231f      	movs	r3, #31
 8000ab8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aba:	2387      	movs	r3, #135	@ 0x87
 8000abc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fd15 	bl	8001508 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ade:	2004      	movs	r0, #4
 8000ae0:	f000 fcf2 	bl	80014c8 <HAL_MPU_Enable>

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_MspInit+0x30>)
 8000b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x30>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x30>)
 8000b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	58024400 	.word	0x58024400

08000b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0b8      	sub	sp, #224	@ 0xe0
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	22b8      	movs	r2, #184	@ 0xb8
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f005 fdac 	bl	80066aa <memset>
  if(hi2c->Instance==I2C5)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a27      	ldr	r2, [pc, #156]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d146      	bne.n	8000bea <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8000b5c:	f04f 0208 	mov.w	r2, #8
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fc52 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b7e:	f7ff ffb5 	bl	8000aec <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ba0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <HAL_I2C_MspInit+0xd0>)
 8000bc8:	f000 fcde 	bl	8001588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bd2:	4a09      	ldr	r2, [pc, #36]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000bd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C5_MspInit 1 */

  }

}
 8000bea:	bf00      	nop
 8000bec:	37e0      	adds	r7, #224	@ 0xe0
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40006400 	.word	0x40006400
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58020800 	.word	0x58020800

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0b8      	sub	sp, #224	@ 0xe0
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	22b8      	movs	r2, #184	@ 0xb8
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f005 fd42 	bl	80066aa <memset>
  if(huart->Instance==USART3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a27      	ldr	r2, [pc, #156]	@ (8000cc8 <HAL_UART_MspInit+0xc8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d146      	bne.n	8000cbe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c30:	f04f 0202 	mov.w	r2, #2
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fbe8 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c52:	f7ff ff4b 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <HAL_UART_MspInit+0xcc>)
 8000c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <HAL_UART_MspInit+0xcc>)
 8000c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_UART_MspInit+0xcc>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_UART_MspInit+0xcc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <HAL_UART_MspInit+0xcc>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_UART_MspInit+0xcc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000c92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cac:	2307      	movs	r3, #7
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <HAL_UART_MspInit+0xd0>)
 8000cba:	f000 fc65 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cbe:	bf00      	nop
 8000cc0:	37e0      	adds	r7, #224	@ 0xe0
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40004800 	.word	0x40004800
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	58020c00 	.word	0x58020c00

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 fa8d 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e00a      	b.n	8000d5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d44:	f3af 8000 	nop.w
 8000d48:	4601      	mov	r1, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	60ba      	str	r2, [r7, #8]
 8000d50:	b2ca      	uxtb	r2, r1
 8000d52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	dbf0      	blt.n	8000d44 <_read+0x12>
  }

  return len;
 8000d62:	687b      	ldr	r3, [r7, #4]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d94:	605a      	str	r2, [r3, #4]
  return 0;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_isatty>:

int _isatty(int file)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	@ (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f005 fca0 	bl	8006748 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24050000 	.word	0x24050000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	24000170 	.word	0x24000170
 8000e3c:	240002d8 	.word	0x240002d8

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e44:	4b3e      	ldr	r3, [pc, #248]	@ (8000f40 <SystemInit+0x100>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f40 <SystemInit+0x100>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e54:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <SystemInit+0x104>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	2b06      	cmp	r3, #6
 8000e5e:	d807      	bhi.n	8000e70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e60:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <SystemInit+0x104>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 030f 	bic.w	r3, r3, #15
 8000e68:	4a36      	ldr	r2, [pc, #216]	@ (8000f44 <SystemInit+0x104>)
 8000e6a:	f043 0307 	orr.w	r3, r3, #7
 8000e6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e70:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <SystemInit+0x108>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a34      	ldr	r2, [pc, #208]	@ (8000f48 <SystemInit+0x108>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e7c:	4b32      	ldr	r3, [pc, #200]	@ (8000f48 <SystemInit+0x108>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e82:	4b31      	ldr	r3, [pc, #196]	@ (8000f48 <SystemInit+0x108>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4930      	ldr	r1, [pc, #192]	@ (8000f48 <SystemInit+0x108>)
 8000e88:	4b30      	ldr	r3, [pc, #192]	@ (8000f4c <SystemInit+0x10c>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <SystemInit+0x104>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <SystemInit+0x104>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 030f 	bic.w	r3, r3, #15
 8000ea2:	4a28      	ldr	r2, [pc, #160]	@ (8000f44 <SystemInit+0x104>)
 8000ea4:	f043 0307 	orr.w	r3, r3, #7
 8000ea8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <SystemInit+0x108>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <SystemInit+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eb6:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <SystemInit+0x108>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <SystemInit+0x108>)
 8000ebe:	4a24      	ldr	r2, [pc, #144]	@ (8000f50 <SystemInit+0x110>)
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <SystemInit+0x108>)
 8000ec4:	4a23      	ldr	r2, [pc, #140]	@ (8000f54 <SystemInit+0x114>)
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <SystemInit+0x108>)
 8000eca:	4a23      	ldr	r2, [pc, #140]	@ (8000f58 <SystemInit+0x118>)
 8000ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <SystemInit+0x108>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <SystemInit+0x108>)
 8000ed6:	4a20      	ldr	r2, [pc, #128]	@ (8000f58 <SystemInit+0x118>)
 8000ed8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <SystemInit+0x108>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <SystemInit+0x108>)
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <SystemInit+0x118>)
 8000ee4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <SystemInit+0x108>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <SystemInit+0x108>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <SystemInit+0x108>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <SystemInit+0x108>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <SystemInit+0x108>)
 8000f00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d113      	bne.n	8000f34 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <SystemInit+0x108>)
 8000f0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f12:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <SystemInit+0x108>)
 8000f14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <SystemInit+0x11c>)
 8000f1e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f22:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <SystemInit+0x108>)
 8000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f2a:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <SystemInit+0x108>)
 8000f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	52002000 	.word	0x52002000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f50:	02020200 	.word	0x02020200
 8000f54:	01ff0000 	.word	0x01ff0000
 8000f58:	01010280 	.word	0x01010280
 8000f5c:	52004000 	.word	0x52004000

08000f60 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <ExitRun0Mode+0x2c>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <ExitRun0Mode+0x2c>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f70:	bf00      	nop
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <ExitRun0Mode+0x2c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	58024800 	.word	0x58024800

08000f90 <TLA2528_Init>:
//0001 1000b Set bit
//0010 0000b Clear bit
//0011 0000b Reading a continuous block of registers
//0010 1000b Writing a continuous block of registers

void TLA2528_Init(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
    uint8_t config_data[3];

    // 1. ตั้งค่า SEQ_MODE = 1
    config_data[0] = 0x18;  //Set bit
 8000f96:	2318      	movs	r3, #24
 8000f98:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0x10;  //Register Address (SEQUENCE_CFG Register)
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	717b      	strb	r3, [r7, #5]
    config_data[2] = 0x00;  //Register Data (SEQ_MODE)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDR_W, config_data, 3, HAL_MAX_DELAY);
 8000fa2:	1d3a      	adds	r2, r7, #4
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2303      	movs	r3, #3
 8000fac:	2120      	movs	r1, #32
 8000fae:	481a      	ldr	r0, [pc, #104]	@ (8001018 <TLA2528_Init+0x88>)
 8000fb0:	f000 fd48 	bl	8001a44 <HAL_I2C_Master_Transmit>

    // 2. กำหนดขาเป็น AIN (กำหนดให้ทุกขาเป็น Analog Input)PIN_CFG Register (Address = 0x5)
    config_data[0] = 0x08;  //Single register write
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0x05;//??Reg Address in the Block
 8000fb8:	2305      	movs	r3, #5
 8000fba:	717b      	strb	r3, [r7, #5]
    config_data[1] = 0x00;//Channel is configured as analog input.
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDR_W, config_data, 3, HAL_MAX_DELAY);
 8000fc0:	1d3a      	adds	r2, r7, #4
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2303      	movs	r3, #3
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4812      	ldr	r0, [pc, #72]	@ (8001018 <TLA2528_Init+0x88>)
 8000fce:	f000 fd39 	bl	8001a44 <HAL_I2C_Master_Transmit>

    // 3. เปิดใช้งานช่องที่ต้องการอ่านใน AUTO_SEQ_CHSEL (Address = 0X12)
    config_data[0] = 0x08;  //Single register write
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0x12;  //Register Address (SEQUENCE_CFG Register)
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	717b      	strb	r3, [r7, #5]
    config_data[2] = 0xFF;  //Register Data (เปิดใช้งานทุกช่อง)
 8000fda:	23ff      	movs	r3, #255	@ 0xff
 8000fdc:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDR_W, config_data, 3, HAL_MAX_DELAY);
 8000fde:	1d3a      	adds	r2, r7, #4
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	2120      	movs	r1, #32
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <TLA2528_Init+0x88>)
 8000fec:	f000 fd2a 	bl	8001a44 <HAL_I2C_Master_Transmit>

    // 4.  Append 4-bit  (Address = 0X02)
    config_data[0] = 0x18;  //Set bit
 8000ff0:	2318      	movs	r3, #24
 8000ff2:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0x02;  //Register Address (SEQUENCE_CFG Register)
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	717b      	strb	r3, [r7, #5]
    config_data[2] = 0x10;  //Register Data (SEQ_MODE)
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDR_W, config_data, 3, HAL_MAX_DELAY);
 8000ffc:	1d3a      	adds	r2, r7, #4
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2303      	movs	r3, #3
 8001006:	2120      	movs	r1, #32
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <TLA2528_Init+0x88>)
 800100a:	f000 fd1b 	bl	8001a44 <HAL_I2C_Master_Transmit>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000088 	.word	0x24000088

0800101c <TLA2528_ReadChannels>:
	}

	return HAL_OK;
}

void TLA2528_ReadChannels(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
    uint8_t data_buf[16];
    uint8_t config_data[3];
//---------------Enable channel sequencing SEQ_START = 1 (0x10 SEQUENCE_CFG Register bit4) -------------
    // 6. เริ่ม Auto-sequencing
    config_data[0] = 0x18;  //Set bit
 8001022:	2318      	movs	r3, #24
 8001024:	703b      	strb	r3, [r7, #0]
    config_data[1] = 0x10;  //Register Address
 8001026:	2310      	movs	r3, #16
 8001028:	707b      	strb	r3, [r7, #1]
    config_data[2] = 0x10;  //Register Data
 800102a:	2310      	movs	r3, #16
 800102c:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDR_W, config_data, 3, HAL_MAX_DELAY);
 800102e:	463a      	mov	r2, r7
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2303      	movs	r3, #3
 8001038:	2120      	movs	r1, #32
 800103a:	4827      	ldr	r0, [pc, #156]	@ (80010d8 <TLA2528_ReadChannels+0xbc>)
 800103c:	f000 fd02 	bl	8001a44 <HAL_I2C_Master_Transmit>
    // 7. ส่ง Conversion Start Frame
//    uint8_t start_cmd = TLA2528_RESULT_REG;
    config_data[0] = 0x30;//Reading a Continuous Block of Registers
 8001040:	2330      	movs	r3, #48	@ 0x30
 8001042:	703b      	strb	r3, [r7, #0]
    config_data[1] = 0x11;//??Reg Address in the Block (CHANNEL_SEL)
 8001044:	2311      	movs	r3, #17
 8001046:	707b      	strb	r3, [r7, #1]
    config_data[1] = 0x00;//??Reg Address in the Block (CH0)
 8001048:	2300      	movs	r3, #0
 800104a:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDR_W, config_data, 2, HAL_MAX_DELAY);
 800104c:	463a      	mov	r2, r7
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2302      	movs	r3, #2
 8001056:	2120      	movs	r1, #32
 8001058:	481f      	ldr	r0, [pc, #124]	@ (80010d8 <TLA2528_ReadChannels+0xbc>)
 800105a:	f000 fcf3 	bl	8001a44 <HAL_I2C_Master_Transmit>
    // 8. อ่านค่าทุกช่อง
    HAL_I2C_Master_Receive(&hi2c5, TLA2528_I2C_ADDR_R, data_buf, 16, HAL_MAX_DELAY);
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2310      	movs	r3, #16
 8001068:	2121      	movs	r1, #33	@ 0x21
 800106a:	481b      	ldr	r0, [pc, #108]	@ (80010d8 <TLA2528_ReadChannels+0xbc>)
 800106c:	f000 fe02 	bl	8001c74 <HAL_I2C_Master_Receive>
    for (int i = 0; i < 8; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e019      	b.n	80010aa <TLA2528_ReadChannels+0x8e>
        tla2528_raw_data[i] = (data_buf[i * 2] << 8) | data_buf[i * 2 + 1];
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	3318      	adds	r3, #24
 800107c:	443b      	add	r3, r7
 800107e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	3301      	adds	r3, #1
 800108c:	3318      	adds	r3, #24
 800108e:	443b      	add	r3, r7
 8001090:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	b299      	uxth	r1, r3
 800109c:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <TLA2528_ReadChannels+0xc0>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 8; i++) {
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	dde2      	ble.n	8001076 <TLA2528_ReadChannels+0x5a>
    }
//---------------Disable channel sequencing SEQ_START = 0 (0x10 SEQUENCE_CFG Register bit4) -------------
    config_data[0] = 0x20;//Clear bit
 80010b0:	2320      	movs	r3, #32
 80010b2:	703b      	strb	r3, [r7, #0]
    config_data[1] = 0x10;//Register Address
 80010b4:	2310      	movs	r3, #16
 80010b6:	707b      	strb	r3, [r7, #1]
    config_data[2] = 0x10;//Register Data
 80010b8:	2310      	movs	r3, #16
 80010ba:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c5, TLA2528_I2C_ADDR_W, config_data, 3, HAL_MAX_DELAY);
 80010bc:	463a      	mov	r2, r7
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2303      	movs	r3, #3
 80010c6:	2120      	movs	r1, #32
 80010c8:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <TLA2528_ReadChannels+0xbc>)
 80010ca:	f000 fcbb 	bl	8001a44 <HAL_I2C_Master_Transmit>

}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000088 	.word	0x24000088
 80010dc:	24000174 	.word	0x24000174

080010e0 <TLA2528_GetChannel>:

uint16_t TLA2528_GetChannel(uint8_t channel) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
    if (channel >= 8) return 0;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d901      	bls.n	80010f4 <TLA2528_GetChannel+0x14>
 80010f0:	2300      	movs	r3, #0
 80010f2:	e003      	b.n	80010fc <TLA2528_GetChannel+0x1c>
    return tla2528_raw_data[channel];
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <TLA2528_GetChannel+0x28>)
 80010f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	24000174 	.word	0x24000174

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001148 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001110:	f7ff ff26 	bl	8000f60 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001114:	f7ff fe94 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f005 fb09 	bl	8006754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fac3 	bl	80006cc <main>
  bx  lr
 8001146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800114c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001150:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001154:	080073bc 	.word	0x080073bc
  ldr r2, =_sbss
 8001158:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800115c:	240002d4 	.word	0x240002d4

08001160 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC3_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 f962 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001170:	f001 ff7e 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8001174:	4602      	mov	r2, r0
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_Init+0x68>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	4913      	ldr	r1, [pc, #76]	@ (80011d0 <HAL_Init+0x6c>)
 8001182:	5ccb      	ldrb	r3, [r1, r3]
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_Init+0x68>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	4a0e      	ldr	r2, [pc, #56]	@ (80011d0 <HAL_Init+0x6c>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <HAL_Init+0x70>)
 80011a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011a8:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <HAL_Init+0x74>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f814 	bl	80011dc <HAL_InitTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e002      	b.n	80011c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011be:	f7ff fc9b 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58024400 	.word	0x58024400
 80011d0:	08007340 	.word	0x08007340
 80011d4:	24000004 	.word	0x24000004
 80011d8:	24000000 	.word	0x24000000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_InitTick+0x60>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e021      	b.n	8001234 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <HAL_InitTick+0x64>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f939 	bl	800147e <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f911 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <HAL_InitTick+0x68>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2400000c 	.word	0x2400000c
 8001240:	24000000 	.word	0x24000000
 8001244:	24000008 	.word	0x24000008

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2400000c 	.word	0x2400000c
 800126c:	24000184 	.word	0x24000184

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	24000184 	.word	0x24000184

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2400000c 	.word	0x2400000c

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	05fa0000 	.word	0x05fa0000

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff47 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff5e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff90 	bl	8001388 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5f 	bl	8001334 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffb2 	bl	80013f0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800149c:	f3bf 8f5f 	dmb	sy
}
 80014a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_MPU_Disable+0x28>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <HAL_MPU_Disable+0x28>)
 80014a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_MPU_Disable+0x2c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	e000ed90 	.word	0xe000ed90

080014c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_MPU_Enable+0x38>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <HAL_MPU_Enable+0x3c>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <HAL_MPU_Enable+0x3c>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ec:	f3bf 8f6f 	isb	sy
}
 80014f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed90 	.word	0xe000ed90
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	785a      	ldrb	r2, [r3, #1]
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 8001516:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7b1b      	ldrb	r3, [r3, #12]
 8001530:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7adb      	ldrb	r3, [r3, #11]
 8001536:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7a9b      	ldrb	r3, [r3, #10]
 800153e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7b5b      	ldrb	r3, [r3, #13]
 8001546:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001548:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7b9b      	ldrb	r3, [r3, #14]
 800154e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001550:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7bdb      	ldrb	r3, [r3, #15]
 8001556:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7a5b      	ldrb	r3, [r3, #9]
 800155e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7a1b      	ldrb	r3, [r3, #8]
 8001566:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001568:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001570:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001572:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001574:	6113      	str	r3, [r2, #16]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed90 	.word	0xe000ed90

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001596:	4b86      	ldr	r3, [pc, #536]	@ (80017b0 <HAL_GPIO_Init+0x228>)
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800159a:	e18c      	b.n	80018b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 817e 	beq.w	80018b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x44>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d017      	beq.n	800166a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d123      	bne.n	80016be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0203 	and.w	r2, r3, #3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80d8 	beq.w	80018b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	4b2c      	ldr	r3, [pc, #176]	@ (80017b4 <HAL_GPIO_Init+0x22c>)
 8001702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001706:	4a2b      	ldr	r2, [pc, #172]	@ (80017b4 <HAL_GPIO_Init+0x22c>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001710:	4b28      	ldr	r3, [pc, #160]	@ (80017b4 <HAL_GPIO_Init+0x22c>)
 8001712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171e:	4a26      	ldr	r2, [pc, #152]	@ (80017b8 <HAL_GPIO_Init+0x230>)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_GPIO_Init+0x234>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d04a      	beq.n	80017e0 <HAL_GPIO_Init+0x258>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a1c      	ldr	r2, [pc, #112]	@ (80017c0 <HAL_GPIO_Init+0x238>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02b      	beq.n	80017aa <HAL_GPIO_Init+0x222>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <HAL_GPIO_Init+0x23c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d025      	beq.n	80017a6 <HAL_GPIO_Init+0x21e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1a      	ldr	r2, [pc, #104]	@ (80017c8 <HAL_GPIO_Init+0x240>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01f      	beq.n	80017a2 <HAL_GPIO_Init+0x21a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a19      	ldr	r2, [pc, #100]	@ (80017cc <HAL_GPIO_Init+0x244>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x216>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <HAL_GPIO_Init+0x248>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x212>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a17      	ldr	r2, [pc, #92]	@ (80017d4 <HAL_GPIO_Init+0x24c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x20e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a16      	ldr	r2, [pc, #88]	@ (80017d8 <HAL_GPIO_Init+0x250>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x20a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a15      	ldr	r2, [pc, #84]	@ (80017dc <HAL_GPIO_Init+0x254>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x206>
 800178a:	2309      	movs	r3, #9
 800178c:	e029      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 800178e:	230a      	movs	r3, #10
 8001790:	e027      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 8001792:	2307      	movs	r3, #7
 8001794:	e025      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 8001796:	2306      	movs	r3, #6
 8001798:	e023      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 800179a:	2305      	movs	r3, #5
 800179c:	e021      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 800179e:	2304      	movs	r3, #4
 80017a0:	e01f      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e01d      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e01b      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e019      	b.n	80017e2 <HAL_GPIO_Init+0x25a>
 80017ae:	bf00      	nop
 80017b0:	58000080 	.word	0x58000080
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58000400 	.word	0x58000400
 80017bc:	58020000 	.word	0x58020000
 80017c0:	58020400 	.word	0x58020400
 80017c4:	58020800 	.word	0x58020800
 80017c8:	58020c00 	.word	0x58020c00
 80017cc:	58021000 	.word	0x58021000
 80017d0:	58021400 	.word	0x58021400
 80017d4:	58021800 	.word	0x58021800
 80017d8:	58021c00 	.word	0x58021c00
 80017dc:	58022400 	.word	0x58022400
 80017e0:	2300      	movs	r3, #0
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	f002 0203 	and.w	r2, r2, #3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f2:	4938      	ldr	r1, [pc, #224]	@ (80018d4 <HAL_GPIO_Init+0x34c>)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	3301      	adds	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f47f ae6b 	bne.w	800159c <HAL_GPIO_Init+0x14>
  }
}
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	3724      	adds	r7, #36	@ 0x24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	58000400 	.word	0x58000400

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018f4:	e003      	b.n	80018fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e08b      	b.n	8001a36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff f8fa 	bl	8000b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2224      	movs	r2, #36	@ 0x24
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800195c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800196c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	e006      	b.n	8001994 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001992:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d108      	bne.n	80019ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	e007      	b.n	80019be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <HAL_I2C_Init+0x134>)
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69d9      	ldr	r1, [r3, #28]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	02008000 	.word	0x02008000

08001a44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	460b      	mov	r3, r1
 8001a52:	817b      	strh	r3, [r7, #10]
 8001a54:	4613      	mov	r3, r2
 8001a56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	f040 80fd 	bne.w	8001c60 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2C_Master_Transmit+0x30>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0f6      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x21e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a7c:	f7ff fbf8 	bl	8001270 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2319      	movs	r3, #25
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fa0a 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0e1      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2221      	movs	r2, #33	@ 0x21
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	893a      	ldrh	r2, [r7, #8]
 8001abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2bff      	cmp	r3, #255	@ 0xff
 8001ace:	d906      	bls.n	8001ade <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	22ff      	movs	r2, #255	@ 0xff
 8001ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ad6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e007      	b.n	8001aee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ae8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d024      	beq.n	8001b40 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	4b4e      	ldr	r3, [pc, #312]	@ (8001c6c <HAL_I2C_Master_Transmit+0x228>)
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fc05 	bl	8002348 <I2C_TransferConfig>
 8001b3e:	e066      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	8979      	ldrh	r1, [r7, #10]
 8001b48:	4b48      	ldr	r3, [pc, #288]	@ (8001c6c <HAL_I2C_Master_Transmit+0x228>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fbfa 	bl	8002348 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b54:	e05b      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f9fd 	bl	8001f5a <I2C_WaitOnTXISFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07b      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d034      	beq.n	8001c0e <HAL_I2C_Master_Transmit+0x1ca>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d130      	bne.n	8001c0e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2180      	movs	r1, #128	@ 0x80
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f976 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e04d      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2bff      	cmp	r3, #255	@ 0xff
 8001bce:	d90e      	bls.n	8001bee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	22ff      	movs	r2, #255	@ 0xff
 8001bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	8979      	ldrh	r1, [r7, #10]
 8001bde:	2300      	movs	r3, #0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fbae 	bl	8002348 <I2C_TransferConfig>
 8001bec:	e00f      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	8979      	ldrh	r1, [r7, #10]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fb9d 	bl	8002348 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d19e      	bne.n	8001b56 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	6a39      	ldr	r1, [r7, #32]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f9e3 	bl	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e01a      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2220      	movs	r2, #32
 8001c32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_I2C_Master_Transmit+0x22c>)
 8001c40:	400b      	ands	r3, r1
 8001c42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e000      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	80002000 	.word	0x80002000
 8001c70:	fe00e800 	.word	0xfe00e800

08001c74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	460b      	mov	r3, r1
 8001c82:	817b      	strh	r3, [r7, #10]
 8001c84:	4613      	mov	r3, r2
 8001c86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	f040 80db 	bne.w	8001e4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_I2C_Master_Receive+0x30>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e0d4      	b.n	8001e4e <HAL_I2C_Master_Receive+0x1da>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cac:	f7ff fae0 	bl	8001270 <HAL_GetTick>
 8001cb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2319      	movs	r3, #25
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f8f2 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0bf      	b.n	8001e4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2222      	movs	r2, #34	@ 0x22
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	893a      	ldrh	r2, [r7, #8]
 8001cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2bff      	cmp	r3, #255	@ 0xff
 8001cfe:	d90e      	bls.n	8001d1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	22ff      	movs	r2, #255	@ 0xff
 8001d04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	4b52      	ldr	r3, [pc, #328]	@ (8001e58 <HAL_I2C_Master_Receive+0x1e4>)
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fb16 	bl	8002348 <I2C_TransferConfig>
 8001d1c:	e06d      	b.n	8001dfa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	4b49      	ldr	r3, [pc, #292]	@ (8001e58 <HAL_I2C_Master_Receive+0x1e4>)
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fb05 	bl	8002348 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d3e:	e05c      	b.n	8001dfa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	6a39      	ldr	r1, [r7, #32]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f993 	bl	8002070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e07c      	b.n	8001e4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d034      	beq.n	8001dfa <HAL_I2C_Master_Receive+0x186>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d130      	bne.n	8001dfa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2180      	movs	r1, #128	@ 0x80
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f880 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e04d      	b.n	8001e4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2bff      	cmp	r3, #255	@ 0xff
 8001dba:	d90e      	bls.n	8001dda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	22ff      	movs	r2, #255	@ 0xff
 8001dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	8979      	ldrh	r1, [r7, #10]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fab8 	bl	8002348 <I2C_TransferConfig>
 8001dd8:	e00f      	b.n	8001dfa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	8979      	ldrh	r1, [r7, #10]
 8001dec:	2300      	movs	r3, #0
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 faa7 	bl	8002348 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d19d      	bne.n	8001d40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	6a39      	ldr	r1, [r7, #32]
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f8ed 	bl	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e01a      	b.n	8001e4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_I2C_Master_Receive+0x1e8>)
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	80002400 	.word	0x80002400
 8001e5c:	fe00e800 	.word	0xfe00e800

08001e60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d103      	bne.n	8001e7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d007      	beq.n	8001e9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	619a      	str	r2, [r3, #24]
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb8:	e03b      	b.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f962 	bl	8002188 <I2C_IsErrorOccurred>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e041      	b.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d02d      	beq.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed6:	f7ff f9cb 	bl	8001270 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d302      	bcc.n	8001eec <I2C_WaitOnFlagUntilTimeout+0x44>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d122      	bne.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d113      	bne.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f043 0220 	orr.w	r2, r3, #32
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	bf0c      	ite	eq
 8001f42:	2301      	moveq	r3, #1
 8001f44:	2300      	movne	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d0b4      	beq.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f66:	e033      	b.n	8001fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f90b 	bl	8002188 <I2C_IsErrorOccurred>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e031      	b.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f82:	d025      	beq.n	8001fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f84:	f7ff f974 	bl	8001270 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d302      	bcc.n	8001f9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11a      	bne.n	8001fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d013      	beq.n	8001fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e007      	b.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d1c4      	bne.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff4:	e02f      	b.n	8002056 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f8c4 	bl	8002188 <I2C_IsErrorOccurred>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e02d      	b.n	8002066 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f931 	bl	8001270 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11a      	bne.n	8002056 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d013      	beq.n	8002056 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f043 0220 	orr.w	r2, r3, #32
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e007      	b.n	8002066 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b20      	cmp	r3, #32
 8002062:	d1c8      	bne.n	8001ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002080:	e071      	b.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f87e 	bl	8002188 <I2C_IsErrorOccurred>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d13b      	bne.n	800211c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d138      	bne.n	800211c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d105      	bne.n	80020c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b10      	cmp	r3, #16
 80020d0:	d121      	bne.n	8002116 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2210      	movs	r2, #16
 80020d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2204      	movs	r2, #4
 80020de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2220      	movs	r2, #32
 80020e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80020f4:	400b      	ands	r3, r1
 80020f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	75fb      	strb	r3, [r7, #23]
 8002114:	e002      	b.n	800211c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800211c:	f7ff f8a8 	bl	8001270 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	429a      	cmp	r2, r3
 800212a:	d302      	bcc.n	8002132 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d119      	bne.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d116      	bne.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d00f      	beq.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f043 0220 	orr.w	r2, r3, #32
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d002      	beq.n	800217a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d083      	beq.n	8002082 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800217a:	7dfb      	ldrb	r3, [r7, #23]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	fe00e800 	.word	0xfe00e800

08002188 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	@ 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d068      	beq.n	8002286 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2210      	movs	r2, #16
 80021ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021bc:	e049      	b.n	8002252 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d045      	beq.n	8002252 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021c6:	f7ff f853 	bl	8001270 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d302      	bcc.n	80021dc <I2C_IsErrorOccurred+0x54>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d13a      	bne.n	8002252 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021fe:	d121      	bne.n	8002244 <I2C_IsErrorOccurred+0xbc>
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002206:	d01d      	beq.n	8002244 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	2b20      	cmp	r3, #32
 800220c:	d01a      	beq.n	8002244 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800221c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800221e:	f7ff f827 	bl	8001270 <HAL_GetTick>
 8002222:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002224:	e00e      	b.n	8002244 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002226:	f7ff f823 	bl	8001270 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b19      	cmp	r3, #25
 8002232:	d907      	bls.n	8002244 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	f043 0320 	orr.w	r3, r3, #32
 800223a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002242:	e006      	b.n	8002252 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b20      	cmp	r3, #32
 8002250:	d1e9      	bne.n	8002226 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b20      	cmp	r3, #32
 800225e:	d003      	beq.n	8002268 <I2C_IsErrorOccurred+0xe0>
 8002260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0aa      	beq.n	80021be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00b      	beq.n	80022b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80022f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01c      	beq.n	8002336 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fdaf 	bl	8001e60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <I2C_IsErrorOccurred+0x1bc>)
 800230e:	400b      	ands	r3, r1
 8002310:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	431a      	orrs	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002336:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800233a:	4618      	mov	r0, r3
 800233c:	3728      	adds	r7, #40	@ 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	fe00e800 	.word	0xfe00e800

08002348 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	817b      	strh	r3, [r7, #10]
 8002356:	4613      	mov	r3, r2
 8002358:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002360:	7a7b      	ldrb	r3, [r7, #9]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002368:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	4313      	orrs	r3, r2
 8002372:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002376:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	0d5b      	lsrs	r3, r3, #21
 8002382:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <I2C_TransferConfig+0x60>)
 8002388:	430b      	orrs	r3, r1
 800238a:	43db      	mvns	r3, r3
 800238c:	ea02 0103 	and.w	r1, r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	03ff63ff 	.word	0x03ff63ff

080023ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d138      	bne.n	8002434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e032      	b.n	8002436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	@ 0x24
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	d139      	bne.n	80024cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002462:	2302      	movs	r3, #2
 8002464:	e033      	b.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2224      	movs	r2, #36	@ 0x24
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002494:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_PWREx_ConfigSupply+0x70>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d00a      	beq.n	8002506 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024f0:	4b16      	ldr	r3, [pc, #88]	@ (800254c <HAL_PWREx_ConfigSupply+0x70>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e01f      	b.n	8002542 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e01d      	b.n	8002542 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <HAL_PWREx_ConfigSupply+0x70>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f023 0207 	bic.w	r2, r3, #7
 800250e:	490f      	ldr	r1, [pc, #60]	@ (800254c <HAL_PWREx_ConfigSupply+0x70>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4313      	orrs	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002516:	f7fe feab 	bl	8001270 <HAL_GetTick>
 800251a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800251c:	e009      	b.n	8002532 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800251e:	f7fe fea7 	bl	8001270 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800252c:	d901      	bls.n	8002532 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e007      	b.n	8002542 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_PWREx_ConfigSupply+0x70>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800253e:	d1ee      	bne.n	800251e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	58024800 	.word	0x58024800

08002550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	@ 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e3c8      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8087 	beq.w	800267e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002570:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800257a:	4b86      	ldr	r3, [pc, #536]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002582:	2b10      	cmp	r3, #16
 8002584:	d007      	beq.n	8002596 <HAL_RCC_OscConfig+0x46>
 8002586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002588:	2b18      	cmp	r3, #24
 800258a:	d110      	bne.n	80025ae <HAL_RCC_OscConfig+0x5e>
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d10b      	bne.n	80025ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002596:	4b7f      	ldr	r3, [pc, #508]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d06c      	beq.n	800267c <HAL_RCC_OscConfig+0x12c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d168      	bne.n	800267c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e3a2      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x76>
 80025b8:	4b76      	ldr	r3, [pc, #472]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a75      	ldr	r2, [pc, #468]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e02e      	b.n	8002624 <HAL_RCC_OscConfig+0xd4>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x98>
 80025ce:	4b71      	ldr	r3, [pc, #452]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a70      	ldr	r2, [pc, #448]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6e      	ldr	r3, [pc, #440]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6d      	ldr	r2, [pc, #436]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e01d      	b.n	8002624 <HAL_RCC_OscConfig+0xd4>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0xbc>
 80025f2:	4b68      	ldr	r3, [pc, #416]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a67      	ldr	r2, [pc, #412]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80025f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b65      	ldr	r3, [pc, #404]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a64      	ldr	r2, [pc, #400]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0xd4>
 800260c:	4b61      	ldr	r3, [pc, #388]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a60      	ldr	r2, [pc, #384]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b5e      	ldr	r3, [pc, #376]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fe20 	bl	8001270 <HAL_GetTick>
 8002630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe fe1c 	bl	8001270 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e356      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002646:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0xe4>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fe0c 	bl	8001270 <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800265c:	f7fe fe08 	bl	8001270 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	@ 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e342      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800266e:	4b49      	ldr	r3, [pc, #292]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x10c>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 808c 	beq.w	80027a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268c:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002694:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002696:	4b3f      	ldr	r3, [pc, #252]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_RCC_OscConfig+0x162>
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2b18      	cmp	r3, #24
 80026a6:	d137      	bne.n	8002718 <HAL_RCC_OscConfig+0x1c8>
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d132      	bne.n	8002718 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b2:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x17a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e314      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026ca:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0219 	bic.w	r2, r3, #25
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	492f      	ldr	r1, [pc, #188]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fdc8 	bl	8001270 <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7fe fdc4 	bl	8001270 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e2fe      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	4920      	ldr	r1, [pc, #128]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002716:	e045      	b.n	80027a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d026      	beq.n	800276e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 0219 	bic.w	r2, r3, #25
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4919      	ldr	r1, [pc, #100]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fd9d 	bl	8001270 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe fd99 	bl	8001270 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e2d3      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	490b      	ldr	r1, [pc, #44]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e01a      	b.n	80027a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <HAL_RCC_OscConfig+0x244>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe fd79 	bl	8001270 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe fd75 	bl	8001270 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d903      	bls.n	8002798 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e2af      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
 8002794:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002798:	4b96      	ldr	r3, [pc, #600]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ee      	bne.n	8002782 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d06a      	beq.n	8002886 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b0:	4b90      	ldr	r3, [pc, #576]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ba:	4b8e      	ldr	r3, [pc, #568]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d007      	beq.n	80027d6 <HAL_RCC_OscConfig+0x286>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b18      	cmp	r3, #24
 80027ca:	d11b      	bne.n	8002804 <HAL_RCC_OscConfig+0x2b4>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d116      	bne.n	8002804 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027d6:	4b87      	ldr	r3, [pc, #540]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_RCC_OscConfig+0x29e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2b80      	cmp	r3, #128	@ 0x80
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e282      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ee:	4b81      	ldr	r3, [pc, #516]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	497d      	ldr	r1, [pc, #500]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002802:	e040      	b.n	8002886 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800280c:	4b79      	ldr	r3, [pc, #484]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a78      	ldr	r2, [pc, #480]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 8002812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fd2a 	bl	8001270 <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002820:	f7fe fd26 	bl	8001270 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e260      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002832:	4b70      	ldr	r3, [pc, #448]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800283e:	4b6d      	ldr	r3, [pc, #436]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	4969      	ldr	r1, [pc, #420]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	60cb      	str	r3, [r1, #12]
 8002852:	e018      	b.n	8002886 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002854:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a66      	ldr	r2, [pc, #408]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800285a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fd06 	bl	8001270 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002868:	f7fe fd02 	bl	8001270 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e23c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800287a:	4b5e      	ldr	r3, [pc, #376]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d036      	beq.n	8002900 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d019      	beq.n	80028ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b56      	ldr	r3, [pc, #344]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800289c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289e:	4a55      	ldr	r2, [pc, #340]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7fe fce3 	bl	8001270 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ae:	f7fe fcdf 	bl	8001270 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e219      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028c0:	4b4c      	ldr	r3, [pc, #304]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x35e>
 80028cc:	e018      	b.n	8002900 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ce:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80028d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d2:	4a48      	ldr	r2, [pc, #288]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fcc9 	bl	8001270 <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7fe fcc5 	bl	8001270 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1ff      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028f4:	4b3f      	ldr	r3, [pc, #252]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d036      	beq.n	800297a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d019      	beq.n	8002948 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002914:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800291a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800291e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002920:	f7fe fca6 	bl	8001270 <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002928:	f7fe fca2 	bl	8001270 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1dc      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800293a:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x3d8>
 8002946:	e018      	b.n	800297a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002948:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a29      	ldr	r2, [pc, #164]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 800294e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002952:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002954:	f7fe fc8c 	bl	8001270 <HAL_GetTick>
 8002958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295c:	f7fe fc88 	bl	8001270 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1c2      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8086 	beq.w	8002a94 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1a      	ldr	r2, [pc, #104]	@ (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002992:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002994:	f7fe fc6c 	bl	8001270 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299c:	f7fe fc68 	bl	8001270 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	@ 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e1a2      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ae:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d106      	bne.n	80029d0 <HAL_RCC_OscConfig+0x480>
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ce:	e032      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x4ac>
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a05      	ldr	r2, [pc, #20]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e8:	4a02      	ldr	r2, [pc, #8]	@ (80029f4 <HAL_RCC_OscConfig+0x4a4>)
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f0:	e021      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e6>
 80029f2:	bf00      	nop
 80029f4:	58024400 	.word	0x58024400
 80029f8:	58024800 	.word	0x58024800
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4ce>
 8002a04:	4b83      	ldr	r3, [pc, #524]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	4a82      	ldr	r2, [pc, #520]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a10:	4b80      	ldr	r3, [pc, #512]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	4a7f      	ldr	r2, [pc, #508]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1c:	e00b      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e6>
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a7c      	ldr	r2, [pc, #496]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2e:	4a79      	ldr	r2, [pc, #484]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d015      	beq.n	8002a6a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fc17 	bl	8001270 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fc13 	bl	8001270 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e14b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a5c:	4b6d      	ldr	r3, [pc, #436]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ee      	beq.n	8002a46 <HAL_RCC_OscConfig+0x4f6>
 8002a68:	e014      	b.n	8002a94 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fc01 	bl	8001270 <HAL_GetTick>
 8002a6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fbfd 	bl	8001270 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e135      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a88:	4b62      	ldr	r3, [pc, #392]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 812a 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aa6:	2b18      	cmp	r3, #24
 8002aa8:	f000 80ba 	beq.w	8002c20 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f040 8095 	bne.w	8002be0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b57      	ldr	r3, [pc, #348]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a56      	ldr	r2, [pc, #344]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002abc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fbd5 	bl	8001270 <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fbd1 	bl	8001270 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e10b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002adc:	4b4d      	ldr	r3, [pc, #308]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002aea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aec:	4b4a      	ldr	r3, [pc, #296]	@ (8002c18 <HAL_RCC_OscConfig+0x6c8>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	430a      	orrs	r2, r1
 8002afc:	4945      	ldr	r1, [pc, #276]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	3b01      	subs	r3, #1
 8002b08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b10:	3b01      	subs	r3, #1
 8002b12:	025b      	lsls	r3, r3, #9
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b32:	4938      	ldr	r1, [pc, #224]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b38:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	4a35      	ldr	r2, [pc, #212]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b44:	4b33      	ldr	r3, [pc, #204]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b48:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <HAL_RCC_OscConfig+0x6cc>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b50:	00d2      	lsls	r2, r2, #3
 8002b52:	4930      	ldr	r1, [pc, #192]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b58:	4b2e      	ldr	r3, [pc, #184]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	f023 020c 	bic.w	r2, r3, #12
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	492b      	ldr	r1, [pc, #172]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	f023 0202 	bic.w	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	4927      	ldr	r1, [pc, #156]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	4a24      	ldr	r2, [pc, #144]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b88:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b94:	4b1f      	ldr	r3, [pc, #124]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	4a1e      	ldr	r2, [pc, #120]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002b9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fb5a 	bl	8001270 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fb56 	bl	8001270 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e090      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x670>
 8002bde:	e088      	b.n	8002cf2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fb40 	bl	8001270 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe fb3c 	bl	8001270 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e076      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c06:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_RCC_OscConfig+0x6c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6a4>
 8002c12:	e06e      	b.n	8002cf2 <HAL_RCC_OscConfig+0x7a2>
 8002c14:	58024400 	.word	0x58024400
 8002c18:	fffffc0c 	.word	0xfffffc0c
 8002c1c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c26:	4b35      	ldr	r3, [pc, #212]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d031      	beq.n	8002c98 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f003 0203 	and.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d12a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d122      	bne.n	8002c98 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0a5b      	lsrs	r3, r3, #9
 8002c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d111      	bne.n	8002c98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	0e1b      	lsrs	r3, r3, #24
 8002c8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e02b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c9c:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ca6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb6:	4a11      	ldr	r2, [pc, #68]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cbe:	f7fe fad7 	bl	8001270 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002cc4:	bf00      	nop
 8002cc6:	f7fe fad3 	bl	8001270 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d0f9      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <HAL_RCC_OscConfig+0x7b0>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cde:	00d2      	lsls	r2, r2, #3
 8002ce0:	4906      	ldr	r1, [pc, #24]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <HAL_RCC_OscConfig+0x7ac>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3730      	adds	r7, #48	@ 0x30
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	ffff0007 	.word	0xffff0007

08002d04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e19c      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b8a      	ldr	r3, [pc, #552]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b87      	ldr	r3, [pc, #540]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	4985      	ldr	r1, [pc, #532]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b83      	ldr	r3, [pc, #524]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e184      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	4b7b      	ldr	r3, [pc, #492]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d908      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d64:	4b78      	ldr	r3, [pc, #480]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4975      	ldr	r1, [pc, #468]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	4b70      	ldr	r3, [pc, #448]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d908      	bls.n	8002da4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d92:	4b6d      	ldr	r3, [pc, #436]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	496a      	ldr	r1, [pc, #424]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	4b64      	ldr	r3, [pc, #400]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d908      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dc0:	4b61      	ldr	r3, [pc, #388]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	495e      	ldr	r1, [pc, #376]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	4b59      	ldr	r3, [pc, #356]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d908      	bls.n	8002e00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dee:	4b56      	ldr	r3, [pc, #344]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4953      	ldr	r1, [pc, #332]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	4b4d      	ldr	r3, [pc, #308]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d908      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f023 020f 	bic.w	r2, r3, #15
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4947      	ldr	r1, [pc, #284]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d055      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e3a:	4b43      	ldr	r3, [pc, #268]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4940      	ldr	r1, [pc, #256]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e54:	4b3c      	ldr	r3, [pc, #240]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d121      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0f6      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e6c:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d115      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0ea      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e84:	4b30      	ldr	r3, [pc, #192]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0de      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e94:	4b2c      	ldr	r3, [pc, #176]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0d6      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f023 0207 	bic.w	r2, r3, #7
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4925      	ldr	r1, [pc, #148]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb6:	f7fe f9db 	bl	8001270 <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebe:	f7fe f9d7 	bl	8001270 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0be      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d1eb      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d208      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f02:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f023 020f 	bic.w	r2, r3, #15
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	490e      	ldr	r1, [pc, #56]	@ (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d214      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 020f 	bic.w	r2, r3, #15
 8002f2a:	4906      	ldr	r1, [pc, #24]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e086      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
 8002f44:	52002000 	.word	0x52002000
 8002f48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d208      	bcs.n	8002f7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f68:	4b3c      	ldr	r3, [pc, #240]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	4939      	ldr	r1, [pc, #228]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	4b34      	ldr	r3, [pc, #208]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d208      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f96:	4b31      	ldr	r3, [pc, #196]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	492e      	ldr	r1, [pc, #184]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	4b28      	ldr	r3, [pc, #160]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d208      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fc4:	4b25      	ldr	r3, [pc, #148]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	4922      	ldr	r1, [pc, #136]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d208      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4917      	ldr	r1, [pc, #92]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8003000:	4313      	orrs	r3, r2
 8003002:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003004:	f000 f834 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b14      	ldr	r3, [pc, #80]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	4912      	ldr	r1, [pc, #72]	@ (8003060 <HAL_RCC_ClockConfig+0x35c>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <HAL_RCC_ClockConfig+0x358>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a0d      	ldr	r2, [pc, #52]	@ (8003060 <HAL_RCC_ClockConfig+0x35c>)
 800302c:	5cd3      	ldrb	r3, [r2, r3]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <HAL_RCC_ClockConfig+0x360>)
 800303a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800303c:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_RCC_ClockConfig+0x364>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_RCC_ClockConfig+0x368>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe f8c8 	bl	80011dc <HAL_InitTick>
 800304c:	4603      	mov	r3, r0
 800304e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	58024400 	.word	0x58024400
 8003060:	08007340 	.word	0x08007340
 8003064:	24000004 	.word	0x24000004
 8003068:	24000000 	.word	0x24000000
 800306c:	24000008 	.word	0x24000008

08003070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	@ 0x24
 8003074:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003076:	4bb3      	ldr	r3, [pc, #716]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800307e:	2b18      	cmp	r3, #24
 8003080:	f200 8155 	bhi.w	800332e <HAL_RCC_GetSysClockFreq+0x2be>
 8003084:	a201      	add	r2, pc, #4	@ (adr r2, 800308c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030f1 	.word	0x080030f1
 8003090:	0800332f 	.word	0x0800332f
 8003094:	0800332f 	.word	0x0800332f
 8003098:	0800332f 	.word	0x0800332f
 800309c:	0800332f 	.word	0x0800332f
 80030a0:	0800332f 	.word	0x0800332f
 80030a4:	0800332f 	.word	0x0800332f
 80030a8:	0800332f 	.word	0x0800332f
 80030ac:	08003117 	.word	0x08003117
 80030b0:	0800332f 	.word	0x0800332f
 80030b4:	0800332f 	.word	0x0800332f
 80030b8:	0800332f 	.word	0x0800332f
 80030bc:	0800332f 	.word	0x0800332f
 80030c0:	0800332f 	.word	0x0800332f
 80030c4:	0800332f 	.word	0x0800332f
 80030c8:	0800332f 	.word	0x0800332f
 80030cc:	0800311d 	.word	0x0800311d
 80030d0:	0800332f 	.word	0x0800332f
 80030d4:	0800332f 	.word	0x0800332f
 80030d8:	0800332f 	.word	0x0800332f
 80030dc:	0800332f 	.word	0x0800332f
 80030e0:	0800332f 	.word	0x0800332f
 80030e4:	0800332f 	.word	0x0800332f
 80030e8:	0800332f 	.word	0x0800332f
 80030ec:	08003123 	.word	0x08003123
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030f0:	4b94      	ldr	r3, [pc, #592]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030fc:	4b91      	ldr	r3, [pc, #580]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	08db      	lsrs	r3, r3, #3
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	4a90      	ldr	r2, [pc, #576]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
 800310c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800310e:	e111      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003110:	4b8d      	ldr	r3, [pc, #564]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003112:	61bb      	str	r3, [r7, #24]
      break;
 8003114:	e10e      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003116:	4b8d      	ldr	r3, [pc, #564]	@ (800334c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003118:	61bb      	str	r3, [r7, #24]
      break;
 800311a:	e10b      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800311c:	4b8c      	ldr	r3, [pc, #560]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800311e:	61bb      	str	r3, [r7, #24]
      break;
 8003120:	e108      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003122:	4b88      	ldr	r3, [pc, #544]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800312c:	4b85      	ldr	r3, [pc, #532]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003136:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003138:	4b82      	ldr	r3, [pc, #520]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003142:	4b80      	ldr	r3, [pc, #512]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003146:	08db      	lsrs	r3, r3, #3
 8003148:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80e1 	beq.w	8003328 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b02      	cmp	r3, #2
 800316a:	f000 8083 	beq.w	8003274 <HAL_RCC_GetSysClockFreq+0x204>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b02      	cmp	r3, #2
 8003172:	f200 80a1 	bhi.w	80032b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x114>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d056      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003182:	e099      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003184:	4b6f      	ldr	r3, [pc, #444]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d02d      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003190:	4b6c      	ldr	r3, [pc, #432]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	4a6b      	ldr	r2, [pc, #428]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
 80031a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ba:	4b62      	ldr	r3, [pc, #392]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031ea:	e087      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003358 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fe:	4b51      	ldr	r3, [pc, #324]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003212:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800322e:	e065      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800335c <HAL_RCC_GetSysClockFreq+0x2ec>
 800323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003242:	4b40      	ldr	r3, [pc, #256]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003252:	ed97 6a02 	vldr	s12, [r7, #8]
 8003256:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 800325a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003272:	e043      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003286:	4b2f      	ldr	r3, [pc, #188]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003296:	ed97 6a02 	vldr	s12, [r7, #8]
 800329a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 800329e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032b6:	e021      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800335c <HAL_RCC_GetSysClockFreq+0x2ec>
 80032c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032da:	ed97 6a02 	vldr	s12, [r7, #8]
 80032de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	0a5b      	lsrs	r3, r3, #9
 8003302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003306:	3301      	adds	r3, #1
 8003308:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	ee07 3a90 	vmov	s15, r3
 8003310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003314:	edd7 6a07 	vldr	s13, [r7, #28]
 8003318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003320:	ee17 3a90 	vmov	r3, s15
 8003324:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003326:	e005      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
      break;
 800332c:	e002      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003330:	61bb      	str	r3, [r7, #24]
      break;
 8003332:	bf00      	nop
  }

  return sysclockfreq;
 8003334:	69bb      	ldr	r3, [r7, #24]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	@ 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	58024400 	.word	0x58024400
 8003348:	03d09000 	.word	0x03d09000
 800334c:	003d0900 	.word	0x003d0900
 8003350:	007a1200 	.word	0x007a1200
 8003354:	46000000 	.word	0x46000000
 8003358:	4c742400 	.word	0x4c742400
 800335c:	4a742400 	.word	0x4a742400
 8003360:	4af42400 	.word	0x4af42400

08003364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800336a:	f7ff fe81 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800336e:	4602      	mov	r2, r0
 8003370:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	490f      	ldr	r1, [pc, #60]	@ (80033b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003388:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a07      	ldr	r2, [pc, #28]	@ (80033bc <HAL_RCC_GetHCLKFreq+0x58>)
 80033a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033a2:	4a07      	ldr	r2, [pc, #28]	@ (80033c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033a8:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <HAL_RCC_GetHCLKFreq+0x58>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	58024400 	.word	0x58024400
 80033b8:	08007340 	.word	0x08007340
 80033bc:	24000004 	.word	0x24000004
 80033c0:	24000000 	.word	0x24000000

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033c8:	f7ff ffcc 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4904      	ldr	r1, [pc, #16]	@ (80033ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	58024400 	.word	0x58024400
 80033ec:	08007340 	.word	0x08007340

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033f4:	f7ff ffb6 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4904      	ldr	r1, [pc, #16]	@ (8003418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	58024400 	.word	0x58024400
 8003418:	08007340 	.word	0x08007340

0800341c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b0c6      	sub	sp, #280	@ 0x118
 8003422:	af00      	add	r7, sp, #0
 8003424:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003428:	2300      	movs	r3, #0
 800342a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800342e:	2300      	movs	r3, #0
 8003430:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003440:	2500      	movs	r5, #0
 8003442:	ea54 0305 	orrs.w	r3, r4, r5
 8003446:	d049      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003452:	d02f      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003454:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003458:	d828      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800345a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800345e:	d01a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003464:	d822      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800346e:	d007      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003470:	e01c      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003472:	4bab      	ldr	r3, [pc, #684]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	4aaa      	ldr	r2, [pc, #680]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800347c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800347e:	e01a      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003484:	3308      	adds	r3, #8
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fc25 	bl	8004cd8 <RCCEx_PLL2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003494:	e00f      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800349a:	3328      	adds	r3, #40	@ 0x28
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 fccc 	bl	8004e3c <RCCEx_PLL3_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034aa:	e004      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034b2:	e000      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034be:	4b98      	ldr	r3, [pc, #608]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034cc:	4a94      	ldr	r2, [pc, #592]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80034d2:	e003      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80034e8:	f04f 0900 	mov.w	r9, #0
 80034ec:	ea58 0309 	orrs.w	r3, r8, r9
 80034f0:	d047      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d82a      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003519 	.word	0x08003519
 8003508:	08003527 	.word	0x08003527
 800350c:	0800353d 	.word	0x0800353d
 8003510:	0800355b 	.word	0x0800355b
 8003514:	0800355b 	.word	0x0800355b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003518:	4b81      	ldr	r3, [pc, #516]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	4a80      	ldr	r2, [pc, #512]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800351e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003524:	e01a      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800352a:	3308      	adds	r3, #8
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f001 fbd2 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800353a:	e00f      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800353c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003540:	3328      	adds	r3, #40	@ 0x28
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f001 fc79 	bl	8004e3c <RCCEx_PLL3_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003550:	e004      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800355a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003564:	4b6e      	ldr	r3, [pc, #440]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003568:	f023 0107 	bic.w	r1, r3, #7
 800356c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003572:	4a6b      	ldr	r2, [pc, #428]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6513      	str	r3, [r2, #80]	@ 0x50
 8003578:	e003      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800357e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800358e:	f04f 0b00 	mov.w	fp, #0
 8003592:	ea5a 030b 	orrs.w	r3, sl, fp
 8003596:	d05b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035a0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80035a4:	d03b      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80035a6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80035aa:	d834      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035b0:	d037      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80035b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035b6:	d82e      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035bc:	d033      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80035be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035c2:	d828      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c8:	d01a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ce:	d822      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80035d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035d8:	d007      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80035da:	e01c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4b50      	ldr	r3, [pc, #320]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e8:	e01e      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ee:	3308      	adds	r3, #8
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fb70 	bl	8004cd8 <RCCEx_PLL2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035fe:	e013      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003604:	3328      	adds	r3, #40	@ 0x28
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fc17 	bl	8004e3c <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003614:	e008      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800361c:	e004      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10b      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003630:	4b3b      	ldr	r3, [pc, #236]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003634:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003640:	4a37      	ldr	r2, [pc, #220]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003642:	430b      	orrs	r3, r1
 8003644:	6593      	str	r3, [r2, #88]	@ 0x58
 8003646:	e003      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800364c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800365c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003666:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800366a:	460b      	mov	r3, r1
 800366c:	4313      	orrs	r3, r2
 800366e:	d05d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003674:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003678:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800367c:	d03b      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800367e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003682:	d834      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003684:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003688:	d037      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800368a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800368e:	d82e      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003690:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003694:	d033      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003696:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800369a:	d828      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800369c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a0:	d01a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80036a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a6:	d822      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b0:	d007      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036b2:	e01c      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	4a19      	ldr	r2, [pc, #100]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c0:	e01e      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c6:	3308      	adds	r3, #8
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 fb04 	bl	8004cd8 <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036d6:	e013      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036dc:	3328      	adds	r3, #40	@ 0x28
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 fbab 	bl	8004e3c <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ec:	e008      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036f4:	e004      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003714:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003718:	4a01      	ldr	r2, [pc, #4]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6593      	str	r3, [r2, #88]	@ 0x58
 800371e:	e005      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003728:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800372c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003738:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003742:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	d03a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800374c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003752:	2b30      	cmp	r3, #48	@ 0x30
 8003754:	d01f      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003756:	2b30      	cmp	r3, #48	@ 0x30
 8003758:	d819      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d00c      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800375e:	2b20      	cmp	r3, #32
 8003760:	d815      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d019      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003766:	2b10      	cmp	r3, #16
 8003768:	d111      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376a:	4baa      	ldr	r3, [pc, #680]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	4aa9      	ldr	r2, [pc, #676]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003776:	e011      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377c:	3308      	adds	r3, #8
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 faa9 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800378c:	e006      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003794:	e002      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800379a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	4a98      	ldr	r2, [pc, #608]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037b8:	e003      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037dc:	460b      	mov	r3, r1
 80037de:	4313      	orrs	r3, r2
 80037e0:	d051      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ec:	d035      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80037ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037f2:	d82e      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037f8:	d031      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80037fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037fe:	d828      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003804:	d01a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800380a:	d822      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	d007      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003816:	e01c      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003818:	4b7e      	ldr	r3, [pc, #504]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003824:	e01c      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382a:	3308      	adds	r3, #8
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fa52 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800383a:	e011      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003840:	3328      	adds	r3, #40	@ 0x28
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f001 faf9 	bl	8004e3c <RCCEx_PLL3_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003858:	e002      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003868:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003876:	4a67      	ldr	r2, [pc, #412]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003878:	430b      	orrs	r3, r1
 800387a:	6513      	str	r3, [r2, #80]	@ 0x50
 800387c:	e003      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003892:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800389c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4313      	orrs	r3, r2
 80038a4:	d053      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b0:	d033      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80038b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b6:	d82c      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038bc:	d02f      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80038be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038c2:	d826      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038c8:	d02b      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80038ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ce:	d820      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d4:	d012      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80038d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038da:	d81a      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d022      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e4:	d115      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ea:	3308      	adds	r3, #8
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f9f2 	bl	8004cd8 <RCCEx_PLL2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038fa:	e015      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003900:	3328      	adds	r3, #40	@ 0x28
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f001 fa99 	bl	8004e3c <RCCEx_PLL3_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003910:	e00a      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003918:	e006      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800391a:	bf00      	nop
 800391c:	e004      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003930:	4b38      	ldr	r3, [pc, #224]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003934:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	4a35      	ldr	r2, [pc, #212]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003940:	430b      	orrs	r3, r1
 8003942:	6513      	str	r3, [r2, #80]	@ 0x50
 8003944:	e003      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800394a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800394e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800395a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003964:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003968:	460b      	mov	r3, r1
 800396a:	4313      	orrs	r3, r2
 800396c:	d058      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800396e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800397a:	d033      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800397c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003980:	d82c      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003986:	d02f      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d826      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800398e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003992:	d02b      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003994:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003998:	d820      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800399a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800399e:	d012      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a4:	d81a      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d022      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ae:	d115      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b4:	3308      	adds	r3, #8
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f98d 	bl	8004cd8 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ca:	3328      	adds	r3, #40	@ 0x28
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fa34 	bl	8004e3c <RCCEx_PLL3_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039da:	e00a      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039e4:	bf00      	nop
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039e8:	bf00      	nop
 80039ea:	e002      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10e      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a0a:	4a02      	ldr	r2, [pc, #8]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d037      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a4a:	d00e      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a50:	d816      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a5a:	d111      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4bc4      	ldr	r3, [pc, #784]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4ac3      	ldr	r2, [pc, #780]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a68:	e00f      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f930 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a7e:	e004      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a92:	4bb7      	ldr	r3, [pc, #732]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a96:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa0:	4ab3      	ldr	r2, [pc, #716]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa6:	e003      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003aca:	460b      	mov	r3, r1
 8003acc:	4313      	orrs	r3, r2
 8003ace:	d039      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d81c      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003ada:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b1d 	.word	0x08003b1d
 8003ae4:	08003af1 	.word	0x08003af1
 8003ae8:	08003aff 	.word	0x08003aff
 8003aec:	08003b1d 	.word	0x08003b1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af0:	4b9f      	ldr	r3, [pc, #636]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	4a9e      	ldr	r2, [pc, #632]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003afc:	e00f      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b02:	3308      	adds	r3, #8
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f8e6 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b12:	e004      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b1a:	e000      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b26:	4b92      	ldr	r3, [pc, #584]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2a:	f023 0103 	bic.w	r1, r3, #3
 8003b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b34:	4a8e      	ldr	r2, [pc, #568]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f000 8099 	beq.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b66:	4b83      	ldr	r3, [pc, #524]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a82      	ldr	r2, [pc, #520]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b72:	f7fd fb7d 	bl	8001270 <HAL_GetTick>
 8003b76:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fd fb78 	bl	8001270 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	@ 0x64
 8003b8a:	d903      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b92:	e005      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b94:	4b77      	ldr	r3, [pc, #476]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ed      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d173      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ba8:	4b71      	ldr	r3, [pc, #452]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003baa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bb4:	4053      	eors	r3, r2
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d015      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bca:	4b69      	ldr	r3, [pc, #420]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a68      	ldr	r2, [pc, #416]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd6:	4b66      	ldr	r3, [pc, #408]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	4a65      	ldr	r2, [pc, #404]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003be2:	4a63      	ldr	r2, [pc, #396]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf6:	d118      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fb3a 	bl	8001270 <HAL_GetTick>
 8003bfc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c00:	e00d      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fd fb35 	bl	8001270 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003c0c:	1ad2      	subs	r2, r2, r3
 8003c0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d903      	bls.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003c1c:	e005      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c1e:	4b54      	ldr	r3, [pc, #336]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0eb      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d129      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c42:	d10e      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c44:	4b4a      	ldr	r3, [pc, #296]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c54:	091a      	lsrs	r2, r3, #4
 8003c56:	4b48      	ldr	r3, [pc, #288]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	4a45      	ldr	r2, [pc, #276]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6113      	str	r3, [r2, #16]
 8003c60:	e005      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c62:	4b43      	ldr	r3, [pc, #268]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	4a42      	ldr	r2, [pc, #264]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c6c:	6113      	str	r3, [r2, #16]
 8003c6e:	4b40      	ldr	r3, [pc, #256]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c70:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c84:	e008      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f002 0301 	and.w	r3, r2, #1
 8003ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f000 808f 	beq.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cc0:	2b28      	cmp	r3, #40	@ 0x28
 8003cc2:	d871      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003db1 	.word	0x08003db1
 8003cd0:	08003da9 	.word	0x08003da9
 8003cd4:	08003da9 	.word	0x08003da9
 8003cd8:	08003da9 	.word	0x08003da9
 8003cdc:	08003da9 	.word	0x08003da9
 8003ce0:	08003da9 	.word	0x08003da9
 8003ce4:	08003da9 	.word	0x08003da9
 8003ce8:	08003da9 	.word	0x08003da9
 8003cec:	08003d7d 	.word	0x08003d7d
 8003cf0:	08003da9 	.word	0x08003da9
 8003cf4:	08003da9 	.word	0x08003da9
 8003cf8:	08003da9 	.word	0x08003da9
 8003cfc:	08003da9 	.word	0x08003da9
 8003d00:	08003da9 	.word	0x08003da9
 8003d04:	08003da9 	.word	0x08003da9
 8003d08:	08003da9 	.word	0x08003da9
 8003d0c:	08003d93 	.word	0x08003d93
 8003d10:	08003da9 	.word	0x08003da9
 8003d14:	08003da9 	.word	0x08003da9
 8003d18:	08003da9 	.word	0x08003da9
 8003d1c:	08003da9 	.word	0x08003da9
 8003d20:	08003da9 	.word	0x08003da9
 8003d24:	08003da9 	.word	0x08003da9
 8003d28:	08003da9 	.word	0x08003da9
 8003d2c:	08003db1 	.word	0x08003db1
 8003d30:	08003da9 	.word	0x08003da9
 8003d34:	08003da9 	.word	0x08003da9
 8003d38:	08003da9 	.word	0x08003da9
 8003d3c:	08003da9 	.word	0x08003da9
 8003d40:	08003da9 	.word	0x08003da9
 8003d44:	08003da9 	.word	0x08003da9
 8003d48:	08003da9 	.word	0x08003da9
 8003d4c:	08003db1 	.word	0x08003db1
 8003d50:	08003da9 	.word	0x08003da9
 8003d54:	08003da9 	.word	0x08003da9
 8003d58:	08003da9 	.word	0x08003da9
 8003d5c:	08003da9 	.word	0x08003da9
 8003d60:	08003da9 	.word	0x08003da9
 8003d64:	08003da9 	.word	0x08003da9
 8003d68:	08003da9 	.word	0x08003da9
 8003d6c:	08003db1 	.word	0x08003db1
 8003d70:	58024400 	.word	0x58024400
 8003d74:	58024800 	.word	0x58024800
 8003d78:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d80:	3308      	adds	r3, #8
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ffa7 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d90:	e00f      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d96:	3328      	adds	r3, #40	@ 0x28
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f84e 	bl	8004e3c <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dba:	4bbf      	ldr	r3, [pc, #764]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dc8:	4abb      	ldr	r2, [pc, #748]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f002 0302 	and.w	r3, r2, #2
 8003de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	d041      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d824      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003e02:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e55 	.word	0x08003e55
 8003e0c:	08003e21 	.word	0x08003e21
 8003e10:	08003e37 	.word	0x08003e37
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e55 	.word	0x08003e55
 8003e1c:	08003e55 	.word	0x08003e55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e24:	3308      	adds	r3, #8
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 ff55 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e34:	e00f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3a:	3328      	adds	r3, #40	@ 0x28
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fffc 	bl	8004e3c <RCCEx_PLL3_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e5e:	4b96      	ldr	r3, [pc, #600]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f023 0107 	bic.w	r1, r3, #7
 8003e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e6c:	4a92      	ldr	r2, [pc, #584]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e72:	e003      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f002 0304 	and.w	r3, r2, #4
 8003e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e96:	460b      	mov	r3, r1
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	d044      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d825      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003efd 	.word	0x08003efd
 8003eb4:	08003ec9 	.word	0x08003ec9
 8003eb8:	08003edf 	.word	0x08003edf
 8003ebc:	08003efd 	.word	0x08003efd
 8003ec0:	08003efd 	.word	0x08003efd
 8003ec4:	08003efd 	.word	0x08003efd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ecc:	3308      	adds	r3, #8
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ff01 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003edc:	e00f      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee2:	3328      	adds	r3, #40	@ 0x28
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 ffa8 	bl	8004e3c <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f06:	4b6c      	ldr	r3, [pc, #432]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0a:	f023 0107 	bic.w	r1, r3, #7
 8003f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	4a68      	ldr	r2, [pc, #416]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f002 0320 	and.w	r3, r2, #32
 8003f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d055      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f52:	d033      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f58:	d82c      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5e:	d02f      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f64:	d826      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f6a:	d02b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f70:	d820      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f76:	d012      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f7c:	d81a      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d022      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f86:	d115      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fea1 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f9c:	e015      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa2:	3328      	adds	r3, #40	@ 0x28
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 ff48 	bl	8004e3c <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fb2:	e00a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fba:	e006      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe2:	4a35      	ldr	r2, [pc, #212]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe8:	e003      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ffe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004008:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800400c:	460b      	mov	r3, r1
 800400e:	4313      	orrs	r3, r2
 8004010:	d058      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800401a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800401e:	d033      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004020:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004024:	d82c      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402a:	d02f      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004030:	d826      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004032:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004036:	d02b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004038:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800403c:	d820      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004042:	d012      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004048:	d81a      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d022      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d115      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004058:	3308      	adds	r3, #8
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fe3b 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004068:	e015      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800406a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406e:	3328      	adds	r3, #40	@ 0x28
 8004070:	2102      	movs	r1, #2
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fee2 	bl	8004e3c <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800407e:	e00a      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004086:	e006      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004088:	bf00      	nop
 800408a:	e004      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800408c:	bf00      	nop
 800408e:	e002      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10e      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ae:	4a02      	ldr	r2, [pc, #8]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80040b6:	bf00      	nop
 80040b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d055      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040f0:	d033      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80040f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040f6:	d82c      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fc:	d02f      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80040fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004102:	d826      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004104:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004108:	d02b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800410a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800410e:	d820      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004114:	d012      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800411a:	d81a      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d022      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004124:	d115      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412a:	3308      	adds	r3, #8
 800412c:	2100      	movs	r1, #0
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fdd2 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800413a:	e015      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	3328      	adds	r3, #40	@ 0x28
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fe79 	bl	8004e3c <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004150:	e00a      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004158:	e006      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800415a:	bf00      	nop
 800415c:	e004      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800415e:	bf00      	nop
 8004160:	e002      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004162:	bf00      	nop
 8004164:	e000      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10b      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004170:	4ba0      	ldr	r3, [pc, #640]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004174:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004180:	4a9c      	ldr	r2, [pc, #624]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004182:	430b      	orrs	r3, r1
 8004184:	6593      	str	r3, [r2, #88]	@ 0x58
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800418c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 0308 	and.w	r3, r2, #8
 800419c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	d01e      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80041b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c2:	3328      	adds	r3, #40	@ 0x28
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fe38 	bl	8004e3c <RCCEx_PLL3_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80041d8:	4b86      	ldr	r3, [pc, #536]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e8:	4a82      	ldr	r2, [pc, #520]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f002 0310 	and.w	r3, r2, #16
 80041fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004204:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004208:	460b      	mov	r3, r1
 800420a:	4313      	orrs	r3, r2
 800420c:	d01e      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800420e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421a:	d10c      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004220:	3328      	adds	r3, #40	@ 0x28
 8004222:	2102      	movs	r1, #2
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fe09 	bl	8004e3c <RCCEx_PLL3_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004236:	4b6f      	ldr	r3, [pc, #444]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800423e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004246:	4a6b      	ldr	r2, [pc, #428]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800424c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800425a:	2300      	movs	r3, #0
 800425c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800425e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d03e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800426c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004274:	d022      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800427a:	d81b      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004284:	d00b      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004286:	e015      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428c:	3308      	adds	r3, #8
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fd21 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800429c:	e00f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a2:	3328      	adds	r3, #40	@ 0x28
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fdc8 	bl	8004e3c <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042b2:	e004      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80042bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c6:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042d6:	4a47      	ldr	r2, [pc, #284]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	6593      	str	r3, [r2, #88]	@ 0x58
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80042f4:	2300      	movs	r3, #0
 80042f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80042f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d03b      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800430e:	d01f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004310:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004314:	d818      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800431c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004320:	d007      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b33      	ldr	r3, [pc, #204]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	4a32      	ldr	r2, [pc, #200]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004330:	e00f      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004336:	3328      	adds	r3, #40	@ 0x28
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fd7e 	bl	8004e3c <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800435a:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800436a:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004370:	e003      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004376:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800437a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004386:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004388:	2300      	movs	r3, #0
 800438a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800438c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d034      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a4:	d007      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80043a6:	e011      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a8:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	4a11      	ldr	r2, [pc, #68]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043b4:	e00e      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ba:	3308      	adds	r3, #8
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fc8a 	bl	8004cd8 <RCCEx_PLL2_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	4a02      	ldr	r2, [pc, #8]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80043f2:	bf00      	nop
 80043f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800440c:	663b      	str	r3, [r7, #96]	@ 0x60
 800440e:	2300      	movs	r3, #0
 8004410:	667b      	str	r3, [r7, #100]	@ 0x64
 8004412:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d00c      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004420:	3328      	adds	r3, #40	@ 0x28
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fd09 	bl	8004e3c <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004442:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004444:	2300      	movs	r3, #0
 8004446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004448:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d036      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800445c:	d018      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800445e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004462:	d811      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004468:	d014      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800446a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446e:	d80b      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d011      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004478:	d106      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447a:	4bb7      	ldr	r3, [pc, #732]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	4ab6      	ldr	r2, [pc, #728]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004486:	e008      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044a2:	4bad      	ldr	r3, [pc, #692]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b0:	4aa9      	ldr	r2, [pc, #676]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044b6:	e003      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ce:	2300      	movs	r3, #0
 80044d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80044d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ea:	4a9b      	ldr	r2, [pc, #620]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044fe:	2300      	movs	r3, #0
 8004500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004502:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800450c:	4b92      	ldr	r3, [pc, #584]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800450e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004510:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800451a:	4a8f      	ldr	r2, [pc, #572]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800452c:	643b      	str	r3, [r7, #64]	@ 0x40
 800452e:	2300      	movs	r3, #0
 8004530:	647b      	str	r3, [r7, #68]	@ 0x44
 8004532:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004536:	460b      	mov	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800453c:	4b86      	ldr	r3, [pc, #536]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	4a85      	ldr	r2, [pc, #532]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004542:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004546:	6113      	str	r3, [r2, #16]
 8004548:	4b83      	ldr	r3, [pc, #524]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800454a:	6919      	ldr	r1, [r3, #16]
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004550:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004554:	4a80      	ldr	r2, [pc, #512]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004556:	430b      	orrs	r3, r1
 8004558:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004566:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004568:	2300      	movs	r3, #0
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004576:	4b78      	ldr	r3, [pc, #480]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	4a74      	ldr	r2, [pc, #464]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004586:	430b      	orrs	r3, r1
 8004588:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800458a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004596:	633b      	str	r3, [r7, #48]	@ 0x30
 8004598:	2300      	movs	r3, #0
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	4a68      	ldr	r2, [pc, #416]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	2100      	movs	r1, #0
 80045c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d011      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045dc:	3308      	adds	r3, #8
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb79 	bl	8004cd8 <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	2100      	movs	r1, #0
 8004606:	6239      	str	r1, [r7, #32]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
 800460e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d011      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461c:	3308      	adds	r3, #8
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fb59 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800462c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800463c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	2100      	movs	r1, #0
 8004646:	61b9      	str	r1, [r7, #24]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d011      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465c:	3308      	adds	r3, #8
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fb39 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	2100      	movs	r1, #0
 8004686:	6139      	str	r1, [r7, #16]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469c:	3328      	adds	r3, #40	@ 0x28
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fbcb 	bl	8004e3c <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80046ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	2100      	movs	r1, #0
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046dc:	3328      	adds	r3, #40	@ 0x28
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fbab 	bl	8004e3c <RCCEx_PLL3_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	2100      	movs	r1, #0
 8004706:	6039      	str	r1, [r7, #0]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	d011      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471c:	3328      	adds	r3, #40	@ 0x28
 800471e:	2102      	movs	r1, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fb8b 	bl	8004e3c <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800472c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004738:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800473c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
}
 800474a:	4618      	mov	r0, r3
 800474c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004750:	46bd      	mov	sp, r7
 8004752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400

0800475c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004760:	f7fe fe00 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4904      	ldr	r1, [pc, #16]	@ (8004784 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	58024400 	.word	0x58024400
 8004784:	08007340 	.word	0x08007340

08004788 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	@ 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004790:	4ba1      	ldr	r3, [pc, #644]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800479a:	4b9f      	ldr	r3, [pc, #636]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	0b1b      	lsrs	r3, r3, #12
 80047a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047b2:	4b99      	ldr	r3, [pc, #612]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8111 	beq.w	80049f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f000 8083 	beq.w	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	f200 80a1 	bhi.w	8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d056      	beq.n	80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047f2:	e099      	b.n	8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f4:	4b88      	ldr	r3, [pc, #544]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02d      	beq.n	800485c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004800:	4b85      	ldr	r3, [pc, #532]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	08db      	lsrs	r3, r3, #3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	4a84      	ldr	r2, [pc, #528]	@ (8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800485a:	e087      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004882:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489e:	e065      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b59      	ldr	r3, [pc, #356]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e2:	e043      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b48      	ldr	r3, [pc, #288]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	e021      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800496c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800499a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 2a90 	vmov	r2, s15
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049c8:	4b13      	ldr	r3, [pc, #76]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ee:	ee17 2a90 	vmov	r2, s15
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049f6:	e008      	b.n	8004a0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
}
 8004a0a:	bf00      	nop
 8004a0c:	3724      	adds	r7, #36	@ 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	03d09000 	.word	0x03d09000
 8004a20:	46000000 	.word	0x46000000
 8004a24:	4c742400 	.word	0x4c742400
 8004a28:	4a742400 	.word	0x4a742400
 8004a2c:	4af42400 	.word	0x4af42400

08004a30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	@ 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a38:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a42:	4b9f      	ldr	r3, [pc, #636]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	0d1b      	lsrs	r3, r3, #20
 8004a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a5a:	4b99      	ldr	r3, [pc, #612]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8111 	beq.w	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	f000 8083 	beq.w	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	f200 80a1 	bhi.w	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d056      	beq.n	8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a9a:	e099      	b.n	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02d      	beq.n	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aa8:	4b85      	ldr	r3, [pc, #532]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	4a84      	ldr	r2, [pc, #528]	@ (8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b02:	e087      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b16:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b46:	e065      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5a:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8a:	e043      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9e:	4b48      	ldr	r3, [pc, #288]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bce:	e021      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be2:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c14:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	0a5b      	lsrs	r3, r3, #9
 8004c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3a:	ee17 2a90 	vmov	r2, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c42:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c68:	ee17 2a90 	vmov	r2, s15
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c70:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	0e1b      	lsrs	r3, r3, #24
 8004c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c96:	ee17 2a90 	vmov	r2, s15
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	@ 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	03d09000 	.word	0x03d09000
 8004cc8:	46000000 	.word	0x46000000
 8004ccc:	4c742400 	.word	0x4c742400
 8004cd0:	4a742400 	.word	0x4a742400
 8004cd4:	4af42400 	.word	0x4af42400

08004cd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ce6:	4b53      	ldr	r3, [pc, #332]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d101      	bne.n	8004cf6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e099      	b.n	8004e2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d02:	f7fc fab5 	bl	8001270 <HAL_GetTick>
 8004d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d0a:	f7fc fab1 	bl	8001270 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e086      	b.n	8004e2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d1c:	4b45      	ldr	r3, [pc, #276]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d28:	4b42      	ldr	r3, [pc, #264]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	031b      	lsls	r3, r3, #12
 8004d36:	493f      	ldr	r1, [pc, #252]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	025b      	lsls	r3, r3, #9
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	041b      	lsls	r3, r3, #16
 8004d5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d6c:	4931      	ldr	r1, [pc, #196]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d72:	4b30      	ldr	r3, [pc, #192]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	492d      	ldr	r1, [pc, #180]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d84:	4b2b      	ldr	r3, [pc, #172]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	f023 0220 	bic.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	4928      	ldr	r1, [pc, #160]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d96:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	4a26      	ldr	r2, [pc, #152]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
 8004da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004da2:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da6:	4b24      	ldr	r3, [pc, #144]	@ (8004e38 <RCCEx_PLL2_Config+0x160>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	69d2      	ldr	r2, [r2, #28]
 8004dae:	00d2      	lsls	r2, r2, #3
 8004db0:	4920      	ldr	r1, [pc, #128]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004db6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	4a1e      	ldr	r2, [pc, #120]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a19      	ldr	r2, [pc, #100]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dd4:	e00f      	b.n	8004df6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ddc:	4b15      	ldr	r3, [pc, #84]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	4a14      	ldr	r2, [pc, #80]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004de8:	e005      	b.n	8004df6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dea:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7fc fa35 	bl	8001270 <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e08:	e008      	b.n	8004e1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e0a:	f7fc fa31 	bl	8001270 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e006      	b.n	8004e2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	58024400 	.word	0x58024400
 8004e38:	ffff0007 	.word	0xffff0007

08004e3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e4a:	4b53      	ldr	r3, [pc, #332]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d101      	bne.n	8004e5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e099      	b.n	8004f8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e66:	f7fc fa03 	bl	8001270 <HAL_GetTick>
 8004e6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e6e:	f7fc f9ff 	bl	8001270 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e086      	b.n	8004f8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e80:	4b45      	ldr	r3, [pc, #276]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e8c:	4b42      	ldr	r3, [pc, #264]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	051b      	lsls	r3, r3, #20
 8004e9a:	493f      	ldr	r1, [pc, #252]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	025b      	lsls	r3, r3, #9
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ed0:	4931      	ldr	r1, [pc, #196]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ed6:	4b30      	ldr	r3, [pc, #192]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	492d      	ldr	r1, [pc, #180]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	4928      	ldr	r1, [pc, #160]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004efa:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	4a26      	ldr	r2, [pc, #152]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f06:	4b24      	ldr	r3, [pc, #144]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f0a:	4b24      	ldr	r3, [pc, #144]	@ (8004f9c <RCCEx_PLL3_Config+0x160>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	69d2      	ldr	r2, [r2, #28]
 8004f12:	00d2      	lsls	r2, r2, #3
 8004f14:	4920      	ldr	r1, [pc, #128]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	4a19      	ldr	r2, [pc, #100]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f38:	e00f      	b.n	8004f5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f40:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4a14      	ldr	r2, [pc, #80]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f4c:	e005      	b.n	8004f5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f66:	f7fc f983 	bl	8001270 <HAL_GetTick>
 8004f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f6c:	e008      	b.n	8004f80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f6e:	f7fc f97f 	bl	8001270 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	ffff0007 	.word	0xffff0007

08004fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e042      	b.n	8005038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fb fe1b 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2224      	movs	r2, #36	@ 0x24
 8004fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 ff22 	bl	8005e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8b3 	bl	800515c <UART_SetConfig>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e01b      	b.n	8005038 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800500e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800501e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 ffa1 	bl	8005f78 <UART_CheckIdleState>
 8005036:	4603      	mov	r3, r0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	@ 0x28
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	2b20      	cmp	r3, #32
 8005058:	d17b      	bne.n	8005152 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_UART_Transmit+0x26>
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e074      	b.n	8005154 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2221      	movs	r2, #33	@ 0x21
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507a:	f7fc f8f9 	bl	8001270 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005098:	d108      	bne.n	80050ac <HAL_UART_Transmit+0x6c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e003      	b.n	80050b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050b4:	e030      	b.n	8005118 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	2180      	movs	r1, #128	@ 0x80
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f001 f803 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e03d      	b.n	8005154 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10b      	bne.n	80050f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3302      	adds	r3, #2
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	e007      	b.n	8005106 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1c8      	bne.n	80050b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 ffcc 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e006      	b.n	8005154 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e000      	b.n	8005154 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005152:	2302      	movs	r3, #2
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800515c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005160:	b092      	sub	sp, #72	@ 0x48
 8005162:	af00      	add	r7, sp, #0
 8005164:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	431a      	orrs	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4313      	orrs	r3, r2
 8005182:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4bbe      	ldr	r3, [pc, #760]	@ (8005484 <UART_SetConfig+0x328>)
 800518c:	4013      	ands	r3, r2
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005194:	430b      	orrs	r3, r1
 8005196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4ab3      	ldr	r2, [pc, #716]	@ (8005488 <UART_SetConfig+0x32c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c4:	4313      	orrs	r3, r2
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	4baf      	ldr	r3, [pc, #700]	@ (800548c <UART_SetConfig+0x330>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051d8:	430b      	orrs	r3, r1
 80051da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	f023 010f 	bic.w	r1, r3, #15
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4aa6      	ldr	r2, [pc, #664]	@ (8005490 <UART_SetConfig+0x334>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d177      	bne.n	80052ec <UART_SetConfig+0x190>
 80051fc:	4ba5      	ldr	r3, [pc, #660]	@ (8005494 <UART_SetConfig+0x338>)
 80051fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005200:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005204:	2b28      	cmp	r3, #40	@ 0x28
 8005206:	d86d      	bhi.n	80052e4 <UART_SetConfig+0x188>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <UART_SetConfig+0xb4>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	080052b5 	.word	0x080052b5
 8005214:	080052e5 	.word	0x080052e5
 8005218:	080052e5 	.word	0x080052e5
 800521c:	080052e5 	.word	0x080052e5
 8005220:	080052e5 	.word	0x080052e5
 8005224:	080052e5 	.word	0x080052e5
 8005228:	080052e5 	.word	0x080052e5
 800522c:	080052e5 	.word	0x080052e5
 8005230:	080052bd 	.word	0x080052bd
 8005234:	080052e5 	.word	0x080052e5
 8005238:	080052e5 	.word	0x080052e5
 800523c:	080052e5 	.word	0x080052e5
 8005240:	080052e5 	.word	0x080052e5
 8005244:	080052e5 	.word	0x080052e5
 8005248:	080052e5 	.word	0x080052e5
 800524c:	080052e5 	.word	0x080052e5
 8005250:	080052c5 	.word	0x080052c5
 8005254:	080052e5 	.word	0x080052e5
 8005258:	080052e5 	.word	0x080052e5
 800525c:	080052e5 	.word	0x080052e5
 8005260:	080052e5 	.word	0x080052e5
 8005264:	080052e5 	.word	0x080052e5
 8005268:	080052e5 	.word	0x080052e5
 800526c:	080052e5 	.word	0x080052e5
 8005270:	080052cd 	.word	0x080052cd
 8005274:	080052e5 	.word	0x080052e5
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080052e5 	.word	0x080052e5
 8005280:	080052e5 	.word	0x080052e5
 8005284:	080052e5 	.word	0x080052e5
 8005288:	080052e5 	.word	0x080052e5
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052d5 	.word	0x080052d5
 8005294:	080052e5 	.word	0x080052e5
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052e5 	.word	0x080052e5
 80052a0:	080052e5 	.word	0x080052e5
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	080052e5 	.word	0x080052e5
 80052ac:	080052e5 	.word	0x080052e5
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e326      	b.n	800590a <UART_SetConfig+0x7ae>
 80052bc:	2304      	movs	r3, #4
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e322      	b.n	800590a <UART_SetConfig+0x7ae>
 80052c4:	2308      	movs	r3, #8
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e31e      	b.n	800590a <UART_SetConfig+0x7ae>
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e31a      	b.n	800590a <UART_SetConfig+0x7ae>
 80052d4:	2320      	movs	r3, #32
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052da:	e316      	b.n	800590a <UART_SetConfig+0x7ae>
 80052dc:	2340      	movs	r3, #64	@ 0x40
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e2:	e312      	b.n	800590a <UART_SetConfig+0x7ae>
 80052e4:	2380      	movs	r3, #128	@ 0x80
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ea:	e30e      	b.n	800590a <UART_SetConfig+0x7ae>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a69      	ldr	r2, [pc, #420]	@ (8005498 <UART_SetConfig+0x33c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d130      	bne.n	8005358 <UART_SetConfig+0x1fc>
 80052f6:	4b67      	ldr	r3, [pc, #412]	@ (8005494 <UART_SetConfig+0x338>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d826      	bhi.n	8005350 <UART_SetConfig+0x1f4>
 8005302:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <UART_SetConfig+0x1ac>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	08005321 	.word	0x08005321
 800530c:	08005329 	.word	0x08005329
 8005310:	08005331 	.word	0x08005331
 8005314:	08005339 	.word	0x08005339
 8005318:	08005341 	.word	0x08005341
 800531c:	08005349 	.word	0x08005349
 8005320:	2300      	movs	r3, #0
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e2f0      	b.n	800590a <UART_SetConfig+0x7ae>
 8005328:	2304      	movs	r3, #4
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e2ec      	b.n	800590a <UART_SetConfig+0x7ae>
 8005330:	2308      	movs	r3, #8
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e2e8      	b.n	800590a <UART_SetConfig+0x7ae>
 8005338:	2310      	movs	r3, #16
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e2e4      	b.n	800590a <UART_SetConfig+0x7ae>
 8005340:	2320      	movs	r3, #32
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e2e0      	b.n	800590a <UART_SetConfig+0x7ae>
 8005348:	2340      	movs	r3, #64	@ 0x40
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e2dc      	b.n	800590a <UART_SetConfig+0x7ae>
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e2d8      	b.n	800590a <UART_SetConfig+0x7ae>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a4f      	ldr	r2, [pc, #316]	@ (800549c <UART_SetConfig+0x340>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d130      	bne.n	80053c4 <UART_SetConfig+0x268>
 8005362:	4b4c      	ldr	r3, [pc, #304]	@ (8005494 <UART_SetConfig+0x338>)
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b05      	cmp	r3, #5
 800536c:	d826      	bhi.n	80053bc <UART_SetConfig+0x260>
 800536e:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <UART_SetConfig+0x218>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	0800538d 	.word	0x0800538d
 8005378:	08005395 	.word	0x08005395
 800537c:	0800539d 	.word	0x0800539d
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053ad 	.word	0x080053ad
 8005388:	080053b5 	.word	0x080053b5
 800538c:	2300      	movs	r3, #0
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e2ba      	b.n	800590a <UART_SetConfig+0x7ae>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e2b6      	b.n	800590a <UART_SetConfig+0x7ae>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e2b2      	b.n	800590a <UART_SetConfig+0x7ae>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e2ae      	b.n	800590a <UART_SetConfig+0x7ae>
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e2aa      	b.n	800590a <UART_SetConfig+0x7ae>
 80053b4:	2340      	movs	r3, #64	@ 0x40
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e2a6      	b.n	800590a <UART_SetConfig+0x7ae>
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e2a2      	b.n	800590a <UART_SetConfig+0x7ae>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a35      	ldr	r2, [pc, #212]	@ (80054a0 <UART_SetConfig+0x344>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d130      	bne.n	8005430 <UART_SetConfig+0x2d4>
 80053ce:	4b31      	ldr	r3, [pc, #196]	@ (8005494 <UART_SetConfig+0x338>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d826      	bhi.n	8005428 <UART_SetConfig+0x2cc>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x284>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	080053f9 	.word	0x080053f9
 80053e4:	08005401 	.word	0x08005401
 80053e8:	08005409 	.word	0x08005409
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005419 	.word	0x08005419
 80053f4:	08005421 	.word	0x08005421
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e284      	b.n	800590a <UART_SetConfig+0x7ae>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e280      	b.n	800590a <UART_SetConfig+0x7ae>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e27c      	b.n	800590a <UART_SetConfig+0x7ae>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e278      	b.n	800590a <UART_SetConfig+0x7ae>
 8005418:	2320      	movs	r3, #32
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e274      	b.n	800590a <UART_SetConfig+0x7ae>
 8005420:	2340      	movs	r3, #64	@ 0x40
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e270      	b.n	800590a <UART_SetConfig+0x7ae>
 8005428:	2380      	movs	r3, #128	@ 0x80
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e26c      	b.n	800590a <UART_SetConfig+0x7ae>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1b      	ldr	r2, [pc, #108]	@ (80054a4 <UART_SetConfig+0x348>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d142      	bne.n	80054c0 <UART_SetConfig+0x364>
 800543a:	4b16      	ldr	r3, [pc, #88]	@ (8005494 <UART_SetConfig+0x338>)
 800543c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	2b05      	cmp	r3, #5
 8005444:	d838      	bhi.n	80054b8 <UART_SetConfig+0x35c>
 8005446:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <UART_SetConfig+0x2f0>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005465 	.word	0x08005465
 8005450:	0800546d 	.word	0x0800546d
 8005454:	08005475 	.word	0x08005475
 8005458:	0800547d 	.word	0x0800547d
 800545c:	080054a9 	.word	0x080054a9
 8005460:	080054b1 	.word	0x080054b1
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e24e      	b.n	800590a <UART_SetConfig+0x7ae>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e24a      	b.n	800590a <UART_SetConfig+0x7ae>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e246      	b.n	800590a <UART_SetConfig+0x7ae>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e242      	b.n	800590a <UART_SetConfig+0x7ae>
 8005484:	cfff69f3 	.word	0xcfff69f3
 8005488:	58000c00 	.word	0x58000c00
 800548c:	11fff4ff 	.word	0x11fff4ff
 8005490:	40011000 	.word	0x40011000
 8005494:	58024400 	.word	0x58024400
 8005498:	40004400 	.word	0x40004400
 800549c:	40004800 	.word	0x40004800
 80054a0:	40004c00 	.word	0x40004c00
 80054a4:	40005000 	.word	0x40005000
 80054a8:	2320      	movs	r3, #32
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ae:	e22c      	b.n	800590a <UART_SetConfig+0x7ae>
 80054b0:	2340      	movs	r3, #64	@ 0x40
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b6:	e228      	b.n	800590a <UART_SetConfig+0x7ae>
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e224      	b.n	800590a <UART_SetConfig+0x7ae>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4ab1      	ldr	r2, [pc, #708]	@ (800578c <UART_SetConfig+0x630>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d176      	bne.n	80055b8 <UART_SetConfig+0x45c>
 80054ca:	4bb1      	ldr	r3, [pc, #708]	@ (8005790 <UART_SetConfig+0x634>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054d2:	2b28      	cmp	r3, #40	@ 0x28
 80054d4:	d86c      	bhi.n	80055b0 <UART_SetConfig+0x454>
 80054d6:	a201      	add	r2, pc, #4	@ (adr r2, 80054dc <UART_SetConfig+0x380>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	08005581 	.word	0x08005581
 80054e0:	080055b1 	.word	0x080055b1
 80054e4:	080055b1 	.word	0x080055b1
 80054e8:	080055b1 	.word	0x080055b1
 80054ec:	080055b1 	.word	0x080055b1
 80054f0:	080055b1 	.word	0x080055b1
 80054f4:	080055b1 	.word	0x080055b1
 80054f8:	080055b1 	.word	0x080055b1
 80054fc:	08005589 	.word	0x08005589
 8005500:	080055b1 	.word	0x080055b1
 8005504:	080055b1 	.word	0x080055b1
 8005508:	080055b1 	.word	0x080055b1
 800550c:	080055b1 	.word	0x080055b1
 8005510:	080055b1 	.word	0x080055b1
 8005514:	080055b1 	.word	0x080055b1
 8005518:	080055b1 	.word	0x080055b1
 800551c:	08005591 	.word	0x08005591
 8005520:	080055b1 	.word	0x080055b1
 8005524:	080055b1 	.word	0x080055b1
 8005528:	080055b1 	.word	0x080055b1
 800552c:	080055b1 	.word	0x080055b1
 8005530:	080055b1 	.word	0x080055b1
 8005534:	080055b1 	.word	0x080055b1
 8005538:	080055b1 	.word	0x080055b1
 800553c:	08005599 	.word	0x08005599
 8005540:	080055b1 	.word	0x080055b1
 8005544:	080055b1 	.word	0x080055b1
 8005548:	080055b1 	.word	0x080055b1
 800554c:	080055b1 	.word	0x080055b1
 8005550:	080055b1 	.word	0x080055b1
 8005554:	080055b1 	.word	0x080055b1
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055a1 	.word	0x080055a1
 8005560:	080055b1 	.word	0x080055b1
 8005564:	080055b1 	.word	0x080055b1
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055b1 	.word	0x080055b1
 8005570:	080055b1 	.word	0x080055b1
 8005574:	080055b1 	.word	0x080055b1
 8005578:	080055b1 	.word	0x080055b1
 800557c:	080055a9 	.word	0x080055a9
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005586:	e1c0      	b.n	800590a <UART_SetConfig+0x7ae>
 8005588:	2304      	movs	r3, #4
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558e:	e1bc      	b.n	800590a <UART_SetConfig+0x7ae>
 8005590:	2308      	movs	r3, #8
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e1b8      	b.n	800590a <UART_SetConfig+0x7ae>
 8005598:	2310      	movs	r3, #16
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e1b4      	b.n	800590a <UART_SetConfig+0x7ae>
 80055a0:	2320      	movs	r3, #32
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e1b0      	b.n	800590a <UART_SetConfig+0x7ae>
 80055a8:	2340      	movs	r3, #64	@ 0x40
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ae:	e1ac      	b.n	800590a <UART_SetConfig+0x7ae>
 80055b0:	2380      	movs	r3, #128	@ 0x80
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b6:	e1a8      	b.n	800590a <UART_SetConfig+0x7ae>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a75      	ldr	r2, [pc, #468]	@ (8005794 <UART_SetConfig+0x638>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d130      	bne.n	8005624 <UART_SetConfig+0x4c8>
 80055c2:	4b73      	ldr	r3, [pc, #460]	@ (8005790 <UART_SetConfig+0x634>)
 80055c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d826      	bhi.n	800561c <UART_SetConfig+0x4c0>
 80055ce:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <UART_SetConfig+0x478>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080055ed 	.word	0x080055ed
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055fd 	.word	0x080055fd
 80055e0:	08005605 	.word	0x08005605
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005615 	.word	0x08005615
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e18a      	b.n	800590a <UART_SetConfig+0x7ae>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e186      	b.n	800590a <UART_SetConfig+0x7ae>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e182      	b.n	800590a <UART_SetConfig+0x7ae>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e17e      	b.n	800590a <UART_SetConfig+0x7ae>
 800560c:	2320      	movs	r3, #32
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e17a      	b.n	800590a <UART_SetConfig+0x7ae>
 8005614:	2340      	movs	r3, #64	@ 0x40
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e176      	b.n	800590a <UART_SetConfig+0x7ae>
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e172      	b.n	800590a <UART_SetConfig+0x7ae>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a5b      	ldr	r2, [pc, #364]	@ (8005798 <UART_SetConfig+0x63c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d130      	bne.n	8005690 <UART_SetConfig+0x534>
 800562e:	4b58      	ldr	r3, [pc, #352]	@ (8005790 <UART_SetConfig+0x634>)
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	2b05      	cmp	r3, #5
 8005638:	d826      	bhi.n	8005688 <UART_SetConfig+0x52c>
 800563a:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <UART_SetConfig+0x4e4>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005659 	.word	0x08005659
 8005644:	08005661 	.word	0x08005661
 8005648:	08005669 	.word	0x08005669
 800564c:	08005671 	.word	0x08005671
 8005650:	08005679 	.word	0x08005679
 8005654:	08005681 	.word	0x08005681
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e154      	b.n	800590a <UART_SetConfig+0x7ae>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e150      	b.n	800590a <UART_SetConfig+0x7ae>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e14c      	b.n	800590a <UART_SetConfig+0x7ae>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e148      	b.n	800590a <UART_SetConfig+0x7ae>
 8005678:	2320      	movs	r3, #32
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567e:	e144      	b.n	800590a <UART_SetConfig+0x7ae>
 8005680:	2340      	movs	r3, #64	@ 0x40
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005686:	e140      	b.n	800590a <UART_SetConfig+0x7ae>
 8005688:	2380      	movs	r3, #128	@ 0x80
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568e:	e13c      	b.n	800590a <UART_SetConfig+0x7ae>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a41      	ldr	r2, [pc, #260]	@ (800579c <UART_SetConfig+0x640>)
 8005696:	4293      	cmp	r3, r2
 8005698:	f040 8082 	bne.w	80057a0 <UART_SetConfig+0x644>
 800569c:	4b3c      	ldr	r3, [pc, #240]	@ (8005790 <UART_SetConfig+0x634>)
 800569e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056a4:	2b28      	cmp	r3, #40	@ 0x28
 80056a6:	d86d      	bhi.n	8005784 <UART_SetConfig+0x628>
 80056a8:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x554>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	08005755 	.word	0x08005755
 80056b4:	08005785 	.word	0x08005785
 80056b8:	08005785 	.word	0x08005785
 80056bc:	08005785 	.word	0x08005785
 80056c0:	08005785 	.word	0x08005785
 80056c4:	08005785 	.word	0x08005785
 80056c8:	08005785 	.word	0x08005785
 80056cc:	08005785 	.word	0x08005785
 80056d0:	0800575d 	.word	0x0800575d
 80056d4:	08005785 	.word	0x08005785
 80056d8:	08005785 	.word	0x08005785
 80056dc:	08005785 	.word	0x08005785
 80056e0:	08005785 	.word	0x08005785
 80056e4:	08005785 	.word	0x08005785
 80056e8:	08005785 	.word	0x08005785
 80056ec:	08005785 	.word	0x08005785
 80056f0:	08005765 	.word	0x08005765
 80056f4:	08005785 	.word	0x08005785
 80056f8:	08005785 	.word	0x08005785
 80056fc:	08005785 	.word	0x08005785
 8005700:	08005785 	.word	0x08005785
 8005704:	08005785 	.word	0x08005785
 8005708:	08005785 	.word	0x08005785
 800570c:	08005785 	.word	0x08005785
 8005710:	0800576d 	.word	0x0800576d
 8005714:	08005785 	.word	0x08005785
 8005718:	08005785 	.word	0x08005785
 800571c:	08005785 	.word	0x08005785
 8005720:	08005785 	.word	0x08005785
 8005724:	08005785 	.word	0x08005785
 8005728:	08005785 	.word	0x08005785
 800572c:	08005785 	.word	0x08005785
 8005730:	08005775 	.word	0x08005775
 8005734:	08005785 	.word	0x08005785
 8005738:	08005785 	.word	0x08005785
 800573c:	08005785 	.word	0x08005785
 8005740:	08005785 	.word	0x08005785
 8005744:	08005785 	.word	0x08005785
 8005748:	08005785 	.word	0x08005785
 800574c:	08005785 	.word	0x08005785
 8005750:	0800577d 	.word	0x0800577d
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575a:	e0d6      	b.n	800590a <UART_SetConfig+0x7ae>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005762:	e0d2      	b.n	800590a <UART_SetConfig+0x7ae>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e0ce      	b.n	800590a <UART_SetConfig+0x7ae>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e0ca      	b.n	800590a <UART_SetConfig+0x7ae>
 8005774:	2320      	movs	r3, #32
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e0c6      	b.n	800590a <UART_SetConfig+0x7ae>
 800577c:	2340      	movs	r3, #64	@ 0x40
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e0c2      	b.n	800590a <UART_SetConfig+0x7ae>
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e0be      	b.n	800590a <UART_SetConfig+0x7ae>
 800578c:	40011400 	.word	0x40011400
 8005790:	58024400 	.word	0x58024400
 8005794:	40007800 	.word	0x40007800
 8005798:	40007c00 	.word	0x40007c00
 800579c:	40011800 	.word	0x40011800
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4aad      	ldr	r2, [pc, #692]	@ (8005a5c <UART_SetConfig+0x900>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d176      	bne.n	8005898 <UART_SetConfig+0x73c>
 80057aa:	4bad      	ldr	r3, [pc, #692]	@ (8005a60 <UART_SetConfig+0x904>)
 80057ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057b2:	2b28      	cmp	r3, #40	@ 0x28
 80057b4:	d86c      	bhi.n	8005890 <UART_SetConfig+0x734>
 80057b6:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <UART_SetConfig+0x660>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	08005861 	.word	0x08005861
 80057c0:	08005891 	.word	0x08005891
 80057c4:	08005891 	.word	0x08005891
 80057c8:	08005891 	.word	0x08005891
 80057cc:	08005891 	.word	0x08005891
 80057d0:	08005891 	.word	0x08005891
 80057d4:	08005891 	.word	0x08005891
 80057d8:	08005891 	.word	0x08005891
 80057dc:	08005869 	.word	0x08005869
 80057e0:	08005891 	.word	0x08005891
 80057e4:	08005891 	.word	0x08005891
 80057e8:	08005891 	.word	0x08005891
 80057ec:	08005891 	.word	0x08005891
 80057f0:	08005891 	.word	0x08005891
 80057f4:	08005891 	.word	0x08005891
 80057f8:	08005891 	.word	0x08005891
 80057fc:	08005871 	.word	0x08005871
 8005800:	08005891 	.word	0x08005891
 8005804:	08005891 	.word	0x08005891
 8005808:	08005891 	.word	0x08005891
 800580c:	08005891 	.word	0x08005891
 8005810:	08005891 	.word	0x08005891
 8005814:	08005891 	.word	0x08005891
 8005818:	08005891 	.word	0x08005891
 800581c:	08005879 	.word	0x08005879
 8005820:	08005891 	.word	0x08005891
 8005824:	08005891 	.word	0x08005891
 8005828:	08005891 	.word	0x08005891
 800582c:	08005891 	.word	0x08005891
 8005830:	08005891 	.word	0x08005891
 8005834:	08005891 	.word	0x08005891
 8005838:	08005891 	.word	0x08005891
 800583c:	08005881 	.word	0x08005881
 8005840:	08005891 	.word	0x08005891
 8005844:	08005891 	.word	0x08005891
 8005848:	08005891 	.word	0x08005891
 800584c:	08005891 	.word	0x08005891
 8005850:	08005891 	.word	0x08005891
 8005854:	08005891 	.word	0x08005891
 8005858:	08005891 	.word	0x08005891
 800585c:	08005889 	.word	0x08005889
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e050      	b.n	800590a <UART_SetConfig+0x7ae>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e04c      	b.n	800590a <UART_SetConfig+0x7ae>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e048      	b.n	800590a <UART_SetConfig+0x7ae>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e044      	b.n	800590a <UART_SetConfig+0x7ae>
 8005880:	2320      	movs	r3, #32
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e040      	b.n	800590a <UART_SetConfig+0x7ae>
 8005888:	2340      	movs	r3, #64	@ 0x40
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e03c      	b.n	800590a <UART_SetConfig+0x7ae>
 8005890:	2380      	movs	r3, #128	@ 0x80
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005896:	e038      	b.n	800590a <UART_SetConfig+0x7ae>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a71      	ldr	r2, [pc, #452]	@ (8005a64 <UART_SetConfig+0x908>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d130      	bne.n	8005904 <UART_SetConfig+0x7a8>
 80058a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005a60 <UART_SetConfig+0x904>)
 80058a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d826      	bhi.n	80058fc <UART_SetConfig+0x7a0>
 80058ae:	a201      	add	r2, pc, #4	@ (adr r2, 80058b4 <UART_SetConfig+0x758>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058cd 	.word	0x080058cd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	2302      	movs	r3, #2
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e01a      	b.n	800590a <UART_SetConfig+0x7ae>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e016      	b.n	800590a <UART_SetConfig+0x7ae>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e012      	b.n	800590a <UART_SetConfig+0x7ae>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ea:	e00e      	b.n	800590a <UART_SetConfig+0x7ae>
 80058ec:	2320      	movs	r3, #32
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f2:	e00a      	b.n	800590a <UART_SetConfig+0x7ae>
 80058f4:	2340      	movs	r3, #64	@ 0x40
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e006      	b.n	800590a <UART_SetConfig+0x7ae>
 80058fc:	2380      	movs	r3, #128	@ 0x80
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005902:	e002      	b.n	800590a <UART_SetConfig+0x7ae>
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a55      	ldr	r2, [pc, #340]	@ (8005a64 <UART_SetConfig+0x908>)
 8005910:	4293      	cmp	r3, r2
 8005912:	f040 80f8 	bne.w	8005b06 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005916:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800591a:	2b20      	cmp	r3, #32
 800591c:	dc46      	bgt.n	80059ac <UART_SetConfig+0x850>
 800591e:	2b02      	cmp	r3, #2
 8005920:	db75      	blt.n	8005a0e <UART_SetConfig+0x8b2>
 8005922:	3b02      	subs	r3, #2
 8005924:	2b1e      	cmp	r3, #30
 8005926:	d872      	bhi.n	8005a0e <UART_SetConfig+0x8b2>
 8005928:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <UART_SetConfig+0x7d4>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	080059b3 	.word	0x080059b3
 8005934:	08005a0f 	.word	0x08005a0f
 8005938:	080059bb 	.word	0x080059bb
 800593c:	08005a0f 	.word	0x08005a0f
 8005940:	08005a0f 	.word	0x08005a0f
 8005944:	08005a0f 	.word	0x08005a0f
 8005948:	080059cb 	.word	0x080059cb
 800594c:	08005a0f 	.word	0x08005a0f
 8005950:	08005a0f 	.word	0x08005a0f
 8005954:	08005a0f 	.word	0x08005a0f
 8005958:	08005a0f 	.word	0x08005a0f
 800595c:	08005a0f 	.word	0x08005a0f
 8005960:	08005a0f 	.word	0x08005a0f
 8005964:	08005a0f 	.word	0x08005a0f
 8005968:	080059db 	.word	0x080059db
 800596c:	08005a0f 	.word	0x08005a0f
 8005970:	08005a0f 	.word	0x08005a0f
 8005974:	08005a0f 	.word	0x08005a0f
 8005978:	08005a0f 	.word	0x08005a0f
 800597c:	08005a0f 	.word	0x08005a0f
 8005980:	08005a0f 	.word	0x08005a0f
 8005984:	08005a0f 	.word	0x08005a0f
 8005988:	08005a0f 	.word	0x08005a0f
 800598c:	08005a0f 	.word	0x08005a0f
 8005990:	08005a0f 	.word	0x08005a0f
 8005994:	08005a0f 	.word	0x08005a0f
 8005998:	08005a0f 	.word	0x08005a0f
 800599c:	08005a0f 	.word	0x08005a0f
 80059a0:	08005a0f 	.word	0x08005a0f
 80059a4:	08005a0f 	.word	0x08005a0f
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	2b40      	cmp	r3, #64	@ 0x40
 80059ae:	d02a      	beq.n	8005a06 <UART_SetConfig+0x8aa>
 80059b0:	e02d      	b.n	8005a0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059b2:	f7fe fed3 	bl	800475c <HAL_RCCEx_GetD3PCLK1Freq>
 80059b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059b8:	e02f      	b.n	8005a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fee2 	bl	8004788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c8:	e027      	b.n	8005a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ca:	f107 0318 	add.w	r3, r7, #24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff f82e 	bl	8004a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d8:	e01f      	b.n	8005a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059da:	4b21      	ldr	r3, [pc, #132]	@ (8005a60 <UART_SetConfig+0x904>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a60 <UART_SetConfig+0x904>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a68 <UART_SetConfig+0x90c>)
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059f8:	e00f      	b.n	8005a1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80059fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <UART_SetConfig+0x90c>)
 80059fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059fe:	e00c      	b.n	8005a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a00:	4b1a      	ldr	r3, [pc, #104]	@ (8005a6c <UART_SetConfig+0x910>)
 8005a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 81ee 	beq.w	8005dfe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	4a12      	ldr	r2, [pc, #72]	@ (8005a70 <UART_SetConfig+0x914>)
 8005a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a34:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d305      	bcc.n	8005a52 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d910      	bls.n	8005a74 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a58:	e1d1      	b.n	8005dfe <UART_SetConfig+0xca2>
 8005a5a:	bf00      	nop
 8005a5c:	40011c00 	.word	0x40011c00
 8005a60:	58024400 	.word	0x58024400
 8005a64:	58000c00 	.word	0x58000c00
 8005a68:	03d09000 	.word	0x03d09000
 8005a6c:	003d0900 	.word	0x003d0900
 8005a70:	08007350 	.word	0x08007350
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a76:	2200      	movs	r2, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	60fa      	str	r2, [r7, #12]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	4ac0      	ldr	r2, [pc, #768]	@ (8005d84 <UART_SetConfig+0xc28>)
 8005a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2200      	movs	r2, #0
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a96:	f7fa fc8b 	bl	80003b0 <__aeabi_uldivmod>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	020b      	lsls	r3, r1, #8
 8005aac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ab0:	0202      	lsls	r2, r0, #8
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	6849      	ldr	r1, [r1, #4]
 8005ab6:	0849      	lsrs	r1, r1, #1
 8005ab8:	2000      	movs	r0, #0
 8005aba:	460c      	mov	r4, r1
 8005abc:	4605      	mov	r5, r0
 8005abe:	eb12 0804 	adds.w	r8, r2, r4
 8005ac2:	eb43 0905 	adc.w	r9, r3, r5
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	469a      	mov	sl, r3
 8005ace:	4693      	mov	fp, r2
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	465b      	mov	r3, fp
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	f7fa fc6a 	bl	80003b0 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aea:	d308      	bcc.n	8005afe <UART_SetConfig+0x9a2>
 8005aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005af2:	d204      	bcs.n	8005afe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	e17f      	b.n	8005dfe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b04:	e17b      	b.n	8005dfe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0e:	f040 80bd 	bne.w	8005c8c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005b12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	dc48      	bgt.n	8005bac <UART_SetConfig+0xa50>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	db7b      	blt.n	8005c16 <UART_SetConfig+0xaba>
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d879      	bhi.n	8005c16 <UART_SetConfig+0xaba>
 8005b22:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <UART_SetConfig+0x9cc>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005bb3 	.word	0x08005bb3
 8005b2c:	08005bbb 	.word	0x08005bbb
 8005b30:	08005c17 	.word	0x08005c17
 8005b34:	08005c17 	.word	0x08005c17
 8005b38:	08005bc3 	.word	0x08005bc3
 8005b3c:	08005c17 	.word	0x08005c17
 8005b40:	08005c17 	.word	0x08005c17
 8005b44:	08005c17 	.word	0x08005c17
 8005b48:	08005bd3 	.word	0x08005bd3
 8005b4c:	08005c17 	.word	0x08005c17
 8005b50:	08005c17 	.word	0x08005c17
 8005b54:	08005c17 	.word	0x08005c17
 8005b58:	08005c17 	.word	0x08005c17
 8005b5c:	08005c17 	.word	0x08005c17
 8005b60:	08005c17 	.word	0x08005c17
 8005b64:	08005c17 	.word	0x08005c17
 8005b68:	08005be3 	.word	0x08005be3
 8005b6c:	08005c17 	.word	0x08005c17
 8005b70:	08005c17 	.word	0x08005c17
 8005b74:	08005c17 	.word	0x08005c17
 8005b78:	08005c17 	.word	0x08005c17
 8005b7c:	08005c17 	.word	0x08005c17
 8005b80:	08005c17 	.word	0x08005c17
 8005b84:	08005c17 	.word	0x08005c17
 8005b88:	08005c17 	.word	0x08005c17
 8005b8c:	08005c17 	.word	0x08005c17
 8005b90:	08005c17 	.word	0x08005c17
 8005b94:	08005c17 	.word	0x08005c17
 8005b98:	08005c17 	.word	0x08005c17
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005c17 	.word	0x08005c17
 8005ba4:	08005c17 	.word	0x08005c17
 8005ba8:	08005c09 	.word	0x08005c09
 8005bac:	2b40      	cmp	r3, #64	@ 0x40
 8005bae:	d02e      	beq.n	8005c0e <UART_SetConfig+0xab2>
 8005bb0:	e031      	b.n	8005c16 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fd fc07 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8005bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bb8:	e033      	b.n	8005c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bba:	f7fd fc19 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005bbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bc0:	e02f      	b.n	8005c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe fdde 	bl	8004788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd0:	e027      	b.n	8005c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bd2:	f107 0318 	add.w	r3, r7, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe ff2a 	bl	8004a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be0:	e01f      	b.n	8005c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005be2:	4b69      	ldr	r3, [pc, #420]	@ (8005d88 <UART_SetConfig+0xc2c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bee:	4b66      	ldr	r3, [pc, #408]	@ (8005d88 <UART_SetConfig+0xc2c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	08db      	lsrs	r3, r3, #3
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	4a64      	ldr	r2, [pc, #400]	@ (8005d8c <UART_SetConfig+0xc30>)
 8005bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c00:	e00f      	b.n	8005c22 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005c02:	4b62      	ldr	r3, [pc, #392]	@ (8005d8c <UART_SetConfig+0xc30>)
 8005c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c06:	e00c      	b.n	8005c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c08:	4b61      	ldr	r3, [pc, #388]	@ (8005d90 <UART_SetConfig+0xc34>)
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c0c:	e009      	b.n	8005c22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c14:	e005      	b.n	8005c22 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80ea 	beq.w	8005dfe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	4a55      	ldr	r2, [pc, #340]	@ (8005d84 <UART_SetConfig+0xc28>)
 8005c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c3c:	005a      	lsls	r2, r3, #1
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	441a      	add	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d916      	bls.n	8005c84 <UART_SetConfig+0xb28>
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c5c:	d212      	bcs.n	8005c84 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c76:	4313      	orrs	r3, r2
 8005c78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	e0bc      	b.n	8005dfe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c8a:	e0b8      	b.n	8005dfe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	dc4b      	bgt.n	8005d2c <UART_SetConfig+0xbd0>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f2c0 8087 	blt.w	8005da8 <UART_SetConfig+0xc4c>
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	f200 8084 	bhi.w	8005da8 <UART_SetConfig+0xc4c>
 8005ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <UART_SetConfig+0xb4c>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005d33 	.word	0x08005d33
 8005cac:	08005d3b 	.word	0x08005d3b
 8005cb0:	08005da9 	.word	0x08005da9
 8005cb4:	08005da9 	.word	0x08005da9
 8005cb8:	08005d43 	.word	0x08005d43
 8005cbc:	08005da9 	.word	0x08005da9
 8005cc0:	08005da9 	.word	0x08005da9
 8005cc4:	08005da9 	.word	0x08005da9
 8005cc8:	08005d53 	.word	0x08005d53
 8005ccc:	08005da9 	.word	0x08005da9
 8005cd0:	08005da9 	.word	0x08005da9
 8005cd4:	08005da9 	.word	0x08005da9
 8005cd8:	08005da9 	.word	0x08005da9
 8005cdc:	08005da9 	.word	0x08005da9
 8005ce0:	08005da9 	.word	0x08005da9
 8005ce4:	08005da9 	.word	0x08005da9
 8005ce8:	08005d63 	.word	0x08005d63
 8005cec:	08005da9 	.word	0x08005da9
 8005cf0:	08005da9 	.word	0x08005da9
 8005cf4:	08005da9 	.word	0x08005da9
 8005cf8:	08005da9 	.word	0x08005da9
 8005cfc:	08005da9 	.word	0x08005da9
 8005d00:	08005da9 	.word	0x08005da9
 8005d04:	08005da9 	.word	0x08005da9
 8005d08:	08005da9 	.word	0x08005da9
 8005d0c:	08005da9 	.word	0x08005da9
 8005d10:	08005da9 	.word	0x08005da9
 8005d14:	08005da9 	.word	0x08005da9
 8005d18:	08005da9 	.word	0x08005da9
 8005d1c:	08005da9 	.word	0x08005da9
 8005d20:	08005da9 	.word	0x08005da9
 8005d24:	08005da9 	.word	0x08005da9
 8005d28:	08005d9b 	.word	0x08005d9b
 8005d2c:	2b40      	cmp	r3, #64	@ 0x40
 8005d2e:	d037      	beq.n	8005da0 <UART_SetConfig+0xc44>
 8005d30:	e03a      	b.n	8005da8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d32:	f7fd fb47 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8005d36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d38:	e03c      	b.n	8005db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d3a:	f7fd fb59 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005d3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d40:	e038      	b.n	8005db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fd1e 	bl	8004788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d50:	e030      	b.n	8005db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d52:	f107 0318 	add.w	r3, r7, #24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fe6a 	bl	8004a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d60:	e028      	b.n	8005db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <UART_SetConfig+0xc2c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d6e:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <UART_SetConfig+0xc2c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	08db      	lsrs	r3, r3, #3
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	4a04      	ldr	r2, [pc, #16]	@ (8005d8c <UART_SetConfig+0xc30>)
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d80:	e018      	b.n	8005db4 <UART_SetConfig+0xc58>
 8005d82:	bf00      	nop
 8005d84:	08007350 	.word	0x08007350
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	03d09000 	.word	0x03d09000
 8005d90:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005d94:	4b24      	ldr	r3, [pc, #144]	@ (8005e28 <UART_SetConfig+0xccc>)
 8005d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d98:	e00c      	b.n	8005db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d9a:	4b24      	ldr	r3, [pc, #144]	@ (8005e2c <UART_SetConfig+0xcd0>)
 8005d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d9e:	e009      	b.n	8005db4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da6:	e005      	b.n	8005db4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005db2:	bf00      	nop
    }

    if (pclk != 0U)
 8005db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d021      	beq.n	8005dfe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <UART_SetConfig+0xcd4>)
 8005dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	441a      	add	r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	2b0f      	cmp	r3, #15
 8005de2:	d909      	bls.n	8005df8 <UART_SetConfig+0xc9c>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dea:	d205      	bcs.n	8005df8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	e002      	b.n	8005dfe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e1a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3748      	adds	r7, #72	@ 0x48
 8005e22:	46bd      	mov	sp, r7
 8005e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e28:	03d09000 	.word	0x03d09000
 8005e2c:	003d0900 	.word	0x003d0900
 8005e30:	08007350 	.word	0x08007350

08005e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01a      	beq.n	8005f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f32:	d10a      	bne.n	8005f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b098      	sub	sp, #96	@ 0x60
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f88:	f7fb f972 	bl	8001270 <HAL_GetTick>
 8005f8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d12f      	bne.n	8005ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f88e 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d022      	beq.n	8005ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e063      	b.n	80060c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b04      	cmp	r3, #4
 8006008:	d149      	bne.n	800609e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006012:	2200      	movs	r2, #0
 8006014:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f857 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d03c      	beq.n	800609e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	623b      	str	r3, [r7, #32]
   return(result);
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006042:	633b      	str	r3, [r7, #48]	@ 0x30
 8006044:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e6      	bne.n	8006024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	60fb      	str	r3, [r7, #12]
   return(result);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006076:	61fa      	str	r2, [r7, #28]
 8006078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	69b9      	ldr	r1, [r7, #24]
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	617b      	str	r3, [r7, #20]
   return(result);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e012      	b.n	80060c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3758      	adds	r7, #88	@ 0x58
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060dc:	e04f      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d04b      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fb f8c3 	bl	8001270 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <UART_WaitOnFlagUntilTimeout+0x30>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e04e      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d037      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b80      	cmp	r3, #128	@ 0x80
 8006112:	d034      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b40      	cmp	r3, #64	@ 0x40
 8006118:	d031      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b08      	cmp	r3, #8
 8006126:	d110      	bne.n	800614a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f839 	bl	80061a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2208      	movs	r2, #8
 800613a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e029      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006158:	d111      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f81f 	bl	80061a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e00f      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4013      	ands	r3, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	bf0c      	ite	eq
 800618e:	2301      	moveq	r3, #1
 8006190:	2300      	movne	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	429a      	cmp	r2, r3
 800619a:	d0a0      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b095      	sub	sp, #84	@ 0x54
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80061d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e6      	bne.n	80061b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <UART_EndRxTransfer+0xc8>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d118      	bne.n	8006250 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	60bb      	str	r3, [r7, #8]
   return(result);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f023 0310 	bic.w	r3, r3, #16
 8006232:	647b      	str	r3, [r7, #68]	@ 0x44
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6979      	ldr	r1, [r7, #20]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	613b      	str	r3, [r7, #16]
   return(result);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006264:	bf00      	nop
 8006266:	3754      	adds	r7, #84	@ 0x54
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	effffffe 	.word	0xeffffffe

08006274 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_UARTEx_DisableFifoMode+0x16>
 8006286:	2302      	movs	r3, #2
 8006288:	e027      	b.n	80062da <HAL_UARTEx_DisableFifoMode+0x66>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2224      	movs	r2, #36	@ 0x24
 8006296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e02d      	b.n	800635a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	@ 0x24
 800630a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0201 	bic.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f850 	bl	80063e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006376:	2302      	movs	r3, #2
 8006378:	e02d      	b.n	80063d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2224      	movs	r2, #36	@ 0x24
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f812 	bl	80063e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d108      	bne.n	8006402 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006400:	e031      	b.n	8006466 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006402:	2310      	movs	r3, #16
 8006404:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006406:	2310      	movs	r3, #16
 8006408:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	0e5b      	lsrs	r3, r3, #25
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	0f5b      	lsrs	r3, r3, #29
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	7b3a      	ldrb	r2, [r7, #12]
 800642e:	4911      	ldr	r1, [pc, #68]	@ (8006474 <UARTEx_SetNbDataToProcess+0x94>)
 8006430:	5c8a      	ldrb	r2, [r1, r2]
 8006432:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006436:	7b3a      	ldrb	r2, [r7, #12]
 8006438:	490f      	ldr	r1, [pc, #60]	@ (8006478 <UARTEx_SetNbDataToProcess+0x98>)
 800643a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800643c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006440:	b29a      	uxth	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	7b7a      	ldrb	r2, [r7, #13]
 800644c:	4909      	ldr	r1, [pc, #36]	@ (8006474 <UARTEx_SetNbDataToProcess+0x94>)
 800644e:	5c8a      	ldrb	r2, [r1, r2]
 8006450:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006454:	7b7a      	ldrb	r2, [r7, #13]
 8006456:	4908      	ldr	r1, [pc, #32]	@ (8006478 <UARTEx_SetNbDataToProcess+0x98>)
 8006458:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800645a:	fb93 f3f2 	sdiv	r3, r3, r2
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	08007368 	.word	0x08007368
 8006478:	08007370 	.word	0x08007370

0800647c <std>:
 800647c:	2300      	movs	r3, #0
 800647e:	b510      	push	{r4, lr}
 8006480:	4604      	mov	r4, r0
 8006482:	e9c0 3300 	strd	r3, r3, [r0]
 8006486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800648a:	6083      	str	r3, [r0, #8]
 800648c:	8181      	strh	r1, [r0, #12]
 800648e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006490:	81c2      	strh	r2, [r0, #14]
 8006492:	6183      	str	r3, [r0, #24]
 8006494:	4619      	mov	r1, r3
 8006496:	2208      	movs	r2, #8
 8006498:	305c      	adds	r0, #92	@ 0x5c
 800649a:	f000 f906 	bl	80066aa <memset>
 800649e:	4b0d      	ldr	r3, [pc, #52]	@ (80064d4 <std+0x58>)
 80064a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <std+0x5c>)
 80064a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064a6:	4b0d      	ldr	r3, [pc, #52]	@ (80064dc <std+0x60>)
 80064a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064aa:	4b0d      	ldr	r3, [pc, #52]	@ (80064e0 <std+0x64>)
 80064ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80064ae:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <std+0x68>)
 80064b0:	6224      	str	r4, [r4, #32]
 80064b2:	429c      	cmp	r4, r3
 80064b4:	d006      	beq.n	80064c4 <std+0x48>
 80064b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ba:	4294      	cmp	r4, r2
 80064bc:	d002      	beq.n	80064c4 <std+0x48>
 80064be:	33d0      	adds	r3, #208	@ 0xd0
 80064c0:	429c      	cmp	r4, r3
 80064c2:	d105      	bne.n	80064d0 <std+0x54>
 80064c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064cc:	f000 b966 	b.w	800679c <__retarget_lock_init_recursive>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	bf00      	nop
 80064d4:	08006625 	.word	0x08006625
 80064d8:	08006647 	.word	0x08006647
 80064dc:	0800667f 	.word	0x0800667f
 80064e0:	080066a3 	.word	0x080066a3
 80064e4:	24000188 	.word	0x24000188

080064e8 <stdio_exit_handler>:
 80064e8:	4a02      	ldr	r2, [pc, #8]	@ (80064f4 <stdio_exit_handler+0xc>)
 80064ea:	4903      	ldr	r1, [pc, #12]	@ (80064f8 <stdio_exit_handler+0x10>)
 80064ec:	4803      	ldr	r0, [pc, #12]	@ (80064fc <stdio_exit_handler+0x14>)
 80064ee:	f000 b869 	b.w	80065c4 <_fwalk_sglue>
 80064f2:	bf00      	nop
 80064f4:	24000010 	.word	0x24000010
 80064f8:	0800703d 	.word	0x0800703d
 80064fc:	24000020 	.word	0x24000020

08006500 <cleanup_stdio>:
 8006500:	6841      	ldr	r1, [r0, #4]
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <cleanup_stdio+0x34>)
 8006504:	4299      	cmp	r1, r3
 8006506:	b510      	push	{r4, lr}
 8006508:	4604      	mov	r4, r0
 800650a:	d001      	beq.n	8006510 <cleanup_stdio+0x10>
 800650c:	f000 fd96 	bl	800703c <_fflush_r>
 8006510:	68a1      	ldr	r1, [r4, #8]
 8006512:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <cleanup_stdio+0x38>)
 8006514:	4299      	cmp	r1, r3
 8006516:	d002      	beq.n	800651e <cleanup_stdio+0x1e>
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fd8f 	bl	800703c <_fflush_r>
 800651e:	68e1      	ldr	r1, [r4, #12]
 8006520:	4b06      	ldr	r3, [pc, #24]	@ (800653c <cleanup_stdio+0x3c>)
 8006522:	4299      	cmp	r1, r3
 8006524:	d004      	beq.n	8006530 <cleanup_stdio+0x30>
 8006526:	4620      	mov	r0, r4
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652c:	f000 bd86 	b.w	800703c <_fflush_r>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	bf00      	nop
 8006534:	24000188 	.word	0x24000188
 8006538:	240001f0 	.word	0x240001f0
 800653c:	24000258 	.word	0x24000258

08006540 <global_stdio_init.part.0>:
 8006540:	b510      	push	{r4, lr}
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <global_stdio_init.part.0+0x30>)
 8006544:	4c0b      	ldr	r4, [pc, #44]	@ (8006574 <global_stdio_init.part.0+0x34>)
 8006546:	4a0c      	ldr	r2, [pc, #48]	@ (8006578 <global_stdio_init.part.0+0x38>)
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	4620      	mov	r0, r4
 800654c:	2200      	movs	r2, #0
 800654e:	2104      	movs	r1, #4
 8006550:	f7ff ff94 	bl	800647c <std>
 8006554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006558:	2201      	movs	r2, #1
 800655a:	2109      	movs	r1, #9
 800655c:	f7ff ff8e 	bl	800647c <std>
 8006560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006564:	2202      	movs	r2, #2
 8006566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656a:	2112      	movs	r1, #18
 800656c:	f7ff bf86 	b.w	800647c <std>
 8006570:	240002c0 	.word	0x240002c0
 8006574:	24000188 	.word	0x24000188
 8006578:	080064e9 	.word	0x080064e9

0800657c <__sfp_lock_acquire>:
 800657c:	4801      	ldr	r0, [pc, #4]	@ (8006584 <__sfp_lock_acquire+0x8>)
 800657e:	f000 b90e 	b.w	800679e <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	240002c9 	.word	0x240002c9

08006588 <__sfp_lock_release>:
 8006588:	4801      	ldr	r0, [pc, #4]	@ (8006590 <__sfp_lock_release+0x8>)
 800658a:	f000 b909 	b.w	80067a0 <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	240002c9 	.word	0x240002c9

08006594 <__sinit>:
 8006594:	b510      	push	{r4, lr}
 8006596:	4604      	mov	r4, r0
 8006598:	f7ff fff0 	bl	800657c <__sfp_lock_acquire>
 800659c:	6a23      	ldr	r3, [r4, #32]
 800659e:	b11b      	cbz	r3, 80065a8 <__sinit+0x14>
 80065a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a4:	f7ff bff0 	b.w	8006588 <__sfp_lock_release>
 80065a8:	4b04      	ldr	r3, [pc, #16]	@ (80065bc <__sinit+0x28>)
 80065aa:	6223      	str	r3, [r4, #32]
 80065ac:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <__sinit+0x2c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f5      	bne.n	80065a0 <__sinit+0xc>
 80065b4:	f7ff ffc4 	bl	8006540 <global_stdio_init.part.0>
 80065b8:	e7f2      	b.n	80065a0 <__sinit+0xc>
 80065ba:	bf00      	nop
 80065bc:	08006501 	.word	0x08006501
 80065c0:	240002c0 	.word	0x240002c0

080065c4 <_fwalk_sglue>:
 80065c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	4607      	mov	r7, r0
 80065ca:	4688      	mov	r8, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	2600      	movs	r6, #0
 80065d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065d4:	f1b9 0901 	subs.w	r9, r9, #1
 80065d8:	d505      	bpl.n	80065e6 <_fwalk_sglue+0x22>
 80065da:	6824      	ldr	r4, [r4, #0]
 80065dc:	2c00      	cmp	r4, #0
 80065de:	d1f7      	bne.n	80065d0 <_fwalk_sglue+0xc>
 80065e0:	4630      	mov	r0, r6
 80065e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d907      	bls.n	80065fc <_fwalk_sglue+0x38>
 80065ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065f0:	3301      	adds	r3, #1
 80065f2:	d003      	beq.n	80065fc <_fwalk_sglue+0x38>
 80065f4:	4629      	mov	r1, r5
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c0      	blx	r8
 80065fa:	4306      	orrs	r6, r0
 80065fc:	3568      	adds	r5, #104	@ 0x68
 80065fe:	e7e9      	b.n	80065d4 <_fwalk_sglue+0x10>

08006600 <iprintf>:
 8006600:	b40f      	push	{r0, r1, r2, r3}
 8006602:	b507      	push	{r0, r1, r2, lr}
 8006604:	4906      	ldr	r1, [pc, #24]	@ (8006620 <iprintf+0x20>)
 8006606:	ab04      	add	r3, sp, #16
 8006608:	6808      	ldr	r0, [r1, #0]
 800660a:	f853 2b04 	ldr.w	r2, [r3], #4
 800660e:	6881      	ldr	r1, [r0, #8]
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	f000 f9e9 	bl	80069e8 <_vfiprintf_r>
 8006616:	b003      	add	sp, #12
 8006618:	f85d eb04 	ldr.w	lr, [sp], #4
 800661c:	b004      	add	sp, #16
 800661e:	4770      	bx	lr
 8006620:	2400001c 	.word	0x2400001c

08006624 <__sread>:
 8006624:	b510      	push	{r4, lr}
 8006626:	460c      	mov	r4, r1
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	f000 f868 	bl	8006700 <_read_r>
 8006630:	2800      	cmp	r0, #0
 8006632:	bfab      	itete	ge
 8006634:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006636:	89a3      	ldrhlt	r3, [r4, #12]
 8006638:	181b      	addge	r3, r3, r0
 800663a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800663e:	bfac      	ite	ge
 8006640:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006642:	81a3      	strhlt	r3, [r4, #12]
 8006644:	bd10      	pop	{r4, pc}

08006646 <__swrite>:
 8006646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	461f      	mov	r7, r3
 800664c:	898b      	ldrh	r3, [r1, #12]
 800664e:	05db      	lsls	r3, r3, #23
 8006650:	4605      	mov	r5, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4616      	mov	r6, r2
 8006656:	d505      	bpl.n	8006664 <__swrite+0x1e>
 8006658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665c:	2302      	movs	r3, #2
 800665e:	2200      	movs	r2, #0
 8006660:	f000 f83c 	bl	80066dc <_lseek_r>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800666a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	4632      	mov	r2, r6
 8006672:	463b      	mov	r3, r7
 8006674:	4628      	mov	r0, r5
 8006676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667a:	f000 b853 	b.w	8006724 <_write_r>

0800667e <__sseek>:
 800667e:	b510      	push	{r4, lr}
 8006680:	460c      	mov	r4, r1
 8006682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006686:	f000 f829 	bl	80066dc <_lseek_r>
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	bf15      	itete	ne
 8006690:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006692:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006696:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800669a:	81a3      	strheq	r3, [r4, #12]
 800669c:	bf18      	it	ne
 800669e:	81a3      	strhne	r3, [r4, #12]
 80066a0:	bd10      	pop	{r4, pc}

080066a2 <__sclose>:
 80066a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a6:	f000 b809 	b.w	80066bc <_close_r>

080066aa <memset>:
 80066aa:	4402      	add	r2, r0
 80066ac:	4603      	mov	r3, r0
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d100      	bne.n	80066b4 <memset+0xa>
 80066b2:	4770      	bx	lr
 80066b4:	f803 1b01 	strb.w	r1, [r3], #1
 80066b8:	e7f9      	b.n	80066ae <memset+0x4>
	...

080066bc <_close_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d06      	ldr	r5, [pc, #24]	@ (80066d8 <_close_r+0x1c>)
 80066c0:	2300      	movs	r3, #0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f7fa fb50 	bl	8000d6c <_close>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_close_r+0x1a>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_close_r+0x1a>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	240002c4 	.word	0x240002c4

080066dc <_lseek_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d07      	ldr	r5, [pc, #28]	@ (80066fc <_lseek_r+0x20>)
 80066e0:	4604      	mov	r4, r0
 80066e2:	4608      	mov	r0, r1
 80066e4:	4611      	mov	r1, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	602a      	str	r2, [r5, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f7fa fb65 	bl	8000dba <_lseek>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_lseek_r+0x1e>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_lseek_r+0x1e>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	240002c4 	.word	0x240002c4

08006700 <_read_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	@ (8006720 <_read_r+0x20>)
 8006704:	4604      	mov	r4, r0
 8006706:	4608      	mov	r0, r1
 8006708:	4611      	mov	r1, r2
 800670a:	2200      	movs	r2, #0
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f7fa fb0f 	bl	8000d32 <_read>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_read_r+0x1e>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_read_r+0x1e>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	240002c4 	.word	0x240002c4

08006724 <_write_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d07      	ldr	r5, [pc, #28]	@ (8006744 <_write_r+0x20>)
 8006728:	4604      	mov	r4, r0
 800672a:	4608      	mov	r0, r1
 800672c:	4611      	mov	r1, r2
 800672e:	2200      	movs	r2, #0
 8006730:	602a      	str	r2, [r5, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f7f9 ffb4 	bl	80006a0 <_write>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_write_r+0x1e>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_write_r+0x1e>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	240002c4 	.word	0x240002c4

08006748 <__errno>:
 8006748:	4b01      	ldr	r3, [pc, #4]	@ (8006750 <__errno+0x8>)
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	2400001c 	.word	0x2400001c

08006754 <__libc_init_array>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	4d0d      	ldr	r5, [pc, #52]	@ (800678c <__libc_init_array+0x38>)
 8006758:	4c0d      	ldr	r4, [pc, #52]	@ (8006790 <__libc_init_array+0x3c>)
 800675a:	1b64      	subs	r4, r4, r5
 800675c:	10a4      	asrs	r4, r4, #2
 800675e:	2600      	movs	r6, #0
 8006760:	42a6      	cmp	r6, r4
 8006762:	d109      	bne.n	8006778 <__libc_init_array+0x24>
 8006764:	4d0b      	ldr	r5, [pc, #44]	@ (8006794 <__libc_init_array+0x40>)
 8006766:	4c0c      	ldr	r4, [pc, #48]	@ (8006798 <__libc_init_array+0x44>)
 8006768:	f000 fdb8 	bl	80072dc <_init>
 800676c:	1b64      	subs	r4, r4, r5
 800676e:	10a4      	asrs	r4, r4, #2
 8006770:	2600      	movs	r6, #0
 8006772:	42a6      	cmp	r6, r4
 8006774:	d105      	bne.n	8006782 <__libc_init_array+0x2e>
 8006776:	bd70      	pop	{r4, r5, r6, pc}
 8006778:	f855 3b04 	ldr.w	r3, [r5], #4
 800677c:	4798      	blx	r3
 800677e:	3601      	adds	r6, #1
 8006780:	e7ee      	b.n	8006760 <__libc_init_array+0xc>
 8006782:	f855 3b04 	ldr.w	r3, [r5], #4
 8006786:	4798      	blx	r3
 8006788:	3601      	adds	r6, #1
 800678a:	e7f2      	b.n	8006772 <__libc_init_array+0x1e>
 800678c:	080073b4 	.word	0x080073b4
 8006790:	080073b4 	.word	0x080073b4
 8006794:	080073b4 	.word	0x080073b4
 8006798:	080073b8 	.word	0x080073b8

0800679c <__retarget_lock_init_recursive>:
 800679c:	4770      	bx	lr

0800679e <__retarget_lock_acquire_recursive>:
 800679e:	4770      	bx	lr

080067a0 <__retarget_lock_release_recursive>:
 80067a0:	4770      	bx	lr
	...

080067a4 <_free_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	4605      	mov	r5, r0
 80067a8:	2900      	cmp	r1, #0
 80067aa:	d041      	beq.n	8006830 <_free_r+0x8c>
 80067ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b0:	1f0c      	subs	r4, r1, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfb8      	it	lt
 80067b6:	18e4      	addlt	r4, r4, r3
 80067b8:	f000 f8e0 	bl	800697c <__malloc_lock>
 80067bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006834 <_free_r+0x90>)
 80067be:	6813      	ldr	r3, [r2, #0]
 80067c0:	b933      	cbnz	r3, 80067d0 <_free_r+0x2c>
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	6014      	str	r4, [r2, #0]
 80067c6:	4628      	mov	r0, r5
 80067c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067cc:	f000 b8dc 	b.w	8006988 <__malloc_unlock>
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	d908      	bls.n	80067e6 <_free_r+0x42>
 80067d4:	6820      	ldr	r0, [r4, #0]
 80067d6:	1821      	adds	r1, r4, r0
 80067d8:	428b      	cmp	r3, r1
 80067da:	bf01      	itttt	eq
 80067dc:	6819      	ldreq	r1, [r3, #0]
 80067de:	685b      	ldreq	r3, [r3, #4]
 80067e0:	1809      	addeq	r1, r1, r0
 80067e2:	6021      	streq	r1, [r4, #0]
 80067e4:	e7ed      	b.n	80067c2 <_free_r+0x1e>
 80067e6:	461a      	mov	r2, r3
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	b10b      	cbz	r3, 80067f0 <_free_r+0x4c>
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	d9fa      	bls.n	80067e6 <_free_r+0x42>
 80067f0:	6811      	ldr	r1, [r2, #0]
 80067f2:	1850      	adds	r0, r2, r1
 80067f4:	42a0      	cmp	r0, r4
 80067f6:	d10b      	bne.n	8006810 <_free_r+0x6c>
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	4401      	add	r1, r0
 80067fc:	1850      	adds	r0, r2, r1
 80067fe:	4283      	cmp	r3, r0
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	d1e0      	bne.n	80067c6 <_free_r+0x22>
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	6053      	str	r3, [r2, #4]
 800680a:	4408      	add	r0, r1
 800680c:	6010      	str	r0, [r2, #0]
 800680e:	e7da      	b.n	80067c6 <_free_r+0x22>
 8006810:	d902      	bls.n	8006818 <_free_r+0x74>
 8006812:	230c      	movs	r3, #12
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	e7d6      	b.n	80067c6 <_free_r+0x22>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	1821      	adds	r1, r4, r0
 800681c:	428b      	cmp	r3, r1
 800681e:	bf04      	itt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	bf04      	itt	eq
 8006828:	1809      	addeq	r1, r1, r0
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	6054      	str	r4, [r2, #4]
 800682e:	e7ca      	b.n	80067c6 <_free_r+0x22>
 8006830:	bd38      	pop	{r3, r4, r5, pc}
 8006832:	bf00      	nop
 8006834:	240002d0 	.word	0x240002d0

08006838 <sbrk_aligned>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4e0f      	ldr	r6, [pc, #60]	@ (8006878 <sbrk_aligned+0x40>)
 800683c:	460c      	mov	r4, r1
 800683e:	6831      	ldr	r1, [r6, #0]
 8006840:	4605      	mov	r5, r0
 8006842:	b911      	cbnz	r1, 800684a <sbrk_aligned+0x12>
 8006844:	f000 fcb6 	bl	80071b4 <_sbrk_r>
 8006848:	6030      	str	r0, [r6, #0]
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	f000 fcb1 	bl	80071b4 <_sbrk_r>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	d103      	bne.n	800685e <sbrk_aligned+0x26>
 8006856:	f04f 34ff 	mov.w	r4, #4294967295
 800685a:	4620      	mov	r0, r4
 800685c:	bd70      	pop	{r4, r5, r6, pc}
 800685e:	1cc4      	adds	r4, r0, #3
 8006860:	f024 0403 	bic.w	r4, r4, #3
 8006864:	42a0      	cmp	r0, r4
 8006866:	d0f8      	beq.n	800685a <sbrk_aligned+0x22>
 8006868:	1a21      	subs	r1, r4, r0
 800686a:	4628      	mov	r0, r5
 800686c:	f000 fca2 	bl	80071b4 <_sbrk_r>
 8006870:	3001      	adds	r0, #1
 8006872:	d1f2      	bne.n	800685a <sbrk_aligned+0x22>
 8006874:	e7ef      	b.n	8006856 <sbrk_aligned+0x1e>
 8006876:	bf00      	nop
 8006878:	240002cc 	.word	0x240002cc

0800687c <_malloc_r>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	1ccd      	adds	r5, r1, #3
 8006882:	f025 0503 	bic.w	r5, r5, #3
 8006886:	3508      	adds	r5, #8
 8006888:	2d0c      	cmp	r5, #12
 800688a:	bf38      	it	cc
 800688c:	250c      	movcc	r5, #12
 800688e:	2d00      	cmp	r5, #0
 8006890:	4606      	mov	r6, r0
 8006892:	db01      	blt.n	8006898 <_malloc_r+0x1c>
 8006894:	42a9      	cmp	r1, r5
 8006896:	d904      	bls.n	80068a2 <_malloc_r+0x26>
 8006898:	230c      	movs	r3, #12
 800689a:	6033      	str	r3, [r6, #0]
 800689c:	2000      	movs	r0, #0
 800689e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006978 <_malloc_r+0xfc>
 80068a6:	f000 f869 	bl	800697c <__malloc_lock>
 80068aa:	f8d8 3000 	ldr.w	r3, [r8]
 80068ae:	461c      	mov	r4, r3
 80068b0:	bb44      	cbnz	r4, 8006904 <_malloc_r+0x88>
 80068b2:	4629      	mov	r1, r5
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff ffbf 	bl	8006838 <sbrk_aligned>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	4604      	mov	r4, r0
 80068be:	d158      	bne.n	8006972 <_malloc_r+0xf6>
 80068c0:	f8d8 4000 	ldr.w	r4, [r8]
 80068c4:	4627      	mov	r7, r4
 80068c6:	2f00      	cmp	r7, #0
 80068c8:	d143      	bne.n	8006952 <_malloc_r+0xd6>
 80068ca:	2c00      	cmp	r4, #0
 80068cc:	d04b      	beq.n	8006966 <_malloc_r+0xea>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	4639      	mov	r1, r7
 80068d2:	4630      	mov	r0, r6
 80068d4:	eb04 0903 	add.w	r9, r4, r3
 80068d8:	f000 fc6c 	bl	80071b4 <_sbrk_r>
 80068dc:	4581      	cmp	r9, r0
 80068de:	d142      	bne.n	8006966 <_malloc_r+0xea>
 80068e0:	6821      	ldr	r1, [r4, #0]
 80068e2:	1a6d      	subs	r5, r5, r1
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff ffa6 	bl	8006838 <sbrk_aligned>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d03a      	beq.n	8006966 <_malloc_r+0xea>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	442b      	add	r3, r5
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	f8d8 3000 	ldr.w	r3, [r8]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	bb62      	cbnz	r2, 8006958 <_malloc_r+0xdc>
 80068fe:	f8c8 7000 	str.w	r7, [r8]
 8006902:	e00f      	b.n	8006924 <_malloc_r+0xa8>
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	1b52      	subs	r2, r2, r5
 8006908:	d420      	bmi.n	800694c <_malloc_r+0xd0>
 800690a:	2a0b      	cmp	r2, #11
 800690c:	d917      	bls.n	800693e <_malloc_r+0xc2>
 800690e:	1961      	adds	r1, r4, r5
 8006910:	42a3      	cmp	r3, r4
 8006912:	6025      	str	r5, [r4, #0]
 8006914:	bf18      	it	ne
 8006916:	6059      	strne	r1, [r3, #4]
 8006918:	6863      	ldr	r3, [r4, #4]
 800691a:	bf08      	it	eq
 800691c:	f8c8 1000 	streq.w	r1, [r8]
 8006920:	5162      	str	r2, [r4, r5]
 8006922:	604b      	str	r3, [r1, #4]
 8006924:	4630      	mov	r0, r6
 8006926:	f000 f82f 	bl	8006988 <__malloc_unlock>
 800692a:	f104 000b 	add.w	r0, r4, #11
 800692e:	1d23      	adds	r3, r4, #4
 8006930:	f020 0007 	bic.w	r0, r0, #7
 8006934:	1ac2      	subs	r2, r0, r3
 8006936:	bf1c      	itt	ne
 8006938:	1a1b      	subne	r3, r3, r0
 800693a:	50a3      	strne	r3, [r4, r2]
 800693c:	e7af      	b.n	800689e <_malloc_r+0x22>
 800693e:	6862      	ldr	r2, [r4, #4]
 8006940:	42a3      	cmp	r3, r4
 8006942:	bf0c      	ite	eq
 8006944:	f8c8 2000 	streq.w	r2, [r8]
 8006948:	605a      	strne	r2, [r3, #4]
 800694a:	e7eb      	b.n	8006924 <_malloc_r+0xa8>
 800694c:	4623      	mov	r3, r4
 800694e:	6864      	ldr	r4, [r4, #4]
 8006950:	e7ae      	b.n	80068b0 <_malloc_r+0x34>
 8006952:	463c      	mov	r4, r7
 8006954:	687f      	ldr	r7, [r7, #4]
 8006956:	e7b6      	b.n	80068c6 <_malloc_r+0x4a>
 8006958:	461a      	mov	r2, r3
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	42a3      	cmp	r3, r4
 800695e:	d1fb      	bne.n	8006958 <_malloc_r+0xdc>
 8006960:	2300      	movs	r3, #0
 8006962:	6053      	str	r3, [r2, #4]
 8006964:	e7de      	b.n	8006924 <_malloc_r+0xa8>
 8006966:	230c      	movs	r3, #12
 8006968:	6033      	str	r3, [r6, #0]
 800696a:	4630      	mov	r0, r6
 800696c:	f000 f80c 	bl	8006988 <__malloc_unlock>
 8006970:	e794      	b.n	800689c <_malloc_r+0x20>
 8006972:	6005      	str	r5, [r0, #0]
 8006974:	e7d6      	b.n	8006924 <_malloc_r+0xa8>
 8006976:	bf00      	nop
 8006978:	240002d0 	.word	0x240002d0

0800697c <__malloc_lock>:
 800697c:	4801      	ldr	r0, [pc, #4]	@ (8006984 <__malloc_lock+0x8>)
 800697e:	f7ff bf0e 	b.w	800679e <__retarget_lock_acquire_recursive>
 8006982:	bf00      	nop
 8006984:	240002c8 	.word	0x240002c8

08006988 <__malloc_unlock>:
 8006988:	4801      	ldr	r0, [pc, #4]	@ (8006990 <__malloc_unlock+0x8>)
 800698a:	f7ff bf09 	b.w	80067a0 <__retarget_lock_release_recursive>
 800698e:	bf00      	nop
 8006990:	240002c8 	.word	0x240002c8

08006994 <__sfputc_r>:
 8006994:	6893      	ldr	r3, [r2, #8]
 8006996:	3b01      	subs	r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	b410      	push	{r4}
 800699c:	6093      	str	r3, [r2, #8]
 800699e:	da08      	bge.n	80069b2 <__sfputc_r+0x1e>
 80069a0:	6994      	ldr	r4, [r2, #24]
 80069a2:	42a3      	cmp	r3, r4
 80069a4:	db01      	blt.n	80069aa <__sfputc_r+0x16>
 80069a6:	290a      	cmp	r1, #10
 80069a8:	d103      	bne.n	80069b2 <__sfputc_r+0x1e>
 80069aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ae:	f000 bb6d 	b.w	800708c <__swbuf_r>
 80069b2:	6813      	ldr	r3, [r2, #0]
 80069b4:	1c58      	adds	r0, r3, #1
 80069b6:	6010      	str	r0, [r2, #0]
 80069b8:	7019      	strb	r1, [r3, #0]
 80069ba:	4608      	mov	r0, r1
 80069bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <__sfputs_r>:
 80069c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c4:	4606      	mov	r6, r0
 80069c6:	460f      	mov	r7, r1
 80069c8:	4614      	mov	r4, r2
 80069ca:	18d5      	adds	r5, r2, r3
 80069cc:	42ac      	cmp	r4, r5
 80069ce:	d101      	bne.n	80069d4 <__sfputs_r+0x12>
 80069d0:	2000      	movs	r0, #0
 80069d2:	e007      	b.n	80069e4 <__sfputs_r+0x22>
 80069d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d8:	463a      	mov	r2, r7
 80069da:	4630      	mov	r0, r6
 80069dc:	f7ff ffda 	bl	8006994 <__sfputc_r>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d1f3      	bne.n	80069cc <__sfputs_r+0xa>
 80069e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069e8 <_vfiprintf_r>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	460d      	mov	r5, r1
 80069ee:	b09d      	sub	sp, #116	@ 0x74
 80069f0:	4614      	mov	r4, r2
 80069f2:	4698      	mov	r8, r3
 80069f4:	4606      	mov	r6, r0
 80069f6:	b118      	cbz	r0, 8006a00 <_vfiprintf_r+0x18>
 80069f8:	6a03      	ldr	r3, [r0, #32]
 80069fa:	b90b      	cbnz	r3, 8006a00 <_vfiprintf_r+0x18>
 80069fc:	f7ff fdca 	bl	8006594 <__sinit>
 8006a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a02:	07d9      	lsls	r1, r3, #31
 8006a04:	d405      	bmi.n	8006a12 <_vfiprintf_r+0x2a>
 8006a06:	89ab      	ldrh	r3, [r5, #12]
 8006a08:	059a      	lsls	r2, r3, #22
 8006a0a:	d402      	bmi.n	8006a12 <_vfiprintf_r+0x2a>
 8006a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a0e:	f7ff fec6 	bl	800679e <__retarget_lock_acquire_recursive>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	071b      	lsls	r3, r3, #28
 8006a16:	d501      	bpl.n	8006a1c <_vfiprintf_r+0x34>
 8006a18:	692b      	ldr	r3, [r5, #16]
 8006a1a:	b99b      	cbnz	r3, 8006a44 <_vfiprintf_r+0x5c>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f000 fb72 	bl	8007108 <__swsetup_r>
 8006a24:	b170      	cbz	r0, 8006a44 <_vfiprintf_r+0x5c>
 8006a26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a28:	07dc      	lsls	r4, r3, #31
 8006a2a:	d504      	bpl.n	8006a36 <_vfiprintf_r+0x4e>
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	b01d      	add	sp, #116	@ 0x74
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a36:	89ab      	ldrh	r3, [r5, #12]
 8006a38:	0598      	lsls	r0, r3, #22
 8006a3a:	d4f7      	bmi.n	8006a2c <_vfiprintf_r+0x44>
 8006a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a3e:	f7ff feaf 	bl	80067a0 <__retarget_lock_release_recursive>
 8006a42:	e7f3      	b.n	8006a2c <_vfiprintf_r+0x44>
 8006a44:	2300      	movs	r3, #0
 8006a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a48:	2320      	movs	r3, #32
 8006a4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a52:	2330      	movs	r3, #48	@ 0x30
 8006a54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c04 <_vfiprintf_r+0x21c>
 8006a58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a5c:	f04f 0901 	mov.w	r9, #1
 8006a60:	4623      	mov	r3, r4
 8006a62:	469a      	mov	sl, r3
 8006a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a68:	b10a      	cbz	r2, 8006a6e <_vfiprintf_r+0x86>
 8006a6a:	2a25      	cmp	r2, #37	@ 0x25
 8006a6c:	d1f9      	bne.n	8006a62 <_vfiprintf_r+0x7a>
 8006a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a72:	d00b      	beq.n	8006a8c <_vfiprintf_r+0xa4>
 8006a74:	465b      	mov	r3, fp
 8006a76:	4622      	mov	r2, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7ff ffa1 	bl	80069c2 <__sfputs_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	f000 80a7 	beq.w	8006bd4 <_vfiprintf_r+0x1ec>
 8006a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a88:	445a      	add	r2, fp
 8006a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 809f 	beq.w	8006bd4 <_vfiprintf_r+0x1ec>
 8006a96:	2300      	movs	r3, #0
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	9307      	str	r3, [sp, #28]
 8006aa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006aac:	931a      	str	r3, [sp, #104]	@ 0x68
 8006aae:	4654      	mov	r4, sl
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab6:	4853      	ldr	r0, [pc, #332]	@ (8006c04 <_vfiprintf_r+0x21c>)
 8006ab8:	f7f9 fc2a 	bl	8000310 <memchr>
 8006abc:	9a04      	ldr	r2, [sp, #16]
 8006abe:	b9d8      	cbnz	r0, 8006af8 <_vfiprintf_r+0x110>
 8006ac0:	06d1      	lsls	r1, r2, #27
 8006ac2:	bf44      	itt	mi
 8006ac4:	2320      	movmi	r3, #32
 8006ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aca:	0713      	lsls	r3, r2, #28
 8006acc:	bf44      	itt	mi
 8006ace:	232b      	movmi	r3, #43	@ 0x2b
 8006ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ada:	d015      	beq.n	8006b08 <_vfiprintf_r+0x120>
 8006adc:	9a07      	ldr	r2, [sp, #28]
 8006ade:	4654      	mov	r4, sl
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	f04f 0c0a 	mov.w	ip, #10
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aec:	3b30      	subs	r3, #48	@ 0x30
 8006aee:	2b09      	cmp	r3, #9
 8006af0:	d94b      	bls.n	8006b8a <_vfiprintf_r+0x1a2>
 8006af2:	b1b0      	cbz	r0, 8006b22 <_vfiprintf_r+0x13a>
 8006af4:	9207      	str	r2, [sp, #28]
 8006af6:	e014      	b.n	8006b22 <_vfiprintf_r+0x13a>
 8006af8:	eba0 0308 	sub.w	r3, r0, r8
 8006afc:	fa09 f303 	lsl.w	r3, r9, r3
 8006b00:	4313      	orrs	r3, r2
 8006b02:	9304      	str	r3, [sp, #16]
 8006b04:	46a2      	mov	sl, r4
 8006b06:	e7d2      	b.n	8006aae <_vfiprintf_r+0xc6>
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	1d19      	adds	r1, r3, #4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	9103      	str	r1, [sp, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfbb      	ittet	lt
 8006b14:	425b      	neglt	r3, r3
 8006b16:	f042 0202 	orrlt.w	r2, r2, #2
 8006b1a:	9307      	strge	r3, [sp, #28]
 8006b1c:	9307      	strlt	r3, [sp, #28]
 8006b1e:	bfb8      	it	lt
 8006b20:	9204      	strlt	r2, [sp, #16]
 8006b22:	7823      	ldrb	r3, [r4, #0]
 8006b24:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b26:	d10a      	bne.n	8006b3e <_vfiprintf_r+0x156>
 8006b28:	7863      	ldrb	r3, [r4, #1]
 8006b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b2c:	d132      	bne.n	8006b94 <_vfiprintf_r+0x1ac>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	9203      	str	r2, [sp, #12]
 8006b36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b3a:	3402      	adds	r4, #2
 8006b3c:	9305      	str	r3, [sp, #20]
 8006b3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c14 <_vfiprintf_r+0x22c>
 8006b42:	7821      	ldrb	r1, [r4, #0]
 8006b44:	2203      	movs	r2, #3
 8006b46:	4650      	mov	r0, sl
 8006b48:	f7f9 fbe2 	bl	8000310 <memchr>
 8006b4c:	b138      	cbz	r0, 8006b5e <_vfiprintf_r+0x176>
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	eba0 000a 	sub.w	r0, r0, sl
 8006b54:	2240      	movs	r2, #64	@ 0x40
 8006b56:	4082      	lsls	r2, r0
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	9304      	str	r3, [sp, #16]
 8006b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b62:	4829      	ldr	r0, [pc, #164]	@ (8006c08 <_vfiprintf_r+0x220>)
 8006b64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b68:	2206      	movs	r2, #6
 8006b6a:	f7f9 fbd1 	bl	8000310 <memchr>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d03f      	beq.n	8006bf2 <_vfiprintf_r+0x20a>
 8006b72:	4b26      	ldr	r3, [pc, #152]	@ (8006c0c <_vfiprintf_r+0x224>)
 8006b74:	bb1b      	cbnz	r3, 8006bbe <_vfiprintf_r+0x1d6>
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	3307      	adds	r3, #7
 8006b7a:	f023 0307 	bic.w	r3, r3, #7
 8006b7e:	3308      	adds	r3, #8
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b84:	443b      	add	r3, r7
 8006b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b88:	e76a      	b.n	8006a60 <_vfiprintf_r+0x78>
 8006b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b8e:	460c      	mov	r4, r1
 8006b90:	2001      	movs	r0, #1
 8006b92:	e7a8      	b.n	8006ae6 <_vfiprintf_r+0xfe>
 8006b94:	2300      	movs	r3, #0
 8006b96:	3401      	adds	r4, #1
 8006b98:	9305      	str	r3, [sp, #20]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f04f 0c0a 	mov.w	ip, #10
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ba6:	3a30      	subs	r2, #48	@ 0x30
 8006ba8:	2a09      	cmp	r2, #9
 8006baa:	d903      	bls.n	8006bb4 <_vfiprintf_r+0x1cc>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0c6      	beq.n	8006b3e <_vfiprintf_r+0x156>
 8006bb0:	9105      	str	r1, [sp, #20]
 8006bb2:	e7c4      	b.n	8006b3e <_vfiprintf_r+0x156>
 8006bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bb8:	4604      	mov	r4, r0
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e7f0      	b.n	8006ba0 <_vfiprintf_r+0x1b8>
 8006bbe:	ab03      	add	r3, sp, #12
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	4b12      	ldr	r3, [pc, #72]	@ (8006c10 <_vfiprintf_r+0x228>)
 8006bc6:	a904      	add	r1, sp, #16
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f3af 8000 	nop.w
 8006bce:	4607      	mov	r7, r0
 8006bd0:	1c78      	adds	r0, r7, #1
 8006bd2:	d1d6      	bne.n	8006b82 <_vfiprintf_r+0x19a>
 8006bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bd6:	07d9      	lsls	r1, r3, #31
 8006bd8:	d405      	bmi.n	8006be6 <_vfiprintf_r+0x1fe>
 8006bda:	89ab      	ldrh	r3, [r5, #12]
 8006bdc:	059a      	lsls	r2, r3, #22
 8006bde:	d402      	bmi.n	8006be6 <_vfiprintf_r+0x1fe>
 8006be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006be2:	f7ff fddd 	bl	80067a0 <__retarget_lock_release_recursive>
 8006be6:	89ab      	ldrh	r3, [r5, #12]
 8006be8:	065b      	lsls	r3, r3, #25
 8006bea:	f53f af1f 	bmi.w	8006a2c <_vfiprintf_r+0x44>
 8006bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bf0:	e71e      	b.n	8006a30 <_vfiprintf_r+0x48>
 8006bf2:	ab03      	add	r3, sp, #12
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <_vfiprintf_r+0x228>)
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f000 f879 	bl	8006cf4 <_printf_i>
 8006c02:	e7e4      	b.n	8006bce <_vfiprintf_r+0x1e6>
 8006c04:	08007378 	.word	0x08007378
 8006c08:	08007382 	.word	0x08007382
 8006c0c:	00000000 	.word	0x00000000
 8006c10:	080069c3 	.word	0x080069c3
 8006c14:	0800737e 	.word	0x0800737e

08006c18 <_printf_common>:
 8006c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	4698      	mov	r8, r3
 8006c20:	688a      	ldr	r2, [r1, #8]
 8006c22:	690b      	ldr	r3, [r1, #16]
 8006c24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	bfb8      	it	lt
 8006c2c:	4613      	movlt	r3, r2
 8006c2e:	6033      	str	r3, [r6, #0]
 8006c30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c34:	4607      	mov	r7, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	b10a      	cbz	r2, 8006c3e <_printf_common+0x26>
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	6033      	str	r3, [r6, #0]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	0699      	lsls	r1, r3, #26
 8006c42:	bf42      	ittt	mi
 8006c44:	6833      	ldrmi	r3, [r6, #0]
 8006c46:	3302      	addmi	r3, #2
 8006c48:	6033      	strmi	r3, [r6, #0]
 8006c4a:	6825      	ldr	r5, [r4, #0]
 8006c4c:	f015 0506 	ands.w	r5, r5, #6
 8006c50:	d106      	bne.n	8006c60 <_printf_common+0x48>
 8006c52:	f104 0a19 	add.w	sl, r4, #25
 8006c56:	68e3      	ldr	r3, [r4, #12]
 8006c58:	6832      	ldr	r2, [r6, #0]
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	42ab      	cmp	r3, r5
 8006c5e:	dc26      	bgt.n	8006cae <_printf_common+0x96>
 8006c60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	3b00      	subs	r3, #0
 8006c68:	bf18      	it	ne
 8006c6a:	2301      	movne	r3, #1
 8006c6c:	0692      	lsls	r2, r2, #26
 8006c6e:	d42b      	bmi.n	8006cc8 <_printf_common+0xb0>
 8006c70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c74:	4641      	mov	r1, r8
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c8      	blx	r9
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d01e      	beq.n	8006cbc <_printf_common+0xa4>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	6922      	ldr	r2, [r4, #16]
 8006c82:	f003 0306 	and.w	r3, r3, #6
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	bf02      	ittt	eq
 8006c8a:	68e5      	ldreq	r5, [r4, #12]
 8006c8c:	6833      	ldreq	r3, [r6, #0]
 8006c8e:	1aed      	subeq	r5, r5, r3
 8006c90:	68a3      	ldr	r3, [r4, #8]
 8006c92:	bf0c      	ite	eq
 8006c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c98:	2500      	movne	r5, #0
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	bfc4      	itt	gt
 8006c9e:	1a9b      	subgt	r3, r3, r2
 8006ca0:	18ed      	addgt	r5, r5, r3
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	341a      	adds	r4, #26
 8006ca6:	42b5      	cmp	r5, r6
 8006ca8:	d11a      	bne.n	8006ce0 <_printf_common+0xc8>
 8006caa:	2000      	movs	r0, #0
 8006cac:	e008      	b.n	8006cc0 <_printf_common+0xa8>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	47c8      	blx	r9
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d103      	bne.n	8006cc4 <_printf_common+0xac>
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	e7c6      	b.n	8006c56 <_printf_common+0x3e>
 8006cc8:	18e1      	adds	r1, r4, r3
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	2030      	movs	r0, #48	@ 0x30
 8006cce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cd2:	4422      	add	r2, r4
 8006cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cdc:	3302      	adds	r3, #2
 8006cde:	e7c7      	b.n	8006c70 <_printf_common+0x58>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4641      	mov	r1, r8
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	47c8      	blx	r9
 8006cea:	3001      	adds	r0, #1
 8006cec:	d0e6      	beq.n	8006cbc <_printf_common+0xa4>
 8006cee:	3601      	adds	r6, #1
 8006cf0:	e7d9      	b.n	8006ca6 <_printf_common+0x8e>
	...

08006cf4 <_printf_i>:
 8006cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf8:	7e0f      	ldrb	r7, [r1, #24]
 8006cfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cfc:	2f78      	cmp	r7, #120	@ 0x78
 8006cfe:	4691      	mov	r9, r2
 8006d00:	4680      	mov	r8, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	469a      	mov	sl, r3
 8006d06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d0a:	d807      	bhi.n	8006d1c <_printf_i+0x28>
 8006d0c:	2f62      	cmp	r7, #98	@ 0x62
 8006d0e:	d80a      	bhi.n	8006d26 <_printf_i+0x32>
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	f000 80d2 	beq.w	8006eba <_printf_i+0x1c6>
 8006d16:	2f58      	cmp	r7, #88	@ 0x58
 8006d18:	f000 80b9 	beq.w	8006e8e <_printf_i+0x19a>
 8006d1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d24:	e03a      	b.n	8006d9c <_printf_i+0xa8>
 8006d26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d2a:	2b15      	cmp	r3, #21
 8006d2c:	d8f6      	bhi.n	8006d1c <_printf_i+0x28>
 8006d2e:	a101      	add	r1, pc, #4	@ (adr r1, 8006d34 <_printf_i+0x40>)
 8006d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d34:	08006d8d 	.word	0x08006d8d
 8006d38:	08006da1 	.word	0x08006da1
 8006d3c:	08006d1d 	.word	0x08006d1d
 8006d40:	08006d1d 	.word	0x08006d1d
 8006d44:	08006d1d 	.word	0x08006d1d
 8006d48:	08006d1d 	.word	0x08006d1d
 8006d4c:	08006da1 	.word	0x08006da1
 8006d50:	08006d1d 	.word	0x08006d1d
 8006d54:	08006d1d 	.word	0x08006d1d
 8006d58:	08006d1d 	.word	0x08006d1d
 8006d5c:	08006d1d 	.word	0x08006d1d
 8006d60:	08006ea1 	.word	0x08006ea1
 8006d64:	08006dcb 	.word	0x08006dcb
 8006d68:	08006e5b 	.word	0x08006e5b
 8006d6c:	08006d1d 	.word	0x08006d1d
 8006d70:	08006d1d 	.word	0x08006d1d
 8006d74:	08006ec3 	.word	0x08006ec3
 8006d78:	08006d1d 	.word	0x08006d1d
 8006d7c:	08006dcb 	.word	0x08006dcb
 8006d80:	08006d1d 	.word	0x08006d1d
 8006d84:	08006d1d 	.word	0x08006d1d
 8006d88:	08006e63 	.word	0x08006e63
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	1d1a      	adds	r2, r3, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6032      	str	r2, [r6, #0]
 8006d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e09d      	b.n	8006edc <_printf_i+0x1e8>
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	6820      	ldr	r0, [r4, #0]
 8006da4:	1d19      	adds	r1, r3, #4
 8006da6:	6031      	str	r1, [r6, #0]
 8006da8:	0606      	lsls	r6, r0, #24
 8006daa:	d501      	bpl.n	8006db0 <_printf_i+0xbc>
 8006dac:	681d      	ldr	r5, [r3, #0]
 8006dae:	e003      	b.n	8006db8 <_printf_i+0xc4>
 8006db0:	0645      	lsls	r5, r0, #25
 8006db2:	d5fb      	bpl.n	8006dac <_printf_i+0xb8>
 8006db4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006db8:	2d00      	cmp	r5, #0
 8006dba:	da03      	bge.n	8006dc4 <_printf_i+0xd0>
 8006dbc:	232d      	movs	r3, #45	@ 0x2d
 8006dbe:	426d      	negs	r5, r5
 8006dc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dc4:	4859      	ldr	r0, [pc, #356]	@ (8006f2c <_printf_i+0x238>)
 8006dc6:	230a      	movs	r3, #10
 8006dc8:	e011      	b.n	8006dee <_printf_i+0xfa>
 8006dca:	6821      	ldr	r1, [r4, #0]
 8006dcc:	6833      	ldr	r3, [r6, #0]
 8006dce:	0608      	lsls	r0, r1, #24
 8006dd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dd4:	d402      	bmi.n	8006ddc <_printf_i+0xe8>
 8006dd6:	0649      	lsls	r1, r1, #25
 8006dd8:	bf48      	it	mi
 8006dda:	b2ad      	uxthmi	r5, r5
 8006ddc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dde:	4853      	ldr	r0, [pc, #332]	@ (8006f2c <_printf_i+0x238>)
 8006de0:	6033      	str	r3, [r6, #0]
 8006de2:	bf14      	ite	ne
 8006de4:	230a      	movne	r3, #10
 8006de6:	2308      	moveq	r3, #8
 8006de8:	2100      	movs	r1, #0
 8006dea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dee:	6866      	ldr	r6, [r4, #4]
 8006df0:	60a6      	str	r6, [r4, #8]
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	bfa2      	ittt	ge
 8006df6:	6821      	ldrge	r1, [r4, #0]
 8006df8:	f021 0104 	bicge.w	r1, r1, #4
 8006dfc:	6021      	strge	r1, [r4, #0]
 8006dfe:	b90d      	cbnz	r5, 8006e04 <_printf_i+0x110>
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	d04b      	beq.n	8006e9c <_printf_i+0x1a8>
 8006e04:	4616      	mov	r6, r2
 8006e06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006e0e:	5dc7      	ldrb	r7, [r0, r7]
 8006e10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e14:	462f      	mov	r7, r5
 8006e16:	42bb      	cmp	r3, r7
 8006e18:	460d      	mov	r5, r1
 8006e1a:	d9f4      	bls.n	8006e06 <_printf_i+0x112>
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d10b      	bne.n	8006e38 <_printf_i+0x144>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	07df      	lsls	r7, r3, #31
 8006e24:	d508      	bpl.n	8006e38 <_printf_i+0x144>
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	6861      	ldr	r1, [r4, #4]
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	bfde      	ittt	le
 8006e2e:	2330      	movle	r3, #48	@ 0x30
 8006e30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e38:	1b92      	subs	r2, r2, r6
 8006e3a:	6122      	str	r2, [r4, #16]
 8006e3c:	f8cd a000 	str.w	sl, [sp]
 8006e40:	464b      	mov	r3, r9
 8006e42:	aa03      	add	r2, sp, #12
 8006e44:	4621      	mov	r1, r4
 8006e46:	4640      	mov	r0, r8
 8006e48:	f7ff fee6 	bl	8006c18 <_printf_common>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d14a      	bne.n	8006ee6 <_printf_i+0x1f2>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b004      	add	sp, #16
 8006e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	f043 0320 	orr.w	r3, r3, #32
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	4833      	ldr	r0, [pc, #204]	@ (8006f30 <_printf_i+0x23c>)
 8006e64:	2778      	movs	r7, #120	@ 0x78
 8006e66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	6831      	ldr	r1, [r6, #0]
 8006e6e:	061f      	lsls	r7, r3, #24
 8006e70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e74:	d402      	bmi.n	8006e7c <_printf_i+0x188>
 8006e76:	065f      	lsls	r7, r3, #25
 8006e78:	bf48      	it	mi
 8006e7a:	b2ad      	uxthmi	r5, r5
 8006e7c:	6031      	str	r1, [r6, #0]
 8006e7e:	07d9      	lsls	r1, r3, #31
 8006e80:	bf44      	itt	mi
 8006e82:	f043 0320 	orrmi.w	r3, r3, #32
 8006e86:	6023      	strmi	r3, [r4, #0]
 8006e88:	b11d      	cbz	r5, 8006e92 <_printf_i+0x19e>
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	e7ac      	b.n	8006de8 <_printf_i+0xf4>
 8006e8e:	4827      	ldr	r0, [pc, #156]	@ (8006f2c <_printf_i+0x238>)
 8006e90:	e7e9      	b.n	8006e66 <_printf_i+0x172>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	f023 0320 	bic.w	r3, r3, #32
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	e7f6      	b.n	8006e8a <_printf_i+0x196>
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	e7bd      	b.n	8006e1c <_printf_i+0x128>
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	6825      	ldr	r5, [r4, #0]
 8006ea4:	6961      	ldr	r1, [r4, #20]
 8006ea6:	1d18      	adds	r0, r3, #4
 8006ea8:	6030      	str	r0, [r6, #0]
 8006eaa:	062e      	lsls	r6, r5, #24
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	d501      	bpl.n	8006eb4 <_printf_i+0x1c0>
 8006eb0:	6019      	str	r1, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <_printf_i+0x1c6>
 8006eb4:	0668      	lsls	r0, r5, #25
 8006eb6:	d5fb      	bpl.n	8006eb0 <_printf_i+0x1bc>
 8006eb8:	8019      	strh	r1, [r3, #0]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6123      	str	r3, [r4, #16]
 8006ebe:	4616      	mov	r6, r2
 8006ec0:	e7bc      	b.n	8006e3c <_printf_i+0x148>
 8006ec2:	6833      	ldr	r3, [r6, #0]
 8006ec4:	1d1a      	adds	r2, r3, #4
 8006ec6:	6032      	str	r2, [r6, #0]
 8006ec8:	681e      	ldr	r6, [r3, #0]
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7f9 fa1e 	bl	8000310 <memchr>
 8006ed4:	b108      	cbz	r0, 8006eda <_printf_i+0x1e6>
 8006ed6:	1b80      	subs	r0, r0, r6
 8006ed8:	6060      	str	r0, [r4, #4]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ee4:	e7aa      	b.n	8006e3c <_printf_i+0x148>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	4649      	mov	r1, r9
 8006eec:	4640      	mov	r0, r8
 8006eee:	47d0      	blx	sl
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0ad      	beq.n	8006e50 <_printf_i+0x15c>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	079b      	lsls	r3, r3, #30
 8006ef8:	d413      	bmi.n	8006f22 <_printf_i+0x22e>
 8006efa:	68e0      	ldr	r0, [r4, #12]
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	4298      	cmp	r0, r3
 8006f00:	bfb8      	it	lt
 8006f02:	4618      	movlt	r0, r3
 8006f04:	e7a6      	b.n	8006e54 <_printf_i+0x160>
 8006f06:	2301      	movs	r3, #1
 8006f08:	4632      	mov	r2, r6
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	47d0      	blx	sl
 8006f10:	3001      	adds	r0, #1
 8006f12:	d09d      	beq.n	8006e50 <_printf_i+0x15c>
 8006f14:	3501      	adds	r5, #1
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	9903      	ldr	r1, [sp, #12]
 8006f1a:	1a5b      	subs	r3, r3, r1
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dcf2      	bgt.n	8006f06 <_printf_i+0x212>
 8006f20:	e7eb      	b.n	8006efa <_printf_i+0x206>
 8006f22:	2500      	movs	r5, #0
 8006f24:	f104 0619 	add.w	r6, r4, #25
 8006f28:	e7f5      	b.n	8006f16 <_printf_i+0x222>
 8006f2a:	bf00      	nop
 8006f2c:	08007389 	.word	0x08007389
 8006f30:	0800739a 	.word	0x0800739a

08006f34 <__sflush_r>:
 8006f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3c:	0716      	lsls	r6, r2, #28
 8006f3e:	4605      	mov	r5, r0
 8006f40:	460c      	mov	r4, r1
 8006f42:	d454      	bmi.n	8006fee <__sflush_r+0xba>
 8006f44:	684b      	ldr	r3, [r1, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dc02      	bgt.n	8006f50 <__sflush_r+0x1c>
 8006f4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dd48      	ble.n	8006fe2 <__sflush_r+0xae>
 8006f50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	d045      	beq.n	8006fe2 <__sflush_r+0xae>
 8006f56:	2300      	movs	r3, #0
 8006f58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f5c:	682f      	ldr	r7, [r5, #0]
 8006f5e:	6a21      	ldr	r1, [r4, #32]
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	d030      	beq.n	8006fc6 <__sflush_r+0x92>
 8006f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	0759      	lsls	r1, r3, #29
 8006f6a:	d505      	bpl.n	8006f78 <__sflush_r+0x44>
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f72:	b10b      	cbz	r3, 8006f78 <__sflush_r+0x44>
 8006f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f7c:	6a21      	ldr	r1, [r4, #32]
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b0      	blx	r6
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	d106      	bne.n	8006f96 <__sflush_r+0x62>
 8006f88:	6829      	ldr	r1, [r5, #0]
 8006f8a:	291d      	cmp	r1, #29
 8006f8c:	d82b      	bhi.n	8006fe6 <__sflush_r+0xb2>
 8006f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007038 <__sflush_r+0x104>)
 8006f90:	410a      	asrs	r2, r1
 8006f92:	07d6      	lsls	r6, r2, #31
 8006f94:	d427      	bmi.n	8006fe6 <__sflush_r+0xb2>
 8006f96:	2200      	movs	r2, #0
 8006f98:	6062      	str	r2, [r4, #4]
 8006f9a:	04d9      	lsls	r1, r3, #19
 8006f9c:	6922      	ldr	r2, [r4, #16]
 8006f9e:	6022      	str	r2, [r4, #0]
 8006fa0:	d504      	bpl.n	8006fac <__sflush_r+0x78>
 8006fa2:	1c42      	adds	r2, r0, #1
 8006fa4:	d101      	bne.n	8006faa <__sflush_r+0x76>
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	b903      	cbnz	r3, 8006fac <__sflush_r+0x78>
 8006faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fae:	602f      	str	r7, [r5, #0]
 8006fb0:	b1b9      	cbz	r1, 8006fe2 <__sflush_r+0xae>
 8006fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	d002      	beq.n	8006fc0 <__sflush_r+0x8c>
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7ff fbf2 	bl	80067a4 <_free_r>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fc4:	e00d      	b.n	8006fe2 <__sflush_r+0xae>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b0      	blx	r6
 8006fcc:	4602      	mov	r2, r0
 8006fce:	1c50      	adds	r0, r2, #1
 8006fd0:	d1c9      	bne.n	8006f66 <__sflush_r+0x32>
 8006fd2:	682b      	ldr	r3, [r5, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c6      	beq.n	8006f66 <__sflush_r+0x32>
 8006fd8:	2b1d      	cmp	r3, #29
 8006fda:	d001      	beq.n	8006fe0 <__sflush_r+0xac>
 8006fdc:	2b16      	cmp	r3, #22
 8006fde:	d11e      	bne.n	800701e <__sflush_r+0xea>
 8006fe0:	602f      	str	r7, [r5, #0]
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e022      	b.n	800702c <__sflush_r+0xf8>
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fea:	b21b      	sxth	r3, r3
 8006fec:	e01b      	b.n	8007026 <__sflush_r+0xf2>
 8006fee:	690f      	ldr	r7, [r1, #16]
 8006ff0:	2f00      	cmp	r7, #0
 8006ff2:	d0f6      	beq.n	8006fe2 <__sflush_r+0xae>
 8006ff4:	0793      	lsls	r3, r2, #30
 8006ff6:	680e      	ldr	r6, [r1, #0]
 8006ff8:	bf08      	it	eq
 8006ffa:	694b      	ldreq	r3, [r1, #20]
 8006ffc:	600f      	str	r7, [r1, #0]
 8006ffe:	bf18      	it	ne
 8007000:	2300      	movne	r3, #0
 8007002:	eba6 0807 	sub.w	r8, r6, r7
 8007006:	608b      	str	r3, [r1, #8]
 8007008:	f1b8 0f00 	cmp.w	r8, #0
 800700c:	dde9      	ble.n	8006fe2 <__sflush_r+0xae>
 800700e:	6a21      	ldr	r1, [r4, #32]
 8007010:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007012:	4643      	mov	r3, r8
 8007014:	463a      	mov	r2, r7
 8007016:	4628      	mov	r0, r5
 8007018:	47b0      	blx	r6
 800701a:	2800      	cmp	r0, #0
 800701c:	dc08      	bgt.n	8007030 <__sflush_r+0xfc>
 800701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007030:	4407      	add	r7, r0
 8007032:	eba8 0800 	sub.w	r8, r8, r0
 8007036:	e7e7      	b.n	8007008 <__sflush_r+0xd4>
 8007038:	dfbffffe 	.word	0xdfbffffe

0800703c <_fflush_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	690b      	ldr	r3, [r1, #16]
 8007040:	4605      	mov	r5, r0
 8007042:	460c      	mov	r4, r1
 8007044:	b913      	cbnz	r3, 800704c <_fflush_r+0x10>
 8007046:	2500      	movs	r5, #0
 8007048:	4628      	mov	r0, r5
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	b118      	cbz	r0, 8007056 <_fflush_r+0x1a>
 800704e:	6a03      	ldr	r3, [r0, #32]
 8007050:	b90b      	cbnz	r3, 8007056 <_fflush_r+0x1a>
 8007052:	f7ff fa9f 	bl	8006594 <__sinit>
 8007056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f3      	beq.n	8007046 <_fflush_r+0xa>
 800705e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007060:	07d0      	lsls	r0, r2, #31
 8007062:	d404      	bmi.n	800706e <_fflush_r+0x32>
 8007064:	0599      	lsls	r1, r3, #22
 8007066:	d402      	bmi.n	800706e <_fflush_r+0x32>
 8007068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800706a:	f7ff fb98 	bl	800679e <__retarget_lock_acquire_recursive>
 800706e:	4628      	mov	r0, r5
 8007070:	4621      	mov	r1, r4
 8007072:	f7ff ff5f 	bl	8006f34 <__sflush_r>
 8007076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007078:	07da      	lsls	r2, r3, #31
 800707a:	4605      	mov	r5, r0
 800707c:	d4e4      	bmi.n	8007048 <_fflush_r+0xc>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	059b      	lsls	r3, r3, #22
 8007082:	d4e1      	bmi.n	8007048 <_fflush_r+0xc>
 8007084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007086:	f7ff fb8b 	bl	80067a0 <__retarget_lock_release_recursive>
 800708a:	e7dd      	b.n	8007048 <_fflush_r+0xc>

0800708c <__swbuf_r>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	460e      	mov	r6, r1
 8007090:	4614      	mov	r4, r2
 8007092:	4605      	mov	r5, r0
 8007094:	b118      	cbz	r0, 800709e <__swbuf_r+0x12>
 8007096:	6a03      	ldr	r3, [r0, #32]
 8007098:	b90b      	cbnz	r3, 800709e <__swbuf_r+0x12>
 800709a:	f7ff fa7b 	bl	8006594 <__sinit>
 800709e:	69a3      	ldr	r3, [r4, #24]
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	071a      	lsls	r2, r3, #28
 80070a6:	d501      	bpl.n	80070ac <__swbuf_r+0x20>
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	b943      	cbnz	r3, 80070be <__swbuf_r+0x32>
 80070ac:	4621      	mov	r1, r4
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 f82a 	bl	8007108 <__swsetup_r>
 80070b4:	b118      	cbz	r0, 80070be <__swbuf_r+0x32>
 80070b6:	f04f 37ff 	mov.w	r7, #4294967295
 80070ba:	4638      	mov	r0, r7
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	6922      	ldr	r2, [r4, #16]
 80070c2:	1a98      	subs	r0, r3, r2
 80070c4:	6963      	ldr	r3, [r4, #20]
 80070c6:	b2f6      	uxtb	r6, r6
 80070c8:	4283      	cmp	r3, r0
 80070ca:	4637      	mov	r7, r6
 80070cc:	dc05      	bgt.n	80070da <__swbuf_r+0x4e>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f7ff ffb3 	bl	800703c <_fflush_r>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d1ed      	bne.n	80070b6 <__swbuf_r+0x2a>
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	3b01      	subs	r3, #1
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	701e      	strb	r6, [r3, #0]
 80070e8:	6962      	ldr	r2, [r4, #20]
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d004      	beq.n	80070fa <__swbuf_r+0x6e>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d5e1      	bpl.n	80070ba <__swbuf_r+0x2e>
 80070f6:	2e0a      	cmp	r6, #10
 80070f8:	d1df      	bne.n	80070ba <__swbuf_r+0x2e>
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f7ff ff9d 	bl	800703c <_fflush_r>
 8007102:	2800      	cmp	r0, #0
 8007104:	d0d9      	beq.n	80070ba <__swbuf_r+0x2e>
 8007106:	e7d6      	b.n	80070b6 <__swbuf_r+0x2a>

08007108 <__swsetup_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <__swsetup_r+0xa8>)
 800710c:	4605      	mov	r5, r0
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	460c      	mov	r4, r1
 8007112:	b118      	cbz	r0, 800711c <__swsetup_r+0x14>
 8007114:	6a03      	ldr	r3, [r0, #32]
 8007116:	b90b      	cbnz	r3, 800711c <__swsetup_r+0x14>
 8007118:	f7ff fa3c 	bl	8006594 <__sinit>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	0719      	lsls	r1, r3, #28
 8007122:	d422      	bmi.n	800716a <__swsetup_r+0x62>
 8007124:	06da      	lsls	r2, r3, #27
 8007126:	d407      	bmi.n	8007138 <__swsetup_r+0x30>
 8007128:	2209      	movs	r2, #9
 800712a:	602a      	str	r2, [r5, #0]
 800712c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	e033      	b.n	80071a0 <__swsetup_r+0x98>
 8007138:	0758      	lsls	r0, r3, #29
 800713a:	d512      	bpl.n	8007162 <__swsetup_r+0x5a>
 800713c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800713e:	b141      	cbz	r1, 8007152 <__swsetup_r+0x4a>
 8007140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <__swsetup_r+0x46>
 8007148:	4628      	mov	r0, r5
 800714a:	f7ff fb2b 	bl	80067a4 <_free_r>
 800714e:	2300      	movs	r3, #0
 8007150:	6363      	str	r3, [r4, #52]	@ 0x34
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	2300      	movs	r3, #0
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f043 0308 	orr.w	r3, r3, #8
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	b94b      	cbnz	r3, 8007182 <__swsetup_r+0x7a>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007178:	d003      	beq.n	8007182 <__swsetup_r+0x7a>
 800717a:	4621      	mov	r1, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f000 f84f 	bl	8007220 <__smakebuf_r>
 8007182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007186:	f013 0201 	ands.w	r2, r3, #1
 800718a:	d00a      	beq.n	80071a2 <__swsetup_r+0x9a>
 800718c:	2200      	movs	r2, #0
 800718e:	60a2      	str	r2, [r4, #8]
 8007190:	6962      	ldr	r2, [r4, #20]
 8007192:	4252      	negs	r2, r2
 8007194:	61a2      	str	r2, [r4, #24]
 8007196:	6922      	ldr	r2, [r4, #16]
 8007198:	b942      	cbnz	r2, 80071ac <__swsetup_r+0xa4>
 800719a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800719e:	d1c5      	bne.n	800712c <__swsetup_r+0x24>
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	0799      	lsls	r1, r3, #30
 80071a4:	bf58      	it	pl
 80071a6:	6962      	ldrpl	r2, [r4, #20]
 80071a8:	60a2      	str	r2, [r4, #8]
 80071aa:	e7f4      	b.n	8007196 <__swsetup_r+0x8e>
 80071ac:	2000      	movs	r0, #0
 80071ae:	e7f7      	b.n	80071a0 <__swsetup_r+0x98>
 80071b0:	2400001c 	.word	0x2400001c

080071b4 <_sbrk_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d06      	ldr	r5, [pc, #24]	@ (80071d0 <_sbrk_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7f9 fe08 	bl	8000dd4 <_sbrk>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_sbrk_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_sbrk_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	240002c4 	.word	0x240002c4

080071d4 <__swhatbuf_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	460c      	mov	r4, r1
 80071d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071dc:	2900      	cmp	r1, #0
 80071de:	b096      	sub	sp, #88	@ 0x58
 80071e0:	4615      	mov	r5, r2
 80071e2:	461e      	mov	r6, r3
 80071e4:	da0d      	bge.n	8007202 <__swhatbuf_r+0x2e>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071ec:	f04f 0100 	mov.w	r1, #0
 80071f0:	bf14      	ite	ne
 80071f2:	2340      	movne	r3, #64	@ 0x40
 80071f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071f8:	2000      	movs	r0, #0
 80071fa:	6031      	str	r1, [r6, #0]
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	b016      	add	sp, #88	@ 0x58
 8007200:	bd70      	pop	{r4, r5, r6, pc}
 8007202:	466a      	mov	r2, sp
 8007204:	f000 f848 	bl	8007298 <_fstat_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	dbec      	blt.n	80071e6 <__swhatbuf_r+0x12>
 800720c:	9901      	ldr	r1, [sp, #4]
 800720e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007216:	4259      	negs	r1, r3
 8007218:	4159      	adcs	r1, r3
 800721a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800721e:	e7eb      	b.n	80071f8 <__swhatbuf_r+0x24>

08007220 <__smakebuf_r>:
 8007220:	898b      	ldrh	r3, [r1, #12]
 8007222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007224:	079d      	lsls	r5, r3, #30
 8007226:	4606      	mov	r6, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d507      	bpl.n	800723c <__smakebuf_r+0x1c>
 800722c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2301      	movs	r3, #1
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	b003      	add	sp, #12
 800723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800723c:	ab01      	add	r3, sp, #4
 800723e:	466a      	mov	r2, sp
 8007240:	f7ff ffc8 	bl	80071d4 <__swhatbuf_r>
 8007244:	9f00      	ldr	r7, [sp, #0]
 8007246:	4605      	mov	r5, r0
 8007248:	4639      	mov	r1, r7
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff fb16 	bl	800687c <_malloc_r>
 8007250:	b948      	cbnz	r0, 8007266 <__smakebuf_r+0x46>
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	059a      	lsls	r2, r3, #22
 8007258:	d4ee      	bmi.n	8007238 <__smakebuf_r+0x18>
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	f043 0302 	orr.w	r3, r3, #2
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	e7e2      	b.n	800722c <__smakebuf_r+0xc>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	6020      	str	r0, [r4, #0]
 800726a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726e:	81a3      	strh	r3, [r4, #12]
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007276:	b15b      	cbz	r3, 8007290 <__smakebuf_r+0x70>
 8007278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727c:	4630      	mov	r0, r6
 800727e:	f000 f81d 	bl	80072bc <_isatty_r>
 8007282:	b128      	cbz	r0, 8007290 <__smakebuf_r+0x70>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	431d      	orrs	r5, r3
 8007294:	81a5      	strh	r5, [r4, #12]
 8007296:	e7cf      	b.n	8007238 <__smakebuf_r+0x18>

08007298 <_fstat_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	@ (80072b8 <_fstat_r+0x20>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f7f9 fd6d 	bl	8000d84 <_fstat>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d102      	bne.n	80072b4 <_fstat_r+0x1c>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b103      	cbz	r3, 80072b4 <_fstat_r+0x1c>
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	240002c4 	.word	0x240002c4

080072bc <_isatty_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d06      	ldr	r5, [pc, #24]	@ (80072d8 <_isatty_r+0x1c>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	f7f9 fd6c 	bl	8000da4 <_isatty>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_isatty_r+0x1a>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_isatty_r+0x1a>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	240002c4 	.word	0x240002c4

080072dc <_init>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr

080072e8 <_fini>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr
